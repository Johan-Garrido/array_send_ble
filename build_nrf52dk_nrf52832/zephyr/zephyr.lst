
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20005960 	.word	0x20005960
}
   4:	00013929 	.word	0x00013929
   8:	0001cc93 	.word	0x0001cc93
   c:	00013959 	.word	0x00013959
  10:	00013959 	.word	0x00013959
  14:	00013959 	.word	0x00013959
  18:	00013959 	.word	0x00013959
	...
  2c:	00013885 	.word	0x00013885
  30:	00013959 	.word	0x00013959
  34:	00000000 	.word	0x00000000
  38:	00013831 	.word	0x00013831
  3c:	0001badf 	.word	0x0001badf

00000040 <_irq_vector_table>:
  40:	000138e9 0001fa07 000138e9 000138e9     .8.......8...8..
  50:	000138e9 000138e9 000138e9 000138e9     .8...8...8...8..
  60:	0001f9cf 000138e9 000138e9 0001f9ed     .....8...8......
  70:	000138e9 000138e9 000138e9 000138e9     .8...8...8...8..
  80:	000138e9 000138e9 000138e9 000138e9     .8...8...8...8..
  90:	000138e9 000138e9 000138e9 000138e9     .8...8...8...8..
  a0:	000138e9 000138e9 000138e9 000138e9     .8...8...8...8..
  b0:	000138e9 000138e9 000138e9 000138e9     .8...8...8...8..
  c0:	000138e9 000138e9 000138e9 000138e9     .8...8...8...8..
  d0:	000138e9 000138e9 000138e9              .8...8...8..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b96c 	b.w	3d0 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	9e08      	ldr	r6, [sp, #32]
     116:	460d      	mov	r5, r1
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	2b00      	cmp	r3, #0
     11e:	f040 8082 	bne.w	226 <CONFIG_FLASH_SIZE+0x26>
     122:	428a      	cmp	r2, r1
     124:	4617      	mov	r7, r2
     126:	d946      	bls.n	1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     128:	fab2 f282 	clz	r2, r2
     12c:	b14a      	cbz	r2, 142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	f1c2 0120 	rsb	r1, r2, #32
     132:	fa05 f302 	lsl.w	r3, r5, r2
     136:	fa20 f101 	lsr.w	r1, r0, r1
     13a:	4097      	lsls	r7, r2
     13c:	ea41 0e03 	orr.w	lr, r1, r3
     140:	4094      	lsls	r4, r2
     142:	ea4f 4817 	mov.w	r8, r7, lsr #16
     146:	0c23      	lsrs	r3, r4, #16
     148:	fbbe fcf8 	udiv	ip, lr, r8
     14c:	b2b9      	uxth	r1, r7
     14e:	fb08 ee1c 	mls	lr, r8, ip, lr
     152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     156:	fb0c f001 	mul.w	r0, ip, r1
     15a:	4298      	cmp	r0, r3
     15c:	d90a      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     15e:	18fb      	adds	r3, r7, r3
     160:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     164:	f080 8116 	bcs.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x94>
     168:	4298      	cmp	r0, r3
     16a:	f240 8113 	bls.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x94>
     16e:	f1ac 0c02 	sub.w	ip, ip, #2
     172:	443b      	add	r3, r7
     174:	1a1b      	subs	r3, r3, r0
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f8 	udiv	r0, r3, r8
     17c:	fb08 3310 	mls	r3, r8, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f101 	mul.w	r1, r0, r1
     188:	42a1      	cmp	r1, r4
     18a:	d909      	bls.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     18c:	193c      	adds	r4, r7, r4
     18e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     192:	f080 8101 	bcs.w	398 <CONFIG_BT_DEVICE_APPEARANCE+0x98>
     196:	42a1      	cmp	r1, r4
     198:	f240 80fe 	bls.w	398 <CONFIG_BT_DEVICE_APPEARANCE+0x98>
     19c:	3802      	subs	r0, #2
     19e:	443c      	add	r4, r7
     1a0:	1a64      	subs	r4, r4, r1
     1a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a6:	2100      	movs	r1, #0
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1aa:	40d4      	lsrs	r4, r2
     1ac:	2300      	movs	r3, #0
     1ae:	e9c6 4300 	strd	r4, r3, [r6]
     1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b6:	b902      	cbnz	r2, 1ba <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x70>
     1b8:	deff      	udf	#255	; 0xff
     1ba:	fab2 f282 	clz	r2, r2
     1be:	2a00      	cmp	r2, #0
     1c0:	d14f      	bne.n	262 <CONFIG_FLASH_SIZE+0x62>
     1c2:	1bcb      	subs	r3, r1, r7
     1c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c8:	fa1f f887 	uxth.w	r8, r7
     1cc:	2101      	movs	r1, #1
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c25      	lsrs	r5, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1dc:	fb08 f30c 	mul.w	r3, r8, ip
     1e0:	42ab      	cmp	r3, r5
     1e2:	d907      	bls.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     1e4:	197d      	adds	r5, r7, r5
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1ea:	d202      	bcs.n	1f2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa8>
     1ec:	42ab      	cmp	r3, r5
     1ee:	f200 80e7 	bhi.w	3c0 <CONFIG_BT_DEVICE_APPEARANCE+0xc0>
     1f2:	4684      	mov	ip, r0
     1f4:	1aed      	subs	r5, r5, r3
     1f6:	b2a3      	uxth	r3, r4
     1f8:	fbb5 f0fe 	udiv	r0, r5, lr
     1fc:	fb0e 5510 	mls	r5, lr, r0, r5
     200:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     204:	fb08 f800 	mul.w	r8, r8, r0
     208:	45a0      	cmp	r8, r4
     20a:	d907      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     20c:	193c      	adds	r4, r7, r4
     20e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     212:	d202      	bcs.n	21a <CONFIG_FLASH_SIZE+0x1a>
     214:	45a0      	cmp	r8, r4
     216:	f200 80d7 	bhi.w	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0xc8>
     21a:	4618      	mov	r0, r3
     21c:	eba4 0408 	sub.w	r4, r4, r8
     220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     224:	e7c0      	b.n	1a8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5e>
     226:	428b      	cmp	r3, r1
     228:	d908      	bls.n	23c <CONFIG_FLASH_SIZE+0x3c>
     22a:	2e00      	cmp	r6, #0
     22c:	f000 80af 	beq.w	38e <CONFIG_BT_DEVICE_APPEARANCE+0x8e>
     230:	2100      	movs	r1, #0
     232:	e9c6 0500 	strd	r0, r5, [r6]
     236:	4608      	mov	r0, r1
     238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     23c:	fab3 f183 	clz	r1, r3
     240:	2900      	cmp	r1, #0
     242:	d14b      	bne.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     244:	42ab      	cmp	r3, r5
     246:	d302      	bcc.n	24e <CONFIG_FLASH_SIZE+0x4e>
     248:	4282      	cmp	r2, r0
     24a:	f200 80b7 	bhi.w	3bc <CONFIG_BT_DEVICE_APPEARANCE+0xbc>
     24e:	1a84      	subs	r4, r0, r2
     250:	eb65 0303 	sbc.w	r3, r5, r3
     254:	2001      	movs	r0, #1
     256:	469e      	mov	lr, r3
     258:	2e00      	cmp	r6, #0
     25a:	d0aa      	beq.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     25c:	e9c6 4e00 	strd	r4, lr, [r6]
     260:	e7a7      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     262:	f1c2 0c20 	rsb	ip, r2, #32
     266:	fa01 f302 	lsl.w	r3, r1, r2
     26a:	4097      	lsls	r7, r2
     26c:	fa20 f00c 	lsr.w	r0, r0, ip
     270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     274:	fa21 fc0c 	lsr.w	ip, r1, ip
     278:	4318      	orrs	r0, r3
     27a:	fbbc f1fe 	udiv	r1, ip, lr
     27e:	0c05      	lsrs	r5, r0, #16
     280:	fb0e cc11 	mls	ip, lr, r1, ip
     284:	fa1f f887 	uxth.w	r8, r7
     288:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     28c:	fb01 f308 	mul.w	r3, r1, r8
     290:	42ab      	cmp	r3, r5
     292:	fa04 f402 	lsl.w	r4, r4, r2
     296:	d909      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     298:	197d      	adds	r5, r7, r5
     29a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     29e:	f080 808b 	bcs.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0xb8>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f240 8088 	bls.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0xb8>
     2a8:	3902      	subs	r1, #2
     2aa:	443d      	add	r5, r7
     2ac:	1aeb      	subs	r3, r5, r3
     2ae:	b285      	uxth	r5, r0
     2b0:	fbb3 f0fe 	udiv	r0, r3, lr
     2b4:	fb0e 3310 	mls	r3, lr, r0, r3
     2b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2bc:	fb00 f308 	mul.w	r3, r0, r8
     2c0:	42ab      	cmp	r3, r5
     2c2:	d907      	bls.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     2c4:	197d      	adds	r5, r7, r5
     2c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ca:	d271      	bcs.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0xb0>
     2cc:	42ab      	cmp	r3, r5
     2ce:	d96f      	bls.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0xb0>
     2d0:	3802      	subs	r0, #2
     2d2:	443d      	add	r5, r7
     2d4:	1aeb      	subs	r3, r5, r3
     2d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2da:	e778      	b.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     2dc:	f1c1 0c20 	rsb	ip, r1, #32
     2e0:	408b      	lsls	r3, r1
     2e2:	fa22 f70c 	lsr.w	r7, r2, ip
     2e6:	431f      	orrs	r7, r3
     2e8:	fa20 f40c 	lsr.w	r4, r0, ip
     2ec:	fa05 f301 	lsl.w	r3, r5, r1
     2f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f4:	fa25 f50c 	lsr.w	r5, r5, ip
     2f8:	431c      	orrs	r4, r3
     2fa:	0c23      	lsrs	r3, r4, #16
     2fc:	fbb5 f9fe 	udiv	r9, r5, lr
     300:	fa1f f887 	uxth.w	r8, r7
     304:	fb0e 5519 	mls	r5, lr, r9, r5
     308:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     30c:	fb09 fa08 	mul.w	sl, r9, r8
     310:	45aa      	cmp	sl, r5
     312:	fa02 f201 	lsl.w	r2, r2, r1
     316:	fa00 f301 	lsl.w	r3, r0, r1
     31a:	d908      	bls.n	32e <CONFIG_BT_DEVICE_APPEARANCE+0x2e>
     31c:	197d      	adds	r5, r7, r5
     31e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     322:	d247      	bcs.n	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0xb4>
     324:	45aa      	cmp	sl, r5
     326:	d945      	bls.n	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0xb4>
     328:	f1a9 0902 	sub.w	r9, r9, #2
     32c:	443d      	add	r5, r7
     32e:	eba5 050a 	sub.w	r5, r5, sl
     332:	b2a4      	uxth	r4, r4
     334:	fbb5 f0fe 	udiv	r0, r5, lr
     338:	fb0e 5510 	mls	r5, lr, r0, r5
     33c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     340:	fb00 f808 	mul.w	r8, r0, r8
     344:	45a0      	cmp	r8, r4
     346:	d907      	bls.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x58>
     348:	193c      	adds	r4, r7, r4
     34a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     34e:	d22d      	bcs.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0xac>
     350:	45a0      	cmp	r8, r4
     352:	d92b      	bls.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0xac>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     35c:	eba4 0408 	sub.w	r4, r4, r8
     360:	fba0 8902 	umull	r8, r9, r0, r2
     364:	454c      	cmp	r4, r9
     366:	46c6      	mov	lr, r8
     368:	464d      	mov	r5, r9
     36a:	d319      	bcc.n	3a0 <CONFIG_BT_DEVICE_APPEARANCE+0xa0>
     36c:	d016      	beq.n	39c <CONFIG_BT_DEVICE_APPEARANCE+0x9c>
     36e:	b15e      	cbz	r6, 388 <CONFIG_BT_DEVICE_APPEARANCE+0x88>
     370:	ebb3 020e 	subs.w	r2, r3, lr
     374:	eb64 0405 	sbc.w	r4, r4, r5
     378:	fa04 fc0c 	lsl.w	ip, r4, ip
     37c:	40ca      	lsrs	r2, r1
     37e:	ea4c 0202 	orr.w	r2, ip, r2
     382:	40cc      	lsrs	r4, r1
     384:	e9c6 2400 	strd	r2, r4, [r6]
     388:	2100      	movs	r1, #0
     38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38e:	4631      	mov	r1, r6
     390:	4630      	mov	r0, r6
     392:	e70e      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     394:	46ac      	mov	ip, r5
     396:	e6ed      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     398:	4618      	mov	r0, r3
     39a:	e701      	b.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     39c:	4543      	cmp	r3, r8
     39e:	d2e6      	bcs.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x6e>
     3a0:	ebb8 0e02 	subs.w	lr, r8, r2
     3a4:	eb69 0507 	sbc.w	r5, r9, r7
     3a8:	3801      	subs	r0, #1
     3aa:	e7e0      	b.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x6e>
     3ac:	4628      	mov	r0, r5
     3ae:	e7d3      	b.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x58>
     3b0:	4660      	mov	r0, ip
     3b2:	e78f      	b.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     3b4:	4681      	mov	r9, r0
     3b6:	e7ba      	b.n	32e <CONFIG_BT_DEVICE_APPEARANCE+0x2e>
     3b8:	4661      	mov	r1, ip
     3ba:	e777      	b.n	2ac <CONFIG_FLASH_SIZE+0xac>
     3bc:	4608      	mov	r0, r1
     3be:	e74b      	b.n	258 <CONFIG_FLASH_SIZE+0x58>
     3c0:	f1ac 0c02 	sub.w	ip, ip, #2
     3c4:	443d      	add	r5, r7
     3c6:	e715      	b.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     3c8:	3802      	subs	r0, #2
     3ca:	443c      	add	r4, r7
     3cc:	e726      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop

000003d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d6:	4615      	mov	r5, r2
     3d8:	4a0a      	ldr	r2, [pc, #40]	; (404 <CONFIG_BT_RX_STACK_SIZE+0x4>)
     3da:	461c      	mov	r4, r3
     3dc:	6856      	ldr	r6, [r2, #4]
     3de:	b12e      	cbz	r6, 3ec <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     3e0:	b001      	add	sp, #4
     3e2:	462a      	mov	r2, r5
     3e4:	46b4      	mov	ip, r6
     3e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3ea:	4760      	bx	ip
     3ec:	2000      	movs	r0, #0
     3ee:	f88d 0000 	strb.w	r0, [sp]
     3f2:	4668      	mov	r0, sp
     3f4:	f00e f99a 	bl	e72c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     3f8:	f89d 0000 	ldrb.w	r0, [sp]
     3fc:	1a28      	subs	r0, r5, r0
     3fe:	7020      	strb	r0, [r4, #0]
     400:	2000      	movs	r0, #0
     402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     404:	20000000 	.word	0x20000000

00000408 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     408:	4801      	ldr	r0, [pc, #4]	; (410 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     40a:	7800      	ldrb	r0, [r0, #0]
     40c:	4770      	bx	lr
     40e:	0000      	.short	0x0000
     410:	20000008 	.word	0x20000008

00000414 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     414:	4904      	ldr	r1, [pc, #16]	; (428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
     416:	780a      	ldrb	r2, [r1, #0]
     418:	4290      	cmp	r0, r2
     41a:	d301      	bcc.n	420 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     41c:	2000      	movs	r0, #0
     41e:	4770      	bx	lr
     420:	6849      	ldr	r1, [r1, #4]
     422:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     426:	4770      	bx	lr
     428:	20000008 	.word	0x20000008
     42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     430:	4615      	mov	r5, r2
     432:	4604      	mov	r4, r0
     434:	f100 0208 	add.w	r2, r0, #8
     438:	1cc8      	adds	r0, r1, #3
     43a:	4241      	negs	r1, r0
     43c:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 4e8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9c>
     440:	461f      	mov	r7, r3
     442:	1a28      	subs	r0, r5, r0
     444:	2300      	movs	r3, #0
     446:	9e08      	ldr	r6, [sp, #32]
     448:	ebbc 0c05 	subs.w	ip, ip, r5
     44c:	419b      	sbcs	r3, r3
     44e:	d204      	bcs.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     450:	f240 51f5 	movw	r1, #1525	; 0x5f5
     454:	2070      	movs	r0, #112	; 0x70
     456:	f003 f8b9 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     45a:	4b24      	ldr	r3, [pc, #144]	; (4ec <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa0>)
     45c:	4299      	cmp	r1, r3
     45e:	dd04      	ble.n	46a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     460:	f240 51f6 	movw	r1, #1526	; 0x5f6
     464:	2070      	movs	r0, #112	; 0x70
     466:	f003 f8b1 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     46a:	4b21      	ldr	r3, [pc, #132]	; (4f0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa4>)
     46c:	4299      	cmp	r1, r3
     46e:	da04      	bge.n	47a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2e>
     470:	f240 51f7 	movw	r1, #1527	; 0x5f7
     474:	2070      	movs	r0, #112	; 0x70
     476:	f003 f8a9 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     47a:	491e      	ldr	r1, [pc, #120]	; (4f4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa8>)
     47c:	4288      	cmp	r0, r1
     47e:	bfa8      	it	ge
     480:	491d      	ldrge	r1, [pc, #116]	; (4f8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xac>)
     482:	da03      	bge.n	48c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>
     484:	2800      	cmp	r0, #0
     486:	bfb8      	it	lt
     488:	491a      	ldrlt	r1, [pc, #104]	; (4f4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa8>)
     48a:	da00      	bge.n	48e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x42>
     48c:	1840      	adds	r0, r0, r1
     48e:	4621      	mov	r1, r4
     490:	f002 fd56 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     494:	6820      	ldr	r0, [r4, #0]
     496:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     49a:	6021      	str	r1, [r4, #0]
     49c:	19e8      	adds	r0, r5, r7
     49e:	4917      	ldr	r1, [pc, #92]	; (4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>)
     4a0:	1cc0      	adds	r0, r0, #3
     4a2:	b136      	cbz	r6, 4b2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x66>
     4a4:	2e01      	cmp	r6, #1
     4a6:	d00b      	beq.n	4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x74>
     4a8:	f240 6199 	movw	r1, #1689	; 0x699
     4ac:	2070      	movs	r0, #112	; 0x70
     4ae:	f003 f88d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4b2:	6809      	ldr	r1, [r1, #0]
     4b4:	7809      	ldrb	r1, [r1, #0]
     4b6:	297a      	cmp	r1, #122	; 0x7a
     4b8:	bf98      	it	ls
     4ba:	217a      	movls	r1, #122	; 0x7a
     4bc:	4408      	add	r0, r1
     4be:	e002      	b.n	4c6 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x7a>
     4c0:	6809      	ldr	r1, [r1, #0]
     4c2:	7809      	ldrb	r1, [r1, #0]
     4c4:	4408      	add	r0, r1
     4c6:	466a      	mov	r2, sp
     4c8:	1d21      	adds	r1, r4, #4
     4ca:	f002 fd39 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     4ce:	f99d 0000 	ldrsb.w	r0, [sp]
     4d2:	2800      	cmp	r0, #0
     4d4:	6860      	ldr	r0, [r4, #4]
     4d6:	bfc4      	itt	gt
     4d8:	1c40      	addgt	r0, r0, #1
     4da:	6060      	strgt	r0, [r4, #4]
     4dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4e0:	6060      	str	r0, [r4, #4]
     4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     4e6:	0000      	.short	0x0000
     4e8:	1e847fff 	.word	0x1e847fff
     4ec:	07a12000 	.word	0x07a12000
     4f0:	f85ee000 	.word	0xf85ee000
     4f4:	1e848000 	.word	0x1e848000
     4f8:	e17b8000 	.word	0xe17b8000
     4fc:	20000dec 	.word	0x20000dec
     500:	b570      	push	{r4, r5, r6, lr}
     502:	4605      	mov	r5, r0
     504:	2a20      	cmp	r2, #32
     506:	d027      	beq.n	558 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10c>
     508:	4819      	ldr	r0, [pc, #100]	; (570 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x124>)
     50a:	4c1a      	ldr	r4, [pc, #104]	; (574 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x128>)
     50c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     510:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     518:	2920      	cmp	r1, #32
     51a:	d022      	beq.n	562 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x116>
     51c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     520:	7840      	ldrb	r0, [r0, #1]
     522:	784c      	ldrb	r4, [r1, #1]
     524:	7048      	strb	r0, [r1, #1]
     526:	4620      	mov	r0, r4
     528:	4601      	mov	r1, r0
     52a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     52e:	4291      	cmp	r1, r2
     530:	7005      	strb	r5, [r0, #0]
     532:	7840      	ldrb	r0, [r0, #1]
     534:	d1f8      	bne.n	528 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xdc>
     536:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
     53a:	2a20      	cmp	r2, #32
     53c:	bf1a      	itte	ne
     53e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     542:	7054      	strbne	r4, [r2, #1]
     544:	f883 4025 	strbeq.w	r4, [r3, #37]	; 0x25
     548:	2220      	movs	r2, #32
     54a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     54e:	f88c 2001 	strb.w	r2, [ip, #1]
     552:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
     556:	bd70      	pop	{r4, r5, r6, pc}
     558:	f240 21aa 	movw	r1, #682	; 0x2aa
     55c:	2070      	movs	r0, #112	; 0x70
     55e:	f003 f835 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     562:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
     566:	7840      	ldrb	r0, [r0, #1]
     568:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
     56c:	e7db      	b.n	526 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xda>
     56e:	0000      	.short	0x0000
     570:	20000d6c 	.word	0x20000d6c
     574:	20000dec 	.word	0x20000dec
     578:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     57c:	b087      	sub	sp, #28
     57e:	4604      	mov	r4, r0
     580:	2000      	movs	r0, #0
     582:	9002      	str	r0, [sp, #8]
     584:	489e      	ldr	r0, [pc, #632]	; (800 <CONFIG_ISR_STACK_SIZE>)
     586:	9f08      	ldr	r7, [sp, #32]
     588:	4e9e      	ldr	r6, [pc, #632]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     58a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     58e:	9003      	str	r0, [sp, #12]
     590:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     594:	2020      	movs	r0, #32
     596:	46e9      	mov	r9, sp
     598:	f10d 0804 	add.w	r8, sp, #4
     59c:	f88d 0000 	strb.w	r0, [sp]
     5a0:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     5a4:	2d20      	cmp	r5, #32
     5a6:	bf18      	it	ne
     5a8:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     5ac:	d032      	beq.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     5ae:	bf00      	nop
     5b0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     5b4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     5b8:	1d01      	adds	r1, r0, #4
     5ba:	6880      	ldr	r0, [r0, #8]
     5bc:	6822      	ldr	r2, [r4, #0]
     5be:	1a10      	subs	r0, r2, r0
     5c0:	0200      	lsls	r0, r0, #8
     5c2:	17c2      	asrs	r2, r0, #31
     5c4:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5c8:	1200      	asrs	r0, r0, #8
     5ca:	d423      	bmi.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     5cc:	8960      	ldrh	r0, [r4, #10]
     5ce:	b1d0      	cbz	r0, 606 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     5d0:	8948      	ldrh	r0, [r1, #10]
     5d2:	b9c0      	cbnz	r0, 606 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     5d4:	4608      	mov	r0, r1
     5d6:	f000 fce7 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     5da:	aa05      	add	r2, sp, #20
     5dc:	a904      	add	r1, sp, #16
     5de:	f002 fcaf 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     5e2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     5e6:	2800      	cmp	r0, #0
     5e8:	bfcc      	ite	gt
     5ea:	2001      	movgt	r0, #1
     5ec:	2000      	movle	r0, #0
     5ee:	f100 0133 	add.w	r1, r0, #51	; 0x33
     5f2:	9804      	ldr	r0, [sp, #16]
     5f4:	6822      	ldr	r2, [r4, #0]
     5f6:	1a10      	subs	r0, r2, r0
     5f8:	0200      	lsls	r0, r0, #8
     5fa:	17c2      	asrs	r2, r0, #31
     5fc:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     600:	1200      	asrs	r0, r0, #8
     602:	4288      	cmp	r0, r1
     604:	db06      	blt.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     606:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     60a:	f889 5000 	strb.w	r5, [r9]
     60e:	7845      	ldrb	r5, [r0, #1]
     610:	2d20      	cmp	r5, #32
     612:	d1cd      	bne.n	5b0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x164>
     614:	f899 0000 	ldrb.w	r0, [r9]
     618:	f888 0000 	strb.w	r0, [r8]
     61c:	46a1      	mov	r9, r4
     61e:	2d20      	cmp	r5, #32
     620:	bf1c      	itt	ne
     622:	4879      	ldrne	r0, [pc, #484]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     624:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     628:	f000 80e5 	beq.w	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     62c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     630:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     634:	f8d9 2004 	ldr.w	r2, [r9, #4]
     638:	f8da 1004 	ldr.w	r1, [sl, #4]
     63c:	4648      	mov	r0, r9
     63e:	1a89      	subs	r1, r1, r2
     640:	0209      	lsls	r1, r1, #8
     642:	17ca      	asrs	r2, r1, #31
     644:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     648:	f10a 0704 	add.w	r7, sl, #4
     64c:	1209      	asrs	r1, r1, #8
     64e:	d41f      	bmi.n	690 <CONFIG_BT_HCI_TX_STACK_SIZE+0x90>
     650:	8979      	ldrh	r1, [r7, #10]
     652:	2900      	cmp	r1, #0
     654:	f000 80cf 	beq.w	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     658:	8941      	ldrh	r1, [r0, #10]
     65a:	2900      	cmp	r1, #0
     65c:	f040 80cb 	bne.w	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     660:	f000 fca2 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     664:	aa05      	add	r2, sp, #20
     666:	a904      	add	r1, sp, #16
     668:	f002 fc6a 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     66c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     670:	2800      	cmp	r0, #0
     672:	bfcc      	ite	gt
     674:	2001      	movgt	r0, #1
     676:	2000      	movle	r0, #0
     678:	f100 0133 	add.w	r1, r0, #51	; 0x33
     67c:	9804      	ldr	r0, [sp, #16]
     67e:	683a      	ldr	r2, [r7, #0]
     680:	1a10      	subs	r0, r2, r0
     682:	0200      	lsls	r0, r0, #8
     684:	17c2      	asrs	r2, r0, #31
     686:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     68a:	1200      	asrs	r0, r0, #8
     68c:	4288      	cmp	r0, r1
     68e:	da7d      	bge.n	78c <CONFIG_BT_HCI_TX_STACK_SIZE+0x18c>
     690:	f888 5000 	strb.w	r5, [r8]
     694:	f89a 0010 	ldrb.w	r0, [sl, #16]
     698:	f899 100c 	ldrb.w	r1, [r9, #12]
     69c:	4288      	cmp	r0, r1
     69e:	d905      	bls.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6a4:	7845      	ldrb	r5, [r0, #1]
     6a6:	2d20      	cmp	r5, #32
     6a8:	d1c0      	bne.n	62c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     6aa:	e0a4      	b.n	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     6ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
     6b0:	e9d4 2100 	ldrd	r2, r1, [r4]
     6b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     6b8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     6bc:	1a89      	subs	r1, r1, r2
     6be:	6880      	ldr	r0, [r0, #8]
     6c0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     6c4:	4408      	add	r0, r1
     6c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6ca:	e9c4 2000 	strd	r2, r0, [r4]
     6ce:	2001      	movs	r0, #1
     6d0:	9002      	str	r0, [sp, #8]
     6d2:	484b      	ldr	r0, [pc, #300]	; (800 <CONFIG_ISR_STACK_SIZE>)
     6d4:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
     6d8:	b118      	cbz	r0, 6e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe2>
     6da:	b009      	add	sp, #36	; 0x24
     6dc:	2000      	movs	r0, #0
     6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6e2:	9803      	ldr	r0, [sp, #12]
     6e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6e8:	466f      	mov	r7, sp
     6ea:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     6ee:	2020      	movs	r0, #32
     6f0:	f10d 0a04 	add.w	sl, sp, #4
     6f4:	f88d 0000 	strb.w	r0, [sp]
     6f8:	2d20      	cmp	r5, #32
     6fa:	bf1c      	itt	ne
     6fc:	4842      	ldrne	r0, [pc, #264]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     6fe:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     702:	d030      	beq.n	766 <CONFIG_BT_HCI_TX_STACK_SIZE+0x166>
     704:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     708:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     70c:	1d01      	adds	r1, r0, #4
     70e:	6880      	ldr	r0, [r0, #8]
     710:	6822      	ldr	r2, [r4, #0]
     712:	1a10      	subs	r0, r2, r0
     714:	0200      	lsls	r0, r0, #8
     716:	17c2      	asrs	r2, r0, #31
     718:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     71c:	1200      	asrs	r0, r0, #8
     71e:	d422      	bmi.n	766 <CONFIG_BT_HCI_TX_STACK_SIZE+0x166>
     720:	8960      	ldrh	r0, [r4, #10]
     722:	b1d0      	cbz	r0, 75a <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     724:	8948      	ldrh	r0, [r1, #10]
     726:	b9c0      	cbnz	r0, 75a <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     728:	4608      	mov	r0, r1
     72a:	f000 fc3d 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     72e:	aa05      	add	r2, sp, #20
     730:	a904      	add	r1, sp, #16
     732:	f002 fc05 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     736:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     73a:	2800      	cmp	r0, #0
     73c:	bfcc      	ite	gt
     73e:	2001      	movgt	r0, #1
     740:	2000      	movle	r0, #0
     742:	f100 0133 	add.w	r1, r0, #51	; 0x33
     746:	9804      	ldr	r0, [sp, #16]
     748:	6822      	ldr	r2, [r4, #0]
     74a:	1a10      	subs	r0, r2, r0
     74c:	0200      	lsls	r0, r0, #8
     74e:	17c2      	asrs	r2, r0, #31
     750:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     754:	1200      	asrs	r0, r0, #8
     756:	4288      	cmp	r0, r1
     758:	db05      	blt.n	766 <CONFIG_BT_HCI_TX_STACK_SIZE+0x166>
     75a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     75e:	703d      	strb	r5, [r7, #0]
     760:	7845      	ldrb	r5, [r0, #1]
     762:	2d20      	cmp	r5, #32
     764:	d1ce      	bne.n	704 <CONFIG_BT_HCI_TX_STACK_SIZE+0x104>
     766:	7838      	ldrb	r0, [r7, #0]
     768:	f88a 0000 	strb.w	r0, [sl]
     76c:	4627      	mov	r7, r4
     76e:	2d20      	cmp	r5, #32
     770:	bf1c      	itt	ne
     772:	4825      	ldrne	r0, [pc, #148]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     774:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     778:	d03d      	beq.n	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     77a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     77e:	eb06 0981 	add.w	r9, r6, r1, lsl #2
     782:	4638      	mov	r0, r7
     784:	f109 0804 	add.w	r8, r9, #4
     788:	687a      	ldr	r2, [r7, #4]
     78a:	e000      	b.n	78e <CONFIG_BT_HCI_TX_STACK_SIZE+0x18e>
     78c:	e033      	b.n	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     78e:	f8d9 1004 	ldr.w	r1, [r9, #4]
     792:	1a89      	subs	r1, r1, r2
     794:	0209      	lsls	r1, r1, #8
     796:	17ca      	asrs	r2, r1, #31
     798:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     79c:	1209      	asrs	r1, r1, #8
     79e:	d41d      	bmi.n	7dc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1dc>
     7a0:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     7a4:	b339      	cbz	r1, 7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     7a6:	8941      	ldrh	r1, [r0, #10]
     7a8:	bb29      	cbnz	r1, 7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     7aa:	f000 fbfd 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     7ae:	aa05      	add	r2, sp, #20
     7b0:	a904      	add	r1, sp, #16
     7b2:	f002 fbc5 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     7b6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     7ba:	2800      	cmp	r0, #0
     7bc:	bfcc      	ite	gt
     7be:	2001      	movgt	r0, #1
     7c0:	2000      	movle	r0, #0
     7c2:	f100 0133 	add.w	r1, r0, #51	; 0x33
     7c6:	9804      	ldr	r0, [sp, #16]
     7c8:	f8d8 2000 	ldr.w	r2, [r8]
     7cc:	1a10      	subs	r0, r2, r0
     7ce:	0200      	lsls	r0, r0, #8
     7d0:	17c2      	asrs	r2, r0, #31
     7d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7d6:	1200      	asrs	r0, r0, #8
     7d8:	4288      	cmp	r0, r1
     7da:	da0c      	bge.n	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     7dc:	f88a 5000 	strb.w	r5, [sl]
     7e0:	f899 1010 	ldrb.w	r1, [r9, #16]
     7e4:	7b38      	ldrb	r0, [r7, #12]
     7e6:	4281      	cmp	r1, r0
     7e8:	f67f af60 	bls.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     7ec:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     7f0:	7845      	ldrb	r5, [r0, #1]
     7f2:	2d20      	cmp	r5, #32
     7f4:	d1c1      	bne.n	77a <CONFIG_BT_HCI_TX_STACK_SIZE+0x17a>
     7f6:	9802      	ldr	r0, [sp, #8]
     7f8:	b009      	add	sp, #36	; 0x24
     7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7fe:	0000      	.short	0x0000
     800:	20000dec 	.word	0x20000dec
     804:	20000aec 	.word	0x20000aec
     808:	20000d6c 	.word	0x20000d6c
     80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     810:	4604      	mov	r4, r0
     812:	4847      	ldr	r0, [pc, #284]	; (930 <CONFIG_ISR_STACK_SIZE+0x130>)
     814:	460e      	mov	r6, r1
     816:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     81a:	4f46      	ldr	r7, [pc, #280]	; (934 <CONFIG_ISR_STACK_SIZE+0x134>)
     81c:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     820:	2020      	movs	r0, #32
     822:	b083      	sub	sp, #12
     824:	4698      	mov	r8, r3
     826:	4692      	mov	sl, r2
     828:	7010      	strb	r0, [r2, #0]
     82a:	f507 7920 	add.w	r9, r7, #640	; 0x280
     82e:	2d20      	cmp	r5, #32
     830:	bf18      	it	ne
     832:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     836:	d031      	beq.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     838:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     83c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
     840:	1d01      	adds	r1, r0, #4
     842:	6880      	ldr	r0, [r0, #8]
     844:	6822      	ldr	r2, [r4, #0]
     846:	1a10      	subs	r0, r2, r0
     848:	0200      	lsls	r0, r0, #8
     84a:	17c2      	asrs	r2, r0, #31
     84c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     850:	1200      	asrs	r0, r0, #8
     852:	d423      	bmi.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     854:	8960      	ldrh	r0, [r4, #10]
     856:	b1d0      	cbz	r0, 88e <CONFIG_ISR_STACK_SIZE+0x8e>
     858:	8948      	ldrh	r0, [r1, #10]
     85a:	b9c0      	cbnz	r0, 88e <CONFIG_ISR_STACK_SIZE+0x8e>
     85c:	4608      	mov	r0, r1
     85e:	f000 fba3 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     862:	aa01      	add	r2, sp, #4
     864:	4669      	mov	r1, sp
     866:	f002 fb6b 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     86a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     86e:	2800      	cmp	r0, #0
     870:	bfcc      	ite	gt
     872:	2001      	movgt	r0, #1
     874:	2000      	movle	r0, #0
     876:	f100 0133 	add.w	r1, r0, #51	; 0x33
     87a:	9800      	ldr	r0, [sp, #0]
     87c:	6822      	ldr	r2, [r4, #0]
     87e:	1a10      	subs	r0, r2, r0
     880:	0200      	lsls	r0, r0, #8
     882:	17c2      	asrs	r2, r0, #31
     884:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     888:	1200      	asrs	r0, r0, #8
     88a:	4288      	cmp	r0, r1
     88c:	db06      	blt.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     88e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     892:	f88a 5000 	strb.w	r5, [sl]
     896:	7845      	ldrb	r5, [r0, #1]
     898:	2d20      	cmp	r5, #32
     89a:	d1cd      	bne.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     89c:	f89a 0000 	ldrb.w	r0, [sl]
     8a0:	f888 0000 	strb.w	r0, [r8]
     8a4:	2d20      	cmp	r5, #32
     8a6:	bf18      	it	ne
     8a8:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     8ac:	d03c      	beq.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
     8ae:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     8b2:	eb07 0981 	add.w	r9, r7, r1, lsl #2
     8b6:	6861      	ldr	r1, [r4, #4]
     8b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
     8bc:	4620      	mov	r0, r4
     8be:	1a51      	subs	r1, r2, r1
     8c0:	0209      	lsls	r1, r1, #8
     8c2:	17ca      	asrs	r2, r1, #31
     8c4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     8c8:	f109 0604 	add.w	r6, r9, #4
     8cc:	1209      	asrs	r1, r1, #8
     8ce:	d41b      	bmi.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8d0:	8971      	ldrh	r1, [r6, #10]
     8d2:	b349      	cbz	r1, 928 <CONFIG_ISR_STACK_SIZE+0x128>
     8d4:	8941      	ldrh	r1, [r0, #10]
     8d6:	bb39      	cbnz	r1, 928 <CONFIG_ISR_STACK_SIZE+0x128>
     8d8:	f000 fb66 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     8dc:	aa01      	add	r2, sp, #4
     8de:	4669      	mov	r1, sp
     8e0:	f002 fb2e 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     8e4:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     8e8:	2800      	cmp	r0, #0
     8ea:	bfcc      	ite	gt
     8ec:	2001      	movgt	r0, #1
     8ee:	2000      	movle	r0, #0
     8f0:	f100 0133 	add.w	r1, r0, #51	; 0x33
     8f4:	9800      	ldr	r0, [sp, #0]
     8f6:	6832      	ldr	r2, [r6, #0]
     8f8:	1a10      	subs	r0, r2, r0
     8fa:	0200      	lsls	r0, r0, #8
     8fc:	17c2      	asrs	r2, r0, #31
     8fe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     902:	1200      	asrs	r0, r0, #8
     904:	4288      	cmp	r0, r1
     906:	da0f      	bge.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
     908:	f888 5000 	strb.w	r5, [r8]
     90c:	f899 0010 	ldrb.w	r0, [r9, #16]
     910:	7b21      	ldrb	r1, [r4, #12]
     912:	4288      	cmp	r0, r1
     914:	d803      	bhi.n	91e <CONFIG_ISR_STACK_SIZE+0x11e>
     916:	b003      	add	sp, #12
     918:	2000      	movs	r0, #0
     91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     91e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     922:	7845      	ldrb	r5, [r0, #1]
     924:	2d20      	cmp	r5, #32
     926:	d1c2      	bne.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
     928:	b003      	add	sp, #12
     92a:	2001      	movs	r0, #1
     92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     930:	20000dec 	.word	0x20000dec
     934:	20000aec 	.word	0x20000aec
     938:	4804      	ldr	r0, [pc, #16]	; (94c <CONFIG_ISR_STACK_SIZE+0x14c>)
     93a:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
     93e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     942:	bf0c      	ite	eq
     944:	2001      	moveq	r0, #1
     946:	2000      	movne	r0, #0
     948:	4770      	bx	lr
     94a:	0000      	.short	0x0000
     94c:	000025b1 	.word	0x000025b1
     950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     954:	f04f 0800 	mov.w	r8, #0
     958:	b098      	sub	sp, #96	; 0x60
     95a:	4616      	mov	r6, r2
     95c:	460d      	mov	r5, r1
     95e:	46c3      	mov	fp, r8
     960:	f002 f896 	bl	2a90 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     964:	4604      	mov	r4, r0
     966:	2d01      	cmp	r5, #1
     968:	bf18      	it	ne
     96a:	2d02      	cmpne	r5, #2
     96c:	d005      	beq.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
     96e:	f640 117c 	movw	r1, #2428	; 0x97c
     972:	f04f 0070 	mov.w	r0, #112	; 0x70
     976:	f002 fe29 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     97a:	49ff      	ldr	r1, [pc, #1020]	; (d78 <CONFIG_ISR_STACK_SIZE+0x578>)
     97c:	2001      	movs	r0, #1
     97e:	6008      	str	r0, [r1, #0]
     980:	49fe      	ldr	r1, [pc, #1016]	; (d7c <CONFIG_ISR_STACK_SIZE+0x57c>)
     982:	6889      	ldr	r1, [r1, #8]
     984:	6008      	str	r0, [r1, #0]
     986:	2000      	movs	r0, #0
     988:	9006      	str	r0, [sp, #24]
     98a:	1e40      	subs	r0, r0, #1
     98c:	9008      	str	r0, [sp, #32]
     98e:	49fc      	ldr	r1, [pc, #1008]	; (d80 <CONFIG_ISR_STACK_SIZE+0x580>)
     990:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     994:	eb01 0380 	add.w	r3, r1, r0, lsl #2
     998:	1d1b      	adds	r3, r3, #4
     99a:	af09      	add	r7, sp, #36	; 0x24
     99c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     99e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     9a2:	a809      	add	r0, sp, #36	; 0x24
     9a4:	f000 fb00 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     9a8:	9007      	str	r0, [sp, #28]
     9aa:	48f5      	ldr	r0, [pc, #980]	; (d80 <CONFIG_ISR_STACK_SIZE+0x580>)
     9ac:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
     9b0:	f8b0 0320 	ldrh.w	r0, [r0, #800]	; 0x320
     9b4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     9b8:	f1b9 0f00 	cmp.w	r9, #0
     9bc:	bf14      	ite	ne
     9be:	f04f 0a01 	movne.w	sl, #1
     9c2:	f04f 0a00 	moveq.w	sl, #0
     9c6:	9809      	ldr	r0, [sp, #36]	; 0x24
     9c8:	9012      	str	r0, [sp, #72]	; 0x48
     9ca:	f1ba 0f00 	cmp.w	sl, #0
     9ce:	d009      	beq.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
     9d0:	48ec      	ldr	r0, [pc, #944]	; (d84 <CONFIG_ISR_STACK_SIZE+0x584>)
     9d2:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
     9d6:	b928      	cbnz	r0, 9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
     9d8:	f002 fd94 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     9dc:	2800      	cmp	r0, #0
     9de:	bf08      	it	eq
     9e0:	2701      	moveq	r7, #1
     9e2:	d000      	beq.n	9e6 <CONFIG_ISR_STACK_SIZE+0x1e6>
     9e4:	2700      	movs	r7, #0
     9e6:	48e8      	ldr	r0, [pc, #928]	; (d88 <CONFIG_ISR_STACK_SIZE+0x588>)
     9e8:	2200      	movs	r2, #0
     9ea:	9214      	str	r2, [sp, #80]	; 0x50
     9ec:	7800      	ldrb	r0, [r0, #0]
     9ee:	4616      	mov	r6, r2
     9f0:	2801      	cmp	r0, #1
     9f2:	bf18      	it	ne
     9f4:	2803      	cmpne	r0, #3
     9f6:	d143      	bne.n	a80 <CONFIG_ISR_STACK_SIZE+0x280>
     9f8:	48e3      	ldr	r0, [pc, #908]	; (d88 <CONFIG_ISR_STACK_SIZE+0x588>)
     9fa:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     9fe:	eba8 0009 	sub.w	r0, r8, r9
     a02:	9014      	str	r0, [sp, #80]	; 0x50
     a04:	45c1      	cmp	r9, r8
     a06:	d23b      	bcs.n	a80 <CONFIG_ISR_STACK_SIZE+0x280>
     a08:	a803      	add	r0, sp, #12
     a0a:	9005      	str	r0, [sp, #20]
     a0c:	a817      	add	r0, sp, #92	; 0x5c
     a0e:	9010      	str	r0, [sp, #64]	; 0x40
     a10:	9907      	ldr	r1, [sp, #28]
     a12:	f108 0003 	add.w	r0, r8, #3
     a16:	4242      	negs	r2, r0
     a18:	f8df c370 	ldr.w	ip, [pc, #880]	; d8c <CONFIG_ISR_STACK_SIZE+0x58c>
     a1c:	1a08      	subs	r0, r1, r0
     a1e:	2300      	movs	r3, #0
     a20:	ebbc 0101 	subs.w	r1, ip, r1
     a24:	eb73 0103 	sbcs.w	r1, r3, r3
     a28:	d204      	bcs.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
     a2a:	f240 51f5 	movw	r1, #1525	; 0x5f5
     a2e:	2070      	movs	r0, #112	; 0x70
     a30:	f002 fdcc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a34:	49d6      	ldr	r1, [pc, #856]	; (d90 <CONFIG_ISR_STACK_SIZE+0x590>)
     a36:	428a      	cmp	r2, r1
     a38:	dd04      	ble.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
     a3a:	f240 51f6 	movw	r1, #1526	; 0x5f6
     a3e:	2070      	movs	r0, #112	; 0x70
     a40:	f002 fdc4 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a44:	49d3      	ldr	r1, [pc, #844]	; (d94 <CONFIG_ISR_STACK_SIZE+0x594>)
     a46:	428a      	cmp	r2, r1
     a48:	da04      	bge.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
     a4a:	f240 51f7 	movw	r1, #1527	; 0x5f7
     a4e:	2070      	movs	r0, #112	; 0x70
     a50:	f002 fdbc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a54:	49d0      	ldr	r1, [pc, #832]	; (d98 <CONFIG_ISR_STACK_SIZE+0x598>)
     a56:	4288      	cmp	r0, r1
     a58:	bfa8      	it	ge
     a5a:	49d0      	ldrge	r1, [pc, #832]	; (d9c <CONFIG_ISR_STACK_SIZE+0x59c>)
     a5c:	da03      	bge.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
     a5e:	2800      	cmp	r0, #0
     a60:	bfb8      	it	lt
     a62:	49cd      	ldrlt	r1, [pc, #820]	; (d98 <CONFIG_ISR_STACK_SIZE+0x598>)
     a64:	da00      	bge.n	a68 <CONFIG_ISR_STACK_SIZE+0x268>
     a66:	1840      	adds	r0, r0, r1
     a68:	9a10      	ldr	r2, [sp, #64]	; 0x40
     a6a:	9905      	ldr	r1, [sp, #20]
     a6c:	f002 fa68 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     a70:	9803      	ldr	r0, [sp, #12]
     a72:	9909      	ldr	r1, [sp, #36]	; 0x24
     a74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a78:	9003      	str	r0, [sp, #12]
     a7a:	1a08      	subs	r0, r1, r0
     a7c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     a80:	2f00      	cmp	r7, #0
     a82:	bf18      	it	ne
     a84:	2632      	movne	r6, #50	; 0x32
     a86:	d104      	bne.n	a92 <CONFIG_ISR_STACK_SIZE+0x292>
     a88:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     a8c:	2800      	cmp	r0, #0
     a8e:	bf18      	it	ne
     a90:	2602      	movne	r6, #2
     a92:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a96:	d008      	beq.n	aaa <CONFIG_ISR_STACK_SIZE+0x2aa>
     a98:	9809      	ldr	r0, [sp, #36]	; 0x24
     a9a:	1b00      	subs	r0, r0, r4
     a9c:	0200      	lsls	r0, r0, #8
     a9e:	17c1      	asrs	r1, r0, #31
     aa0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     aa4:	1200      	asrs	r0, r0, #8
     aa6:	2801      	cmp	r0, #1
     aa8:	da02      	bge.n	ab0 <CONFIG_ISR_STACK_SIZE+0x2b0>
     aaa:	2004      	movs	r0, #4
     aac:	9918      	ldr	r1, [sp, #96]	; 0x60
     aae:	e00b      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     ab0:	b147      	cbz	r7, ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
     ab2:	48b4      	ldr	r0, [pc, #720]	; (d84 <CONFIG_ISR_STACK_SIZE+0x584>)
     ab4:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
     ab8:	b120      	cbz	r0, ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
     aba:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     abe:	1c06      	adds	r6, r0, #0
     ac0:	bf18      	it	ne
     ac2:	2602      	movne	r6, #2
     ac4:	4621      	mov	r1, r4
     ac6:	2001      	movs	r0, #1
     ac8:	f1b9 0f00 	cmp.w	r9, #0
     acc:	d002      	beq.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
     ace:	9b14      	ldr	r3, [sp, #80]	; 0x50
     ad0:	2b1e      	cmp	r3, #30
     ad2:	da02      	bge.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
     ad4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
     ad8:	b113      	cbz	r3, ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
     ada:	f04f 0b01 	mov.w	fp, #1
     ade:	1e40      	subs	r0, r0, #1
     ae0:	1983      	adds	r3, r0, r6
     ae2:	48a9      	ldr	r0, [pc, #676]	; (d88 <CONFIG_ISR_STACK_SIZE+0x588>)
     ae4:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
     ae8:	7800      	ldrb	r0, [r0, #0]
     aea:	9015      	str	r0, [sp, #84]	; 0x54
     aec:	9809      	ldr	r0, [sp, #36]	; 0x24
     aee:	1a80      	subs	r0, r0, r2
     af0:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     af4:	ebac 0001 	sub.w	r0, ip, r1
     af8:	0200      	lsls	r0, r0, #8
     afa:	ea4f 7ee0 	mov.w	lr, r0, asr #31
     afe:	eb00 601e 	add.w	r0, r0, lr, lsr #24
     b02:	1200      	asrs	r0, r0, #8
     b04:	4298      	cmp	r0, r3
     b06:	db18      	blt.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
     b08:	2a00      	cmp	r2, #0
     b0a:	bf18      	it	ne
     b0c:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
     b10:	9e09      	ldr	r6, [sp, #36]	; 0x24
     b12:	9710      	str	r7, [sp, #64]	; 0x40
     b14:	2700      	movs	r7, #0
     b16:	f001 feb5 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b1a:	1a30      	subs	r0, r6, r0
     b1c:	0200      	lsls	r0, r0, #8
     b1e:	17c1      	asrs	r1, r0, #31
     b20:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b24:	1200      	asrs	r0, r0, #8
     b26:	283e      	cmp	r0, #62	; 0x3e
     b28:	da3e      	bge.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
     b2a:	2d01      	cmp	r5, #1
     b2c:	d01f      	beq.n	b6e <CONFIG_ISR_STACK_SIZE+0x36e>
     b2e:	1e70      	subs	r0, r6, #1
     b30:	9910      	ldr	r1, [sp, #64]	; 0x40
     b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b36:	b311      	cbz	r1, b7e <CONFIG_ISR_STACK_SIZE+0x37e>
     b38:	e02c      	b.n	b94 <CONFIG_ISR_STACK_SIZE+0x394>
     b3a:	b17a      	cbz	r2, b5c <CONFIG_ISR_STACK_SIZE+0x35c>
     b3c:	2e00      	cmp	r6, #0
     b3e:	bf04      	itt	eq
     b40:	9815      	ldreq	r0, [sp, #84]	; 0x54
     b42:	2803      	cmpeq	r0, #3
     b44:	d00a      	beq.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
     b46:	b927      	cbnz	r7, b52 <CONFIG_ISR_STACK_SIZE+0x352>
     b48:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b4c:	2800      	cmp	r0, #0
     b4e:	bf18      	it	ne
     b50:	1e9b      	subne	r3, r3, #2
     b52:	2200      	movs	r2, #0
     b54:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
     b58:	4690      	mov	r8, r2
     b5a:	e7c7      	b.n	aec <CONFIG_ISR_STACK_SIZE+0x2ec>
     b5c:	bb07      	cbnz	r7, ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
     b5e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b62:	b1e8      	cbz	r0, ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
     b64:	2000      	movs	r0, #0
     b66:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
     b6a:	1e9b      	subs	r3, r3, #2
     b6c:	e7be      	b.n	aec <CONFIG_ISR_STACK_SIZE+0x2ec>
     b6e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b72:	d120      	bne.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
     b74:	f640 01f5 	movw	r1, #2293	; 0x8f5
     b78:	2070      	movs	r0, #112	; 0x70
     b7a:	f002 fd27 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b7e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b82:	d007      	beq.n	b94 <CONFIG_ISR_STACK_SIZE+0x394>
     b84:	1a21      	subs	r1, r4, r0
     b86:	0209      	lsls	r1, r1, #8
     b88:	17ca      	asrs	r2, r1, #31
     b8a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b8e:	1209      	asrs	r1, r1, #8
     b90:	2904      	cmp	r1, #4
     b92:	dd03      	ble.n	b9c <CONFIG_ISR_STACK_SIZE+0x39c>
     b94:	4604      	mov	r4, r0
     b96:	f001 fe7b 	bl	2890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b9a:	e00c      	b.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
     b9c:	2900      	cmp	r1, #0
     b9e:	dd0a      	ble.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
     ba0:	b01b      	add	sp, #108	; 0x6c
     ba2:	2000      	movs	r0, #0
     ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ba8:	1e70      	subs	r0, r6, #1
     baa:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     bae:	4620      	mov	r0, r4
     bb0:	f001 fe6e 	bl	2890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     bb4:	4657      	mov	r7, sl
     bb6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bba:	d028      	beq.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
     bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
     bbe:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
     bc2:	1b00      	subs	r0, r0, r4
     bc4:	f08b 0301 	eor.w	r3, fp, #1
     bc8:	4a75      	ldr	r2, [pc, #468]	; (da0 <CONFIG_ISR_STACK_SIZE+0x5a0>)
     bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bce:	ebac 0c04 	sub.w	ip, ip, r4
     bd2:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     bd6:	4283      	cmp	r3, r0
     bd8:	bf98      	it	ls
     bda:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     bde:	d2df      	bcs.n	ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
     be0:	4562      	cmp	r2, ip
     be2:	d3dd      	bcc.n	ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
     be4:	4620      	mov	r0, r4
     be6:	f00d fdc1 	bl	e76c <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     bea:	4a68      	ldr	r2, [pc, #416]	; (d8c <CONFIG_ISR_STACK_SIZE+0x58c>)
     bec:	9907      	ldr	r1, [sp, #28]
     bee:	1c53      	adds	r3, r2, #1
     bf0:	1a0e      	subs	r6, r1, r0
     bf2:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     bf6:	bf24      	itt	cs
     bf8:	eba0 0c01 	subcs.w	ip, r0, r1
     bfc:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     c00:	d310      	bcc.n	c24 <CONFIG_ISR_STACK_SIZE+0x424>
     c02:	42b2      	cmp	r2, r6
     c04:	d208      	bcs.n	c18 <CONFIG_ISR_STACK_SIZE+0x418>
     c06:	1a10      	subs	r0, r2, r0
     c08:	4408      	add	r0, r1
     c0a:	1c46      	adds	r6, r0, #1
     c0c:	e00a      	b.n	c24 <CONFIG_ISR_STACK_SIZE+0x424>
     c0e:	f640 2114 	movw	r1, #2580	; 0xa14
     c12:	2070      	movs	r0, #112	; 0x70
     c14:	f002 fcda 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c18:	4562      	cmp	r2, ip
     c1a:	d22d      	bcs.n	c78 <CONFIG_ISR_STACK_SIZE+0x478>
     c1c:	1a51      	subs	r1, r2, r1
     c1e:	4408      	add	r0, r1
     c20:	1c40      	adds	r0, r0, #1
     c22:	4246      	negs	r6, r0
     c24:	4857      	ldr	r0, [pc, #348]	; (d84 <CONFIG_ISR_STACK_SIZE+0x584>)
     c26:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
     c2a:	b350      	cbz	r0, c82 <CONFIG_ISR_STACK_SIZE+0x482>
     c2c:	4628      	mov	r0, r5
     c2e:	4645      	mov	r5, r8
     c30:	f04f 0b00 	mov.w	fp, #0
     c34:	46d8      	mov	r8, fp
     c36:	2801      	cmp	r0, #1
     c38:	d005      	beq.n	c46 <CONFIG_ISR_STACK_SIZE+0x446>
     c3a:	2002      	movs	r0, #2
     c3c:	f002 f870 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c40:	2001      	movs	r0, #1
     c42:	f002 f86d 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c46:	45a9      	cmp	r9, r5
     c48:	d22c      	bcs.n	ca4 <CONFIG_ISR_STACK_SIZE+0x4a4>
     c4a:	eba6 0105 	sub.w	r1, r6, r5
     c4e:	f04f 0301 	mov.w	r3, #1
     c52:	f04f 0203 	mov.w	r2, #3
     c56:	f04f 0002 	mov.w	r0, #2
     c5a:	f001 ff99 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c5e:	2800      	cmp	r0, #0
     c60:	bf08      	it	eq
     c62:	f04f 0801 	moveq.w	r8, #1
     c66:	f1b9 0f00 	cmp.w	r9, #0
     c6a:	d035      	beq.n	cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
     c6c:	2301      	movs	r3, #1
     c6e:	eba6 0109 	sub.w	r1, r6, r9
     c72:	2203      	movs	r2, #3
     c74:	4618      	mov	r0, r3
     c76:	e023      	b.n	cc0 <CONFIG_ISR_STACK_SIZE+0x4c0>
     c78:	f640 21f4 	movw	r1, #2804	; 0xaf4
     c7c:	2070      	movs	r0, #112	; 0x70
     c7e:	f002 fca5 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c82:	45c1      	cmp	r9, r8
     c84:	bf34      	ite	cc
     c86:	4640      	movcc	r0, r8
     c88:	4648      	movcs	r0, r9
     c8a:	f1bb 0f00 	cmp.w	fp, #0
     c8e:	bf14      	ite	ne
     c90:	2100      	movne	r1, #0
     c92:	211e      	moveq	r1, #30
     c94:	4408      	add	r0, r1
     c96:	42b0      	cmp	r0, r6
     c98:	dbc8      	blt.n	c2c <CONFIG_ISR_STACK_SIZE+0x42c>
     c9a:	f640 2127 	movw	r1, #2599	; 0xa27
     c9e:	2070      	movs	r0, #112	; 0x70
     ca0:	f002 fc94 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ca4:	d910      	bls.n	cc8 <CONFIG_ISR_STACK_SIZE+0x4c8>
     ca6:	2301      	movs	r3, #1
     ca8:	eba6 0109 	sub.w	r1, r6, r9
     cac:	2203      	movs	r2, #3
     cae:	4618      	mov	r0, r3
     cb0:	f001 ff6e 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cb4:	b328      	cbz	r0, d02 <CONFIG_ISR_STACK_SIZE+0x502>
     cb6:	b17d      	cbz	r5, cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
     cb8:	1b71      	subs	r1, r6, r5
     cba:	2301      	movs	r3, #1
     cbc:	2203      	movs	r2, #3
     cbe:	2002      	movs	r0, #2
     cc0:	f001 ff66 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cc4:	b1e8      	cbz	r0, d02 <CONFIG_ISR_STACK_SIZE+0x502>
     cc6:	e007      	b.n	cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
     cc8:	ea55 0009 	orrs.w	r0, r5, r9
     ccc:	d004      	beq.n	cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
     cce:	f640 115f 	movw	r1, #2399	; 0x95f
     cd2:	2070      	movs	r0, #112	; 0x70
     cd4:	f002 fc7a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cd8:	2301      	movs	r3, #1
     cda:	2203      	movs	r2, #3
     cdc:	4631      	mov	r1, r6
     cde:	2000      	movs	r0, #0
     ce0:	f001 ff56 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ce4:	b168      	cbz	r0, d02 <CONFIG_ISR_STACK_SIZE+0x502>
     ce6:	2501      	movs	r5, #1
     ce8:	f1b8 0f00 	cmp.w	r8, #0
     cec:	d003      	beq.n	cf6 <CONFIG_ISR_STACK_SIZE+0x4f6>
     cee:	9812      	ldr	r0, [sp, #72]	; 0x48
     cf0:	9009      	str	r0, [sp, #36]	; 0x24
     cf2:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
     cf6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; da4 <CONFIG_ISR_STACK_SIZE+0x5a4>
     cfa:	f1ba 0f00 	cmp.w	sl, #0
     cfe:	d10e      	bne.n	d1e <CONFIG_ISR_STACK_SIZE+0x51e>
     d00:	e009      	b.n	d16 <CONFIG_ISR_STACK_SIZE+0x516>
     d02:	2002      	movs	r0, #2
     d04:	f002 f80c 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d08:	2001      	movs	r0, #1
     d0a:	f002 f809 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d0e:	b01b      	add	sp, #108	; 0x6c
     d10:	2000      	movs	r0, #0
     d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d16:	481b      	ldr	r0, [pc, #108]	; (d84 <CONFIG_ISR_STACK_SIZE+0x584>)
     d18:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
     d1c:	b100      	cbz	r0, d20 <CONFIG_ISR_STACK_SIZE+0x520>
     d1e:	b34f      	cbz	r7, d74 <CONFIG_ISR_STACK_SIZE+0x574>
     d20:	f8df a060 	ldr.w	sl, [pc, #96]	; d84 <CONFIG_ISR_STACK_SIZE+0x584>
     d24:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
     d28:	b118      	cbz	r0, d32 <CONFIG_ISR_STACK_SIZE+0x532>
     d2a:	f002 fab7 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d2e:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
     d32:	b307      	cbz	r7, d76 <CONFIG_ISR_STACK_SIZE+0x576>
     d34:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     d38:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d40:	f8c8 0000 	str.w	r0, [r8]
     d44:	2300      	movs	r3, #0
     d46:	2203      	movs	r2, #3
     d48:	2005      	movs	r0, #5
     d4a:	f001 ff21 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d4e:	b378      	cbz	r0, db0 <CONFIG_ISR_STACK_SIZE+0x5b0>
     d50:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     d54:	2005      	movs	r0, #5
     d56:	f002 f89d 	bl	2e94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     d5a:	4913      	ldr	r1, [pc, #76]	; (da8 <CONFIG_ISR_STACK_SIZE+0x5a8>)
     d5c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     d60:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     d64:	4911      	ldr	r1, [pc, #68]	; (dac <CONFIG_ISR_STACK_SIZE+0x5ac>)
     d66:	12e0      	asrs	r0, r4, #11
     d68:	6008      	str	r0, [r1, #0]
     d6a:	4c06      	ldr	r4, [pc, #24]	; (d84 <CONFIG_ISR_STACK_SIZE+0x584>)
     d6c:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
     d70:	b3f0      	cbz	r0, df0 <CONFIG_ISR_STACK_SIZE+0x5f0>
     d72:	e05d      	b.n	e30 <CONFIG_ISR_STACK_SIZE+0x630>
     d74:	e01d      	b.n	db2 <CONFIG_ISR_STACK_SIZE+0x5b2>
     d76:	e021      	b.n	dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
     d78:	40000508 	.word	0x40000508
     d7c:	20000010 	.word	0x20000010
     d80:	20000aec 	.word	0x20000aec
     d84:	20000dec 	.word	0x20000dec
     d88:	20000012 	.word	0x20000012
     d8c:	1e847fff 	.word	0x1e847fff
     d90:	07a12000 	.word	0x07a12000
     d94:	f85ee000 	.word	0xf85ee000
     d98:	1e848000 	.word	0x1e848000
     d9c:	e17b8000 	.word	0xe17b8000
     da0:	003fffff 	.word	0x003fffff
     da4:	4001f508 	.word	0x4001f508
     da8:	4001f098 	.word	0x4001f098
     dac:	4001f504 	.word	0x4001f504
     db0:	e035      	b.n	e1e <CONFIG_ISR_STACK_SIZE+0x61e>
     db2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; e6c <CONFIG_ISR_STACK_SIZE+0x66c>
     db6:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
     dba:	b358      	cbz	r0, e14 <CONFIG_ISR_STACK_SIZE+0x614>
     dbc:	4c2b      	ldr	r4, [pc, #172]	; (e6c <CONFIG_ISR_STACK_SIZE+0x66c>)
     dbe:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
     dc2:	b150      	cbz	r0, dda <CONFIG_ISR_STACK_SIZE+0x5da>
     dc4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     dc8:	f8c8 0000 	str.w	r0, [r8]
     dcc:	2005      	movs	r0, #5
     dce:	f001 ffa7 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     dd2:	f002 facb 	bl	336c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     dd6:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
     dda:	ac06      	add	r4, sp, #24
     ddc:	4824      	ldr	r0, [pc, #144]	; (e70 <CONFIG_ISR_STACK_SIZE+0x670>)
     dde:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     de2:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
     de6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
     dea:	f8c0 330c 	str.w	r3, [r0, #780]	; 0x30c
     dee:	e000      	b.n	df2 <CONFIG_ISR_STACK_SIZE+0x5f2>
     df0:	e01a      	b.n	e28 <CONFIG_ISR_STACK_SIZE+0x628>
     df2:	f8c0 c310 	str.w	ip, [r0, #784]	; 0x310
     df6:	ac0a      	add	r4, sp, #40	; 0x28
     df8:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     dfc:	f8c0 1314 	str.w	r1, [r0, #788]	; 0x314
     e00:	f8c0 2318 	str.w	r2, [r0, #792]	; 0x318
     e04:	f8c0 331c 	str.w	r3, [r0, #796]	; 0x31c
     e08:	f8c0 c320 	str.w	ip, [r0, #800]	; 0x320
     e0c:	b01b      	add	sp, #108	; 0x6c
     e0e:	2001      	movs	r0, #1
     e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e14:	f002 fa5e 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e18:	f88a 5030 	strb.w	r5, [sl, #48]	; 0x30
     e1c:	e789      	b.n	d32 <CONFIG_ISR_STACK_SIZE+0x532>
     e1e:	f240 315b 	movw	r1, #859	; 0x35b
     e22:	2070      	movs	r0, #112	; 0x70
     e24:	f002 fbd2 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e28:	f002 fa92 	bl	3350 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e2c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
     e30:	eba6 0009 	sub.w	r0, r6, r9
     e34:	f1a0 0119 	sub.w	r1, r0, #25
     e38:	2900      	cmp	r1, #0
     e3a:	dc04      	bgt.n	e46 <CONFIG_ISR_STACK_SIZE+0x646>
     e3c:	f640 2151 	movw	r1, #2641	; 0xa51
     e40:	2070      	movs	r0, #112	; 0x70
     e42:	f002 fbc3 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e46:	2203      	movs	r2, #3
     e48:	2301      	movs	r3, #1
     e4a:	4610      	mov	r0, r2
     e4c:	f001 fea0 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e50:	b138      	cbz	r0, e62 <CONFIG_ISR_STACK_SIZE+0x662>
     e52:	4808      	ldr	r0, [pc, #32]	; (e74 <CONFIG_ISR_STACK_SIZE+0x674>)
     e54:	6880      	ldr	r0, [r0, #8]
     e56:	f8c0 b000 	str.w	fp, [r0]
     e5a:	4807      	ldr	r0, [pc, #28]	; (e78 <CONFIG_ISR_STACK_SIZE+0x678>)
     e5c:	f8c0 b000 	str.w	fp, [r0]
     e60:	e7bb      	b.n	dda <CONFIG_ISR_STACK_SIZE+0x5da>
     e62:	f640 215c 	movw	r1, #2652	; 0xa5c
     e66:	2070      	movs	r0, #112	; 0x70
     e68:	f002 fbb0 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e6c:	20000dec 	.word	0x20000dec
     e70:	20000aec 	.word	0x20000aec
     e74:	20000010 	.word	0x20000010
     e78:	40000508 	.word	0x40000508
     e7c:	b510      	push	{r4, lr}
     e7e:	4c15      	ldr	r4, [pc, #84]	; (ed4 <CONFIG_ISR_STACK_SIZE+0x6d4>)
     e80:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
     e84:	2820      	cmp	r0, #32
     e86:	bf18      	it	ne
     e88:	bd10      	popne	{r4, pc}
     e8a:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
     e8e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     e92:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
     e96:	2920      	cmp	r1, #32
     e98:	d016      	beq.n	ec8 <CONFIG_ISR_STACK_SIZE+0x6c8>
     e9a:	f8df c03c 	ldr.w	ip, [pc, #60]	; ed8 <CONFIG_ISR_STACK_SIZE+0x6d8>
     e9e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     ea2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     ea6:	785b      	ldrb	r3, [r3, #1]
     ea8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
     eac:	2301      	movs	r3, #1
     eae:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
     eb2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
     eb6:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
     eba:	2002      	movs	r0, #2
     ebc:	f000 f8b2 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
     ec0:	2000      	movs	r0, #0
     ec2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
     ec6:	bd10      	pop	{r4, pc}
     ec8:	f44f 716a 	mov.w	r1, #936	; 0x3a8
     ecc:	2070      	movs	r0, #112	; 0x70
     ece:	f002 fb7d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ed2:	0000      	.short	0x0000
     ed4:	20000dec 	.word	0x20000dec
     ed8:	20000d6c 	.word	0x20000d6c
     edc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     ee0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; f98 <CONFIG_ISR_STACK_SIZE+0x798>
     ee4:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
     ee8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     eec:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
     ef0:	2c20      	cmp	r4, #32
     ef2:	bf08      	it	eq
     ef4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     ef8:	f8df a0a0 	ldr.w	sl, [pc, #160]	; f9c <CONFIG_ISR_STACK_SIZE+0x79c>
     efc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; fa0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD>
     f00:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
     f04:	eb09 1785 	add.w	r7, r9, r5, lsl #6
     f08:	2607      	movs	r6, #7
     f0a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     f0e:	2801      	cmp	r0, #1
     f10:	d00e      	beq.n	f30 <CONFIG_ISR_STACK_SIZE+0x730>
     f12:	2804      	cmp	r0, #4
     f14:	bf08      	it	eq
     f16:	2602      	moveq	r6, #2
     f18:	d00a      	beq.n	f30 <CONFIG_ISR_STACK_SIZE+0x730>
     f1a:	2805      	cmp	r0, #5
     f1c:	bf0c      	ite	eq
     f1e:	2603      	moveq	r6, #3
     f20:	2806      	cmpne	r0, #6
     f22:	d005      	beq.n	f30 <CONFIG_ISR_STACK_SIZE+0x730>
     f24:	f640 01c2 	movw	r1, #2242	; 0x8c2
     f28:	f04f 0070 	mov.w	r0, #112	; 0x70
     f2c:	f002 fb4e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f30:	f1ba 0f00 	cmp.w	sl, #0
     f34:	bf18      	it	ne
     f36:	f3af 8000 	nopne.w
     f3a:	f3ef 8010 	mrs	r0, PRIMASK
     f3e:	b672      	cpsid	i
     f40:	eb07 0144 	add.w	r1, r7, r4, lsl #1
     f44:	784a      	ldrb	r2, [r1, #1]
     f46:	eb08 0185 	add.w	r1, r8, r5, lsl #2
     f4a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
     f4e:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
     f52:	42a2      	cmp	r2, r4
     f54:	bf04      	itt	eq
     f56:	2220      	moveq	r2, #32
     f58:	f881 2026 	strbeq.w	r2, [r1, #38]	; 0x26
     f5c:	b1a8      	cbz	r0, f8a <CONFIG_ISR_STACK_SIZE+0x78a>
     f5e:	462a      	mov	r2, r5
     f60:	4621      	mov	r1, r4
     f62:	2001      	movs	r0, #1
     f64:	f000 f85e 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
     f68:	eb04 0084 	add.w	r0, r4, r4, lsl #2
     f6c:	4631      	mov	r1, r6
     f6e:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
     f72:	4620      	mov	r0, r4
     f74:	4790      	blx	r2
     f76:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
     f7a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     f7e:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
     f82:	2c20      	cmp	r4, #32
     f84:	d1be      	bne.n	f04 <CONFIG_ISR_STACK_SIZE+0x704>
     f86:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     f8a:	4806      	ldr	r0, [pc, #24]	; (fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>)
     f8c:	2800      	cmp	r0, #0
     f8e:	bf18      	it	ne
     f90:	f3af 8000 	nopne.w
     f94:	b662      	cpsie	i
     f96:	e7e2      	b.n	f5e <CONFIG_ISR_STACK_SIZE+0x75e>
     f98:	20000dec 	.word	0x20000dec
     f9c:	00000000 	.word	0x00000000
     fa0:	20000d6c 	.word	0x20000d6c
     fa4:	00000000 	.word	0x00000000
     fa8:	b510      	push	{r4, lr}
     faa:	4604      	mov	r4, r0
     fac:	6800      	ldr	r0, [r0, #0]
     fae:	f00d fbdd 	bl	e76c <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     fb2:	4601      	mov	r1, r0
     fb4:	8960      	ldrh	r0, [r4, #10]
     fb6:	f994 2008 	ldrsb.w	r2, [r4, #8]
     fba:	f8df c054 	ldr.w	ip, [pc, #84]	; 1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
     fbe:	4410      	add	r0, r2
     fc0:	1cc2      	adds	r2, r0, #3
     fc2:	1888      	adds	r0, r1, r2
     fc4:	2300      	movs	r3, #0
     fc6:	ebbc 0101 	subs.w	r1, ip, r1
     fca:	eb73 0103 	sbcs.w	r1, r3, r3
     fce:	d204      	bcs.n	fda <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3a>
     fd0:	f240 51f5 	movw	r1, #1525	; 0x5f5
     fd4:	2070      	movs	r0, #112	; 0x70
     fd6:	f002 faf9 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fda:	490e      	ldr	r1, [pc, #56]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     fdc:	428a      	cmp	r2, r1
     fde:	dd04      	ble.n	fea <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4a>
     fe0:	f240 51f6 	movw	r1, #1526	; 0x5f6
     fe4:	2070      	movs	r0, #112	; 0x70
     fe6:	f002 faf1 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fea:	490b      	ldr	r1, [pc, #44]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     fec:	428a      	cmp	r2, r1
     fee:	da04      	bge.n	ffa <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5a>
     ff0:	f240 51f7 	movw	r1, #1527	; 0x5f7
     ff4:	2070      	movs	r0, #112	; 0x70
     ff6:	f002 fae9 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ffa:	4908      	ldr	r1, [pc, #32]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     ffc:	4288      	cmp	r0, r1
     ffe:	bfa8      	it	ge
    1000:	4907      	ldrge	r1, [pc, #28]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    1002:	da03      	bge.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    1004:	2800      	cmp	r0, #0
    1006:	bfb4      	ite	lt
    1008:	4904      	ldrlt	r1, [pc, #16]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
    100a:	bd10      	popge	{r4, pc}
    100c:	1840      	adds	r0, r0, r1
    100e:	bd10      	pop	{r4, pc}
    1010:	1e847fff 	.word	0x1e847fff
    1014:	07a12000 	.word	0x07a12000
    1018:	f85ee000 	.word	0xf85ee000
    101c:	1e848000 	.word	0x1e848000
    1020:	e17b8000 	.word	0xe17b8000
    1024:	f8df c054 	ldr.w	ip, [pc, #84]	; 107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
    1028:	b510      	push	{r4, lr}
    102a:	2300      	movs	r3, #0
    102c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1030:	2807      	cmp	r0, #7
    1032:	d21e      	bcs.n	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
    1034:	e8df f000 	tbb	[pc, r0]
    1038:	05050505 	.word	0x05050505
    103c:	00040404 	.word	0x00040404
    1040:	2301      	movs	r3, #1
    1042:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1046:	2b00      	cmp	r3, #0
    1048:	bf08      	it	eq
    104a:	bd10      	popeq	{r4, pc}
    104c:	480c      	ldr	r0, [pc, #48]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
    104e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1052:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    1056:	2820      	cmp	r0, #32
    1058:	bf0e      	itee	eq
    105a:	f882 1025 	strbeq.w	r1, [r2, #37]	; 0x25
    105e:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1062:	7041      	strbne	r1, [r0, #1]
    1064:	2020      	movs	r0, #32
    1066:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    106a:	7058      	strb	r0, [r3, #1]
    106c:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    1070:	bd10      	pop	{r4, pc}
    1072:	f44f 7120 	mov.w	r1, #640	; 0x280
    1076:	2070      	movs	r0, #112	; 0x70
    1078:	f002 faa8 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    107c:	20000d6c 	.word	0x20000d6c
    1080:	20000dec 	.word	0x20000dec
    1084:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1088:	b083      	sub	sp, #12
    108a:	485e      	ldr	r0, [pc, #376]	; (1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    108c:	9904      	ldr	r1, [sp, #16]
    108e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1092:	9001      	str	r0, [sp, #4]
    1094:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
    1098:	9803      	ldr	r0, [sp, #12]
    109a:	4625      	mov	r5, r4
    109c:	2801      	cmp	r0, #1
    109e:	bf18      	it	ne
    10a0:	2802      	cmpne	r0, #2
    10a2:	d005      	beq.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    10a4:	f640 2198 	movw	r1, #2712	; 0xa98
    10a8:	f04f 0070 	mov.w	r0, #112	; 0x70
    10ac:	f002 fa8e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10b0:	2700      	movs	r7, #0
    10b2:	2d20      	cmp	r5, #32
    10b4:	d04c      	beq.n	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
    10b6:	4853      	ldr	r0, [pc, #332]	; (1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    10b8:	9100      	str	r1, [sp, #0]
    10ba:	2600      	movs	r6, #0
    10bc:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
    10c0:	2900      	cmp	r1, #0
    10c2:	bf04      	itt	eq
    10c4:	6800      	ldreq	r0, [r0, #0]
    10c6:	7886      	ldrbeq	r6, [r0, #2]
    10c8:	f001 fbdc 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    10cc:	f8df a13c 	ldr.w	sl, [pc, #316]	; 120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    10d0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    10d4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    10d8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
    10dc:	684a      	ldr	r2, [r1, #4]
    10de:	6889      	ldr	r1, [r1, #8]
    10e0:	1a12      	subs	r2, r2, r0
    10e2:	1a09      	subs	r1, r1, r0
    10e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    10e8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    10ec:	4296      	cmp	r6, r2
    10ee:	bf98      	it	ls
    10f0:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    10f4:	d201      	bcs.n	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
    10f6:	4589      	cmp	r9, r1
    10f8:	d228      	bcs.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    10fa:	4a45      	ldr	r2, [pc, #276]	; (1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
    10fc:	9900      	ldr	r1, [sp, #0]
    10fe:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    1102:	4622      	mov	r2, r4
    1104:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1108:	784c      	ldrb	r4, [r1, #1]
    110a:	2c20      	cmp	r4, #32
    110c:	d016      	beq.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
    110e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    1112:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    1116:	f8dc 8004 	ldr.w	r8, [ip, #4]
    111a:	f8dc c008 	ldr.w	ip, [ip, #8]
    111e:	eba8 0800 	sub.w	r8, r8, r0
    1122:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    1126:	ebac 0100 	sub.w	r1, ip, r0
    112a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    112e:	4546      	cmp	r6, r8
    1130:	bf98      	it	ls
    1132:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1136:	d2e4      	bcs.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
    1138:	4589      	cmp	r9, r1
    113a:	d3e2      	bcc.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
    113c:	2a20      	cmp	r2, #32
    113e:	d005      	beq.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    1140:	2120      	movs	r1, #32
    1142:	2004      	movs	r0, #4
    1144:	9b00      	ldr	r3, [sp, #0]
    1146:	f7ff f9db 	bl	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
    114a:	4604      	mov	r4, r0
    114c:	42ac      	cmp	r4, r5
    114e:	d117      	bne.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1150:	4830      	ldr	r0, [pc, #192]	; (1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>)
    1152:	2800      	cmp	r0, #0
    1154:	bf18      	it	ne
    1156:	f3af 8000 	nopne.w
    115a:	f001 fb93 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    115e:	4c29      	ldr	r4, [pc, #164]	; (1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    1160:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    1164:	2920      	cmp	r1, #32
    1166:	d00f      	beq.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    1168:	6822      	ldr	r2, [r4, #0]
    116a:	6921      	ldr	r1, [r4, #16]
    116c:	7892      	ldrb	r2, [r2, #2]
    116e:	4402      	add	r2, r0
    1170:	1a51      	subs	r1, r2, r1
    1172:	0209      	lsls	r1, r1, #8
    1174:	17ca      	asrs	r2, r1, #31
    1176:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    117a:	1209      	asrs	r1, r1, #8
    117c:	2900      	cmp	r1, #0
    117e:	dd03      	ble.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    1180:	b005      	add	sp, #20
    1182:	2000      	movs	r0, #0
    1184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1188:	2d20      	cmp	r5, #32
    118a:	d00d      	beq.n	11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
    118c:	462a      	mov	r2, r5
    118e:	9903      	ldr	r1, [sp, #12]
    1190:	f7ff fbde 	bl	950 <CONFIG_ISR_STACK_SIZE+0x150>
    1194:	b358      	cbz	r0, 11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    1196:	9801      	ldr	r0, [sp, #4]
    1198:	f880 7027 	strb.w	r7, [r0, #39]	; 0x27
    119c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    11a0:	b005      	add	sp, #20
    11a2:	2001      	movs	r0, #1
    11a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11a8:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    11ac:	b118      	cbz	r0, 11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
    11ae:	f002 f875 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    11b2:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    11b6:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    11ba:	b150      	cbz	r0, 11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11bc:	4916      	ldr	r1, [pc, #88]	; (1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
    11be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    11c2:	6008      	str	r0, [r1, #0]
    11c4:	2005      	movs	r0, #5
    11c6:	f001 fdab 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11ca:	f002 f8cf 	bl	336c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    11ce:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
    11d2:	2004      	movs	r0, #4
    11d4:	f001 fda4 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11d8:	f001 fdfe 	bl	2dd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    11dc:	2020      	movs	r0, #32
    11de:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    11e2:	480e      	ldr	r0, [pc, #56]	; (121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>)
    11e4:	6880      	ldr	r0, [r0, #8]
    11e6:	6007      	str	r7, [r0, #0]
    11e8:	480d      	ldr	r0, [pc, #52]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
    11ea:	6007      	str	r7, [r0, #0]
    11ec:	e7d8      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    11ee:	462a      	mov	r2, r5
    11f0:	2120      	movs	r1, #32
    11f2:	2004      	movs	r0, #4
    11f4:	9b04      	ldr	r3, [sp, #16]
    11f6:	f7ff f983 	bl	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
    11fa:	b005      	add	sp, #20
    11fc:	2000      	movs	r0, #0
    11fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1202:	0000      	.short	0x0000
    1204:	20000dec 	.word	0x20000dec
    1208:	003fffff 	.word	0x003fffff
    120c:	20000aec 	.word	0x20000aec
    1210:	20000d6c 	.word	0x20000d6c
    1214:	00000000 	.word	0x00000000
    1218:	4001f508 	.word	0x4001f508
    121c:	20000010 	.word	0x20000010
    1220:	40000508 	.word	0x40000508

00001224 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1228:	4e76      	ldr	r6, [pc, #472]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    122a:	4607      	mov	r7, r0
    122c:	b087      	sub	sp, #28
    122e:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    1232:	468a      	mov	sl, r1
    1234:	2820      	cmp	r0, #32
    1236:	d05a      	beq.n	12ee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1238:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    123c:	f106 0410 	add.w	r4, r6, #16
    1240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1244:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    1248:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    124c:	2020      	movs	r0, #32
    124e:	f88d 0000 	strb.w	r0, [sp]
    1252:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    1256:	aa03      	add	r2, sp, #12
    1258:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    125c:	a901      	add	r1, sp, #4
    125e:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
    1262:	6970      	ldr	r0, [r6, #20]
    1264:	9002      	str	r0, [sp, #8]
    1266:	6870      	ldr	r0, [r6, #4]
    1268:	4438      	add	r0, r7
    126a:	f001 fe69 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    126e:	f99d 000c 	ldrsb.w	r0, [sp, #12]
    1272:	2800      	cmp	r0, #0
    1274:	dd02      	ble.n	127c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    1276:	9801      	ldr	r0, [sp, #4]
    1278:	1c40      	adds	r0, r0, #1
    127a:	9001      	str	r0, [sp, #4]
    127c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    1280:	9901      	ldr	r1, [sp, #4]
    1282:	2f64      	cmp	r7, #100	; 0x64
    1284:	4408      	add	r0, r1
    1286:	d337      	bcc.n	12f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1288:	4b5f      	ldr	r3, [pc, #380]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    128a:	2200      	movs	r2, #0
    128c:	1bdb      	subs	r3, r3, r7
    128e:	eb72 0102 	sbcs.w	r1, r2, r2
    1292:	d331      	bcc.n	12f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1294:	f8d8 1004 	ldr.w	r1, [r8, #4]
    1298:	1a41      	subs	r1, r0, r1
    129a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    129e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    12a2:	d229      	bcs.n	12f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    12a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    12a8:	6060      	str	r0, [r4, #4]
    12aa:	4856      	ldr	r0, [pc, #344]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    12ac:	f884 a00c 	strb.w	sl, [r4, #12]
    12b0:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    12b4:	46ea      	mov	sl, sp
    12b6:	2d20      	cmp	r5, #32
    12b8:	bf1c      	itt	ne
    12ba:	4954      	ldrne	r1, [pc, #336]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    12bc:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    12c0:	d04a      	beq.n	1358 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    12c2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    12c6:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    12ca:	6860      	ldr	r0, [r4, #4]
    12cc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    12d0:	4621      	mov	r1, r4
    12d2:	1a10      	subs	r0, r2, r0
    12d4:	0200      	lsls	r0, r0, #8
    12d6:	17c2      	asrs	r2, r0, #31
    12d8:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    12dc:	f108 0604 	add.w	r6, r8, #4
    12e0:	1200      	asrs	r0, r0, #8
    12e2:	d426      	bmi.n	1332 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10e>
    12e4:	8970      	ldrh	r0, [r6, #10]
    12e6:	b388      	cbz	r0, 134c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x128>
    12e8:	8948      	ldrh	r0, [r1, #10]
    12ea:	b148      	cbz	r0, 1300 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xdc>
    12ec:	e034      	b.n	1358 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    12ee:	f640 3165 	movw	r1, #2917	; 0xb65
    12f2:	2070      	movs	r0, #112	; 0x70
    12f4:	f002 f96a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12f8:	b007      	add	sp, #28
    12fa:	2001      	movs	r0, #1
    12fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1300:	4620      	mov	r0, r4
    1302:	f7ff fe51 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
    1306:	aa05      	add	r2, sp, #20
    1308:	a904      	add	r1, sp, #16
    130a:	f001 fe19 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    130e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    1312:	2800      	cmp	r0, #0
    1314:	bfcc      	ite	gt
    1316:	2001      	movgt	r0, #1
    1318:	2000      	movle	r0, #0
    131a:	f100 0133 	add.w	r1, r0, #51	; 0x33
    131e:	9804      	ldr	r0, [sp, #16]
    1320:	6832      	ldr	r2, [r6, #0]
    1322:	1a10      	subs	r0, r2, r0
    1324:	0200      	lsls	r0, r0, #8
    1326:	17c2      	asrs	r2, r0, #31
    1328:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    132c:	1200      	asrs	r0, r0, #8
    132e:	4288      	cmp	r0, r1
    1330:	da12      	bge.n	1358 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1332:	f88a 5000 	strb.w	r5, [sl]
    1336:	f898 1010 	ldrb.w	r1, [r8, #16]
    133a:	7b20      	ldrb	r0, [r4, #12]
    133c:	4281      	cmp	r1, r0
    133e:	d806      	bhi.n	134e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1340:	9802      	ldr	r0, [sp, #8]
    1342:	6060      	str	r0, [r4, #4]
    1344:	b007      	add	sp, #28
    1346:	2003      	movs	r0, #3
    1348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    134c:	e004      	b.n	1358 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    134e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1352:	7845      	ldrb	r5, [r0, #1]
    1354:	2d20      	cmp	r5, #32
    1356:	d1b4      	bne.n	12c2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x9e>
    1358:	4d2a      	ldr	r5, [pc, #168]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    135a:	68e8      	ldr	r0, [r5, #12]
    135c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1360:	d016      	beq.n	1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>
    1362:	f001 fa8f 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1366:	68e9      	ldr	r1, [r5, #12]
    1368:	1a08      	subs	r0, r1, r0
    136a:	0200      	lsls	r0, r0, #8
    136c:	17c1      	asrs	r1, r0, #31
    136e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1372:	1200      	asrs	r0, r0, #8
    1374:	2802      	cmp	r0, #2
    1376:	dc05      	bgt.n	1384 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x160>
    1378:	9802      	ldr	r0, [sp, #8]
    137a:	6060      	str	r0, [r4, #4]
    137c:	b007      	add	sp, #28
    137e:	2002      	movs	r0, #2
    1380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1384:	2005      	movs	r0, #5
    1386:	f001 fccb 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    138a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    138e:	60e8      	str	r0, [r5, #12]
    1390:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    1394:	f89d 2000 	ldrb.w	r2, [sp]
    1398:	2120      	movs	r1, #32
    139a:	2a20      	cmp	r2, #32
    139c:	bf13      	iteet	ne
    139e:	2005      	movne	r0, #5
    13a0:	eb05 0083 	addeq.w	r0, r5, r3, lsl #2
    13a4:	f890 0024 	ldrbeq.w	r0, [r0, #36]	; 0x24
    13a8:	f7ff f8aa 	blne	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
    13ac:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
    13b0:	4916      	ldr	r1, [pc, #88]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    13b2:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    13b6:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    13ba:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    13be:	7048      	strb	r0, [r1, #1]
    13c0:	6868      	ldr	r0, [r5, #4]
    13c2:	4438      	add	r0, r7
    13c4:	6068      	str	r0, [r5, #4]
    13c6:	2001      	movs	r0, #1
    13c8:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
    13cc:	7f68      	ldrb	r0, [r5, #29]
    13ce:	2801      	cmp	r0, #1
    13d0:	d10a      	bne.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    13d2:	6828      	ldr	r0, [r5, #0]
    13d4:	6969      	ldr	r1, [r5, #20]
    13d6:	7840      	ldrb	r0, [r0, #1]
    13d8:	2801      	cmp	r0, #1
    13da:	d811      	bhi.n	1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
    13dc:	b180      	cbz	r0, 1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
    13de:	1a08      	subs	r0, r1, r0
    13e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13e4:	f001 faee 	bl	29c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    13e8:	f89d 0000 	ldrb.w	r0, [sp]
    13ec:	2820      	cmp	r0, #32
    13ee:	d003      	beq.n	13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>
    13f0:	4807      	ldr	r0, [pc, #28]	; (1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>)
    13f2:	7840      	ldrb	r0, [r0, #1]
    13f4:	f002 f9ba 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    13f8:	b007      	add	sp, #28
    13fa:	2000      	movs	r0, #0
    13fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1400:	2001      	movs	r0, #1
    1402:	e7ec      	b.n	13de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56>
    1404:	20000dec 	.word	0x20000dec
    1408:	07a11fff 	.word	0x07a11fff
    140c:	20000d6c 	.word	0x20000d6c
    1410:	20000010 	.word	0x20000010

00001414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1414:	4602      	mov	r2, r0
    1416:	f8df c054 	ldr.w	ip, [pc, #84]	; 146c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    141a:	b510      	push	{r4, lr}
    141c:	2300      	movs	r3, #0
    141e:	ebbc 0202 	subs.w	r2, ip, r2
    1422:	4408      	add	r0, r1
    1424:	eb73 0203 	sbcs.w	r2, r3, r3
    1428:	d204      	bcs.n	1434 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    142a:	f240 51f5 	movw	r1, #1525	; 0x5f5
    142e:	2070      	movs	r0, #112	; 0x70
    1430:	f002 f8cc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1434:	4a0e      	ldr	r2, [pc, #56]	; (1470 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1436:	4291      	cmp	r1, r2
    1438:	dd04      	ble.n	1444 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    143a:	f240 51f6 	movw	r1, #1526	; 0x5f6
    143e:	2070      	movs	r0, #112	; 0x70
    1440:	f002 f8c4 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1444:	4a0b      	ldr	r2, [pc, #44]	; (1474 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1446:	4291      	cmp	r1, r2
    1448:	da04      	bge.n	1454 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    144a:	f240 51f7 	movw	r1, #1527	; 0x5f7
    144e:	2070      	movs	r0, #112	; 0x70
    1450:	f002 f8bc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1454:	4908      	ldr	r1, [pc, #32]	; (1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1456:	4288      	cmp	r0, r1
    1458:	bfa8      	it	ge
    145a:	4908      	ldrge	r1, [pc, #32]	; (147c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    145c:	da03      	bge.n	1466 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    145e:	2800      	cmp	r0, #0
    1460:	bfb4      	ite	lt
    1462:	4905      	ldrlt	r1, [pc, #20]	; (1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1464:	bd10      	popge	{r4, pc}
    1466:	1840      	adds	r0, r0, r1
    1468:	bd10      	pop	{r4, pc}
    146a:	0000      	.short	0x0000
    146c:	1e847fff 	.word	0x1e847fff
    1470:	07a12000 	.word	0x07a12000
    1474:	f85ee000 	.word	0xf85ee000
    1478:	1e848000 	.word	0x1e848000
    147c:	e17b8000 	.word	0xe17b8000

00001480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1480:	4a10      	ldr	r2, [pc, #64]	; (14c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1482:	1a0b      	subs	r3, r1, r0
    1484:	f102 0c01 	add.w	ip, r2, #1
    1488:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    148c:	bf3c      	itt	cc
    148e:	4618      	movcc	r0, r3
    1490:	4770      	bxcc	lr
    1492:	b510      	push	{r4, lr}
    1494:	1a44      	subs	r4, r0, r1
    1496:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    149a:	bf3c      	itt	cc
    149c:	4618      	movcc	r0, r3
    149e:	bd10      	popcc	{r4, pc}
    14a0:	429a      	cmp	r2, r3
    14a2:	d203      	bcs.n	14ac <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    14a4:	1a10      	subs	r0, r2, r0
    14a6:	4408      	add	r0, r1
    14a8:	1c40      	adds	r0, r0, #1
    14aa:	bd10      	pop	{r4, pc}
    14ac:	42a2      	cmp	r2, r4
    14ae:	d204      	bcs.n	14ba <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    14b0:	1a51      	subs	r1, r2, r1
    14b2:	4408      	add	r0, r1
    14b4:	1c40      	adds	r0, r0, #1
    14b6:	4240      	negs	r0, r0
    14b8:	bd10      	pop	{r4, pc}
    14ba:	f640 21f4 	movw	r1, #2804	; 0xaf4
    14be:	2070      	movs	r0, #112	; 0x70
    14c0:	f002 f884 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14c4:	1e847fff 	.word	0x1e847fff

000014c8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    14c8:	490b      	ldr	r1, [pc, #44]	; (14f8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    14ca:	b510      	push	{r4, lr}
    14cc:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
    14d0:	2820      	cmp	r0, #32
    14d2:	d00c      	beq.n	14ee <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    14d4:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
    14d8:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
    14dc:	4a07      	ldr	r2, [pc, #28]	; (14fc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    14de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    14e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    14e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    14ea:	2104      	movs	r1, #4
    14ec:	4710      	bx	r2
    14ee:	f640 01a6 	movw	r1, #2214	; 0x8a6
    14f2:	2070      	movs	r0, #112	; 0x70
    14f4:	f002 f86a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f8:	20000dec 	.word	0x20000dec
    14fc:	20000aec 	.word	0x20000aec

00001500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1500:	b570      	push	{r4, r5, r6, lr}
    1502:	4e64      	ldr	r6, [pc, #400]	; (1694 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    1504:	4964      	ldr	r1, [pc, #400]	; (1698 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x198>)
    1506:	2501      	movs	r5, #1
    1508:	f506 7440 	add.w	r4, r6, #768	; 0x300
    150c:	2808      	cmp	r0, #8
    150e:	d27c      	bcs.n	160a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    1510:	e8df f000 	tbb	[pc, r0]
    1514:	a28f5e04 	.word	0xa28f5e04
    1518:	aca745ba 	.word	0xaca745ba
    151c:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    1520:	b918      	cbnz	r0, 152a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1522:	f001 fed7 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1526:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    152a:	8b60      	ldrh	r0, [r4, #26]
    152c:	b110      	cbz	r0, 1534 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    152e:	f001 ffe9 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1532:	b188      	cbz	r0, 1558 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1534:	f7ff fca2 	bl	e7c <CONFIG_ISR_STACK_SIZE+0x67c>
    1538:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    153c:	68e1      	ldr	r1, [r4, #12]
    153e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1542:	d005      	beq.n	1550 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1544:	2301      	movs	r3, #1
    1546:	2203      	movs	r2, #3
    1548:	2005      	movs	r0, #5
    154a:	f001 fb21 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    154e:	b140      	cbz	r0, 1562 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1550:	7f60      	ldrb	r0, [r4, #29]
    1552:	2801      	cmp	r0, #1
    1554:	d00a      	beq.n	156c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1556:	e014      	b.n	1582 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x82>
    1558:	f640 015e 	movw	r1, #2142	; 0x85e
    155c:	2070      	movs	r0, #112	; 0x70
    155e:	f002 f835 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1562:	f640 0163 	movw	r1, #2147	; 0x863
    1566:	2070      	movs	r0, #112	; 0x70
    1568:	f002 f830 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    156c:	6820      	ldr	r0, [r4, #0]
    156e:	6961      	ldr	r1, [r4, #20]
    1570:	7840      	ldrb	r0, [r0, #1]
    1572:	2801      	cmp	r0, #1
    1574:	d811      	bhi.n	159a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x9a>
    1576:	b180      	cbz	r0, 159a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x9a>
    1578:	1a08      	subs	r0, r1, r0
    157a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    157e:	f001 fa21 	bl	29c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1582:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1586:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    158a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    158e:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1596:	2101      	movs	r1, #1
    1598:	4710      	bx	r2
    159a:	2001      	movs	r0, #1
    159c:	e7ec      	b.n	1578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    159e:	f7ff fc6d 	bl	e7c <CONFIG_ISR_STACK_SIZE+0x67c>
    15a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    15a6:	60e0      	str	r0, [r4, #12]
    15a8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    15ac:	b158      	cbz	r0, 15c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc6>
    15ae:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    15b2:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    15b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    15ba:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    15be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15c2:	2106      	movs	r1, #6
    15c4:	4710      	bx	r2
    15c6:	f640 0173 	movw	r1, #2163	; 0x873
    15ca:	2070      	movs	r0, #112	; 0x70
    15cc:	f001 fffe 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d0:	f7ff fc54 	bl	e7c <CONFIG_ISR_STACK_SIZE+0x67c>
    15d4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    15d8:	f001 ff94 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15dc:	b118      	cbz	r0, 15e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe6>
    15de:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    15e2:	b128      	cbz	r0, 15f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf0>
    15e4:	e008      	b.n	15f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    15e6:	f640 0182 	movw	r1, #2178	; 0x882
    15ea:	2070      	movs	r0, #112	; 0x70
    15ec:	f001 ffee 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f0:	f001 fe70 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    15f4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    15f8:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    15fc:	b168      	cbz	r0, 161a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    15fe:	4927      	ldr	r1, [pc, #156]	; (169c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x19c>)
    1600:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1604:	6008      	str	r0, [r1, #0]
    1606:	2005      	movs	r0, #5
    1608:	e000      	b.n	160c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    160a:	e03d      	b.n	1688 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>
    160c:	f001 fb88 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1610:	f001 feac 	bl	336c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1614:	2000      	movs	r0, #0
    1616:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    161a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    161e:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1622:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1626:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    162a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    162e:	2100      	movs	r1, #0
    1630:	4710      	bx	r2
    1632:	f001 fc1b 	bl	2e6c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1636:	8b60      	ldrh	r0, [r4, #26]
    1638:	b110      	cbz	r0, 1640 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x140>
    163a:	f001 ff63 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    163e:	b130      	cbz	r0, 164e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x14e>
    1640:	4817      	ldr	r0, [pc, #92]	; (16a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>)
    1642:	7800      	ldrb	r0, [r0, #0]
    1644:	2803      	cmp	r0, #3
    1646:	bf08      	it	eq
    1648:	f884 5021 	strbeq.w	r5, [r4, #33]	; 0x21
    164c:	bd70      	pop	{r4, r5, r6, pc}
    164e:	f640 018c 	movw	r1, #2188	; 0x88c
    1652:	2070      	movs	r0, #112	; 0x70
    1654:	f001 ffba 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1658:	4812      	ldr	r0, [pc, #72]	; (16a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a4>)
    165a:	6005      	str	r5, [r0, #0]
    165c:	6888      	ldr	r0, [r1, #8]
    165e:	6005      	str	r5, [r0, #0]
    1660:	bd70      	pop	{r4, r5, r6, pc}
    1662:	7808      	ldrb	r0, [r1, #0]
    1664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1668:	f002 b880 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    166c:	f7ff fc06 	bl	e7c <CONFIG_ISR_STACK_SIZE+0x67c>
    1670:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1674:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1678:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    167c:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1684:	2105      	movs	r1, #5
    1686:	4710      	bx	r2
    1688:	f640 019e 	movw	r1, #2206	; 0x89e
    168c:	2070      	movs	r0, #112	; 0x70
    168e:	f001 ff9d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1692:	0000      	.short	0x0000
    1694:	20000aec 	.word	0x20000aec
    1698:	20000010 	.word	0x20000010
    169c:	4001f508 	.word	0x4001f508
    16a0:	20000012 	.word	0x20000012
    16a4:	40000508 	.word	0x40000508

000016a8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    16a8:	4803      	ldr	r0, [pc, #12]	; (16b8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    16aa:	b510      	push	{r4, lr}
    16ac:	7840      	ldrb	r0, [r0, #1]
    16ae:	f00d f85d 	bl	e76c <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    16b2:	b280      	uxth	r0, r0
    16b4:	bd10      	pop	{r4, pc}
    16b6:	0000      	.short	0x0000
    16b8:	20000012 	.word	0x20000012

000016bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    16bc:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16c0:	48fe      	ldr	r0, [pc, #1016]	; (1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>)
    16c2:	b095      	sub	sp, #84	; 0x54
    16c4:	4688      	mov	r8, r1
    16c6:	6800      	ldr	r0, [r0, #0]
    16c8:	4cfd      	ldr	r4, [pc, #1012]	; (1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    16ca:	05c0      	lsls	r0, r0, #23
    16cc:	0dc0      	lsrs	r0, r0, #23
    16ce:	d00e      	beq.n	16ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    16d0:	3810      	subs	r0, #16
    16d2:	b240      	sxtb	r0, r0
    16d4:	2800      	cmp	r0, #0
    16d6:	bfb8      	it	lt
    16d8:	f000 000f 	andlt.w	r0, r0, #15
    16dc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    16e0:	bfac      	ite	ge
    16e2:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    16e6:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    16ea:	0940      	lsrs	r0, r0, #5
    16ec:	d00d      	beq.n	170a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    16ee:	f898 0000 	ldrb.w	r0, [r8]
    16f2:	f04f 0b00 	mov.w	fp, #0
    16f6:	2800      	cmp	r0, #0
    16f8:	bf18      	it	ne
    16fa:	2801      	cmpne	r0, #1
    16fc:	d018      	beq.n	1730 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    16fe:	f240 714c 	movw	r1, #1868	; 0x74c
    1702:	f04f 0070 	mov.w	r0, #112	; 0x70
    1706:	f001 ff61 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    170a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    170e:	f04f 0b01 	mov.w	fp, #1
    1712:	2820      	cmp	r0, #32
    1714:	d007      	beq.n	1726 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1716:	f898 0000 	ldrb.w	r0, [r8]
    171a:	b148      	cbz	r0, 1730 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    171c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    1720:	2070      	movs	r0, #112	; 0x70
    1722:	f001 ff53 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1726:	f240 7145 	movw	r1, #1861	; 0x745
    172a:	2070      	movs	r0, #112	; 0x70
    172c:	f001 ff4e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1730:	4de4      	ldr	r5, [pc, #912]	; (1ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    1732:	b125      	cbz	r5, 173e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1734:	2100      	movs	r1, #0
    1736:	f240 704f 	movw	r0, #1871	; 0x74f
    173a:	f3af 8000 	nop.w
    173e:	9815      	ldr	r0, [sp, #84]	; 0x54
    1740:	49e1      	ldr	r1, [pc, #900]	; (1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    1742:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1746:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    174a:	f04f 0901 	mov.w	r9, #1
    174e:	9001      	str	r0, [sp, #4]
    1750:	b125      	cbz	r5, 175c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    1752:	2100      	movs	r1, #0
    1754:	f240 7057 	movw	r0, #1879	; 0x757
    1758:	f3af 8000 	nop.w
    175c:	f1b9 0f00 	cmp.w	r9, #0
    1760:	d00a      	beq.n	1778 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    1762:	bf00      	nop
    1764:	f894 6032 	ldrb.w	r6, [r4, #50]	; 0x32
    1768:	f04f 0a00 	mov.w	sl, #0
    176c:	f884 a02f 	strb.w	sl, [r4, #47]	; 0x2f
    1770:	f1bb 0f00 	cmp.w	fp, #0
    1774:	d007      	beq.n	1786 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    1776:	e02e      	b.n	17d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    1778:	48d4      	ldr	r0, [pc, #848]	; (1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    177a:	2800      	cmp	r0, #0
    177c:	bf18      	it	ne
    177e:	f3af 8000 	nopne.w
    1782:	b662      	cpsie	i
    1784:	e7ee      	b.n	1764 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    1786:	4637      	mov	r7, r6
    1788:	2001      	movs	r0, #1
    178a:	ea20 0607 	bic.w	r6, r0, r7
    178e:	48d0      	ldr	r0, [pc, #832]	; (1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    1790:	2240      	movs	r2, #64	; 0x40
    1792:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1796:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    179a:	f002 f869 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    179e:	b125      	cbz	r5, 17aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    17a0:	2100      	movs	r1, #0
    17a2:	f240 50b9 	movw	r0, #1465	; 0x5b9
    17a6:	f3af 8000 	nop.w
    17aa:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    17ae:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    17b2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    17b4:	6241      	str	r1, [r0, #36]	; 0x24
    17b6:	b125      	cbz	r5, 17c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    17b8:	2100      	movs	r1, #0
    17ba:	f240 50bd 	movw	r0, #1469	; 0x5bd
    17be:	f3af 8000 	nop.w
    17c2:	b125      	cbz	r5, 17ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    17c4:	2100      	movs	r1, #0
    17c6:	f240 7061 	movw	r0, #1889	; 0x761
    17ca:	f3af 8000 	nop.w
    17ce:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17d2:	2800      	cmp	r0, #0
    17d4:	d1bc      	bne.n	1750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    17d6:	b125      	cbz	r5, 17e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    17d8:	2100      	movs	r1, #0
    17da:	f240 706b 	movw	r0, #1899	; 0x76b
    17de:	f3af 8000 	nop.w
    17e2:	f001 f84f 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    17e6:	4607      	mov	r7, r0
    17e8:	a802      	add	r0, sp, #8
    17ea:	9008      	str	r0, [sp, #32]
    17ec:	f898 0000 	ldrb.w	r0, [r8]
    17f0:	2800      	cmp	r0, #0
    17f2:	f898 000b 	ldrb.w	r0, [r8, #11]
    17f6:	f88d 0015 	strb.w	r0, [sp, #21]
    17fa:	f898 100a 	ldrb.w	r1, [r8, #10]
    17fe:	f88d 1014 	strb.w	r1, [sp, #20]
    1802:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1806:	f8ad 1012 	strh.w	r1, [sp, #18]
    180a:	9000      	str	r0, [sp, #0]
    180c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1810:	d05d      	beq.n	18ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x212>
    1812:	2200      	movs	r2, #0
    1814:	9808      	ldr	r0, [sp, #32]
    1816:	f7fe fe09 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    181a:	9706      	str	r7, [sp, #24]
    181c:	6820      	ldr	r0, [r4, #0]
    181e:	aa0f      	add	r2, sp, #60	; 0x3c
    1820:	a909      	add	r1, sp, #36	; 0x24
    1822:	f890 9003 	ldrb.w	r9, [r0, #3]
    1826:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    182a:	f001 fb89 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    182e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1832:	2820      	cmp	r0, #32
    1834:	d051      	beq.n	18da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x21e>
    1836:	6960      	ldr	r0, [r4, #20]
    1838:	4448      	add	r0, r9
    183a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    183e:	bf00      	nop
    1840:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1844:	1a89      	subs	r1, r1, r2
    1846:	9002      	str	r0, [sp, #8]
    1848:	4408      	add	r0, r1
    184a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    184e:	9003      	str	r0, [sp, #12]
    1850:	4631      	mov	r1, r6
    1852:	9808      	ldr	r0, [sp, #32]
    1854:	f7fe fe90 	bl	578 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12c>
    1858:	f898 000b 	ldrb.w	r0, [r8, #11]
    185c:	9000      	str	r0, [sp, #0]
    185e:	46b9      	mov	r9, r7
    1860:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1864:	a810      	add	r0, sp, #64	; 0x40
    1866:	f8d8 3004 	ldr.w	r3, [r8, #4]
    186a:	f8d8 200c 	ldr.w	r2, [r8, #12]
    186e:	f7fe fddd 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1872:	9802      	ldr	r0, [sp, #8]
    1874:	9a03      	ldr	r2, [sp, #12]
    1876:	eba0 0009 	sub.w	r0, r0, r9
    187a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    187e:	eba2 0209 	sub.w	r2, r2, r9
    1882:	9911      	ldr	r1, [sp, #68]	; 0x44
    1884:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1888:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    188c:	d201      	bcs.n	1892 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d6>
    188e:	4291      	cmp	r1, r2
    1890:	d209      	bcs.n	18a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ea>
    1892:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1896:	1a89      	subs	r1, r1, r2
    1898:	1878      	adds	r0, r7, r1
    189a:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    189e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18a2:	e9cd 2002 	strd	r2, r0, [sp, #8]
    18a6:	b125      	cbz	r5, 18b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f6>
    18a8:	2100      	movs	r1, #0
    18aa:	f240 7072 	movw	r0, #1906	; 0x772
    18ae:	f3af 8000 	nop.w
    18b2:	4a87      	ldr	r2, [pc, #540]	; (1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    18b4:	4639      	mov	r1, r7
    18b6:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    18ba:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    18be:	a802      	add	r0, sp, #8
    18c0:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    18c4:	2a01      	cmp	r2, #1
    18c6:	bf18      	it	ne
    18c8:	2a02      	cmpne	r2, #2
    18ca:	d01d      	beq.n	1908 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24c>
    18cc:	e05c      	b.n	1988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    18ce:	f8d8 200c 	ldr.w	r2, [r8, #12]
    18d2:	9808      	ldr	r0, [sp, #32]
    18d4:	f7fe fdaa 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    18d8:	e7e5      	b.n	18a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ea>
    18da:	9806      	ldr	r0, [sp, #24]
    18dc:	4448      	add	r0, r9
    18de:	f100 0904 	add.w	r9, r0, #4
    18e2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    18e6:	b128      	cbz	r0, 18f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x238>
    18e8:	f001 fe0c 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    18ec:	2800      	cmp	r0, #0
    18ee:	bf08      	it	eq
    18f0:	f109 0932 	addeq.w	r9, r9, #50	; 0x32
    18f4:	4877      	ldr	r0, [pc, #476]	; (1ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    18f6:	7841      	ldrb	r1, [r0, #1]
    18f8:	9809      	ldr	r0, [sp, #36]	; 0x24
    18fa:	4281      	cmp	r1, r0
    18fc:	bf84      	itt	hi
    18fe:	1a08      	subhi	r0, r1, r0
    1900:	4481      	addhi	r9, r0
    1902:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
    1906:	e79b      	b.n	1840 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x184>
    1908:	6822      	ldr	r2, [r4, #0]
    190a:	f8dd c00c 	ldr.w	ip, [sp, #12]
    190e:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 1ad8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>
    1912:	7893      	ldrb	r3, [r2, #2]
    1914:	9a02      	ldr	r2, [sp, #8]
    1916:	1a52      	subs	r2, r2, r1
    1918:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    191c:	ebac 0101 	sub.w	r1, ip, r1
    1920:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1924:	4293      	cmp	r3, r2
    1926:	bf98      	it	ls
    1928:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    192c:	d264      	bcs.n	19f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    192e:	458a      	cmp	sl, r1
    1930:	d362      	bcc.n	19f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    1932:	f04f 0a01 	mov.w	sl, #1
    1936:	ab10      	add	r3, sp, #64	; 0x40
    1938:	aa0f      	add	r2, sp, #60	; 0x3c
    193a:	4631      	mov	r1, r6
    193c:	f7fe ff66 	bl	80c <CONFIG_ISR_STACK_SIZE+0xc>
    1940:	2800      	cmp	r0, #0
    1942:	d061      	beq.n	1a08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    1944:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    1948:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    194c:	4633      	mov	r3, r6
    194e:	428a      	cmp	r2, r1
    1950:	d05e      	beq.n	1a10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    1952:	2005      	movs	r0, #5
    1954:	f7fe fdd4 	bl	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
    1958:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    195c:	7048      	strb	r0, [r1, #1]
    195e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1962:	2820      	cmp	r0, #32
    1964:	bf03      	ittte	eq
    1966:	eb04 0086 	addeq.w	r0, r4, r6, lsl #2
    196a:	f880 9024 	strbeq.w	r9, [r0, #36]	; 0x24
    196e:	f880 a027 	strbeq.w	sl, [r0, #39]	; 0x27
    1972:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1976:	bf18      	it	ne
    1978:	f880 9001 	strbne.w	r9, [r0, #1]
    197c:	4632      	mov	r2, r6
    197e:	4649      	mov	r1, r9
    1980:	f05f 0003 	movs.w	r0, #3
    1984:	f7ff fb4e 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1988:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    198c:	f890 7027 	ldrb.w	r7, [r0, #39]	; 0x27
    1990:	b125      	cbz	r5, 199c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    1992:	2100      	movs	r1, #0
    1994:	f240 7079 	movw	r0, #1913	; 0x779
    1998:	f3af 8000 	nop.w
    199c:	484f      	ldr	r0, [pc, #316]	; (1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    199e:	2800      	cmp	r0, #0
    19a0:	bf18      	it	ne
    19a2:	f3af 8000 	nopne.w
    19a6:	f3ef 8910 	mrs	r9, PRIMASK
    19aa:	b672      	cpsid	i
    19ac:	b125      	cbz	r5, 19b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    19ae:	2100      	movs	r1, #0
    19b0:	f240 707f 	movw	r0, #1919	; 0x77f
    19b4:	f3af 8000 	nop.w
    19b8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    19bc:	2800      	cmp	r0, #0
    19be:	f47f aec7 	bne.w	1750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    19c2:	b125      	cbz	r5, 19ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    19c4:	2100      	movs	r1, #0
    19c6:	f240 7087 	movw	r0, #1927	; 0x787
    19ca:	f3af 8000 	nop.w
    19ce:	f10d 0e04 	add.w	lr, sp, #4
    19d2:	f1ba 0f00 	cmp.w	sl, #0
    19d6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    19da:	f100 0004 	add.w	r0, r0, #4
    19de:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    19e2:	d041      	beq.n	1a68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ac>
    19e4:	b125      	cbz	r5, 19f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    19e6:	2100      	movs	r1, #0
    19e8:	f240 7094 	movw	r0, #1940	; 0x794
    19ec:	f3af 8000 	nop.w
    19f0:	f1bb 0f00 	cmp.w	fp, #0
    19f4:	d12b      	bne.n	1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    19f6:	e015      	b.n	1a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    19f8:	4632      	mov	r2, r6
    19fa:	4649      	mov	r1, r9
    19fc:	2004      	movs	r0, #4
    19fe:	f7ff fb11 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1a02:	f04f 0a01 	mov.w	sl, #1
    1a06:	e7bf      	b.n	1988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1a08:	4632      	mov	r2, r6
    1a0a:	4649      	mov	r1, r9
    1a0c:	2004      	movs	r0, #4
    1a0e:	e7b9      	b.n	1984 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>
    1a10:	2920      	cmp	r1, #32
    1a12:	bf19      	ittee	ne
    1a14:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1a18:	7840      	ldrbne	r0, [r0, #1]
    1a1a:	eb04 0086 	addeq.w	r0, r4, r6, lsl #2
    1a1e:	f890 0024 	ldrbeq.w	r0, [r0, #36]	; 0x24
    1a22:	e799      	b.n	1958 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29c>
    1a24:	b19f      	cbz	r7, 1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1a26:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1a2a:	2820      	cmp	r0, #32
    1a2c:	d10f      	bne.n	1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1a2e:	b125      	cbz	r5, 1a3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    1a30:	2100      	movs	r1, #0
    1a32:	f240 7099 	movw	r0, #1945	; 0x799
    1a36:	f3af 8000 	nop.w
    1a3a:	4631      	mov	r1, r6
    1a3c:	2002      	movs	r0, #2
    1a3e:	f7ff fb21 	bl	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    1a42:	b920      	cbnz	r0, 1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1a44:	f898 0000 	ldrb.w	r0, [r8]
    1a48:	b3b8      	cbz	r0, 1aba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fe>
    1a4a:	2801      	cmp	r0, #1
    1a4c:	d05d      	beq.n	1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44e>
    1a4e:	b125      	cbz	r5, 1a5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39e>
    1a50:	2100      	movs	r1, #0
    1a52:	f240 70b6 	movw	r0, #1974	; 0x7b6
    1a56:	f3af 8000 	nop.w
    1a5a:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    1a5e:	2001      	movs	r0, #1
    1a60:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    1a64:	f04f 0a01 	mov.w	sl, #1
    1a68:	b125      	cbz	r5, 1a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b8>
    1a6a:	2100      	movs	r1, #0
    1a6c:	f240 70bf 	movw	r0, #1983	; 0x7bf
    1a70:	f3af 8000 	nop.w
    1a74:	f1b9 0f00 	cmp.w	r9, #0
    1a78:	d050      	beq.n	1b1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x460>
    1a7a:	b125      	cbz	r5, 1a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ca>
    1a7c:	2100      	movs	r1, #0
    1a7e:	f240 70c3 	movw	r0, #1987	; 0x7c3
    1a82:	f3af 8000 	nop.w
    1a86:	f1ba 0f00 	cmp.w	sl, #0
    1a8a:	d011      	beq.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1a8c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    1a90:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    1a94:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    1a98:	2820      	cmp	r0, #32
    1a9a:	d009      	beq.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1a9c:	b125      	cbz	r5, 1aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    1a9e:	2100      	movs	r1, #0
    1aa0:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1aa4:	f3af 8000 	nop.w
    1aa8:	480d      	ldr	r0, [pc, #52]	; (1ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    1aaa:	7840      	ldrb	r0, [r0, #1]
    1aac:	f001 fe5e 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1ab0:	b1d5      	cbz	r5, 1ae8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42c>
    1ab2:	2100      	movs	r1, #0
    1ab4:	f240 70cf 	movw	r0, #1999	; 0x7cf
    1ab8:	e014      	b.n	1ae4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    1aba:	e019      	b.n	1af0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    1abc:	e000ed04 	.word	0xe000ed04
    1ac0:	20000dec 	.word	0x20000dec
    1ac4:	00000000 	.word	0x00000000
    1ac8:	20000aec 	.word	0x20000aec
    1acc:	00000000 	.word	0x00000000
    1ad0:	20000d6c 	.word	0x20000d6c
    1ad4:	20000012 	.word	0x20000012
    1ad8:	003fffff 	.word	0x003fffff
    1adc:	00000000 	.word	0x00000000
    1ae0:	20000010 	.word	0x20000010
    1ae4:	f3af 8000 	nop.w
    1ae8:	b017      	add	sp, #92	; 0x5c
    1aea:	4650      	mov	r0, sl
    1aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1af0:	b125      	cbz	r5, 1afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    1af2:	2100      	movs	r1, #0
    1af4:	f240 70a1 	movw	r0, #1953	; 0x7a1
    1af8:	f3af 8000 	nop.w
    1afc:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    1b00:	2004      	movs	r0, #4
    1b02:	9915      	ldr	r1, [sp, #84]	; 0x54
    1b04:	f7ff fa8e 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1b08:	e7ac      	b.n	1a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    1b0a:	2d00      	cmp	r5, #0
    1b0c:	f43f ae20 	beq.w	1750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1b10:	2100      	movs	r1, #0
    1b12:	f240 70ac 	movw	r0, #1964	; 0x7ac
    1b16:	f3af 8000 	nop.w
    1b1a:	e619      	b.n	1750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1b1c:	4803      	ldr	r0, [pc, #12]	; (1b2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x470>)
    1b1e:	2800      	cmp	r0, #0
    1b20:	bf18      	it	ne
    1b22:	f3af 8000 	nopne.w
    1b26:	b662      	cpsie	i
    1b28:	e7a7      	b.n	1a7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3be>
    1b2a:	0000      	.short	0x0000
    1b2c:	00000000 	.word	0x00000000

00001b30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b34:	4606      	mov	r6, r0
    1b36:	48e4      	ldr	r0, [pc, #912]	; (1ec8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>)
    1b38:	b095      	sub	sp, #84	; 0x54
    1b3a:	6800      	ldr	r0, [r0, #0]
    1b3c:	05c0      	lsls	r0, r0, #23
    1b3e:	0dc0      	lsrs	r0, r0, #23
    1b40:	d011      	beq.n	1b66 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    1b42:	3810      	subs	r0, #16
    1b44:	b240      	sxtb	r0, r0
    1b46:	2800      	cmp	r0, #0
    1b48:	bfb8      	it	lt
    1b4a:	f000 000f 	andlt.w	r0, r0, #15
    1b4e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1b52:	bfac      	ite	ge
    1b54:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1b58:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1b5c:	0940      	lsrs	r0, r0, #5
    1b5e:	bf08      	it	eq
    1b60:	f04f 0b01 	moveq.w	fp, #1
    1b64:	d001      	beq.n	1b6a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    1b66:	f04f 0b00 	mov.w	fp, #0
    1b6a:	7830      	ldrb	r0, [r6, #0]
    1b6c:	2800      	cmp	r0, #0
    1b6e:	f04f 0000 	mov.w	r0, #0
    1b72:	bf1c      	itt	ne
    1b74:	b015      	addne	sp, #84	; 0x54
    1b76:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b7a:	f8df 8350 	ldr.w	r8, [pc, #848]	; 1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>
    1b7e:	4dd4      	ldr	r5, [pc, #848]	; (1ed0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x184>)
    1b80:	f04f 0900 	mov.w	r9, #0
    1b84:	f8cd 0030 	str.w	r0, [sp, #48]	; 0x30
    1b88:	f1b8 0f00 	cmp.w	r8, #0
    1b8c:	d004      	beq.n	1b98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    1b8e:	2100      	movs	r1, #0
    1b90:	f240 6044 	movw	r0, #1604	; 0x644
    1b94:	f3af 8000 	nop.w
    1b98:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
    1b9c:	f885 902f 	strb.w	r9, [r5, #47]	; 0x2f
    1ba0:	f04f 0a00 	mov.w	sl, #0
    1ba4:	f1b8 0f00 	cmp.w	r8, #0
    1ba8:	d004      	beq.n	1bb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    1baa:	2100      	movs	r1, #0
    1bac:	f240 6049 	movw	r0, #1609	; 0x649
    1bb0:	f3af 8000 	nop.w
    1bb4:	f1bb 0f00 	cmp.w	fp, #0
    1bb8:	d121      	bne.n	1bfe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1bba:	463c      	mov	r4, r7
    1bbc:	2001      	movs	r0, #1
    1bbe:	ea20 0704 	bic.w	r7, r0, r4
    1bc2:	48c4      	ldr	r0, [pc, #784]	; (1ed4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>)
    1bc4:	2240      	movs	r2, #64	; 0x40
    1bc6:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    1bca:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    1bce:	f001 fe4f 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1bd2:	f1b8 0f00 	cmp.w	r8, #0
    1bd6:	d004      	beq.n	1be2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    1bd8:	2100      	movs	r1, #0
    1bda:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1bde:	f3af 8000 	nop.w
    1be2:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    1be6:	eb05 0087 	add.w	r0, r5, r7, lsl #2
    1bea:	6a49      	ldr	r1, [r1, #36]	; 0x24
    1bec:	6241      	str	r1, [r0, #36]	; 0x24
    1bee:	f1b8 0f00 	cmp.w	r8, #0
    1bf2:	d004      	beq.n	1bfe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1bf4:	2100      	movs	r1, #0
    1bf6:	f240 50bd 	movw	r0, #1469	; 0x5bd
    1bfa:	f3af 8000 	nop.w
    1bfe:	f1b8 0f00 	cmp.w	r8, #0
    1c02:	d004      	beq.n	1c0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    1c04:	2100      	movs	r1, #0
    1c06:	f240 6051 	movw	r0, #1617	; 0x651
    1c0a:	f3af 8000 	nop.w
    1c0e:	f000 fe39 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1c12:	4604      	mov	r4, r0
    1c14:	a802      	add	r0, sp, #8
    1c16:	9006      	str	r0, [sp, #24]
    1c18:	7830      	ldrb	r0, [r6, #0]
    1c1a:	2800      	cmp	r0, #0
    1c1c:	7af0      	ldrb	r0, [r6, #11]
    1c1e:	f88d 0015 	strb.w	r0, [sp, #21]
    1c22:	7ab1      	ldrb	r1, [r6, #10]
    1c24:	f88d 1014 	strb.w	r1, [sp, #20]
    1c28:	8931      	ldrh	r1, [r6, #8]
    1c2a:	f8ad 1012 	strh.w	r1, [sp, #18]
    1c2e:	9000      	str	r0, [sp, #0]
    1c30:	6873      	ldr	r3, [r6, #4]
    1c32:	d017      	beq.n	1c64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x134>
    1c34:	2200      	movs	r2, #0
    1c36:	9806      	ldr	r0, [sp, #24]
    1c38:	f7fe fbf8 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1c3c:	9401      	str	r4, [sp, #4]
    1c3e:	6828      	ldr	r0, [r5, #0]
    1c40:	aa10      	add	r2, sp, #64	; 0x40
    1c42:	a90f      	add	r1, sp, #60	; 0x3c
    1c44:	78c0      	ldrb	r0, [r0, #3]
    1c46:	9000      	str	r0, [sp, #0]
    1c48:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1c4c:	f001 f978 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1c50:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1c54:	2820      	cmp	r0, #32
    1c56:	d00a      	beq.n	1c6e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x13e>
    1c58:	6969      	ldr	r1, [r5, #20]
    1c5a:	9800      	ldr	r0, [sp, #0]
    1c5c:	4408      	add	r0, r1
    1c5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c62:	e01f      	b.n	1ca4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    1c64:	68f2      	ldr	r2, [r6, #12]
    1c66:	9806      	ldr	r0, [sp, #24]
    1c68:	f7fe fbe0 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1c6c:	e048      	b.n	1d00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d0>
    1c6e:	e9dd 1000 	ldrd	r1, r0, [sp]
    1c72:	4408      	add	r0, r1
    1c74:	1d00      	adds	r0, r0, #4
    1c76:	9007      	str	r0, [sp, #28]
    1c78:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1c7c:	b128      	cbz	r0, 1c8a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15a>
    1c7e:	f001 fc41 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c82:	b910      	cbnz	r0, 1c8a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15a>
    1c84:	9807      	ldr	r0, [sp, #28]
    1c86:	3032      	adds	r0, #50	; 0x32
    1c88:	9007      	str	r0, [sp, #28]
    1c8a:	4893      	ldr	r0, [pc, #588]	; (1ed8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>)
    1c8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1c8e:	7840      	ldrb	r0, [r0, #1]
    1c90:	4288      	cmp	r0, r1
    1c92:	bf98      	it	ls
    1c94:	9807      	ldrls	r0, [sp, #28]
    1c96:	d903      	bls.n	1ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x170>
    1c98:	1a41      	subs	r1, r0, r1
    1c9a:	9807      	ldr	r0, [sp, #28]
    1c9c:	4408      	add	r0, r1
    1c9e:	9007      	str	r0, [sp, #28]
    1ca0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ca4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1ca8:	1a89      	subs	r1, r1, r2
    1caa:	9002      	str	r0, [sp, #8]
    1cac:	4408      	add	r0, r1
    1cae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cb2:	9003      	str	r0, [sp, #12]
    1cb4:	4639      	mov	r1, r7
    1cb6:	9806      	ldr	r0, [sp, #24]
    1cb8:	f7fe fc5e 	bl	578 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12c>
    1cbc:	9409      	str	r4, [sp, #36]	; 0x24
    1cbe:	7af0      	ldrb	r0, [r6, #11]
    1cc0:	9000      	str	r0, [sp, #0]
    1cc2:	8931      	ldrh	r1, [r6, #8]
    1cc4:	a810      	add	r0, sp, #64	; 0x40
    1cc6:	6873      	ldr	r3, [r6, #4]
    1cc8:	68f2      	ldr	r2, [r6, #12]
    1cca:	f7fe fbaf 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cd0:	9802      	ldr	r0, [sp, #8]
    1cd2:	9a03      	ldr	r2, [sp, #12]
    1cd4:	1ac0      	subs	r0, r0, r3
    1cd6:	1ad2      	subs	r2, r2, r3
    1cd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cdc:	9911      	ldr	r1, [sp, #68]	; 0x44
    1cde:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1ce2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1ce6:	d201      	bcs.n	1cec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1bc>
    1ce8:	4291      	cmp	r1, r2
    1cea:	d209      	bcs.n	1d00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d0>
    1cec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1cf0:	1a89      	subs	r1, r1, r2
    1cf2:	1860      	adds	r0, r4, r1
    1cf4:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    1cf8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cfc:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1d00:	f1b8 0f00 	cmp.w	r8, #0
    1d04:	d004      	beq.n	1d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e0>
    1d06:	2100      	movs	r1, #0
    1d08:	f240 6057 	movw	r0, #1623	; 0x657
    1d0c:	f3af 8000 	nop.w
    1d10:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1d14:	2820      	cmp	r0, #32
    1d16:	d014      	beq.n	1d42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    1d18:	6968      	ldr	r0, [r5, #20]
    1d1a:	9902      	ldr	r1, [sp, #8]
    1d1c:	1a09      	subs	r1, r1, r0
    1d1e:	0209      	lsls	r1, r1, #8
    1d20:	17ca      	asrs	r2, r1, #31
    1d22:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d26:	1209      	asrs	r1, r1, #8
    1d28:	d50b      	bpl.n	1d42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    1d2a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d2e:	1a89      	subs	r1, r1, r2
    1d30:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d34:	4408      	add	r0, r1
    1d36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d3a:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1d3e:	f04f 0a01 	mov.w	sl, #1
    1d42:	f1b8 0f00 	cmp.w	r8, #0
    1d46:	d009      	beq.n	1d5c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10>
    1d48:	2100      	movs	r1, #0
    1d4a:	f240 6061 	movw	r0, #1633	; 0x661
    1d4e:	f3af 8000 	nop.w
    1d52:	2100      	movs	r1, #0
    1d54:	f240 6067 	movw	r0, #1639	; 0x667
    1d58:	f3af 8000 	nop.w
    1d5c:	9902      	ldr	r1, [sp, #8]
    1d5e:	9a03      	ldr	r2, [sp, #12]
    1d60:	1b09      	subs	r1, r1, r4
    1d62:	1b12      	subs	r2, r2, r4
    1d64:	485d      	ldr	r0, [pc, #372]	; (1edc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>)
    1d66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1d6e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1d72:	d205      	bcs.n	1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d74:	4290      	cmp	r0, r2
    1d76:	d303      	bcc.n	1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d78:	f1bb 0f00 	cmp.w	fp, #0
    1d7c:	d10a      	bne.n	1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1d7e:	e003      	b.n	1d88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d80:	f1bb 0f00 	cmp.w	fp, #0
    1d84:	d037      	beq.n	1df6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xaa>
    1d86:	e095      	b.n	1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>
    1d88:	4639      	mov	r1, r7
    1d8a:	a802      	add	r0, sp, #8
    1d8c:	f7fe fbf4 	bl	578 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12c>
    1d90:	ea4a 0a00 	orr.w	sl, sl, r0
    1d94:	f1ba 0f00 	cmp.w	sl, #0
    1d98:	d021      	beq.n	1dde <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x92>
    1d9a:	9802      	ldr	r0, [sp, #8]
    1d9c:	f00c fce6 	bl	e76c <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1da0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    1da4:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1da8:	4c4d      	ldr	r4, [pc, #308]	; (1ee0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>)
    1daa:	4411      	add	r1, r2
    1dac:	1cc9      	adds	r1, r1, #3
    1dae:	1842      	adds	r2, r0, r1
    1db0:	f04f 0c00 	mov.w	ip, #0
    1db4:	1a20      	subs	r0, r4, r0
    1db6:	eb7c 0009 	sbcs.w	r0, ip, r9
    1dba:	d344      	bcc.n	1e46 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfa>
    1dbc:	4849      	ldr	r0, [pc, #292]	; (1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1dbe:	4281      	cmp	r1, r0
    1dc0:	dc5d      	bgt.n	1e7e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x132>
    1dc2:	4240      	negs	r0, r0
    1dc4:	4281      	cmp	r1, r0
    1dc6:	db62      	blt.n	1e8e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x142>
    1dc8:	1c60      	adds	r0, r4, #1
    1dca:	4282      	cmp	r2, r0
    1dcc:	bfa8      	it	ge
    1dce:	4846      	ldrge	r0, [pc, #280]	; (1ee8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1dd0:	da03      	bge.n	1dda <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8e>
    1dd2:	2a00      	cmp	r2, #0
    1dd4:	bfb8      	it	lt
    1dd6:	4845      	ldrlt	r0, [pc, #276]	; (1eec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>)
    1dd8:	da00      	bge.n	1ddc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1dda:	1812      	adds	r2, r2, r0
    1ddc:	60f2      	str	r2, [r6, #12]
    1dde:	f04f 0001 	mov.w	r0, #1
    1de2:	900c      	str	r0, [sp, #48]	; 0x30
    1de4:	f1b8 0f00 	cmp.w	r8, #0
    1de8:	d064      	beq.n	1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>
    1dea:	2100      	movs	r1, #0
    1dec:	f240 607a 	movw	r0, #1658	; 0x67a
    1df0:	f3af 8000 	nop.w
    1df4:	e05e      	b.n	1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>
    1df6:	6828      	ldr	r0, [r5, #0]
    1df8:	4627      	mov	r7, r4
    1dfa:	aa08      	add	r2, sp, #32
    1dfc:	78c4      	ldrb	r4, [r0, #3]
    1dfe:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1e02:	a907      	add	r1, sp, #28
    1e04:	f001 f89c 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1e08:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1e0c:	2820      	cmp	r0, #32
    1e0e:	d01f      	beq.n	1e50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>
    1e10:	6968      	ldr	r0, [r5, #20]
    1e12:	4420      	add	r0, r4
    1e14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e18:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1e1c:	1a89      	subs	r1, r1, r2
    1e1e:	4401      	add	r1, r0
    1e20:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1e28:	f00c fca0 	bl	e76c <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1e2c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    1e30:	f99d 1010 	ldrsb.w	r1, [sp, #16]
    1e34:	4c2a      	ldr	r4, [pc, #168]	; (1ee0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>)
    1e36:	4411      	add	r1, r2
    1e38:	1cc9      	adds	r1, r1, #3
    1e3a:	1842      	adds	r2, r0, r1
    1e3c:	2300      	movs	r3, #0
    1e3e:	1a20      	subs	r0, r4, r0
    1e40:	eb73 0009 	sbcs.w	r0, r3, r9
    1e44:	d218      	bcs.n	1e78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>
    1e46:	f240 51f5 	movw	r1, #1525	; 0x5f5
    1e4a:	2070      	movs	r0, #112	; 0x70
    1e4c:	f001 fbbe 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e50:	1938      	adds	r0, r7, r4
    1e52:	1d04      	adds	r4, r0, #4
    1e54:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1e58:	b120      	cbz	r0, 1e64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1e5a:	f001 fb53 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e5e:	2800      	cmp	r0, #0
    1e60:	bf08      	it	eq
    1e62:	3432      	addeq	r4, #50	; 0x32
    1e64:	481c      	ldr	r0, [pc, #112]	; (1ed8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>)
    1e66:	9907      	ldr	r1, [sp, #28]
    1e68:	7840      	ldrb	r0, [r0, #1]
    1e6a:	4288      	cmp	r0, r1
    1e6c:	bf84      	itt	hi
    1e6e:	1a40      	subhi	r0, r0, r1
    1e70:	4404      	addhi	r4, r0
    1e72:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    1e76:	e7cf      	b.n	1e18 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1e78:	481a      	ldr	r0, [pc, #104]	; (1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1e7a:	4281      	cmp	r1, r0
    1e7c:	dd04      	ble.n	1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e7e:	f240 51f6 	movw	r1, #1526	; 0x5f6
    1e82:	2070      	movs	r0, #112	; 0x70
    1e84:	f001 fba2 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e88:	4819      	ldr	r0, [pc, #100]	; (1ef0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a4>)
    1e8a:	4281      	cmp	r1, r0
    1e8c:	da04      	bge.n	1e98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e8e:	f240 51f7 	movw	r1, #1527	; 0x5f7
    1e92:	2070      	movs	r0, #112	; 0x70
    1e94:	f001 fb9a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e98:	4814      	ldr	r0, [pc, #80]	; (1eec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>)
    1e9a:	4282      	cmp	r2, r0
    1e9c:	bfa8      	it	ge
    1e9e:	4812      	ldrge	r0, [pc, #72]	; (1ee8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1ea0:	da03      	bge.n	1eaa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15e>
    1ea2:	2a00      	cmp	r2, #0
    1ea4:	bfb8      	it	lt
    1ea6:	4811      	ldrlt	r0, [pc, #68]	; (1eec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>)
    1ea8:	da00      	bge.n	1eac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>
    1eaa:	1812      	adds	r2, r2, r0
    1eac:	f04f 0001 	mov.w	r0, #1
    1eb0:	60f2      	str	r2, [r6, #12]
    1eb2:	900c      	str	r0, [sp, #48]	; 0x30
    1eb4:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1eb8:	2800      	cmp	r0, #0
    1eba:	f47f ae65 	bne.w	1b88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1ebe:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ec0:	b015      	add	sp, #84	; 0x54
    1ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ec6:	0000      	.short	0x0000
    1ec8:	e000ed04 	.word	0xe000ed04
    1ecc:	00000000 	.word	0x00000000
    1ed0:	20000dec 	.word	0x20000dec
    1ed4:	20000d6c 	.word	0x20000d6c
    1ed8:	20000012 	.word	0x20000012
    1edc:	003fffff 	.word	0x003fffff
    1ee0:	1e847fff 	.word	0x1e847fff
    1ee4:	07a12000 	.word	0x07a12000
    1ee8:	e17b8000 	.word	0xe17b8000
    1eec:	1e848000 	.word	0x1e848000
    1ef0:	f85ee000 	.word	0xf85ee000

00001ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1ef4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ef8:	4d80      	ldr	r5, [pc, #512]	; (20fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    1efa:	b08c      	sub	sp, #48	; 0x30
    1efc:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    1f00:	2000      	movs	r0, #0
    1f02:	9009      	str	r0, [sp, #36]	; 0x24
    1f04:	2001      	movs	r0, #1
    1f06:	4c7e      	ldr	r4, [pc, #504]	; (2100 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    1f08:	f04f 0800 	mov.w	r8, #0
    1f0c:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1f10:	4683      	mov	fp, r0
    1f12:	9008      	str	r0, [sp, #32]
    1f14:	b124      	cbz	r4, 1f20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1f16:	2100      	movs	r1, #0
    1f18:	f240 70de 	movw	r0, #2014	; 0x7de
    1f1c:	f3af 8000 	nop.w
    1f20:	9808      	ldr	r0, [sp, #32]
    1f22:	b390      	cbz	r0, 1f8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1f24:	f885 802f 	strb.w	r8, [r5, #47]	; 0x2f
    1f28:	b124      	cbz	r4, 1f34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1f2a:	2100      	movs	r1, #0
    1f2c:	f240 70e3 	movw	r0, #2019	; 0x7e3
    1f30:	f3af 8000 	nop.w
    1f34:	f895 9032 	ldrb.w	r9, [r5, #50]	; 0x32
    1f38:	2240      	movs	r2, #64	; 0x40
    1f3a:	ea2b 0609 	bic.w	r6, fp, r9
    1f3e:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f42:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1f46:	4682      	mov	sl, r0
    1f48:	f001 fc92 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f4c:	b124      	cbz	r4, 1f58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1f4e:	2100      	movs	r1, #0
    1f50:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1f54:	f3af 8000 	nop.w
    1f58:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f5c:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1f60:	9000      	str	r0, [sp, #0]
    1f62:	6a49      	ldr	r1, [r1, #36]	; 0x24
    1f64:	6241      	str	r1, [r0, #36]	; 0x24
    1f66:	b124      	cbz	r4, 1f72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1f68:	2100      	movs	r1, #0
    1f6a:	f240 50bd 	movw	r0, #1469	; 0x5bd
    1f6e:	f3af 8000 	nop.w
    1f72:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1f76:	b180      	cbz	r0, 1f9a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1f78:	2c00      	cmp	r4, #0
    1f7a:	bf1c      	itt	ne
    1f7c:	2100      	movne	r1, #0
    1f7e:	f240 70e9 	movwne	r0, #2025	; 0x7e9
    1f82:	d0c7      	beq.n	1f14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f84:	f3af 8000 	nop.w
    1f88:	e7c4      	b.n	1f14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f8a:	e7ff      	b.n	1f8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1f8c:	485d      	ldr	r0, [pc, #372]	; (2104 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1f8e:	2800      	cmp	r0, #0
    1f90:	bf18      	it	ne
    1f92:	f3af 8000 	nopne.w
    1f96:	b662      	cpsie	i
    1f98:	e7c4      	b.n	1f24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1f9a:	b124      	cbz	r4, 1fa6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1f9c:	2100      	movs	r1, #0
    1f9e:	f240 70ed 	movw	r0, #2029	; 0x7ed
    1fa2:	f3af 8000 	nop.w
    1fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
    1fa8:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1fac:	2803      	cmp	r0, #3
    1fae:	d178      	bne.n	20a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1fb0:	f8dd 9000 	ldr.w	r9, [sp]
    1fb4:	f8cd 9018 	str.w	r9, [sp, #24]
    1fb8:	990c      	ldr	r1, [sp, #48]	; 0x30
    1fba:	f899 0024 	ldrb.w	r0, [r9, #36]	; 0x24
    1fbe:	4288      	cmp	r0, r1
    1fc0:	bf14      	ite	ne
    1fc2:	f04f 0a00 	movne.w	sl, #0
    1fc6:	f04f 0a01 	moveq.w	sl, #1
    1fca:	f109 0c24 	add.w	ip, r9, #36	; 0x24
    1fce:	4686      	mov	lr, r0
    1fd0:	2220      	movs	r2, #32
    1fd2:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1fd6:	e003      	b.n	1fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1fd8:	4602      	mov	r2, r0
    1fda:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1fde:	7840      	ldrb	r0, [r0, #1]
    1fe0:	4288      	cmp	r0, r1
    1fe2:	d002      	beq.n	1fea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1fe4:	2820      	cmp	r0, #32
    1fe6:	d00a      	beq.n	1ffe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fe8:	e7f6      	b.n	1fd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1fea:	2820      	cmp	r0, #32
    1fec:	d007      	beq.n	1ffe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fee:	4586      	cmp	lr, r0
    1ff0:	d107      	bne.n	2002 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1ff2:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1ff6:	7840      	ldrb	r0, [r0, #1]
    1ff8:	f88c 0000 	strb.w	r0, [ip]
    1ffc:	e007      	b.n	200e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    1ffe:	4640      	mov	r0, r8
    2000:	e00c      	b.n	201c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    2002:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2006:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    200a:	7840      	ldrb	r0, [r0, #1]
    200c:	7048      	strb	r0, [r1, #1]
    200e:	b124      	cbz	r4, 201a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    2010:	2100      	movs	r1, #0
    2012:	f240 503e 	movw	r0, #1342	; 0x53e
    2016:	f3af 8000 	nop.w
    201a:	4658      	mov	r0, fp
    201c:	ea10 0f0a 	tst.w	r0, sl
    2020:	bf18      	it	ne
    2022:	f889 b027 	strbne.w	fp, [r9, #39]	; 0x27
    2026:	b3e0      	cbz	r0, 20a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2028:	b124      	cbz	r4, 2034 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    202a:	2100      	movs	r1, #0
    202c:	f240 70f2 	movw	r0, #2034	; 0x7f2
    2030:	f3af 8000 	nop.w
    2034:	4632      	mov	r2, r6
    2036:	2001      	movs	r0, #1
    2038:	990c      	ldr	r1, [sp, #48]	; 0x30
    203a:	f7fe fff3 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    203e:	9806      	ldr	r0, [sp, #24]
    2040:	f890 9027 	ldrb.w	r9, [r0, #39]	; 0x27
    2044:	b124      	cbz	r4, 2050 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    2046:	2100      	movs	r1, #0
    2048:	f240 70fd 	movw	r0, #2045	; 0x7fd
    204c:	f3af 8000 	nop.w
    2050:	482d      	ldr	r0, [pc, #180]	; (2108 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    2052:	2800      	cmp	r0, #0
    2054:	bf18      	it	ne
    2056:	f3af 8000 	nopne.w
    205a:	f3ef 8010 	mrs	r0, PRIMASK
    205e:	b672      	cpsid	i
    2060:	9008      	str	r0, [sp, #32]
    2062:	b124      	cbz	r4, 206e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    2064:	2100      	movs	r1, #0
    2066:	f640 0002 	movw	r0, #2050	; 0x802
    206a:	f3af 8000 	nop.w
    206e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2072:	b138      	cbz	r0, 2084 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    2074:	2c00      	cmp	r4, #0
    2076:	bf1c      	itt	ne
    2078:	2100      	movne	r1, #0
    207a:	f640 0006 	movwne	r0, #2054	; 0x806
    207e:	f43f af49 	beq.w	1f14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2082:	e77f      	b.n	1f84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    2084:	f1b9 0f00 	cmp.w	r9, #0
    2088:	d008      	beq.n	209c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    208a:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    208e:	2820      	cmp	r0, #32
    2090:	d104      	bne.n	209c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2092:	4631      	mov	r1, r6
    2094:	2002      	movs	r0, #2
    2096:	f7fe fff5 	bl	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    209a:	b1f8      	cbz	r0, 20dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    209c:	b134      	cbz	r4, 20ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    209e:	2100      	movs	r1, #0
    20a0:	e000      	b.n	20a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    20a2:	e009      	b.n	20b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    20a4:	f640 001a 	movw	r0, #2074	; 0x81a
    20a8:	f3af 8000 	nop.w
    20ac:	f885 6032 	strb.w	r6, [r5, #50]	; 0x32
    20b0:	f885 b02f 	strb.w	fp, [r5, #47]	; 0x2f
    20b4:	2001      	movs	r0, #1
    20b6:	9009      	str	r0, [sp, #36]	; 0x24
    20b8:	b124      	cbz	r4, 20c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    20ba:	2100      	movs	r1, #0
    20bc:	f640 0023 	movw	r0, #2083	; 0x823
    20c0:	f3af 8000 	nop.w
    20c4:	9808      	ldr	r0, [sp, #32]
    20c6:	b188      	cbz	r0, 20ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    20c8:	b124      	cbz	r4, 20d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    20ca:	2100      	movs	r1, #0
    20cc:	f640 0027 	movw	r0, #2087	; 0x827
    20d0:	f3af 8000 	nop.w
    20d4:	9809      	ldr	r0, [sp, #36]	; 0x24
    20d6:	b00d      	add	sp, #52	; 0x34
    20d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20dc:	2c00      	cmp	r4, #0
    20de:	d0f1      	beq.n	20c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    20e0:	2100      	movs	r1, #0
    20e2:	f640 0015 	movw	r0, #2069	; 0x815
    20e6:	f3af 8000 	nop.w
    20ea:	e7e6      	b.n	20ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    20ec:	4805      	ldr	r0, [pc, #20]	; (2104 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    20ee:	2800      	cmp	r0, #0
    20f0:	bf18      	it	ne
    20f2:	f3af 8000 	nopne.w
    20f6:	b662      	cpsie	i
    20f8:	e7e6      	b.n	20c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    20fa:	0000      	.short	0x0000
    20fc:	20000dec 	.word	0x20000dec
	...

0000210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    210c:	b510      	push	{r4, lr}
    210e:	2820      	cmp	r0, #32
    2110:	d211      	bcs.n	2136 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2112:	490e      	ldr	r1, [pc, #56]	; (214c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2114:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    2118:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    211c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2120:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2124:	b13b      	cbz	r3, 2136 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2126:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    212a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    212e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2132:	2a01      	cmp	r2, #1
    2134:	d001      	beq.n	213a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2136:	2000      	movs	r0, #0
    2138:	bd10      	pop	{r4, pc}
    213a:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    213e:	4601      	mov	r1, r0
    2140:	2000      	movs	r0, #0
    2142:	f7fe ff6f 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    2146:	2001      	movs	r0, #1
    2148:	bd10      	pop	{r4, pc}
    214a:	0000      	.short	0x0000
    214c:	20000dec 	.word	0x20000dec

00002150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2150:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2154:	4e7e      	ldr	r6, [pc, #504]	; (2350 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2156:	4680      	mov	r8, r0
    2158:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    215c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2160:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2164:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2168:	2800      	cmp	r0, #0
    216a:	d065      	beq.n	2238 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    216c:	f896 9032 	ldrb.w	r9, [r6, #50]	; 0x32
    2170:	4d78      	ldr	r5, [pc, #480]	; (2354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    2172:	b125      	cbz	r5, 217e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2174:	2100      	movs	r1, #0
    2176:	f640 30b3 	movw	r0, #2995	; 0xbb3
    217a:	f3af 8000 	nop.w
    217e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2182:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2186:	2801      	cmp	r0, #1
    2188:	d018      	beq.n	21bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    218a:	b2c0      	uxtb	r0, r0
    218c:	2804      	cmp	r0, #4
    218e:	bf1c      	itt	ne
    2190:	2805      	cmpne	r0, #5
    2192:	2806      	cmpne	r0, #6
    2194:	d055      	beq.n	2242 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2196:	b12d      	cbz	r5, 21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2198:	f04f 0100 	mov.w	r1, #0
    219c:	f640 30bf 	movw	r0, #3007	; 0xbbf
    21a0:	f3af 8000 	nop.w
    21a4:	f001 fb34 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    21a8:	b125      	cbz	r5, 21b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    21aa:	2100      	movs	r1, #0
    21ac:	f640 30c3 	movw	r0, #3011	; 0xbc3
    21b0:	f3af 8000 	nop.w
    21b4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21b8:	2801      	cmp	r0, #1
    21ba:	d1e6      	bne.n	218a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    21bc:	2401      	movs	r4, #1
    21be:	b125      	cbz	r5, 21ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    21c0:	2100      	movs	r1, #0
    21c2:	f640 30ca 	movw	r0, #3018	; 0xbca
    21c6:	f3af 8000 	nop.w
    21ca:	b3a4      	cbz	r4, 2236 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    21cc:	2000      	movs	r0, #0
    21ce:	f886 002f 	strb.w	r0, [r6, #47]	; 0x2f
    21d2:	b125      	cbz	r5, 21de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    21d4:	2100      	movs	r1, #0
    21d6:	f640 30cf 	movw	r0, #3023	; 0xbcf
    21da:	f3af 8000 	nop.w
    21de:	f896 b032 	ldrb.w	fp, [r6, #50]	; 0x32
    21e2:	2001      	movs	r0, #1
    21e4:	ea20 090b 	bic.w	r9, r0, fp
    21e8:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21ec:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21f0:	2240      	movs	r2, #64	; 0x40
    21f2:	f001 fb3d 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21f6:	b125      	cbz	r5, 2202 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    21f8:	2100      	movs	r1, #0
    21fa:	f240 50b9 	movw	r0, #1465	; 0x5b9
    21fe:	f3af 8000 	nop.w
    2202:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2206:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    220a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    220c:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    2210:	b125      	cbz	r5, 221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    2212:	2100      	movs	r1, #0
    2214:	f240 50bd 	movw	r0, #1469	; 0x5bd
    2218:	f3af 8000 	nop.w
    221c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2220:	b1e0      	cbz	r0, 225c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    2222:	2d00      	cmp	r5, #0
    2224:	bf1c      	itt	ne
    2226:	2100      	movne	r1, #0
    2228:	f640 30d5 	movwne	r0, #3029	; 0xbd5
    222c:	d0c7      	beq.n	21be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    222e:	bf00      	nop
    2230:	f3af 8000 	nop.w
    2234:	e7c3      	b.n	21be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2236:	e00a      	b.n	224e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2238:	f640 31aa 	movw	r1, #2986	; 0xbaa
    223c:	2070      	movs	r0, #112	; 0x70
    223e:	f001 f9c5 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2242:	464a      	mov	r2, r9
    2244:	4641      	mov	r1, r8
    2246:	2001      	movs	r0, #1
    2248:	f7fe feec 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    224c:	e7ac      	b.n	21a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    224e:	4842      	ldr	r0, [pc, #264]	; (2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2250:	2800      	cmp	r0, #0
    2252:	bf18      	it	ne
    2254:	f3af 8000 	nopne.w
    2258:	b662      	cpsie	i
    225a:	e7b7      	b.n	21cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    225c:	b125      	cbz	r5, 2268 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    225e:	2100      	movs	r1, #0
    2260:	f640 30d9 	movw	r0, #3033	; 0xbd9
    2264:	f3af 8000 	nop.w
    2268:	f89a 3025 	ldrb.w	r3, [sl, #37]	; 0x25
    226c:	f10a 0125 	add.w	r1, sl, #37	; 0x25
    2270:	4640      	mov	r0, r8
    2272:	461c      	mov	r4, r3
    2274:	f04f 0b20 	mov.w	fp, #32
    2278:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    227c:	f10a 0a26 	add.w	sl, sl, #38	; 0x26
    2280:	e004      	b.n	228c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    2282:	46a3      	mov	fp, r4
    2284:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2288:	f89c 4001 	ldrb.w	r4, [ip, #1]
    228c:	4284      	cmp	r4, r0
    228e:	d002      	beq.n	2296 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2290:	2c20      	cmp	r4, #32
    2292:	d02b      	beq.n	22ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2294:	e7f5      	b.n	2282 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2296:	2c20      	cmp	r4, #32
    2298:	d028      	beq.n	22ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    229a:	42a3      	cmp	r3, r4
    229c:	d104      	bne.n	22a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    229e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    22a2:	7840      	ldrb	r0, [r0, #1]
    22a4:	7008      	strb	r0, [r1, #0]
    22a6:	e005      	b.n	22b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    22a8:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    22ac:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    22b0:	7840      	ldrb	r0, [r0, #1]
    22b2:	7048      	strb	r0, [r1, #1]
    22b4:	f1ba 0f00 	cmp.w	sl, #0
    22b8:	d011      	beq.n	22de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22ba:	b125      	cbz	r5, 22c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    22bc:	2100      	movs	r1, #0
    22be:	f240 5036 	movw	r0, #1334	; 0x536
    22c2:	f3af 8000 	nop.w
    22c6:	f89a 0000 	ldrb.w	r0, [sl]
    22ca:	42a0      	cmp	r0, r4
    22cc:	d107      	bne.n	22de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22ce:	b125      	cbz	r5, 22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    22d0:	2100      	movs	r1, #0
    22d2:	f240 5039 	movw	r0, #1337	; 0x539
    22d6:	f3af 8000 	nop.w
    22da:	f88a b000 	strb.w	fp, [sl]
    22de:	b15d      	cbz	r5, 22f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22e0:	2100      	movs	r1, #0
    22e2:	f240 503e 	movw	r0, #1342	; 0x53e
    22e6:	f3af 8000 	nop.w
    22ea:	e000      	b.n	22ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    22ec:	b125      	cbz	r5, 22f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22ee:	2100      	movs	r1, #0
    22f0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    22f4:	f3af 8000 	nop.w
    22f8:	4818      	ldr	r0, [pc, #96]	; (235c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    22fa:	2800      	cmp	r0, #0
    22fc:	bf18      	it	ne
    22fe:	f3af 8000 	nopne.w
    2302:	f3ef 8410 	mrs	r4, PRIMASK
    2306:	b672      	cpsid	i
    2308:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    230c:	b138      	cbz	r0, 231e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    230e:	2d00      	cmp	r5, #0
    2310:	bf1c      	itt	ne
    2312:	2100      	movne	r1, #0
    2314:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2318:	f43f af51 	beq.w	21be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    231c:	e788      	b.n	2230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    231e:	f886 9032 	strb.w	r9, [r6, #50]	; 0x32
    2322:	2001      	movs	r0, #1
    2324:	f886 002f 	strb.w	r0, [r6, #47]	; 0x2f
    2328:	b154      	cbz	r4, 2340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    232a:	2d00      	cmp	r5, #0
    232c:	bf08      	it	eq
    232e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2332:	2100      	movs	r1, #0
    2334:	f44f 603f 	mov.w	r0, #3056	; 0xbf0
    2338:	f3af 8000 	nop.w
    233c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2340:	4805      	ldr	r0, [pc, #20]	; (2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2342:	2800      	cmp	r0, #0
    2344:	bf18      	it	ne
    2346:	f3af 8000 	nopne.w
    234a:	b662      	cpsie	i
    234c:	e7ed      	b.n	232a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    234e:	0000      	.short	0x0000
    2350:	20000dec 	.word	0x20000dec
	...

00002360 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2360:	4603      	mov	r3, r0
    2362:	480e      	ldr	r0, [pc, #56]	; (239c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x3c>)
    2364:	b510      	push	{r4, lr}
    2366:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    236a:	2400      	movs	r4, #0
    236c:	3880      	subs	r0, #128	; 0x80
    236e:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2372:	bf00      	nop
    2374:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2378:	b129      	cbz	r1, 2386 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x26>
    237a:	1c61      	adds	r1, r4, #1
    237c:	b2cc      	uxtb	r4, r1
    237e:	2c20      	cmp	r4, #32
    2380:	d3f8      	bcc.n	2374 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x14>
    2382:	2020      	movs	r0, #32
    2384:	bd10      	pop	{r4, pc}
    2386:	4906      	ldr	r1, [pc, #24]	; (23a0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    2388:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    238c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    2390:	4621      	mov	r1, r4
    2392:	2001      	movs	r0, #1
    2394:	f7fe fe46 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    2398:	4620      	mov	r0, r4
    239a:	bd10      	pop	{r4, pc}
    239c:	20000dec 	.word	0x20000dec
    23a0:	20000aec 	.word	0x20000aec

000023a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    23a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23a8:	f000 fa6c 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    23ac:	4605      	mov	r5, r0
    23ae:	f000 fd13 	bl	2dd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    23b2:	4c44      	ldr	r4, [pc, #272]	; (24c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>)
    23b4:	68e0      	ldr	r0, [r4, #12]
    23b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    23ba:	bf1c      	itt	ne
    23bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    23c0:	60e0      	strne	r0, [r4, #12]
    23c2:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    23c6:	b9c8      	cbnz	r0, 23fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    23c8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    23cc:	1a08      	subs	r0, r1, r0
    23ce:	0200      	lsls	r0, r0, #8
    23d0:	17c1      	asrs	r1, r0, #31
    23d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23d6:	1200      	asrs	r0, r0, #8
    23d8:	f44f 710c 	mov.w	r1, #560	; 0x230
    23dc:	f00c f9f3 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23e0:	6961      	ldr	r1, [r4, #20]
    23e2:	4401      	add	r1, r0
    23e4:	1a68      	subs	r0, r5, r1
    23e6:	0200      	lsls	r0, r0, #8
    23e8:	17c1      	asrs	r1, r0, #31
    23ea:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23ee:	1200      	asrs	r0, r0, #8
    23f0:	d404      	bmi.n	23fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    23f2:	f240 414d 	movw	r1, #1101	; 0x44d
    23f6:	2070      	movs	r0, #112	; 0x70
    23f8:	f001 f8e8 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23fc:	7f60      	ldrb	r0, [r4, #29]
    23fe:	b148      	cbz	r0, 2414 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    2400:	f000 fb4c 	bl	2a9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2404:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    2408:	b150      	cbz	r0, 2420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    240a:	f240 415e 	movw	r1, #1118	; 0x45e
    240e:	2070      	movs	r0, #112	; 0x70
    2410:	f001 f8dc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2414:	1ce8      	adds	r0, r5, #3
    2416:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    241a:	f000 fa39 	bl	2890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    241e:	e7f1      	b.n	2404 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    2420:	2701      	movs	r7, #1
    2422:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    2426:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    242a:	2820      	cmp	r0, #32
    242c:	d026      	beq.n	247c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xd8>
    242e:	f894 8033 	ldrb.w	r8, [r4, #51]	; 0x33
    2432:	2020      	movs	r0, #32
    2434:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    2438:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    243c:	2600      	movs	r6, #0
    243e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2442:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    2446:	4820      	ldr	r0, [pc, #128]	; (24c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x124>)
    2448:	6066      	str	r6, [r4, #4]
    244a:	7800      	ldrb	r0, [r0, #0]
    244c:	2802      	cmp	r0, #2
    244e:	bf16      	itet	ne
    2450:	2803      	cmpne	r0, #3
    2452:	2001      	moveq	r0, #1
    2454:	2000      	movne	r0, #0
    2456:	f884 0020 	strb.w	r0, [r4, #32]
    245a:	f894 5032 	ldrb.w	r5, [r4, #50]	; 0x32
    245e:	f04f 0001 	mov.w	r0, #1
    2462:	4629      	mov	r1, r5
    2464:	f7fe fe0e 	bl	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    2468:	2800      	cmp	r0, #0
    246a:	d0f8      	beq.n	245e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xba>
    246c:	4817      	ldr	r0, [pc, #92]	; (24cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x128>)
    246e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    2472:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2476:	2802      	cmp	r0, #2
    2478:	d005      	beq.n	2486 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xe2>
    247a:	e009      	b.n	2490 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xec>
    247c:	f240 4161 	movw	r1, #1121	; 0x461
    2480:	2070      	movs	r0, #112	; 0x70
    2482:	f001 f8a3 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2486:	462a      	mov	r2, r5
    2488:	4641      	mov	r1, r8
    248a:	2006      	movs	r0, #6
    248c:	f7fe fdca 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    2490:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    2494:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    2498:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    249c:	2820      	cmp	r0, #32
    249e:	d003      	beq.n	24a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    24a0:	480b      	ldr	r0, [pc, #44]	; (24d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>)
    24a2:	7840      	ldrb	r0, [r0, #1]
    24a4:	f001 f962 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24a8:	f894 0020 	ldrb.w	r0, [r4, #32]
    24ac:	2800      	cmp	r0, #0
    24ae:	bf08      	it	eq
    24b0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    24b4:	f000 fcda 	bl	2e6c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    24b8:	f884 6020 	strb.w	r6, [r4, #32]
    24bc:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    24c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24c4:	20000dec 	.word	0x20000dec
    24c8:	20000012 	.word	0x20000012
    24cc:	20000d6c 	.word	0x20000d6c
    24d0:	20000010 	.word	0x20000010

000024d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    24d4:	b530      	push	{r4, r5, lr}
    24d6:	4c30      	ldr	r4, [pc, #192]	; (2598 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    24d8:	b083      	sub	sp, #12
    24da:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    24de:	2920      	cmp	r1, #32
    24e0:	d008      	beq.n	24f4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    24e2:	68e1      	ldr	r1, [r4, #12]
    24e4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    24e8:	d009      	beq.n	24fe <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    24ea:	f640 21d1 	movw	r1, #2769	; 0xad1
    24ee:	2070      	movs	r0, #112	; 0x70
    24f0:	f001 f86c 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24f4:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    24f8:	2070      	movs	r0, #112	; 0x70
    24fa:	f001 f867 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fe:	68a1      	ldr	r1, [r4, #8]
    2500:	f8df c098 	ldr.w	ip, [pc, #152]	; 259c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    2504:	180b      	adds	r3, r1, r0
    2506:	2200      	movs	r2, #0
    2508:	ebbc 0101 	subs.w	r1, ip, r1
    250c:	eb72 0102 	sbcs.w	r1, r2, r2
    2510:	d204      	bcs.n	251c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    2512:	f240 51f5 	movw	r1, #1525	; 0x5f5
    2516:	2070      	movs	r0, #112	; 0x70
    2518:	f001 f858 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    251c:	4920      	ldr	r1, [pc, #128]	; (25a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    251e:	4288      	cmp	r0, r1
    2520:	dd04      	ble.n	252c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    2522:	f240 51f6 	movw	r1, #1526	; 0x5f6
    2526:	2070      	movs	r0, #112	; 0x70
    2528:	f001 f850 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    252c:	491d      	ldr	r1, [pc, #116]	; (25a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    252e:	4288      	cmp	r0, r1
    2530:	da04      	bge.n	253c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    2532:	f240 51f7 	movw	r1, #1527	; 0x5f7
    2536:	2070      	movs	r0, #112	; 0x70
    2538:	f001 f848 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    253c:	481a      	ldr	r0, [pc, #104]	; (25a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    253e:	4283      	cmp	r3, r0
    2540:	bfa8      	it	ge
    2542:	481a      	ldrge	r0, [pc, #104]	; (25ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2544:	da03      	bge.n	254e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    2546:	2b00      	cmp	r3, #0
    2548:	bfb8      	it	lt
    254a:	4817      	ldrlt	r0, [pc, #92]	; (25a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    254c:	da00      	bge.n	2550 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    254e:	181b      	adds	r3, r3, r0
    2550:	4618      	mov	r0, r3
    2552:	aa01      	add	r2, sp, #4
    2554:	4669      	mov	r1, sp
    2556:	f000 fcf3 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    255a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    255e:	280f      	cmp	r0, #15
    2560:	bfcc      	ite	gt
    2562:	2001      	movgt	r0, #1
    2564:	2000      	movle	r0, #0
    2566:	9900      	ldr	r1, [sp, #0]
    2568:	4408      	add	r0, r1
    256a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    256e:	60e1      	str	r1, [r4, #12]
    2570:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2574:	2800      	cmp	r0, #0
    2576:	bf04      	itt	eq
    2578:	b003      	addeq	sp, #12
    257a:	bd30      	popeq	{r4, r5, pc}
    257c:	2301      	movs	r3, #1
    257e:	2203      	movs	r2, #3
    2580:	2005      	movs	r0, #5
    2582:	f000 fb05 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2586:	2800      	cmp	r0, #0
    2588:	bf1c      	itt	ne
    258a:	b003      	addne	sp, #12
    258c:	bd30      	popne	{r4, r5, pc}
    258e:	f640 21d9 	movw	r1, #2777	; 0xad9
    2592:	2070      	movs	r0, #112	; 0x70
    2594:	f001 f81a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2598:	20000dec 	.word	0x20000dec
    259c:	1e847fff 	.word	0x1e847fff
    25a0:	07a12000 	.word	0x07a12000
    25a4:	f85ee000 	.word	0xf85ee000
    25a8:	1e848000 	.word	0x1e848000
    25ac:	e17b8000 	.word	0xe17b8000

000025b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    25b0:	b570      	push	{r4, r5, r6, lr}
    25b2:	4c22      	ldr	r4, [pc, #136]	; (263c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x8c>)
    25b4:	2020      	movs	r0, #32
    25b6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    25ba:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    25be:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    25c2:	2500      	movs	r5, #0
    25c4:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
    25c8:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
    25cc:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    25d0:	1e69      	subs	r1, r5, #1
    25d2:	6065      	str	r5, [r4, #4]
    25d4:	60e1      	str	r1, [r4, #12]
    25d6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    25da:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    25de:	f884 5020 	strb.w	r5, [r4, #32]
    25e2:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    25e6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    25ea:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    25ee:	4814      	ldr	r0, [pc, #80]	; (2640 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x90>)
    25f0:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
    25f4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    25f8:	7005      	strb	r5, [r0, #0]
    25fa:	7045      	strb	r5, [r0, #1]
    25fc:	8045      	strh	r5, [r0, #2]
    25fe:	f7fe f99b 	bl	938 <CONFIG_ISR_STACK_SIZE+0x138>
    2602:	2800      	cmp	r0, #0
    2604:	bf0c      	ite	eq
    2606:	480f      	ldreq	r0, [pc, #60]	; (2644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x94>)
    2608:	480f      	ldrne	r0, [pc, #60]	; (2648 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x98>)
    260a:	6020      	str	r0, [r4, #0]
    260c:	480f      	ldr	r0, [pc, #60]	; (264c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x9c>)
    260e:	2110      	movs	r1, #16
    2610:	1e49      	subs	r1, r1, #1
    2612:	7085      	strb	r5, [r0, #2]
    2614:	f800 5f04 	strb.w	r5, [r0, #4]!
    2618:	d1fa      	bne.n	2610 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x60>
    261a:	2001      	movs	r0, #1
    261c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2620:	4c0b      	ldr	r4, [pc, #44]	; (2650 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0xa0>)
    2622:	20ff      	movs	r0, #255	; 0xff
    2624:	7020      	strb	r0, [r4, #0]
    2626:	480b      	ldr	r0, [pc, #44]	; (2654 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0xa4>)
    2628:	f001 f882 	bl	3730 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    262c:	7060      	strb	r0, [r4, #1]
    262e:	f001 f8dd 	bl	37ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2632:	60a0      	str	r0, [r4, #8]
    2634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2638:	f000 bc46 	b.w	2ec8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    263c:	20000dec 	.word	0x20000dec
    2640:	20000012 	.word	0x20000012
    2644:	00011f48 	.word	0x00011f48
    2648:	00011f4c 	.word	0x00011f4c
    264c:	20000d6a 	.word	0x20000d6a
    2650:	20000010 	.word	0x20000010
    2654:	00000edd 	.word	0x00000edd

00002658 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2658:	b570      	push	{r4, r5, r6, lr}
    265a:	4605      	mov	r5, r0
    265c:	2001      	movs	r0, #1
    265e:	fa00 f405 	lsl.w	r4, r0, r5
    2662:	460e      	mov	r6, r1
    2664:	2a00      	cmp	r2, #0
    2666:	bf08      	it	eq
    2668:	4808      	ldreq	r0, [pc, #32]	; (268c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    266a:	d00c      	beq.n	2686 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    266c:	2000      	movs	r0, #0
    266e:	f000 fc11 	bl	2e94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2672:	00e9      	lsls	r1, r5, #3
    2674:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2678:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    267c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2680:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2684:	4802      	ldr	r0, [pc, #8]	; (2690 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2686:	6004      	str	r4, [r0, #0]
    2688:	bd70      	pop	{r4, r5, r6, pc}
    268a:	0000      	.short	0x0000
    268c:	4001f508 	.word	0x4001f508
    2690:	4001f504 	.word	0x4001f504

00002694 <MPSL_IRQ_RTC0_Handler>:
    2694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2698:	4c24      	ldr	r4, [pc, #144]	; (272c <MPSL_IRQ_RTC0_Handler+0x98>)
    269a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    269e:	f04f 0500 	mov.w	r5, #0
    26a2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    26a6:	f44f 6600 	mov.w	r6, #2048	; 0x800
    26aa:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    26ae:	bf1c      	itt	ne
    26b0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    26b4:	2800      	cmpne	r0, #0
    26b6:	d00b      	beq.n	26d0 <MPSL_IRQ_RTC0_Handler+0x3c>
    26b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    26bc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26c0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    26c4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26c8:	f04f 0004 	mov.w	r0, #4
    26cc:	f7fe ff18 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26d0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26d4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    26d8:	bf1c      	itt	ne
    26da:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    26de:	2800      	cmpne	r0, #0
    26e0:	d00b      	beq.n	26fa <MPSL_IRQ_RTC0_Handler+0x66>
    26e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    26e6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26ea:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    26ee:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26f2:	f04f 0005 	mov.w	r0, #5
    26f6:	f7fe ff03 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26fe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2702:	bf1a      	itte	ne
    2704:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2708:	2800      	cmpne	r0, #0
    270a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    270e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2712:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2716:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    271a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    271e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2722:	f04f 0006 	mov.w	r0, #6
    2726:	f7fe beeb 	b.w	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    272a:	0000      	.short	0x0000
    272c:	4000b000 	.word	0x4000b000

00002730 <MPSL_IRQ_TIMER0_Handler>:
    2730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2734:	4d3a      	ldr	r5, [pc, #232]	; (2820 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2736:	7828      	ldrb	r0, [r5, #0]
    2738:	2804      	cmp	r0, #4
    273a:	d06c      	beq.n	2816 <MPSL_IRQ_TIMER0_Handler+0xe6>
    273c:	1ce8      	adds	r0, r5, #3
    273e:	2201      	movs	r2, #1
    2740:	7801      	ldrb	r1, [r0, #0]
    2742:	b159      	cbz	r1, 275c <MPSL_IRQ_TIMER0_Handler+0x2c>
    2744:	2901      	cmp	r1, #1
    2746:	bf08      	it	eq
    2748:	706a      	strbeq	r2, [r5, #1]
    274a:	d002      	beq.n	2752 <MPSL_IRQ_TIMER0_Handler+0x22>
    274c:	7869      	ldrb	r1, [r5, #1]
    274e:	2900      	cmp	r1, #0
    2750:	d05c      	beq.n	280c <MPSL_IRQ_TIMER0_Handler+0xdc>
    2752:	2102      	movs	r1, #2
    2754:	7001      	strb	r1, [r0, #0]
    2756:	7840      	ldrb	r0, [r0, #1]
    2758:	f000 fae2 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    275c:	4c31      	ldr	r4, [pc, #196]	; (2824 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    275e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2762:	f04f 0800 	mov.w	r8, #0
    2766:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    276a:	f44f 7680 	mov.w	r6, #256	; 0x100
    276e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2772:	bf1c      	itt	ne
    2774:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2778:	2800      	cmpne	r0, #0
    277a:	d008      	beq.n	278e <MPSL_IRQ_TIMER0_Handler+0x5e>
    277c:	f04f 0003 	mov.w	r0, #3
    2780:	f000 face 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2784:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2788:	2003      	movs	r0, #3
    278a:	f7fe feb9 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    278e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2792:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2796:	bf1c      	itt	ne
    2798:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    279c:	2800      	cmpne	r0, #0
    279e:	d008      	beq.n	27b2 <MPSL_IRQ_TIMER0_Handler+0x82>
    27a0:	f04f 0002 	mov.w	r0, #2
    27a4:	f000 fabc 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27a8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27ac:	2002      	movs	r0, #2
    27ae:	f7fe fea7 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27b2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27b6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    27ba:	bf1c      	itt	ne
    27bc:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    27c0:	2800      	cmpne	r0, #0
    27c2:	d008      	beq.n	27d6 <MPSL_IRQ_TIMER0_Handler+0xa6>
    27c4:	f04f 0001 	mov.w	r0, #1
    27c8:	f000 faaa 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27d0:	2001      	movs	r0, #1
    27d2:	f7fe fe95 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27da:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27de:	bf1a      	itte	ne
    27e0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27e4:	2800      	cmpne	r0, #0
    27e6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27ea:	f04f 0000 	mov.w	r0, #0
    27ee:	f000 fa97 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27f2:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27f6:	2004      	movs	r0, #4
    27f8:	7028      	strb	r0, [r5, #0]
    27fa:	f8c5 8008 	str.w	r8, [r5, #8]
    27fe:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2806:	2000      	movs	r0, #0
    2808:	f7fe be7a 	b.w	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    280c:	f240 3172 	movw	r1, #882	; 0x372
    2810:	206c      	movs	r0, #108	; 0x6c
    2812:	f000 fedb 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    281a:	2007      	movs	r0, #7
    281c:	f7fe be70 	b.w	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2820:	2000001c 	.word	0x2000001c
    2824:	40008000 	.word	0x40008000
    2828:	2201      	movs	r2, #1
    282a:	0213      	lsls	r3, r2, #8
    282c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2830:	2000      	movs	r0, #0
    2832:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    2836:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    283a:	f3bf 8f4f 	dsb	sy
    283e:	f3bf 8f6f 	isb	sy
    2842:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    2846:	490c      	ldr	r1, [pc, #48]	; (2878 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2848:	604a      	str	r2, [r1, #4]
    284a:	1e43      	subs	r3, r0, #1
    284c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2850:	4b0a      	ldr	r3, [pc, #40]	; (287c <MPSL_IRQ_TIMER0_Handler+0x14c>)
    2852:	6018      	str	r0, [r3, #0]
    2854:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2858:	1d1b      	adds	r3, r3, #4
    285a:	6018      	str	r0, [r3, #0]
    285c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2860:	1d1b      	adds	r3, r3, #4
    2862:	6018      	str	r0, [r3, #0]
    2864:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2868:	1d1b      	adds	r3, r3, #4
    286a:	6018      	str	r0, [r3, #0]
    286c:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2870:	610a      	str	r2, [r1, #16]
    2872:	4903      	ldr	r1, [pc, #12]	; (2880 <MPSL_IRQ_TIMER0_Handler+0x150>)
    2874:	7048      	strb	r0, [r1, #1]
    2876:	4770      	bx	lr
    2878:	40008000 	.word	0x40008000
    287c:	40008540 	.word	0x40008540
    2880:	2000001c 	.word	0x2000001c

00002884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2884:	4801      	ldr	r0, [pc, #4]	; (288c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2886:	6800      	ldr	r0, [r0, #0]
    2888:	4770      	bx	lr
    288a:	0000      	.short	0x0000
    288c:	4000b504 	.word	0x4000b504

00002890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2890:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2894:	4e41      	ldr	r6, [pc, #260]	; (299c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2896:	4604      	mov	r4, r0
    2898:	1ef7      	subs	r7, r6, #3
    289a:	f896 c000 	ldrb.w	ip, [r6]
    289e:	68f8      	ldr	r0, [r7, #12]
    28a0:	f1bc 0f01 	cmp.w	ip, #1
    28a4:	bf04      	itt	eq
    28a6:	42a0      	cmpeq	r0, r4
    28a8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    28ac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    28b0:	4a3b      	ldr	r2, [pc, #236]	; (29a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    28b2:	6011      	str	r1, [r2, #0]
    28b4:	493b      	ldr	r1, [pc, #236]	; (29a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    28b6:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    28ba:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    28be:	4a3a      	ldr	r2, [pc, #232]	; (29a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    28c0:	f04f 0500 	mov.w	r5, #0
    28c4:	f1bc 0f00 	cmp.w	ip, #0
    28c8:	d057      	beq.n	297a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    28ca:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    28ce:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    28d2:	6015      	str	r5, [r2, #0]
    28d4:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    28d8:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    28dc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    28e0:	f04f 0801 	mov.w	r8, #1
    28e4:	2a00      	cmp	r2, #0
    28e6:	bf04      	itt	eq
    28e8:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    28ec:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    28f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    28f4:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    28f8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    28fc:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2900:	4a2a      	ldr	r2, [pc, #168]	; (29ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2902:	f8d2 a000 	ldr.w	sl, [r2]
    2906:	eba4 0a0a 	sub.w	sl, r4, sl
    290a:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    290e:	f1bb 0f02 	cmp.w	fp, #2
    2912:	d33c      	bcc.n	298e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2914:	f04f 0a02 	mov.w	sl, #2
    2918:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    291c:	d237      	bcs.n	298e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    291e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2922:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2926:	f1bc 0f00 	cmp.w	ip, #0
    292a:	d005      	beq.n	2938 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    292c:	6811      	ldr	r1, [r2, #0]
    292e:	1a41      	subs	r1, r0, r1
    2930:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2934:	2902      	cmp	r1, #2
    2936:	d3f9      	bcc.n	292c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2938:	f8c7 8008 	str.w	r8, [r7, #8]
    293c:	703d      	strb	r5, [r7, #0]
    293e:	f7ff ff73 	bl	2828 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2942:	481b      	ldr	r0, [pc, #108]	; (29b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2944:	6005      	str	r5, [r0, #0]
    2946:	1d00      	adds	r0, r0, #4
    2948:	f8c0 a000 	str.w	sl, [r0]
    294c:	4919      	ldr	r1, [pc, #100]	; (29b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    294e:	2004      	movs	r0, #4
    2950:	6008      	str	r0, [r1, #0]
    2952:	4919      	ldr	r1, [pc, #100]	; (29b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2954:	f8c1 800c 	str.w	r8, [r1, #12]
    2958:	68ba      	ldr	r2, [r7, #8]
    295a:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    295e:	0181      	lsls	r1, r0, #6
    2960:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2964:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2968:	4a14      	ldr	r2, [pc, #80]	; (29bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    296a:	0741      	lsls	r1, r0, #29
    296c:	6011      	str	r1, [r2, #0]
    296e:	60fc      	str	r4, [r7, #12]
    2970:	7070      	strb	r0, [r6, #1]
    2972:	f886 8000 	strb.w	r8, [r6]
    2976:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    297a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    297e:	4b10      	ldr	r3, [pc, #64]	; (29c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2980:	601d      	str	r5, [r3, #0]
    2982:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2986:	6015      	str	r5, [r2, #0]
    2988:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    298c:	e7a4      	b.n	28d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    298e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2992:	f240 11a5 	movw	r1, #421	; 0x1a5
    2996:	206c      	movs	r0, #108	; 0x6c
    2998:	f000 fe18 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    299c:	2000001f 	.word	0x2000001f
    29a0:	4001f508 	.word	0x4001f508
    29a4:	4000b000 	.word	0x4000b000
    29a8:	4000b544 	.word	0x4000b544
    29ac:	4000b504 	.word	0x4000b504
    29b0:	40008504 	.word	0x40008504
    29b4:	40008510 	.word	0x40008510
    29b8:	40008000 	.word	0x40008000
    29bc:	4001f504 	.word	0x4001f504
    29c0:	4000b540 	.word	0x4000b540

000029c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    29c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29c8:	4c2b      	ldr	r4, [pc, #172]	; (2a78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    29ca:	68e1      	ldr	r1, [r4, #12]
    29cc:	4281      	cmp	r1, r0
    29ce:	bf14      	ite	ne
    29d0:	2201      	movne	r2, #1
    29d2:	2200      	moveq	r2, #0
    29d4:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2a7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    29d8:	f89c 7000 	ldrb.w	r7, [ip]
    29dc:	2f02      	cmp	r7, #2
    29de:	d002      	beq.n	29e6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    29e0:	2a00      	cmp	r2, #0
    29e2:	d038      	beq.n	2a56 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    29e4:	e003      	b.n	29ee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    29e6:	2a00      	cmp	r2, #0
    29e8:	bf08      	it	eq
    29ea:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29ee:	7862      	ldrb	r2, [r4, #1]
    29f0:	b382      	cbz	r2, 2a54 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    29f2:	4b23      	ldr	r3, [pc, #140]	; (2a80 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    29f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29f8:	601a      	str	r2, [r3, #0]
    29fa:	4b22      	ldr	r3, [pc, #136]	; (2a84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    29fc:	1395      	asrs	r5, r2, #14
    29fe:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2a02:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2a06:	2600      	movs	r6, #0
    2a08:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2a0c:	4a1e      	ldr	r2, [pc, #120]	; (2a88 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2a0e:	f8d2 8000 	ldr.w	r8, [r2]
    2a12:	eba0 0808 	sub.w	r8, r0, r8
    2a16:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2a1a:	f1b8 0f02 	cmp.w	r8, #2
    2a1e:	d324      	bcc.n	2a6a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a20:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2a24:	d221      	bcs.n	2a6a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a26:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a2a:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2a2e:	b12f      	cbz	r7, 2a3c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2a30:	6813      	ldr	r3, [r2, #0]
    2a32:	1acb      	subs	r3, r1, r3
    2a34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a38:	2b02      	cmp	r3, #2
    2a3a:	d3f9      	bcc.n	2a30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2a3c:	4b13      	ldr	r3, [pc, #76]	; (2a8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2a3e:	2102      	movs	r1, #2
    2a40:	074a      	lsls	r2, r1, #29
    2a42:	601a      	str	r2, [r3, #0]
    2a44:	60e0      	str	r0, [r4, #12]
    2a46:	2004      	movs	r0, #4
    2a48:	f88c 0001 	strb.w	r0, [ip, #1]
    2a4c:	f88c 1000 	strb.w	r1, [ip]
    2a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a54:	e004      	b.n	2a60 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2a56:	f240 11b3 	movw	r1, #435	; 0x1b3
    2a5a:	206c      	movs	r0, #108	; 0x6c
    2a5c:	f000 fdb6 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a60:	f240 11b7 	movw	r1, #439	; 0x1b7
    2a64:	206c      	movs	r0, #108	; 0x6c
    2a66:	f000 fdb1 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a6a:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2a6e:	f240 11c3 	movw	r1, #451	; 0x1c3
    2a72:	206c      	movs	r0, #108	; 0x6c
    2a74:	f000 fdaa 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a78:	2000001c 	.word	0x2000001c
    2a7c:	2000001f 	.word	0x2000001f
    2a80:	4001f508 	.word	0x4001f508
    2a84:	4000b000 	.word	0x4000b000
    2a88:	4000b504 	.word	0x4000b504
    2a8c:	4001f504 	.word	0x4001f504

00002a90 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2a90:	4801      	ldr	r0, [pc, #4]	; (2a98 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2a92:	68c0      	ldr	r0, [r0, #12]
    2a94:	4770      	bx	lr
    2a96:	0000      	.short	0x0000
    2a98:	2000001c 	.word	0x2000001c

00002a9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aa0:	4833      	ldr	r0, [pc, #204]	; (2b70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2aa2:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2aa6:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2aaa:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2aae:	4a32      	ldr	r2, [pc, #200]	; (2b78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2ab0:	2100      	movs	r1, #0
    2ab2:	f89c 3000 	ldrb.w	r3, [ip]
    2ab6:	b163      	cbz	r3, 2ad2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2ab8:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2abc:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2ac0:	6011      	str	r1, [r2, #0]
    2ac2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2ac6:	bf00      	nop
    2ac8:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2acc:	2201      	movs	r2, #1
    2ace:	b980      	cbnz	r0, 2af2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2ad0:	e009      	b.n	2ae6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2ad2:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2ad6:	4c29      	ldr	r4, [pc, #164]	; (2b7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2ad8:	6021      	str	r1, [r4, #0]
    2ada:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2ade:	6011      	str	r1, [r2, #0]
    2ae0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2ae4:	e7f0      	b.n	2ac8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2ae6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2aea:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2aee:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2af2:	2b02      	cmp	r3, #2
    2af4:	d004      	beq.n	2b00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2af6:	f240 11cf 	movw	r1, #463	; 0x1cf
    2afa:	206c      	movs	r0, #108	; 0x6c
    2afc:	f000 fd66 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b00:	4e1f      	ldr	r6, [pc, #124]	; (2b80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2b02:	6830      	ldr	r0, [r6, #0]
    2b04:	4c1f      	ldr	r4, [pc, #124]	; (2b84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2b06:	1cc0      	adds	r0, r0, #3
    2b08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b0c:	68e3      	ldr	r3, [r4, #12]
    2b0e:	4d1e      	ldr	r5, [pc, #120]	; (2b88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2b10:	4298      	cmp	r0, r3
    2b12:	d00b      	beq.n	2b2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b14:	6837      	ldr	r7, [r6, #0]
    2b16:	1bdf      	subs	r7, r3, r7
    2b18:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2b1c:	2f04      	cmp	r7, #4
    2b1e:	d305      	bcc.n	2b2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b20:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2b24:	d202      	bcs.n	2b2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b26:	f7ff feb3 	bl	2890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2b2a:	e01b      	b.n	2b64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b2c:	6830      	ldr	r0, [r6, #0]
    2b2e:	1a18      	subs	r0, r3, r0
    2b30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b34:	2802      	cmp	r0, #2
    2b36:	d313      	bcc.n	2b60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b38:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2b3c:	d210      	bcs.n	2b60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b3e:	4b13      	ldr	r3, [pc, #76]	; (2b8c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2b40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2b44:	6018      	str	r0, [r3, #0]
    2b46:	60a2      	str	r2, [r4, #8]
    2b48:	7021      	strb	r1, [r4, #0]
    2b4a:	606a      	str	r2, [r5, #4]
    2b4c:	60ea      	str	r2, [r5, #12]
    2b4e:	0040      	lsls	r0, r0, #1
    2b50:	1f19      	subs	r1, r3, #4
    2b52:	6008      	str	r0, [r1, #0]
    2b54:	2004      	movs	r0, #4
    2b56:	f88c 0001 	strb.w	r0, [ip, #1]
    2b5a:	f88c 2000 	strb.w	r2, [ip]
    2b5e:	e001      	b.n	2b64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b60:	60a2      	str	r2, [r4, #8]
    2b62:	7021      	strb	r1, [r4, #0]
    2b64:	68a0      	ldr	r0, [r4, #8]
    2b66:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b6e:	0000      	.short	0x0000
    2b70:	4000b000 	.word	0x4000b000
    2b74:	2000001f 	.word	0x2000001f
    2b78:	4000b544 	.word	0x4000b544
    2b7c:	4000b540 	.word	0x4000b540
    2b80:	4000b504 	.word	0x4000b504
    2b84:	2000001c 	.word	0x2000001c
    2b88:	40008000 	.word	0x40008000
    2b8c:	4001f508 	.word	0x4001f508

00002b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b94:	f8df c174 	ldr.w	ip, [pc, #372]	; 2d0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2b98:	2701      	movs	r7, #1
    2b9a:	f04f 0800 	mov.w	r8, #0
    2b9e:	f89c 5000 	ldrb.w	r5, [ip]
    2ba2:	f89c c001 	ldrb.w	ip, [ip, #1]
    2ba6:	2807      	cmp	r0, #7
    2ba8:	d27e      	bcs.n	2ca8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2baa:	e8df f000 	tbb	[pc, r0]
    2bae:	0404      	.short	0x0404
    2bb0:	6a6a0404 	.word	0x6a6a0404
    2bb4:	006a      	.short	0x006a
    2bb6:	4c56      	ldr	r4, [pc, #344]	; (2d10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2bb8:	68e6      	ldr	r6, [r4, #12]
    2bba:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2bbe:	bf04      	itt	eq
    2bc0:	7864      	ldrbeq	r4, [r4, #1]
    2bc2:	2c00      	cmpeq	r4, #0
    2bc4:	d002      	beq.n	2bcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2bc6:	2d02      	cmp	r5, #2
    2bc8:	d005      	beq.n	2bd6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2bca:	e03c      	b.n	2c46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2bcc:	f240 2102 	movw	r1, #514	; 0x202
    2bd0:	206c      	movs	r0, #108	; 0x6c
    2bd2:	f000 fcfb 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bd6:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2bda:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2bde:	f1ac 0404 	sub.w	r4, ip, #4
    2be2:	0624      	lsls	r4, r4, #24
    2be4:	0da4      	lsrs	r4, r4, #22
    2be6:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2bea:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2bee:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2bf2:	2400      	movs	r4, #0
    2bf4:	2d01      	cmp	r5, #1
    2bf6:	d002      	beq.n	2bfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2bf8:	2d02      	cmp	r5, #2
    2bfa:	d011      	beq.n	2c20 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2bfc:	e020      	b.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2bfe:	f1bc 0f04 	cmp.w	ip, #4
    2c02:	d205      	bcs.n	2c10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2c04:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c08:	f1ba 0f00 	cmp.w	sl, #0
    2c0c:	d118      	bne.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c0e:	e004      	b.n	2c1a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2c10:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c14:	f1ba 0f00 	cmp.w	sl, #0
    2c18:	d112      	bne.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c1a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2c1e:	e00f      	b.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c20:	f1bc 0f04 	cmp.w	ip, #4
    2c24:	d205      	bcs.n	2c32 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2c26:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c2a:	f1ba 0f00 	cmp.w	sl, #0
    2c2e:	d107      	bne.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c30:	e004      	b.n	2c3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2c32:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c36:	f1ba 0f00 	cmp.w	sl, #0
    2c3a:	d101      	bne.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c3c:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2c40:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2c44:	d1d5      	bne.n	2bf2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2c46:	4c33      	ldr	r4, [pc, #204]	; (2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2c48:	f100 0c10 	add.w	ip, r0, #16
    2c4c:	fa07 fc0c 	lsl.w	ip, r7, ip
    2c50:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2c54:	0080      	lsls	r0, r0, #2
    2c56:	4420      	add	r0, r4
    2c58:	b152      	cbz	r2, 2c70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2c5a:	6407      	str	r7, [r0, #64]	; 0x40
    2c5c:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2c60:	1b8d      	subs	r5, r1, r6
    2c62:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2c66:	42aa      	cmp	r2, r5
    2c68:	bf98      	it	ls
    2c6a:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2c6e:	d243      	bcs.n	2cf8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2c70:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2c74:	2b01      	cmp	r3, #1
    2c76:	bf08      	it	eq
    2c78:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2c7c:	2001      	movs	r0, #1
    2c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c82:	b135      	cbz	r5, 2c92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c84:	4584      	cmp	ip, r0
    2c86:	d104      	bne.n	2c92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c88:	f240 2129 	movw	r1, #553	; 0x229
    2c8c:	206c      	movs	r0, #108	; 0x6c
    2c8e:	f000 fc9d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c92:	1f00      	subs	r0, r0, #4
    2c94:	b2c0      	uxtb	r0, r0
    2c96:	2b01      	cmp	r3, #1
    2c98:	bf0c      	ite	eq
    2c9a:	2401      	moveq	r4, #1
    2c9c:	2400      	movne	r4, #0
    2c9e:	2803      	cmp	r0, #3
    2ca0:	d306      	bcc.n	2cb0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2ca2:	f240 1103 	movw	r1, #259	; 0x103
    2ca6:	e000      	b.n	2caa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2ca8:	e02b      	b.n	2d02 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2caa:	206c      	movs	r0, #108	; 0x6c
    2cac:	f000 fc8e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cb0:	f8df c064 	ldr.w	ip, [pc, #100]	; 2d18 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2cb4:	f100 0310 	add.w	r3, r0, #16
    2cb8:	fa07 f303 	lsl.w	r3, r7, r3
    2cbc:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2cc0:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2cc4:	0080      	lsls	r0, r0, #2
    2cc6:	4460      	add	r0, ip
    2cc8:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2ccc:	b14a      	cbz	r2, 2ce2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2cce:	4d13      	ldr	r5, [pc, #76]	; (2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2cd0:	682e      	ldr	r6, [r5, #0]
    2cd2:	1b8d      	subs	r5, r1, r6
    2cd4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2cd8:	42aa      	cmp	r2, r5
    2cda:	bf98      	it	ls
    2cdc:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2ce0:	d20a      	bcs.n	2cf8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2ce2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2ce6:	2c00      	cmp	r4, #0
    2ce8:	bf18      	it	ne
    2cea:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2cee:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2cf2:	2001      	movs	r0, #1
    2cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cf8:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2cfc:	2000      	movs	r0, #0
    2cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d02:	f240 212e 	movw	r1, #558	; 0x22e
    2d06:	206c      	movs	r0, #108	; 0x6c
    2d08:	f000 fc60 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d0c:	2000001f 	.word	0x2000001f
    2d10:	2000001c 	.word	0x2000001c
    2d14:	40008000 	.word	0x40008000
    2d18:	4000b000 	.word	0x4000b000
    2d1c:	4000b504 	.word	0x4000b504

00002d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d22:	2701      	movs	r7, #1
    2d24:	2400      	movs	r4, #0
    2d26:	2807      	cmp	r0, #7
    2d28:	d243      	bcs.n	2db2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x92>
    2d2a:	e8df f000 	tbb	[pc, r0]
    2d2e:	0404      	.short	0x0404
    2d30:	16160404 	.word	0x16160404
    2d34:	0016      	.short	0x0016
    2d36:	4a21      	ldr	r2, [pc, #132]	; (2dbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x9c>)
    2d38:	f100 0110 	add.w	r1, r0, #16
    2d3c:	fa07 f101 	lsl.w	r1, r7, r1
    2d40:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2d44:	0081      	lsls	r1, r0, #2
    2d46:	4411      	add	r1, r2
    2d48:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2d4c:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2d50:	491b      	ldr	r1, [pc, #108]	; (2dc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa0>)
    2d52:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2d56:	9000      	str	r0, [sp, #0]
    2d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d5a:	4d1a      	ldr	r5, [pc, #104]	; (2dc4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>)
    2d5c:	1f01      	subs	r1, r0, #4
    2d5e:	b2ce      	uxtb	r6, r1
    2d60:	7829      	ldrb	r1, [r5, #0]
    2d62:	b179      	cbz	r1, 2d84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d64:	786a      	ldrb	r2, [r5, #1]
    2d66:	4282      	cmp	r2, r0
    2d68:	d10c      	bne.n	2d84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d6a:	4a17      	ldr	r2, [pc, #92]	; (2dc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>)
    2d6c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2d70:	6010      	str	r0, [r2, #0]
    2d72:	2901      	cmp	r1, #1
    2d74:	bf08      	it	eq
    2d76:	f7ff fd57 	bleq	2828 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2d7a:	702c      	strb	r4, [r5, #0]
    2d7c:	4913      	ldr	r1, [pc, #76]	; (2dcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xac>)
    2d7e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2d82:	60c8      	str	r0, [r1, #12]
    2d84:	f106 0010 	add.w	r0, r6, #16
    2d88:	fa07 f100 	lsl.w	r1, r7, r0
    2d8c:	4810      	ldr	r0, [pc, #64]	; (2dd0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2d8e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2d92:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2d96:	00b0      	lsls	r0, r6, #2
    2d98:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2d9c:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2da0:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2da4:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2da8:	480a      	ldr	r0, [pc, #40]	; (2dd4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2daa:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2dae:	9000      	str	r0, [sp, #0]
    2db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2db2:	f240 219b 	movw	r1, #667	; 0x29b
    2db6:	206c      	movs	r0, #108	; 0x6c
    2db8:	f000 fc08 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dbc:	40008000 	.word	0x40008000
    2dc0:	40008140 	.word	0x40008140
    2dc4:	2000001f 	.word	0x2000001f
    2dc8:	4001f508 	.word	0x4001f508
    2dcc:	2000001c 	.word	0x2000001c
    2dd0:	4000b000 	.word	0x4000b000
    2dd4:	4000b140 	.word	0x4000b140

00002dd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2dd8:	491e      	ldr	r1, [pc, #120]	; (2e54 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2dda:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2dde:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2de2:	481d      	ldr	r0, [pc, #116]	; (2e58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2de4:	4a1d      	ldr	r2, [pc, #116]	; (2e5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2de6:	f890 c000 	ldrb.w	ip, [r0]
    2dea:	2000      	movs	r0, #0
    2dec:	f1bc 0f00 	cmp.w	ip, #0
    2df0:	d00a      	beq.n	2e08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2df2:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2df6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2dfa:	6010      	str	r0, [r2, #0]
    2dfc:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e00:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2e04:	b981      	cbnz	r1, 2e28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2e06:	e009      	b.n	2e1c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2e08:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e0c:	4b14      	ldr	r3, [pc, #80]	; (2e60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2e0e:	6018      	str	r0, [r3, #0]
    2e10:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e14:	6010      	str	r0, [r2, #0]
    2e16:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e1a:	e7f1      	b.n	2e00 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2e1c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2e24:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2e28:	490e      	ldr	r1, [pc, #56]	; (2e64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e2e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2e32:	4a0d      	ldr	r2, [pc, #52]	; (2e68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2e34:	6010      	str	r0, [r2, #0]
    2e36:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e3a:	1d12      	adds	r2, r2, #4
    2e3c:	6010      	str	r0, [r2, #0]
    2e3e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e42:	1d12      	adds	r2, r2, #4
    2e44:	6010      	str	r0, [r2, #0]
    2e46:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2e4a:	1d12      	adds	r2, r2, #4
    2e4c:	6010      	str	r0, [r2, #0]
    2e4e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2e52:	4770      	bx	lr
    2e54:	4000b000 	.word	0x4000b000
    2e58:	2000001f 	.word	0x2000001f
    2e5c:	4000b544 	.word	0x4000b544
    2e60:	4000b540 	.word	0x4000b540
    2e64:	40008000 	.word	0x40008000
    2e68:	40008540 	.word	0x40008540

00002e6c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2e6c:	4808      	ldr	r0, [pc, #32]	; (2e90 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2e6e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2e72:	2800      	cmp	r0, #0
    2e74:	bfb8      	it	lt
    2e76:	4770      	bxlt	lr
    2e78:	f000 011f 	and.w	r1, r0, #31
    2e7c:	2201      	movs	r2, #1
    2e7e:	fa02 f101 	lsl.w	r1, r2, r1
    2e82:	0940      	lsrs	r0, r0, #5
    2e84:	0080      	lsls	r0, r0, #2
    2e86:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2e8a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2e8e:	4770      	bx	lr
    2e90:	2000001c 	.word	0x2000001c

00002e94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2e94:	b510      	push	{r4, lr}
    2e96:	2807      	cmp	r0, #7
    2e98:	d20d      	bcs.n	2eb6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2e9a:	e8df f000 	tbb	[pc, r0]
    2e9e:	0404      	.short	0x0404
    2ea0:	06060404 	.word	0x06060404
    2ea4:	0006      	.short	0x0006
    2ea6:	4906      	ldr	r1, [pc, #24]	; (2ec0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2ea8:	e002      	b.n	2eb0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2eaa:	1f00      	subs	r0, r0, #4
    2eac:	4905      	ldr	r1, [pc, #20]	; (2ec4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2eae:	b2c0      	uxtb	r0, r0
    2eb0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2eb4:	bd10      	pop	{r4, pc}
    2eb6:	f240 2152 	movw	r1, #594	; 0x252
    2eba:	206c      	movs	r0, #108	; 0x6c
    2ebc:	f000 fb86 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ec0:	40008140 	.word	0x40008140
    2ec4:	4000b140 	.word	0x4000b140

00002ec8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2ec8:	b570      	push	{r4, r5, r6, lr}
    2eca:	4819      	ldr	r0, [pc, #100]	; (2f30 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    2ecc:	2400      	movs	r4, #0
    2ece:	2104      	movs	r1, #4
    2ed0:	7004      	strb	r4, [r0, #0]
    2ed2:	1ec0      	subs	r0, r0, #3
    2ed4:	7001      	strb	r1, [r0, #0]
    2ed6:	0589      	lsls	r1, r1, #22
    2ed8:	60c1      	str	r1, [r0, #12]
    2eda:	f7ff fca5 	bl	2828 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2ede:	2501      	movs	r5, #1
    2ee0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2ee4:	02eb      	lsls	r3, r5, #11
    2ee6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2eea:	f3bf 8f4f 	dsb	sy
    2eee:	f3bf 8f6f 	isb	sy
    2ef2:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    2ef6:	4a0f      	ldr	r2, [pc, #60]	; (2f34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    2ef8:	6055      	str	r5, [r2, #4]
    2efa:	6095      	str	r5, [r2, #8]
    2efc:	480e      	ldr	r0, [pc, #56]	; (2f38 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    2efe:	6801      	ldr	r1, [r0, #0]
    2f00:	2900      	cmp	r1, #0
    2f02:	d1fc      	bne.n	2efe <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    2f04:	1e48      	subs	r0, r1, #1
    2f06:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2f0a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2f0e:	480b      	ldr	r0, [pc, #44]	; (2f3c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    2f10:	6004      	str	r4, [r0, #0]
    2f12:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2f16:	1d00      	adds	r0, r0, #4
    2f18:	6004      	str	r4, [r0, #0]
    2f1a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2f1e:	1d00      	adds	r0, r0, #4
    2f20:	6004      	str	r4, [r0, #0]
    2f22:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    2f26:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    2f2a:	6015      	str	r5, [r2, #0]
    2f2c:	bd70      	pop	{r4, r5, r6, pc}
    2f2e:	0000      	.short	0x0000
    2f30:	2000001f 	.word	0x2000001f
    2f34:	4000b000 	.word	0x4000b000
    2f38:	4000b504 	.word	0x4000b504
    2f3c:	4000b540 	.word	0x4000b540

00002f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    2f40:	0b43      	lsrs	r3, r0, #13
    2f42:	f248 6c37 	movw	ip, #34359	; 0x8637
    2f46:	fb03 f30c 	mul.w	r3, r3, ip
    2f4a:	0c1b      	lsrs	r3, r3, #16
    2f4c:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    2f50:	f8c1 c000 	str.w	ip, [r1]
    2f54:	f8df c038 	ldr.w	ip, [pc, #56]	; 2f90 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    2f58:	fb03 030c 	mla	r3, r3, ip, r0
    2f5c:	480d      	ldr	r0, [pc, #52]	; (2f94 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    2f5e:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    2f62:	4358      	muls	r0, r3
    2f64:	0d40      	lsrs	r0, r0, #21
    2f66:	fb10 fc0c 	smulbb	ip, r0, ip
    2f6a:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    2f6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2f72:	125b      	asrs	r3, r3, #9
    2f74:	7013      	strb	r3, [r2, #0]
    2f76:	680b      	ldr	r3, [r1, #0]
    2f78:	4418      	add	r0, r3
    2f7a:	6008      	str	r0, [r1, #0]
    2f7c:	7810      	ldrb	r0, [r2, #0]
    2f7e:	281f      	cmp	r0, #31
    2f80:	bf18      	it	ne
    2f82:	4770      	bxne	lr
    2f84:	2000      	movs	r0, #0
    2f86:	7010      	strb	r0, [r2, #0]
    2f88:	6808      	ldr	r0, [r1, #0]
    2f8a:	1c40      	adds	r0, r0, #1
    2f8c:	6008      	str	r0, [r1, #0]
    2f8e:	4770      	bx	lr
    2f90:	ffffc2f7 	.word	0xffffc2f7
    2f94:	00010c6f 	.word	0x00010c6f

00002f98 <MPSL_IRQ_CLOCK_Handler>:
    2f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2fa0:	058d      	lsls	r5, r1, #22
    2fa2:	4628      	mov	r0, r5
    2fa4:	f00b fc33 	bl	e80e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fa8:	4680      	mov	r8, r0
    2faa:	f44f 7182 	mov.w	r1, #260	; 0x104
    2fae:	4628      	mov	r0, r5
    2fb0:	f00b fc2d 	bl	e80e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fb4:	2600      	movs	r6, #0
    2fb6:	4607      	mov	r7, r0
    2fb8:	f1b8 0f00 	cmp.w	r8, #0
    2fbc:	d00a      	beq.n	2fd4 <MPSL_IRQ_CLOCK_Handler+0x3c>
    2fbe:	2001      	movs	r0, #1
    2fc0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fc4:	4c07      	ldr	r4, [pc, #28]	; (2fe4 <MPSL_IRQ_CLOCK_Handler+0x4c>)
    2fc6:	7920      	ldrb	r0, [r4, #4]
    2fc8:	b120      	cbz	r0, 2fd4 <MPSL_IRQ_CLOCK_Handler+0x3c>
    2fca:	7126      	strb	r6, [r4, #4]
    2fcc:	69a0      	ldr	r0, [r4, #24]
    2fce:	b108      	cbz	r0, 2fd4 <MPSL_IRQ_CLOCK_Handler+0x3c>
    2fd0:	4780      	blx	r0
    2fd2:	61a6      	str	r6, [r4, #24]
    2fd4:	b10f      	cbz	r7, 2fda <MPSL_IRQ_CLOCK_Handler+0x42>
    2fd6:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    2fda:	4640      	mov	r0, r8
    2fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fe0:	f000 b848 	b.w	3074 <MPSL_IRQ_CLOCK_Handler+0xdc>
    2fe4:	2000002c 	.word	0x2000002c
    2fe8:	b510      	push	{r4, lr}
    2fea:	f000 f973 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2fee:	f000 fa89 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2ff2:	2302      	movs	r3, #2
    2ff4:	4908      	ldr	r1, [pc, #32]	; (3018 <MPSL_IRQ_CLOCK_Handler+0x80>)
    2ff6:	075a      	lsls	r2, r3, #29
    2ff8:	b130      	cbz	r0, 3008 <MPSL_IRQ_CLOCK_Handler+0x70>
    2ffa:	4808      	ldr	r0, [pc, #32]	; (301c <MPSL_IRQ_CLOCK_Handler+0x84>)
    2ffc:	6003      	str	r3, [r0, #0]
    2ffe:	2001      	movs	r0, #1
    3000:	6110      	str	r0, [r2, #16]
    3002:	2003      	movs	r0, #3
    3004:	7248      	strb	r0, [r1, #9]
    3006:	e003      	b.n	3010 <MPSL_IRQ_CLOCK_Handler+0x78>
    3008:	724b      	strb	r3, [r1, #9]
    300a:	2001      	movs	r0, #1
    300c:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    3010:	2000      	movs	r0, #0
    3012:	71c8      	strb	r0, [r1, #7]
    3014:	bd10      	pop	{r4, pc}
    3016:	0000      	.short	0x0000
    3018:	2000002c 	.word	0x2000002c
    301c:	40000c34 	.word	0x40000c34
    3020:	b570      	push	{r4, r5, r6, lr}
    3022:	4c13      	ldr	r4, [pc, #76]	; (3070 <MPSL_IRQ_CLOCK_Handler+0xd8>)
    3024:	79a0      	ldrb	r0, [r4, #6]
    3026:	b1f0      	cbz	r0, 3066 <MPSL_IRQ_CLOCK_Handler+0xce>
    3028:	2801      	cmp	r0, #1
    302a:	d003      	beq.n	3034 <MPSL_IRQ_CLOCK_Handler+0x9c>
    302c:	79e1      	ldrb	r1, [r4, #7]
    302e:	1e40      	subs	r0, r0, #1
    3030:	4281      	cmp	r1, r0
    3032:	da18      	bge.n	3066 <MPSL_IRQ_CLOCK_Handler+0xce>
    3034:	f000 fa66 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3038:	4605      	mov	r5, r0
    303a:	f000 fb37 	bl	36ac <mpsl_temperature_get>
    303e:	79a1      	ldrb	r1, [r4, #6]
    3040:	2901      	cmp	r1, #1
    3042:	d902      	bls.n	304a <MPSL_IRQ_CLOCK_Handler+0xb2>
    3044:	79e1      	ldrb	r1, [r4, #7]
    3046:	1c49      	adds	r1, r1, #1
    3048:	71e1      	strb	r1, [r4, #7]
    304a:	b10d      	cbz	r5, 3050 <MPSL_IRQ_CLOCK_Handler+0xb8>
    304c:	6961      	ldr	r1, [r4, #20]
    304e:	e000      	b.n	3052 <MPSL_IRQ_CLOCK_Handler+0xba>
    3050:	6921      	ldr	r1, [r4, #16]
    3052:	1a41      	subs	r1, r0, r1
    3054:	2902      	cmp	r1, #2
    3056:	da02      	bge.n	305e <MPSL_IRQ_CLOCK_Handler+0xc6>
    3058:	f111 0f02 	cmn.w	r1, #2
    305c:	dc07      	bgt.n	306e <MPSL_IRQ_CLOCK_Handler+0xd6>
    305e:	b10d      	cbz	r5, 3064 <MPSL_IRQ_CLOCK_Handler+0xcc>
    3060:	6160      	str	r0, [r4, #20]
    3062:	e000      	b.n	3066 <MPSL_IRQ_CLOCK_Handler+0xce>
    3064:	6120      	str	r0, [r4, #16]
    3066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    306a:	f7ff bfbd 	b.w	2fe8 <MPSL_IRQ_CLOCK_Handler+0x50>
    306e:	bd70      	pop	{r4, r5, r6, pc}
    3070:	2000002c 	.word	0x2000002c
    3074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3078:	4606      	mov	r6, r0
    307a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    307e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3082:	4628      	mov	r0, r5
    3084:	f00b fbc3 	bl	e80e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3088:	4681      	mov	r9, r0
    308a:	f44f 7188 	mov.w	r1, #272	; 0x110
    308e:	4628      	mov	r0, r5
    3090:	f00b fbbd 	bl	e80e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3094:	4c22      	ldr	r4, [pc, #136]	; (3120 <MPSL_IRQ_CLOCK_Handler+0x188>)
    3096:	4682      	mov	sl, r0
    3098:	f894 8000 	ldrb.w	r8, [r4]
    309c:	f104 0008 	add.w	r0, r4, #8
    30a0:	f00b fc28 	bl	e8f4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    30a4:	b110      	cbz	r0, 30ac <MPSL_IRQ_CLOCK_Handler+0x114>
    30a6:	f44f 71c4 	mov.w	r1, #392	; 0x188
    30aa:	e015      	b.n	30d8 <MPSL_IRQ_CLOCK_Handler+0x140>
    30ac:	481d      	ldr	r0, [pc, #116]	; (3124 <MPSL_IRQ_CLOCK_Handler+0x18c>)
    30ae:	2701      	movs	r7, #1
    30b0:	b13e      	cbz	r6, 30c2 <MPSL_IRQ_CLOCK_Handler+0x12a>
    30b2:	7a61      	ldrb	r1, [r4, #9]
    30b4:	2902      	cmp	r1, #2
    30b6:	d104      	bne.n	30c2 <MPSL_IRQ_CLOCK_Handler+0x12a>
    30b8:	2103      	movs	r1, #3
    30ba:	7261      	strb	r1, [r4, #9]
    30bc:	2102      	movs	r1, #2
    30be:	6001      	str	r1, [r0, #0]
    30c0:	612f      	str	r7, [r5, #16]
    30c2:	2600      	movs	r6, #0
    30c4:	f1b9 0f00 	cmp.w	r9, #0
    30c8:	d00d      	beq.n	30e6 <MPSL_IRQ_CLOCK_Handler+0x14e>
    30ca:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    30ce:	7a61      	ldrb	r1, [r4, #9]
    30d0:	2903      	cmp	r1, #3
    30d2:	d004      	beq.n	30de <MPSL_IRQ_CLOCK_Handler+0x146>
    30d4:	f240 119f 	movw	r1, #415	; 0x19f
    30d8:	206d      	movs	r0, #109	; 0x6d
    30da:	f000 fa77 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30de:	6006      	str	r6, [r0, #0]
    30e0:	7267      	strb	r7, [r4, #9]
    30e2:	f000 f8db 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    30e6:	f1ba 0f00 	cmp.w	sl, #0
    30ea:	d007      	beq.n	30fc <MPSL_IRQ_CLOCK_Handler+0x164>
    30ec:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    30f0:	7a60      	ldrb	r0, [r4, #9]
    30f2:	2801      	cmp	r0, #1
    30f4:	d101      	bne.n	30fa <MPSL_IRQ_CLOCK_Handler+0x162>
    30f6:	f7ff ff93 	bl	3020 <MPSL_IRQ_CLOCK_Handler+0x88>
    30fa:	616f      	str	r7, [r5, #20]
    30fc:	f1b8 0f00 	cmp.w	r8, #0
    3100:	d007      	beq.n	3112 <MPSL_IRQ_CLOCK_Handler+0x17a>
    3102:	7026      	strb	r6, [r4, #0]
    3104:	7a60      	ldrb	r0, [r4, #9]
    3106:	2801      	cmp	r0, #1
    3108:	d101      	bne.n	310e <MPSL_IRQ_CLOCK_Handler+0x176>
    310a:	f7ff ff6d 	bl	2fe8 <MPSL_IRQ_CLOCK_Handler+0x50>
    310e:	f000 f8c5 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3112:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3116:	4802      	ldr	r0, [pc, #8]	; (3120 <MPSL_IRQ_CLOCK_Handler+0x188>)
    3118:	3008      	adds	r0, #8
    311a:	f00b bc02 	b.w	e922 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    311e:	0000      	.short	0x0000
    3120:	2000002c 	.word	0x2000002c
    3124:	40000c34 	.word	0x40000c34
    3128:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    312c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 3290 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    3130:	7801      	ldrb	r1, [r0, #0]
    3132:	7843      	ldrb	r3, [r0, #1]
    3134:	7882      	ldrb	r2, [r0, #2]
    3136:	2400      	movs	r4, #0
    3138:	f889 100a 	strb.w	r1, [r9, #10]
    313c:	f889 3005 	strb.w	r3, [r9, #5]
    3140:	f889 2006 	strb.w	r2, [r9, #6]
    3144:	4606      	mov	r6, r0
    3146:	4627      	mov	r7, r4
    3148:	f889 4007 	strb.w	r4, [r9, #7]
    314c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    3150:	2905      	cmp	r1, #5
    3152:	d225      	bcs.n	31a0 <MPSL_IRQ_CLOCK_Handler+0x208>
    3154:	e8df f001 	tbb	[pc, r1]
    3158:	10050315 	.word	0x10050315
    315c:	0013      	.short	0x0013
    315e:	2401      	movs	r4, #1
    3160:	e00f      	b.n	3182 <MPSL_IRQ_CLOCK_Handler+0x1ea>
    3162:	f000 f8b7 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3166:	4654      	mov	r4, sl
    3168:	2101      	movs	r1, #1
    316a:	4620      	mov	r0, r4
    316c:	f00b fb54 	bl	e818 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3170:	2800      	cmp	r0, #0
    3172:	d0f9      	beq.n	3168 <MPSL_IRQ_CLOCK_Handler+0x1d0>
    3174:	2402      	movs	r4, #2
    3176:	e004      	b.n	3182 <MPSL_IRQ_CLOCK_Handler+0x1ea>
    3178:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    317c:	e001      	b.n	3182 <MPSL_IRQ_CLOCK_Handler+0x1ea>
    317e:	f44f 3440 	mov.w	r4, #196608	; 0x30000
    3182:	f00b fb75 	bl	e870 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3186:	b180      	cbz	r0, 31aa <MPSL_IRQ_CLOCK_Handler+0x212>
    3188:	f000 f9d6 	bl	3538 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    318c:	f004 0503 	and.w	r5, r4, #3
    3190:	42a8      	cmp	r0, r5
    3192:	d10a      	bne.n	31aa <MPSL_IRQ_CLOCK_Handler+0x212>
    3194:	4628      	mov	r0, r5
    3196:	f00b fb5b 	bl	e850 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    319a:	2800      	cmp	r0, #0
    319c:	d0fa      	beq.n	3194 <MPSL_IRQ_CLOCK_Handler+0x1fc>
    319e:	e059      	b.n	3254 <MPSL_IRQ_CLOCK_Handler+0x2bc>
    31a0:	f240 217a 	movw	r1, #634	; 0x27a
    31a4:	206d      	movs	r0, #109	; 0x6d
    31a6:	f000 fa11 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31aa:	f04f 0801 	mov.w	r8, #1
    31ae:	4655      	mov	r5, sl
    31b0:	f8ca 800c 	str.w	r8, [sl, #12]
    31b4:	f8ca 7104 	str.w	r7, [sl, #260]	; 0x104
    31b8:	f8ca 4518 	str.w	r4, [sl, #1304]	; 0x518
    31bc:	f00b fbbc 	bl	e938 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    31c0:	b940      	cbnz	r0, 31d4 <MPSL_IRQ_CLOCK_Handler+0x23c>
    31c2:	f00b fbc3 	bl	e94c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    31c6:	b928      	cbnz	r0, 31d4 <MPSL_IRQ_CLOCK_Handler+0x23c>
    31c8:	f00b fbca 	bl	e960 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    31cc:	b910      	cbnz	r0, 31d4 <MPSL_IRQ_CLOCK_Handler+0x23c>
    31ce:	f00b fbdb 	bl	e988 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    31d2:	b138      	cbz	r0, 31e4 <MPSL_IRQ_CLOCK_Handler+0x24c>
    31d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    31d8:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    31dc:	492d      	ldr	r1, [pc, #180]	; (3294 <MPSL_IRQ_CLOCK_Handler+0x2fc>)
    31de:	f3c0 3042 	ubfx	r0, r0, #13, #3
    31e2:	6008      	str	r0, [r1, #0]
    31e4:	492b      	ldr	r1, [pc, #172]	; (3294 <MPSL_IRQ_CLOCK_Handler+0x2fc>)
    31e6:	3110      	adds	r1, #16
    31e8:	f8c1 8000 	str.w	r8, [r1]
    31ec:	2102      	movs	r1, #2
    31ee:	f8c5 1304 	str.w	r1, [r5, #772]	; 0x304
    31f2:	f8c5 8008 	str.w	r8, [r5, #8]
    31f6:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 3298 <MPSL_IRQ_CLOCK_Handler+0x300>
    31fa:	f8db 1000 	ldr.w	r1, [fp]
    31fe:	43c9      	mvns	r1, r1
    3200:	f341 1800 	sbfx	r8, r1, #4, #1
    3204:	f8db 1000 	ldr.w	r1, [fp]
    3208:	f041 0110 	orr.w	r1, r1, #16
    320c:	f8cb 1000 	str.w	r1, [fp]
    3210:	f108 0801 	add.w	r8, r8, #1
    3214:	e002      	b.n	321c <MPSL_IRQ_CLOCK_Handler+0x284>
    3216:	bf00      	nop
    3218:	f000 fafa 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    321c:	f44f 7182 	mov.w	r1, #260	; 0x104
    3220:	4628      	mov	r0, r5
    3222:	f00b faf4 	bl	e80e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3226:	2800      	cmp	r0, #0
    3228:	d0f6      	beq.n	3218 <MPSL_IRQ_CLOCK_Handler+0x280>
    322a:	f004 0403 	and.w	r4, r4, #3
    322e:	4620      	mov	r0, r4
    3230:	f00b fb0e 	bl	e850 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3234:	2800      	cmp	r0, #0
    3236:	d0fa      	beq.n	322e <MPSL_IRQ_CLOCK_Handler+0x296>
    3238:	f1b8 0f00 	cmp.w	r8, #0
    323c:	d105      	bne.n	324a <MPSL_IRQ_CLOCK_Handler+0x2b2>
    323e:	f8db 1000 	ldr.w	r1, [fp]
    3242:	f021 0110 	bic.w	r1, r1, #16
    3246:	f8cb 1000 	str.w	r1, [fp]
    324a:	2102      	movs	r1, #2
    324c:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
    3250:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3254:	f899 0006 	ldrb.w	r0, [r9, #6]
    3258:	464c      	mov	r4, r9
    325a:	b170      	cbz	r0, 327a <MPSL_IRQ_CLOCK_Handler+0x2e2>
    325c:	7830      	ldrb	r0, [r6, #0]
    325e:	b960      	cbnz	r0, 327a <MPSL_IRQ_CLOCK_Handler+0x2e2>
    3260:	f000 f950 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3264:	4605      	mov	r5, r0
    3266:	f000 fa21 	bl	36ac <mpsl_temperature_get>
    326a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    326e:	b115      	cbz	r5, 3276 <MPSL_IRQ_CLOCK_Handler+0x2de>
    3270:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3274:	e001      	b.n	327a <MPSL_IRQ_CLOCK_Handler+0x2e2>
    3276:	e9c4 0204 	strd	r0, r2, [r4, #16]
    327a:	2101      	movs	r1, #1
    327c:	4650      	mov	r0, sl
    327e:	f00b facb 	bl	e818 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3282:	b108      	cbz	r0, 3288 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3284:	f000 f938 	bl	34f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3288:	7267      	strb	r7, [r4, #9]
    328a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    328e:	0000      	.short	0x0000
    3290:	2000002c 	.word	0x2000002c
    3294:	4000053c 	.word	0x4000053c
    3298:	e000ed10 	.word	0xe000ed10

0000329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    329c:	b510      	push	{r4, lr}
    329e:	f3ef 8410 	mrs	r4, PRIMASK
    32a2:	b672      	cpsid	i
    32a4:	480a      	ldr	r0, [pc, #40]	; (32d0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    32a6:	7841      	ldrb	r1, [r0, #1]
    32a8:	b129      	cbz	r1, 32b6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    32aa:	7841      	ldrb	r1, [r0, #1]
    32ac:	1e49      	subs	r1, r1, #1
    32ae:	7041      	strb	r1, [r0, #1]
    32b0:	7841      	ldrb	r1, [r0, #1]
    32b2:	b129      	cbz	r1, 32c0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    32b4:	e008      	b.n	32c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    32b6:	f240 1101 	movw	r1, #257	; 0x101
    32ba:	206d      	movs	r0, #109	; 0x6d
    32bc:	f000 f986 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32c0:	7880      	ldrb	r0, [r0, #2]
    32c2:	b908      	cbnz	r0, 32c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    32c4:	f000 f92c 	bl	3520 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    32c8:	2c00      	cmp	r4, #0
    32ca:	d100      	bne.n	32ce <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    32cc:	b662      	cpsie	i
    32ce:	bd10      	pop	{r4, pc}
    32d0:	2000002c 	.word	0x2000002c

000032d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    32d4:	b510      	push	{r4, lr}
    32d6:	f3ef 8410 	mrs	r4, PRIMASK
    32da:	b672      	cpsid	i
    32dc:	4806      	ldr	r0, [pc, #24]	; (32f8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    32de:	7841      	ldrb	r1, [r0, #1]
    32e0:	1c49      	adds	r1, r1, #1
    32e2:	7041      	strb	r1, [r0, #1]
    32e4:	7840      	ldrb	r0, [r0, #1]
    32e6:	2801      	cmp	r0, #1
    32e8:	d101      	bne.n	32ee <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    32ea:	f00b faac 	bl	e846 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    32ee:	2c00      	cmp	r4, #0
    32f0:	d100      	bne.n	32f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    32f2:	b662      	cpsie	i
    32f4:	bd10      	pop	{r4, pc}
    32f6:	0000      	.short	0x0000
    32f8:	2000002c 	.word	0x2000002c

000032fc <mpsl_clock_hfclk_release>:
    32fc:	4805      	ldr	r0, [pc, #20]	; (3314 <mpsl_clock_hfclk_release+0x18>)
    32fe:	b510      	push	{r4, lr}
    3300:	78c1      	ldrb	r1, [r0, #3]
    3302:	b121      	cbz	r1, 330e <mpsl_clock_hfclk_release+0x12>
    3304:	2100      	movs	r1, #0
    3306:	7101      	strb	r1, [r0, #4]
    3308:	70c1      	strb	r1, [r0, #3]
    330a:	f7ff ffc7 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    330e:	2000      	movs	r0, #0
    3310:	bd10      	pop	{r4, pc}
    3312:	0000      	.short	0x0000
    3314:	2000002c 	.word	0x2000002c

00003318 <mpsl_clock_hfclk_request>:
    3318:	b570      	push	{r4, r5, r6, lr}
    331a:	4c0c      	ldr	r4, [pc, #48]	; (334c <mpsl_clock_hfclk_request+0x34>)
    331c:	78e1      	ldrb	r1, [r4, #3]
    331e:	b961      	cbnz	r1, 333a <mpsl_clock_hfclk_request+0x22>
    3320:	2501      	movs	r5, #1
    3322:	70e5      	strb	r5, [r4, #3]
    3324:	61a0      	str	r0, [r4, #24]
    3326:	f7ff ffd5 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    332a:	f000 f8eb 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    332e:	b130      	cbz	r0, 333e <mpsl_clock_hfclk_request+0x26>
    3330:	69a0      	ldr	r0, [r4, #24]
    3332:	b110      	cbz	r0, 333a <mpsl_clock_hfclk_request+0x22>
    3334:	4780      	blx	r0
    3336:	2000      	movs	r0, #0
    3338:	61a0      	str	r0, [r4, #24]
    333a:	2000      	movs	r0, #0
    333c:	bd70      	pop	{r4, r5, r6, pc}
    333e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3342:	7125      	strb	r5, [r4, #4]
    3344:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3348:	e7f7      	b.n	333a <mpsl_clock_hfclk_request+0x22>
    334a:	0000      	.short	0x0000
    334c:	2000002c 	.word	0x2000002c

00003350 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3350:	f3ef 8010 	mrs	r0, PRIMASK
    3354:	b672      	cpsid	i
    3356:	4904      	ldr	r1, [pc, #16]	; (3368 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3358:	788a      	ldrb	r2, [r1, #2]
    335a:	1c52      	adds	r2, r2, #1
    335c:	708a      	strb	r2, [r1, #2]
    335e:	2800      	cmp	r0, #0
    3360:	d100      	bne.n	3364 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3362:	b662      	cpsie	i
    3364:	4770      	bx	lr
    3366:	0000      	.short	0x0000
    3368:	2000002c 	.word	0x2000002c

0000336c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    336c:	b510      	push	{r4, lr}
    336e:	f3ef 8410 	mrs	r4, PRIMASK
    3372:	b672      	cpsid	i
    3374:	480a      	ldr	r0, [pc, #40]	; (33a0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3376:	7881      	ldrb	r1, [r0, #2]
    3378:	b129      	cbz	r1, 3386 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    337a:	7881      	ldrb	r1, [r0, #2]
    337c:	1e49      	subs	r1, r1, #1
    337e:	7081      	strb	r1, [r0, #2]
    3380:	7841      	ldrb	r1, [r0, #1]
    3382:	b129      	cbz	r1, 3390 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3384:	e008      	b.n	3398 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3386:	f240 1125 	movw	r1, #293	; 0x125
    338a:	206d      	movs	r0, #109	; 0x6d
    338c:	f000 f91e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3390:	7880      	ldrb	r0, [r0, #2]
    3392:	b908      	cbnz	r0, 3398 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3394:	f000 f8c4 	bl	3520 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3398:	2c00      	cmp	r4, #0
    339a:	d100      	bne.n	339e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    339c:	b662      	cpsie	i
    339e:	bd10      	pop	{r4, pc}
    33a0:	2000002c 	.word	0x2000002c

000033a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    33a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33a8:	0004      	movs	r4, r0
    33aa:	f06f 0015 	mvn.w	r0, #21
    33ae:	d03b      	beq.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33b0:	7821      	ldrb	r1, [r4, #0]
    33b2:	2904      	cmp	r1, #4
    33b4:	d838      	bhi.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33b6:	2900      	cmp	r1, #0
    33b8:	7861      	ldrb	r1, [r4, #1]
    33ba:	d037      	beq.n	342c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    33bc:	2900      	cmp	r1, #0
    33be:	d133      	bne.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33c0:	78a1      	ldrb	r1, [r4, #2]
    33c2:	2900      	cmp	r1, #0
    33c4:	d130      	bne.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33c6:	2000      	movs	r0, #0
    33c8:	f00b f9ec 	bl	e7a4 <MPSL_IRQ_RADIO_Handler+0x1e>
    33cc:	2000      	movs	r0, #0
    33ce:	f00b f9dc 	bl	e78a <MPSL_IRQ_RADIO_Handler+0x4>
    33d2:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    33d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33da:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    33de:	2500      	movs	r5, #0
    33e0:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    33e4:	f8c8 5104 	str.w	r5, [r8, #260]	; 0x104
    33e8:	f8c8 510c 	str.w	r5, [r8, #268]	; 0x10c
    33ec:	f8c8 5110 	str.w	r5, [r8, #272]	; 0x110
    33f0:	4e13      	ldr	r6, [pc, #76]	; (3440 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9c>)
    33f2:	7075      	strb	r5, [r6, #1]
    33f4:	88a0      	ldrh	r0, [r4, #4]
    33f6:	81b0      	strh	r0, [r6, #12]
    33f8:	f00b fa1c 	bl	e834 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    33fc:	2701      	movs	r7, #1
    33fe:	b108      	cbz	r0, 3404 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3400:	70f7      	strb	r7, [r6, #3]
    3402:	7077      	strb	r7, [r6, #1]
    3404:	2101      	movs	r1, #1
    3406:	4640      	mov	r0, r8
    3408:	f00b fa06 	bl	e818 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    340c:	b108      	cbz	r0, 3412 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    340e:	f000 f873 	bl	34f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3412:	4620      	mov	r0, r4
    3414:	f7ff fe88 	bl	3128 <MPSL_IRQ_CLOCK_Handler+0x190>
    3418:	2000      	movs	r0, #0
    341a:	f00b f9b6 	bl	e78a <MPSL_IRQ_RADIO_Handler+0x4>
    341e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3422:	4628      	mov	r0, r5
    3424:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    342c:	2900      	cmp	r1, #0
    342e:	d0fb      	beq.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3430:	2920      	cmp	r1, #32
    3432:	d8f9      	bhi.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3434:	78a1      	ldrb	r1, [r4, #2]
    3436:	2921      	cmp	r1, #33	; 0x21
    3438:	d8f6      	bhi.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    343a:	2901      	cmp	r1, #1
    343c:	d1c3      	bne.n	33c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    343e:	e7f3      	b.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3440:	2000002c 	.word	0x2000002c

00003444 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3444:	4801      	ldr	r0, [pc, #4]	; (344c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3446:	8980      	ldrh	r0, [r0, #12]
    3448:	4770      	bx	lr
    344a:	0000      	.short	0x0000
    344c:	2000002c 	.word	0x2000002c

00003450 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3450:	b510      	push	{r4, lr}
    3452:	480d      	ldr	r0, [pc, #52]	; (3488 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3454:	f00b fa4e 	bl	e8f4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3458:	490b      	ldr	r1, [pc, #44]	; (3488 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    345a:	3908      	subs	r1, #8
    345c:	b148      	cbz	r0, 3472 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    345e:	2001      	movs	r0, #1
    3460:	7008      	strb	r0, [r1, #0]
    3462:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3466:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    346a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    346e:	f7ff bf31 	b.w	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3472:	7a48      	ldrb	r0, [r1, #9]
    3474:	2801      	cmp	r0, #1
    3476:	d101      	bne.n	347c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3478:	f7ff fdb6 	bl	2fe8 <MPSL_IRQ_CLOCK_Handler+0x50>
    347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3480:	4801      	ldr	r0, [pc, #4]	; (3488 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3482:	f00b ba4e 	b.w	e922 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3486:	0000      	.short	0x0000
    3488:	20000034 	.word	0x20000034

0000348c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    348c:	4802      	ldr	r0, [pc, #8]	; (3498 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    348e:	7a40      	ldrb	r0, [r0, #9]
    3490:	2800      	cmp	r0, #0
    3492:	d000      	beq.n	3496 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3494:	2001      	movs	r0, #1
    3496:	4770      	bx	lr
    3498:	2000002c 	.word	0x2000002c

0000349c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    349e:	4d15      	ldr	r5, [pc, #84]	; (34f4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x58>)
    34a0:	7aa8      	ldrb	r0, [r5, #10]
    34a2:	2800      	cmp	r0, #0
    34a4:	d125      	bne.n	34f2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x56>
    34a6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    34aa:	2018      	movs	r0, #24
    34ac:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    34b0:	2601      	movs	r6, #1
    34b2:	61a6      	str	r6, [r4, #24]
    34b4:	f44f 7020 	mov.w	r0, #640	; 0x280
    34b8:	f8ad 0000 	strh.w	r0, [sp]
    34bc:	f8bd 0000 	ldrh.w	r0, [sp]
    34c0:	1e41      	subs	r1, r0, #1
    34c2:	f8ad 1000 	strh.w	r1, [sp]
    34c6:	d2f9      	bcs.n	34bc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x20>
    34c8:	2700      	movs	r7, #0
    34ca:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    34ce:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    34d2:	4808      	ldr	r0, [pc, #32]	; (34f4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x58>)
    34d4:	3008      	adds	r0, #8
    34d6:	f00b fa20 	bl	e91a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    34da:	702f      	strb	r7, [r5, #0]
    34dc:	f7ff fd84 	bl	2fe8 <MPSL_IRQ_CLOCK_Handler+0x50>
    34e0:	6166      	str	r6, [r4, #20]
    34e2:	7968      	ldrb	r0, [r5, #5]
    34e4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    34e8:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    34ec:	2018      	movs	r0, #24
    34ee:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    34f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34f4:	2000002c 	.word	0x2000002c

000034f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    34f8:	4901      	ldr	r1, [pc, #4]	; (3500 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    34fa:	2001      	movs	r0, #1
    34fc:	7008      	strb	r0, [r1, #0]
    34fe:	4770      	bx	lr
    3500:	200003a4 	.word	0x200003a4

00003504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3504:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3508:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    350c:	b918      	cbnz	r0, 3516 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    350e:	4803      	ldr	r0, [pc, #12]	; (351c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3510:	7800      	ldrb	r0, [r0, #0]
    3512:	2800      	cmp	r0, #0
    3514:	d000      	beq.n	3518 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3516:	2001      	movs	r0, #1
    3518:	4770      	bx	lr
    351a:	0000      	.short	0x0000
    351c:	200003a4 	.word	0x200003a4

00003520 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3520:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3524:	2101      	movs	r1, #1
    3526:	6041      	str	r1, [r0, #4]
    3528:	2100      	movs	r1, #0
    352a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    352e:	4801      	ldr	r0, [pc, #4]	; (3534 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3530:	7001      	strb	r1, [r0, #0]
    3532:	4770      	bx	lr
    3534:	200003a4 	.word	0x200003a4

00003538 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3538:	4802      	ldr	r0, [pc, #8]	; (3544 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    353a:	6800      	ldr	r0, [r0, #0]
    353c:	f000 0003 	and.w	r0, r0, #3
    3540:	4770      	bx	lr
    3542:	0000      	.short	0x0000
    3544:	4000041c 	.word	0x4000041c
    3548:	b510      	push	{r4, lr}
    354a:	b131      	cbz	r1, 355a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    354c:	2901      	cmp	r1, #1
    354e:	d007      	beq.n	3560 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3550:	f44f 7142 	mov.w	r1, #776	; 0x308
    3554:	a005      	add	r0, pc, #20	; (adr r0, 356c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3556:	f000 f80f 	bl	3578 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    355a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    355e:	e001      	b.n	3564 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3560:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3564:	f000 0001 	and.w	r0, r0, #1
    3568:	bd10      	pop	{r4, pc}
    356a:	0000      	.short	0x0000
    356c:	5f66726e 	.word	0x5f66726e
    3570:	636f6c63 	.word	0x636f6c63
    3574:	00682e6b 	.word	0x00682e6b

00003578 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3578:	4a02      	ldr	r2, [pc, #8]	; (3584 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    357a:	6852      	ldr	r2, [r2, #4]
    357c:	b102      	cbz	r2, 3580 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    357e:	4710      	bx	r2
    3580:	e7fe      	b.n	3580 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3582:	0000      	.short	0x0000
    3584:	20000048 	.word	0x20000048
    3588:	4806      	ldr	r0, [pc, #24]	; (35a4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    358a:	b510      	push	{r4, lr}
    358c:	2100      	movs	r1, #0
    358e:	6001      	str	r1, [r0, #0]
    3590:	2101      	movs	r1, #1
    3592:	6001      	str	r1, [r0, #0]
    3594:	4608      	mov	r0, r1
    3596:	f00b f982 	bl	e89e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    359a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    359e:	2001      	movs	r0, #1
    35a0:	f00b b970 	b.w	e884 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    35a4:	40001ffc 	.word	0x40001ffc
    35a8:	4807      	ldr	r0, [pc, #28]	; (35c8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    35aa:	b510      	push	{r4, lr}
    35ac:	2101      	movs	r1, #1
    35ae:	6041      	str	r1, [r0, #4]
    35b0:	1e89      	subs	r1, r1, #2
    35b2:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    35b6:	200c      	movs	r0, #12
    35b8:	f00b f971 	bl	e89e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    35bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35c0:	200c      	movs	r0, #12
    35c2:	f00b b95f 	b.w	e884 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    35c6:	0000      	.short	0x0000
    35c8:	4000c000 	.word	0x4000c000

000035cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    35cc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    35ce:	4a10      	ldr	r2, [pc, #64]	; (3610 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    35d0:	6855      	ldr	r5, [r2, #4]
    35d2:	b1e5      	cbz	r5, 360e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    35d4:	2200      	movs	r2, #0
    35d6:	4603      	mov	r3, r0
    35d8:	466e      	mov	r6, sp
    35da:	240a      	movs	r4, #10
    35dc:	e003      	b.n	35e6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    35de:	fbb0 f0f4 	udiv	r0, r0, r4
    35e2:	1c52      	adds	r2, r2, #1
    35e4:	b2d2      	uxtb	r2, r2
    35e6:	2800      	cmp	r0, #0
    35e8:	d1f9      	bne.n	35de <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    35ea:	54b0      	strb	r0, [r6, r2]
    35ec:	e00a      	b.n	3604 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    35ee:	bf00      	nop
    35f0:	fbb3 f0f4 	udiv	r0, r3, r4
    35f4:	fb04 3010 	mls	r0, r4, r0, r3
    35f8:	fbb3 f3f4 	udiv	r3, r3, r4
    35fc:	1e52      	subs	r2, r2, #1
    35fe:	b2d2      	uxtb	r2, r2
    3600:	3030      	adds	r0, #48	; 0x30
    3602:	54b0      	strb	r0, [r6, r2]
    3604:	2a00      	cmp	r2, #0
    3606:	d1f3      	bne.n	35f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3608:	4630      	mov	r0, r6
    360a:	47a8      	blx	r5
    360c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    360e:	e7fe      	b.n	360e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3610:	20000048 	.word	0x20000048

00003614 <mpsl_init>:
    3614:	b570      	push	{r4, r5, r6, lr}
    3616:	4c17      	ldr	r4, [pc, #92]	; (3674 <mpsl_init+0x60>)
    3618:	4606      	mov	r6, r0
    361a:	460d      	mov	r5, r1
    361c:	7860      	ldrb	r0, [r4, #1]
    361e:	b110      	cbz	r0, 3626 <mpsl_init+0x12>
    3620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3624:	bd70      	pop	{r4, r5, r6, pc}
    3626:	b906      	cbnz	r6, 362a <mpsl_init+0x16>
    3628:	4e13      	ldr	r6, [pc, #76]	; (3678 <mpsl_init+0x64>)
    362a:	6062      	str	r2, [r4, #4]
    362c:	7025      	strb	r5, [r4, #0]
    362e:	f7ff ffab 	bl	3588 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    3632:	f7ff ffb9 	bl	35a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    3636:	4630      	mov	r0, r6
    3638:	f7ff feb4 	bl	33a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    363c:	0006      	movs	r6, r0
    363e:	d1f1      	bne.n	3624 <mpsl_init+0x10>
    3640:	f7fe ffb6 	bl	25b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3644:	f7ff ff2a 	bl	349c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3648:	f00b f876 	bl	e738 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    364c:	4628      	mov	r0, r5
    364e:	f00b f919 	bl	e884 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3652:	2001      	movs	r0, #1
    3654:	2d00      	cmp	r5, #0
    3656:	db09      	blt.n	366c <mpsl_init+0x58>
    3658:	f005 011f 	and.w	r1, r5, #31
    365c:	fa00 f101 	lsl.w	r1, r0, r1
    3660:	096a      	lsrs	r2, r5, #5
    3662:	0092      	lsls	r2, r2, #2
    3664:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3668:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    366c:	7060      	strb	r0, [r4, #1]
    366e:	4630      	mov	r0, r6
    3670:	bd70      	pop	{r4, r5, r6, pc}
    3672:	0000      	.short	0x0000
    3674:	20000048 	.word	0x20000048
    3678:	0000e8c0 	.word	0x0000e8c0

0000367c <mpsl_is_initialized>:
    367c:	4801      	ldr	r0, [pc, #4]	; (3684 <mpsl_is_initialized+0x8>)
    367e:	7840      	ldrb	r0, [r0, #1]
    3680:	4770      	bx	lr
    3682:	0000      	.short	0x0000
    3684:	20000048 	.word	0x20000048

00003688 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3688:	4807      	ldr	r0, [pc, #28]	; (36a8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    368a:	f990 0000 	ldrsb.w	r0, [r0]
    368e:	2800      	cmp	r0, #0
    3690:	db09      	blt.n	36a6 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3692:	f000 021f 	and.w	r2, r0, #31
    3696:	2101      	movs	r1, #1
    3698:	4091      	lsls	r1, r2
    369a:	0940      	lsrs	r0, r0, #5
    369c:	0080      	lsls	r0, r0, #2
    369e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    36a2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    36a6:	4770      	bx	lr
    36a8:	20000048 	.word	0x20000048

000036ac <mpsl_temperature_get>:
    36ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36b0:	2601      	movs	r6, #1
    36b2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    36b6:	0331      	lsls	r1, r6, #12
    36b8:	f04f 0800 	mov.w	r8, #0
    36bc:	4640      	mov	r0, r8
    36be:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    36c2:	f3bf 8f4f 	dsb	sy
    36c6:	f3bf 8f6f 	isb	sy
    36ca:	4c16      	ldr	r4, [pc, #88]	; (3724 <mpsl_temperature_get+0x78>)
    36cc:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    36d0:	200c      	movs	r0, #12
    36d2:	f00b f902 	bl	e8da <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6a>
    36d6:	4d14      	ldr	r5, [pc, #80]	; (3728 <mpsl_temperature_get+0x7c>)
    36d8:	6828      	ldr	r0, [r5, #0]
    36da:	43c0      	mvns	r0, r0
    36dc:	f340 1700 	sbfx	r7, r0, #4, #1
    36e0:	6828      	ldr	r0, [r5, #0]
    36e2:	f040 0010 	orr.w	r0, r0, #16
    36e6:	6028      	str	r0, [r5, #0]
    36e8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    36ec:	6026      	str	r6, [r4, #0]
    36ee:	1c7f      	adds	r7, r7, #1
    36f0:	e002      	b.n	36f8 <mpsl_temperature_get+0x4c>
    36f2:	bf00      	nop
    36f4:	f000 f88c 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    36f8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    36fc:	2800      	cmp	r0, #0
    36fe:	d0f9      	beq.n	36f4 <mpsl_temperature_get+0x48>
    3700:	b91f      	cbnz	r7, 370a <mpsl_temperature_get+0x5e>
    3702:	6828      	ldr	r0, [r5, #0]
    3704:	f020 0010 	bic.w	r0, r0, #16
    3708:	6028      	str	r0, [r5, #0]
    370a:	4808      	ldr	r0, [pc, #32]	; (372c <mpsl_temperature_get+0x80>)
    370c:	6805      	ldr	r5, [r0, #0]
    370e:	6066      	str	r6, [r4, #4]
    3710:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3714:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3718:	200c      	movs	r0, #12
    371a:	f00b f8de 	bl	e8da <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6a>
    371e:	4628      	mov	r0, r5
    3720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3724:	4000c000 	.word	0x4000c000
    3728:	e000ed10 	.word	0xe000ed10
    372c:	4000c508 	.word	0x4000c508

00003730 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3730:	b510      	push	{r4, lr}
    3732:	4602      	mov	r2, r0
    3734:	2005      	movs	r0, #5
    3736:	490c      	ldr	r1, [pc, #48]	; (3768 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3738:	e004      	b.n	3744 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    373a:	bf00      	nop
    373c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3740:	791b      	ldrb	r3, [r3, #4]
    3742:	b133      	cbz	r3, 3752 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3744:	1e40      	subs	r0, r0, #1
    3746:	b2c0      	uxtb	r0, r0
    3748:	d2f8      	bcs.n	373c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    374a:	214b      	movs	r1, #75	; 0x4b
    374c:	2069      	movs	r0, #105	; 0x69
    374e:	f7ff ff3d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3752:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3756:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    375a:	2200      	movs	r2, #0
    375c:	714a      	strb	r2, [r1, #5]
    375e:	718a      	strb	r2, [r1, #6]
    3760:	2201      	movs	r2, #1
    3762:	710a      	strb	r2, [r1, #4]
    3764:	bd10      	pop	{r4, pc}
    3766:	0000      	.short	0x0000
    3768:	20000e24 	.word	0x20000e24

0000376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    376c:	b510      	push	{r4, lr}
    376e:	2805      	cmp	r0, #5
    3770:	d301      	bcc.n	3776 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3772:	215a      	movs	r1, #90	; 0x5a
    3774:	e006      	b.n	3784 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3776:	490a      	ldr	r1, [pc, #40]	; (37a0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3778:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    377c:	7901      	ldrb	r1, [r0, #4]
    377e:	2901      	cmp	r1, #1
    3780:	d003      	beq.n	378a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3782:	215b      	movs	r1, #91	; 0x5b
    3784:	2069      	movs	r0, #105	; 0x69
    3786:	f7ff ff21 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    378a:	7941      	ldrb	r1, [r0, #5]
    378c:	7982      	ldrb	r2, [r0, #6]
    378e:	1c49      	adds	r1, r1, #1
    3790:	b2c9      	uxtb	r1, r1
    3792:	428a      	cmp	r2, r1
    3794:	d000      	beq.n	3798 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3796:	7141      	strb	r1, [r0, #5]
    3798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    379c:	f7ff bf74 	b.w	3688 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    37a0:	20000e24 	.word	0x20000e24

000037a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    37a4:	b570      	push	{r4, r5, r6, lr}
    37a6:	2505      	movs	r5, #5
    37a8:	4e0e      	ldr	r6, [pc, #56]	; (37e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    37aa:	4c0f      	ldr	r4, [pc, #60]	; (37e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    37ac:	e016      	b.n	37dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    37ae:	7821      	ldrb	r1, [r4, #0]
    37b0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    37b4:	7902      	ldrb	r2, [r0, #4]
    37b6:	2a01      	cmp	r2, #1
    37b8:	d108      	bne.n	37cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    37ba:	7942      	ldrb	r2, [r0, #5]
    37bc:	7983      	ldrb	r3, [r0, #6]
    37be:	429a      	cmp	r2, r3
    37c0:	d004      	beq.n	37cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    37c2:	7942      	ldrb	r2, [r0, #5]
    37c4:	7182      	strb	r2, [r0, #6]
    37c6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    37ca:	4780      	blx	r0
    37cc:	7820      	ldrb	r0, [r4, #0]
    37ce:	1c40      	adds	r0, r0, #1
    37d0:	b2c0      	uxtb	r0, r0
    37d2:	7020      	strb	r0, [r4, #0]
    37d4:	2805      	cmp	r0, #5
    37d6:	d301      	bcc.n	37dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    37d8:	2000      	movs	r0, #0
    37da:	7020      	strb	r0, [r4, #0]
    37dc:	1e6d      	subs	r5, r5, #1
    37de:	b2ed      	uxtb	r5, r5
    37e0:	d2e5      	bcs.n	37ae <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    37e2:	bd70      	pop	{r4, r5, r6, pc}
    37e4:	20000e24 	.word	0x20000e24
    37e8:	200003a5 	.word	0x200003a5

000037ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    37ec:	b500      	push	{lr}
    37ee:	f00b f901 	bl	e9f4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    37f2:	b928      	cbnz	r0, 3800 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x14>
    37f4:	f00b f8f4 	bl	e9e0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    37f8:	b910      	cbnz	r0, 3800 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x14>
    37fa:	f00b f8bb 	bl	e974 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    37fe:	b108      	cbz	r0, 3804 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x18>
    3800:	4801      	ldr	r0, [pc, #4]	; (3808 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1c>)
    3802:	bd00      	pop	{pc}
    3804:	4801      	ldr	r0, [pc, #4]	; (380c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x20>)
    3806:	bd00      	pop	{pc}
    3808:	4001e700 	.word	0x4001e700
    380c:	4000050c 	.word	0x4000050c

00003810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3810:	b510      	push	{r4, lr}
    3812:	f00b f8b9 	bl	e988 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3816:	b1e0      	cbz	r0, 3852 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3818:	f3ef 8010 	mrs	r0, PRIMASK
    381c:	b1d8      	cbz	r0, 3856 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    381e:	2100      	movs	r1, #0
    3820:	b672      	cpsid	i
    3822:	4812      	ldr	r0, [pc, #72]	; (386c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3824:	6802      	ldr	r2, [r0, #0]
    3826:	6803      	ldr	r3, [r0, #0]
    3828:	f3c2 1200 	ubfx	r2, r2, #4, #1
    382c:	f043 0310 	orr.w	r3, r3, #16
    3830:	6003      	str	r3, [r0, #0]
    3832:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3836:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    383a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    383e:	431c      	orrs	r4, r3
    3840:	d000      	beq.n	3844 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3842:	bf40      	sev
    3844:	bf20      	wfe
    3846:	bf00      	nop
    3848:	bf00      	nop
    384a:	bf00      	nop
    384c:	bf00      	nop
    384e:	b122      	cbz	r2, 385a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4a>
    3850:	e007      	b.n	3862 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x52>
    3852:	bf20      	wfe
    3854:	bd10      	pop	{r4, pc}
    3856:	2101      	movs	r1, #1
    3858:	e7e2      	b.n	3820 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    385a:	6802      	ldr	r2, [r0, #0]
    385c:	f022 0210 	bic.w	r2, r2, #16
    3860:	6002      	str	r2, [r0, #0]
    3862:	2900      	cmp	r1, #0
    3864:	d0f6      	beq.n	3854 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x44>
    3866:	b662      	cpsie	i
    3868:	bd10      	pop	{r4, pc}
    386a:	0000      	.short	0x0000
    386c:	e000ed10 	.word	0xe000ed10

00003870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    3870:	b510      	push	{r4, lr}
    3872:	ea80 0401 	eor.w	r4, r0, r1
    3876:	4603      	mov	r3, r0
    3878:	07a4      	lsls	r4, r4, #30
    387a:	d007      	beq.n	388c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x1c>
    387c:	e015      	b.n	38aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    387e:	2a00      	cmp	r2, #0
    3880:	d015      	beq.n	38ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3e>
    3882:	f811 4b01 	ldrb.w	r4, [r1], #1
    3886:	f803 4b01 	strb.w	r4, [r3], #1
    388a:	1e52      	subs	r2, r2, #1
    388c:	079c      	lsls	r4, r3, #30
    388e:	d1f6      	bne.n	387e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe>
    3890:	e002      	b.n	3898 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x28>
    3892:	c910      	ldmia	r1!, {r4}
    3894:	1f12      	subs	r2, r2, #4
    3896:	c310      	stmia	r3!, {r4}
    3898:	2a04      	cmp	r2, #4
    389a:	d2fa      	bcs.n	3892 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x22>
    389c:	e005      	b.n	38aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    389e:	bf00      	nop
    38a0:	f811 4b01 	ldrb.w	r4, [r1], #1
    38a4:	f803 4b01 	strb.w	r4, [r3], #1
    38a8:	1e52      	subs	r2, r2, #1
    38aa:	2a00      	cmp	r2, #0
    38ac:	d1f8      	bne.n	38a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x30>
    38ae:	bd10      	pop	{r4, pc}
    38b0:	b570      	push	{r4, r5, r6, lr}
    38b2:	4c0e      	ldr	r4, [pc, #56]	; (38ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7c>)
    38b4:	7860      	ldrb	r0, [r4, #1]
    38b6:	2800      	cmp	r0, #0
    38b8:	d117      	bne.n	38ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    38ba:	7820      	ldrb	r0, [r4, #0]
    38bc:	2500      	movs	r5, #0
    38be:	2801      	cmp	r0, #1
    38c0:	d106      	bne.n	38d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    38c2:	2002      	movs	r0, #2
    38c4:	7020      	strb	r0, [r4, #0]
    38c6:	68a0      	ldr	r0, [r4, #8]
    38c8:	b110      	cbz	r0, 38d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    38ca:	68a0      	ldr	r0, [r4, #8]
    38cc:	4780      	blx	r0
    38ce:	60a5      	str	r5, [r4, #8]
    38d0:	7820      	ldrb	r0, [r4, #0]
    38d2:	2803      	cmp	r0, #3
    38d4:	d109      	bne.n	38ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    38d6:	7025      	strb	r5, [r4, #0]
    38d8:	68a0      	ldr	r0, [r4, #8]
    38da:	2800      	cmp	r0, #0
    38dc:	d005      	beq.n	38ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    38de:	6860      	ldr	r0, [r4, #4]
    38e0:	6940      	ldr	r0, [r0, #20]
    38e2:	4780      	blx	r0
    38e4:	68a0      	ldr	r0, [r4, #8]
    38e6:	4780      	blx	r0
    38e8:	60a5      	str	r5, [r4, #8]
    38ea:	bd70      	pop	{r4, r5, r6, pc}
    38ec:	20000050 	.word	0x20000050

000038f0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    38f0:	b510      	push	{r4, lr}
    38f2:	4c08      	ldr	r4, [pc, #32]	; (3914 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    38f4:	7820      	ldrb	r0, [r4, #0]
    38f6:	2802      	cmp	r0, #2
    38f8:	d002      	beq.n	3900 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    38fa:	7820      	ldrb	r0, [r4, #0]
    38fc:	2803      	cmp	r0, #3
    38fe:	d102      	bne.n	3906 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    3900:	6860      	ldr	r0, [r4, #4]
    3902:	6880      	ldr	r0, [r0, #8]
    3904:	4780      	blx	r0
    3906:	2000      	movs	r0, #0
    3908:	7060      	strb	r0, [r4, #1]
    390a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    390e:	f7ff bfcf 	b.w	38b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    3912:	0000      	.short	0x0000
    3914:	20000050 	.word	0x20000050

00003918 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    3918:	b538      	push	{r3, r4, r5, lr}
    391a:	4604      	mov	r4, r0
    391c:	2805      	cmp	r0, #5
    391e:	d304      	bcc.n	392a <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    3920:	f44f 7189 	mov.w	r1, #274	; 0x112
    3924:	2068      	movs	r0, #104	; 0x68
    3926:	f7ff fe51 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    392a:	f7ff ffc1 	bl	38b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    392e:	4d0e      	ldr	r5, [pc, #56]	; (3968 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>)
    3930:	2001      	movs	r0, #1
    3932:	7068      	strb	r0, [r5, #1]
    3934:	7828      	ldrb	r0, [r5, #0]
    3936:	2802      	cmp	r0, #2
    3938:	d115      	bne.n	3966 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x4e>
    393a:	6868      	ldr	r0, [r5, #4]
    393c:	68c1      	ldr	r1, [r0, #12]
    393e:	4620      	mov	r0, r4
    3940:	4788      	blx	r1
    3942:	490a      	ldr	r1, [pc, #40]	; (396c <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x54>)
    3944:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    3948:	7852      	ldrb	r2, [r2, #1]
    394a:	4282      	cmp	r2, r0
    394c:	d201      	bcs.n	3952 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3a>
    394e:	2001      	movs	r0, #1
    3950:	e001      	b.n	3956 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3e>
    3952:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    3956:	f88d 0000 	strb.w	r0, [sp]
    395a:	f88d 4001 	strb.w	r4, [sp, #1]
    395e:	6868      	ldr	r0, [r5, #4]
    3960:	6801      	ldr	r1, [r0, #0]
    3962:	4668      	mov	r0, sp
    3964:	4788      	blx	r1
    3966:	bd38      	pop	{r3, r4, r5, pc}
    3968:	20000050 	.word	0x20000050
    396c:	20001956 	.word	0x20001956

00003970 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    3970:	4905      	ldr	r1, [pc, #20]	; (3988 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    3972:	780a      	ldrb	r2, [r1, #0]
    3974:	2a02      	cmp	r2, #2
    3976:	d004      	beq.n	3982 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3978:	780a      	ldrb	r2, [r1, #0]
    397a:	2a03      	cmp	r2, #3
    397c:	d001      	beq.n	3982 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    397e:	2000      	movs	r0, #0
    3980:	4770      	bx	lr
    3982:	6849      	ldr	r1, [r1, #4]
    3984:	6909      	ldr	r1, [r1, #16]
    3986:	4708      	bx	r1
    3988:	20000050 	.word	0x20000050

0000398c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    398c:	b510      	push	{r4, lr}
    398e:	b158      	cbz	r0, 39a8 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    3990:	4908      	ldr	r1, [pc, #32]	; (39b4 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    3992:	780a      	ldrb	r2, [r1, #0]
    3994:	2a02      	cmp	r2, #2
    3996:	d002      	beq.n	399e <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    3998:	780a      	ldrb	r2, [r1, #0]
    399a:	2a03      	cmp	r2, #3
    399c:	d109      	bne.n	39b2 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    399e:	6849      	ldr	r1, [r1, #4]
    39a0:	6849      	ldr	r1, [r1, #4]
    39a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    39a6:	4708      	bx	r1
    39a8:	f240 1127 	movw	r1, #295	; 0x127
    39ac:	2068      	movs	r0, #104	; 0x68
    39ae:	f7ff fe0d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39b2:	bd10      	pop	{r4, pc}
    39b4:	20000050 	.word	0x20000050

000039b8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    39b8:	4805      	ldr	r0, [pc, #20]	; (39d0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    39ba:	7801      	ldrb	r1, [r0, #0]
    39bc:	2902      	cmp	r1, #2
    39be:	d004      	beq.n	39ca <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    39c0:	7801      	ldrb	r1, [r0, #0]
    39c2:	2903      	cmp	r1, #3
    39c4:	d001      	beq.n	39ca <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    39c6:	2000      	movs	r0, #0
    39c8:	4770      	bx	lr
    39ca:	6840      	ldr	r0, [r0, #4]
    39cc:	6980      	ldr	r0, [r0, #24]
    39ce:	4700      	bx	r0
    39d0:	20000050 	.word	0x20000050
    39d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    39d6:	4c18      	ldr	r4, [pc, #96]	; (3a38 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x80>)
    39d8:	7960      	ldrb	r0, [r4, #5]
    39da:	2803      	cmp	r0, #3
    39dc:	d203      	bcs.n	39e6 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x2e>
    39de:	bf00      	nop
    39e0:	f04f 0103 	mov.w	r1, #3
    39e4:	e000      	b.n	39e8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x30>
    39e6:	4601      	mov	r1, r0
    39e8:	f88d 1001 	strb.w	r1, [sp, #1]
    39ec:	d201      	bcs.n	39f2 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x3a>
    39ee:	f04f 0003 	mov.w	r0, #3
    39f2:	f88d 0000 	strb.w	r0, [sp]
    39f6:	78e0      	ldrb	r0, [r4, #3]
    39f8:	f8ad 0004 	strh.w	r0, [sp, #4]
    39fc:	78a0      	ldrb	r0, [r4, #2]
    39fe:	f8ad 0002 	strh.w	r0, [sp, #2]
    3a02:	4668      	mov	r0, sp
    3a04:	f008 fdf8 	bl	c5f8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3a08:	b108      	cbz	r0, 3a0e <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x56>
    3a0a:	219b      	movs	r1, #155	; 0x9b
    3a0c:	e010      	b.n	3a30 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3a0e:	68a0      	ldr	r0, [r4, #8]
    3a10:	9002      	str	r0, [sp, #8]
    3a12:	a802      	add	r0, sp, #8
    3a14:	f008 fe08 	bl	c628 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3a18:	b108      	cbz	r0, 3a1e <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x66>
    3a1a:	219f      	movs	r1, #159	; 0x9f
    3a1c:	e008      	b.n	3a30 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3a1e:	4807      	ldr	r0, [pc, #28]	; (3a3c <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x84>)
    3a20:	6800      	ldr	r0, [r0, #0]
    3a22:	9003      	str	r0, [sp, #12]
    3a24:	a803      	add	r0, sp, #12
    3a26:	f00d fd71 	bl	1150c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3a2a:	2800      	cmp	r0, #0
    3a2c:	d003      	beq.n	3a36 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x7e>
    3a2e:	21a3      	movs	r1, #163	; 0xa3
    3a30:	2003      	movs	r0, #3
    3a32:	f000 f8a7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a36:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3a38:	20000068 	.word	0x20000068
    3a3c:	00003bec 	.word	0x00003bec

00003a40 <sdc_build_revision_get>:
    3a40:	b510      	push	{r4, lr}
    3a42:	b128      	cbz	r0, 3a50 <sdc_build_revision_get+0x10>
    3a44:	2214      	movs	r2, #20
    3a46:	4904      	ldr	r1, [pc, #16]	; (3a58 <sdc_build_revision_get+0x18>)
    3a48:	f7ff ff12 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3a4c:	2000      	movs	r0, #0
    3a4e:	bd10      	pop	{r4, pc}
    3a50:	f06f 0015 	mvn.w	r0, #21
    3a54:	bd10      	pop	{r4, pc}
    3a56:	0000      	.short	0x0000
    3a58:	00003c1e 	.word	0x00003c1e

00003a5c <sdc_cfg_set>:
    3a5c:	b510      	push	{r4, lr}
    3a5e:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    3a62:	bb18      	cbnz	r0, 3aac <sdc_cfg_set+0x50>
    3a64:	b1c9      	cbz	r1, 3a9a <sdc_cfg_set+0x3e>
    3a66:	b14a      	cbz	r2, 3a7c <sdc_cfg_set+0x20>
    3a68:	4b11      	ldr	r3, [pc, #68]	; (3ab0 <sdc_cfg_set+0x54>)
    3a6a:	2901      	cmp	r1, #1
    3a6c:	d009      	beq.n	3a82 <sdc_cfg_set+0x26>
    3a6e:	2902      	cmp	r1, #2
    3a70:	d00a      	beq.n	3a88 <sdc_cfg_set+0x2c>
    3a72:	2903      	cmp	r1, #3
    3a74:	d00b      	beq.n	3a8e <sdc_cfg_set+0x32>
    3a76:	2904      	cmp	r1, #4
    3a78:	d118      	bne.n	3aac <sdc_cfg_set+0x50>
    3a7a:	e00c      	b.n	3a96 <sdc_cfg_set+0x3a>
    3a7c:	f06f 0015 	mvn.w	r0, #21
    3a80:	bd10      	pop	{r4, pc}
    3a82:	7810      	ldrb	r0, [r2, #0]
    3a84:	7218      	strb	r0, [r3, #8]
    3a86:	e008      	b.n	3a9a <sdc_cfg_set+0x3e>
    3a88:	7810      	ldrb	r0, [r2, #0]
    3a8a:	7258      	strb	r0, [r3, #9]
    3a8c:	e005      	b.n	3a9a <sdc_cfg_set+0x3e>
    3a8e:	6810      	ldr	r0, [r2, #0]
    3a90:	f8c3 000a 	str.w	r0, [r3, #10]
    3a94:	e001      	b.n	3a9a <sdc_cfg_set+0x3e>
    3a96:	6810      	ldr	r0, [r2, #0]
    3a98:	6118      	str	r0, [r3, #16]
    3a9a:	4905      	ldr	r1, [pc, #20]	; (3ab0 <sdc_cfg_set+0x54>)
    3a9c:	2201      	movs	r2, #1
    3a9e:	3108      	adds	r1, #8
    3aa0:	2000      	movs	r0, #0
    3aa2:	f00a ffdd 	bl	ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
    3aa6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3aaa:	dbe9      	blt.n	3a80 <sdc_cfg_set+0x24>
    3aac:	4620      	mov	r0, r4
    3aae:	bd10      	pop	{r4, pc}
    3ab0:	20000060 	.word	0x20000060

00003ab4 <sdc_enable>:
    3ab4:	b538      	push	{r3, r4, r5, lr}
    3ab6:	460c      	mov	r4, r1
    3ab8:	b1c0      	cbz	r0, 3aec <sdc_enable+0x38>
    3aba:	b1bc      	cbz	r4, 3aec <sdc_enable+0x38>
    3abc:	f7ff fe38 	bl	3730 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3ac0:	4d0c      	ldr	r5, [pc, #48]	; (3af4 <sdc_enable+0x40>)
    3ac2:	2200      	movs	r2, #0
    3ac4:	f105 0108 	add.w	r1, r5, #8
    3ac8:	7028      	strb	r0, [r5, #0]
    3aca:	4620      	mov	r0, r4
    3acc:	f00a ffc8 	bl	ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
    3ad0:	f00e f98e 	bl	11df0 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3ad4:	2100      	movs	r1, #0
    3ad6:	7828      	ldrb	r0, [r5, #0]
    3ad8:	f009 f8ec 	bl	ccb4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3adc:	7868      	ldrb	r0, [r5, #1]
    3ade:	f88d 0000 	strb.w	r0, [sp]
    3ae2:	4668      	mov	r0, sp
    3ae4:	f00d fd00 	bl	114e8 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3ae8:	2000      	movs	r0, #0
    3aea:	bd38      	pop	{r3, r4, r5, pc}
    3aec:	f06f 0015 	mvn.w	r0, #21
    3af0:	bd38      	pop	{r3, r4, r5, pc}
    3af2:	0000      	.short	0x0000
    3af4:	20000060 	.word	0x20000060

00003af8 <sdc_init>:
    3af8:	b570      	push	{r4, r5, r6, lr}
    3afa:	0004      	movs	r4, r0
    3afc:	d00b      	beq.n	3b16 <sdc_init+0x1e>
    3afe:	f7ff fdbd 	bl	367c <mpsl_is_initialized>
    3b02:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3b06:	b120      	cbz	r0, 3b12 <sdc_init+0x1a>
    3b08:	f7ff fc9c 	bl	3444 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3b0c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3b10:	d904      	bls.n	3b1c <sdc_init+0x24>
    3b12:	4628      	mov	r0, r5
    3b14:	bd70      	pop	{r4, r5, r6, pc}
    3b16:	f06f 0015 	mvn.w	r0, #21
    3b1a:	bd70      	pop	{r4, r5, r6, pc}
    3b1c:	2200      	movs	r2, #0
    3b1e:	4b14      	ldr	r3, [pc, #80]	; (3b70 <sdc_init+0x78>)
    3b20:	4611      	mov	r1, r2
    3b22:	bf00      	nop
    3b24:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    3b28:	4285      	cmp	r5, r0
    3b2a:	d303      	bcc.n	3b34 <sdc_init+0x3c>
    3b2c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3b30:	7882      	ldrb	r2, [r0, #2]
    3b32:	e003      	b.n	3b3c <sdc_init+0x44>
    3b34:	1c49      	adds	r1, r1, #1
    3b36:	b2c9      	uxtb	r1, r1
    3b38:	290c      	cmp	r1, #12
    3b3a:	d3f3      	bcc.n	3b24 <sdc_init+0x2c>
    3b3c:	480d      	ldr	r0, [pc, #52]	; (3b74 <sdc_init+0x7c>)
    3b3e:	7042      	strb	r2, [r0, #1]
    3b40:	6044      	str	r4, [r0, #4]
    3b42:	480d      	ldr	r0, [pc, #52]	; (3b78 <sdc_init+0x80>)
    3b44:	f000 f986 	bl	3e54 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3b48:	f3ef 8410 	mrs	r4, PRIMASK
    3b4c:	b672      	cpsid	i
    3b4e:	480b      	ldr	r0, [pc, #44]	; (3b7c <sdc_init+0x84>)
    3b50:	f06f 010c 	mvn.w	r1, #12
    3b54:	f000 fc88 	bl	4468 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3b58:	4809      	ldr	r0, [pc, #36]	; (3b80 <sdc_init+0x88>)
    3b5a:	f000 fd4b 	bl	45f4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3b5e:	b118      	cbz	r0, 3b68 <sdc_init+0x70>
    3b60:	21b2      	movs	r1, #178	; 0xb2
    3b62:	2003      	movs	r0, #3
    3b64:	f000 f80e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b68:	b904      	cbnz	r4, 3b6c <sdc_init+0x74>
    3b6a:	b662      	cpsie	i
    3b6c:	2000      	movs	r0, #0
    3b6e:	bd70      	pop	{r4, r5, r6, pc}
    3b70:	00003bee 	.word	0x00003bee
    3b74:	20000060 	.word	0x20000060
    3b78:	000039d5 	.word	0x000039d5
    3b7c:	4000e000 	.word	0x4000e000
    3b80:	00003c35 	.word	0x00003c35

00003b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3b84:	b50e      	push	{r1, r2, r3, lr}
    3b86:	b672      	cpsid	i
    3b88:	4a15      	ldr	r2, [pc, #84]	; (3be0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3b8a:	6855      	ldr	r5, [r2, #4]
    3b8c:	b1d5      	cbz	r5, 3bc4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3b8e:	2200      	movs	r2, #0
    3b90:	4603      	mov	r3, r0
    3b92:	466e      	mov	r6, sp
    3b94:	240a      	movs	r4, #10
    3b96:	e003      	b.n	3ba0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3b98:	fbb0 f0f4 	udiv	r0, r0, r4
    3b9c:	1c52      	adds	r2, r2, #1
    3b9e:	b2d2      	uxtb	r2, r2
    3ba0:	2800      	cmp	r0, #0
    3ba2:	d1f9      	bne.n	3b98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3ba4:	54b0      	strb	r0, [r6, r2]
    3ba6:	e009      	b.n	3bbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3ba8:	fbb3 f0f4 	udiv	r0, r3, r4
    3bac:	fb04 3010 	mls	r0, r4, r0, r3
    3bb0:	fbb3 f3f4 	udiv	r3, r3, r4
    3bb4:	1e52      	subs	r2, r2, #1
    3bb6:	b2d2      	uxtb	r2, r2
    3bb8:	3030      	adds	r0, #48	; 0x30
    3bba:	54b0      	strb	r0, [r6, r2]
    3bbc:	2a00      	cmp	r2, #0
    3bbe:	d1f3      	bne.n	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3bc0:	4630      	mov	r0, r6
    3bc2:	47a8      	blx	r5
    3bc4:	f3bf 8f4f 	dsb	sy
    3bc8:	4806      	ldr	r0, [pc, #24]	; (3be4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3bca:	6801      	ldr	r1, [r0, #0]
    3bcc:	4a06      	ldr	r2, [pc, #24]	; (3be8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3bce:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3bd2:	4311      	orrs	r1, r2
    3bd4:	6001      	str	r1, [r0, #0]
    3bd6:	f3bf 8f4f 	dsb	sy
    3bda:	bf00      	nop
    3bdc:	e7fd      	b.n	3bda <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3bde:	0000      	.short	0x0000
    3be0:	20000060 	.word	0x20000060
    3be4:	e000ed0c 	.word	0xe000ed0c
    3be8:	05fa0004 	.word	0x05fa0004
    3bec:	00010001 	.word	0x00010001
    3bf0:	0002000b 	.word	0x0002000b
    3bf4:	0005000a 	.word	0x0005000a
    3bf8:	000a0009 	.word	0x000a0009
    3bfc:	00140008 	.word	0x00140008
    3c00:	001e0007 	.word	0x001e0007
    3c04:	00320006 	.word	0x00320006
    3c08:	004b0005 	.word	0x004b0005
    3c0c:	00640004 	.word	0x00640004
    3c10:	00960003 	.word	0x00960003
    3c14:	00fa0002 	.word	0x00fa0002
    3c18:	01f40001 	.word	0x01f40001
    3c1c:	43d40000 	.word	0x43d40000
    3c20:	2263cfb5 	.word	0x2263cfb5
    3c24:	8aedd4e9 	.word	0x8aedd4e9
    3c28:	a14cd024 	.word	0xa14cd024
    3c2c:	26a4b1f7 	.word	0x26a4b1f7
    3c30:	00007585 	.word	0x00007585

00003c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c36:	4c12      	ldr	r4, [pc, #72]	; (3c80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3c38:	2600      	movs	r6, #0
    3c3a:	6825      	ldr	r5, [r4, #0]
    3c3c:	e011      	b.n	3c62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3c3e:	9800      	ldr	r0, [sp, #0]
    3c40:	2802      	cmp	r0, #2
    3c42:	d002      	beq.n	3c4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3c44:	2803      	cmp	r0, #3
    3c46:	d10c      	bne.n	3c62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3c48:	e006      	b.n	3c58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3c4a:	6820      	ldr	r0, [r4, #0]
    3c4c:	b110      	cbz	r0, 3c54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3c4e:	2000      	movs	r0, #0
    3c50:	6026      	str	r6, [r4, #0]
    3c52:	e005      	b.n	3c60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3c54:	2126      	movs	r1, #38	; 0x26
    3c56:	e00c      	b.n	3c72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3c58:	6820      	ldr	r0, [r4, #0]
    3c5a:	b168      	cbz	r0, 3c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3c5c:	2001      	movs	r0, #1
    3c5e:	6026      	str	r6, [r4, #0]
    3c60:	47a8      	blx	r5
    3c62:	4668      	mov	r0, sp
    3c64:	f000 fc98 	bl	4598 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3c68:	2800      	cmp	r0, #0
    3c6a:	d0e8      	beq.n	3c3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3c6c:	2805      	cmp	r0, #5
    3c6e:	d005      	beq.n	3c7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3c70:	2133      	movs	r1, #51	; 0x33
    3c72:	2004      	movs	r0, #4
    3c74:	f7ff ff86 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c78:	212b      	movs	r1, #43	; 0x2b
    3c7a:	e7fa      	b.n	3c72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c7e:	0000      	.short	0x0000
    3c80:	20000074 	.word	0x20000074

00003c84 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    3c84:	b570      	push	{r4, r5, r6, lr}
    3c86:	4d17      	ldr	r5, [pc, #92]	; (3ce4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x60>)
    3c88:	4606      	mov	r6, r0
    3c8a:	7828      	ldrb	r0, [r5, #0]
    3c8c:	b148      	cbz	r0, 3ca2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3c8e:	78ac      	ldrb	r4, [r5, #2]
    3c90:	1c69      	adds	r1, r5, #1
    3c92:	1ca4      	adds	r4, r4, #2
    3c94:	4622      	mov	r2, r4
    3c96:	4630      	mov	r0, r6
    3c98:	f7ff fdea 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c9c:	2000      	movs	r0, #0
    3c9e:	7028      	strb	r0, [r5, #0]
    3ca0:	e012      	b.n	3cc8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x44>
    3ca2:	4811      	ldr	r0, [pc, #68]	; (3ce8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3ca4:	f008 fdaa 	bl	c7fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3ca8:	2800      	cmp	r0, #0
    3caa:	d01a      	beq.n	3ce2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5e>
    3cac:	210a      	movs	r1, #10
    3cae:	203e      	movs	r0, #62	; 0x3e
    3cb0:	f000 f81c 	bl	3cec <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x68>
    3cb4:	b918      	cbnz	r0, 3cbe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x3a>
    3cb6:	480c      	ldr	r0, [pc, #48]	; (3ce8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3cb8:	7800      	ldrb	r0, [r0, #0]
    3cba:	2814      	cmp	r0, #20
    3cbc:	d00b      	beq.n	3cd6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x52>
    3cbe:	490a      	ldr	r1, [pc, #40]	; (3ce8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3cc0:	4630      	mov	r0, r6
    3cc2:	f00a ffdc 	bl	ec7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3cc6:	4604      	mov	r4, r0
    3cc8:	b154      	cbz	r4, 3ce0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5c>
    3cca:	78b1      	ldrb	r1, [r6, #2]
    3ccc:	7830      	ldrb	r0, [r6, #0]
    3cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3cd2:	f000 b80b 	b.w	3cec <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x68>
    3cd6:	4904      	ldr	r1, [pc, #16]	; (3ce8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3cd8:	4630      	mov	r0, r6
    3cda:	f00b fa0d 	bl	f0f8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3cde:	e7f2      	b.n	3cc6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    3ce0:	2000      	movs	r0, #0
    3ce2:	bd70      	pop	{r4, r5, r6, pc}
    3ce4:	20000f6c 	.word	0x20000f6c
    3ce8:	20000e4c 	.word	0x20000e4c
    3cec:	b570      	push	{r4, r5, r6, lr}
    3cee:	460c      	mov	r4, r1
    3cf0:	4605      	mov	r5, r0
    3cf2:	f000 f84b 	bl	3d8c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    3cf6:	2800      	cmp	r0, #0
    3cf8:	d002      	beq.n	3d00 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7c>
    3cfa:	2d3e      	cmp	r5, #62	; 0x3e
    3cfc:	d001      	beq.n	3d02 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7e>
    3cfe:	2001      	movs	r0, #1
    3d00:	bd70      	pop	{r4, r5, r6, pc}
    3d02:	2c12      	cmp	r4, #18
    3d04:	d106      	bne.n	3d14 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>
    3d06:	4806      	ldr	r0, [pc, #24]	; (3d20 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x9c>)
    3d08:	7801      	ldrb	r1, [r0, #0]
    3d0a:	2902      	cmp	r1, #2
    3d0c:	d002      	beq.n	3d14 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>
    3d0e:	7840      	ldrb	r0, [r0, #1]
    3d10:	2800      	cmp	r0, #0
    3d12:	d0f5      	beq.n	3d00 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7c>
    3d14:	4620      	mov	r0, r4
    3d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3d1a:	f000 b853 	b.w	3dc4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    3d1e:	0000      	.short	0x0000
    3d20:	200003a6 	.word	0x200003a6

00003d24 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    3d24:	4901      	ldr	r1, [pc, #4]	; (3d2c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    3d26:	7048      	strb	r0, [r1, #1]
    3d28:	4770      	bx	lr
    3d2a:	0000      	.short	0x0000
    3d2c:	200003a6 	.word	0x200003a6
    3d30:	b570      	push	{r4, r5, r6, lr}
    3d32:	780a      	ldrb	r2, [r1, #0]
    3d34:	7082      	strb	r2, [r0, #2]
    3d36:	b33a      	cbz	r2, 3d88 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    3d38:	2a01      	cmp	r2, #1
    3d3a:	d825      	bhi.n	3d88 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    3d3c:	2313      	movs	r3, #19
    3d3e:	7003      	strb	r3, [r0, #0]
    3d40:	2300      	movs	r3, #0
    3d42:	e00a      	b.n	3d5a <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    3d44:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3d48:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3d4c:	78a6      	ldrb	r6, [r4, #2]
    3d4e:	70ee      	strb	r6, [r5, #3]
    3d50:	8864      	ldrh	r4, [r4, #2]
    3d52:	0a24      	lsrs	r4, r4, #8
    3d54:	1c5b      	adds	r3, r3, #1
    3d56:	712c      	strb	r4, [r5, #4]
    3d58:	b2db      	uxtb	r3, r3
    3d5a:	4293      	cmp	r3, r2
    3d5c:	d3f2      	bcc.n	3d44 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    3d5e:	2300      	movs	r3, #0
    3d60:	e00b      	b.n	3d7a <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    3d62:	bf00      	nop
    3d64:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3d68:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3d6c:	792e      	ldrb	r6, [r5, #4]
    3d6e:	7166      	strb	r6, [r4, #5]
    3d70:	88ad      	ldrh	r5, [r5, #4]
    3d72:	0a2d      	lsrs	r5, r5, #8
    3d74:	1c5b      	adds	r3, r3, #1
    3d76:	71a5      	strb	r5, [r4, #6]
    3d78:	b2db      	uxtb	r3, r3
    3d7a:	4293      	cmp	r3, r2
    3d7c:	d3f2      	bcc.n	3d64 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    3d7e:	2101      	movs	r1, #1
    3d80:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3d84:	b2c0      	uxtb	r0, r0
    3d86:	bd70      	pop	{r4, r5, r6, pc}
    3d88:	2000      	movs	r0, #0
    3d8a:	bd70      	pop	{r4, r5, r6, pc}

00003d8c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3d8c:	2101      	movs	r1, #1
    3d8e:	4a0c      	ldr	r2, [pc, #48]	; (3dc0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3d90:	2840      	cmp	r0, #64	; 0x40
    3d92:	d20c      	bcs.n	3dae <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3d94:	2820      	cmp	r0, #32
    3d96:	d803      	bhi.n	3da0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3d98:	1e40      	subs	r0, r0, #1
    3d9a:	4081      	lsls	r1, r0
    3d9c:	6810      	ldr	r0, [r2, #0]
    3d9e:	e002      	b.n	3da6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3da0:	3821      	subs	r0, #33	; 0x21
    3da2:	4081      	lsls	r1, r0
    3da4:	6850      	ldr	r0, [r2, #4]
    3da6:	4201      	tst	r1, r0
    3da8:	d107      	bne.n	3dba <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3daa:	2000      	movs	r0, #0
    3dac:	4770      	bx	lr
    3dae:	28ff      	cmp	r0, #255	; 0xff
    3db0:	d003      	beq.n	3dba <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3db2:	3840      	subs	r0, #64	; 0x40
    3db4:	4081      	lsls	r1, r0
    3db6:	6890      	ldr	r0, [r2, #8]
    3db8:	e7f5      	b.n	3da6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3dba:	2001      	movs	r0, #1
    3dbc:	4770      	bx	lr
    3dbe:	0000      	.short	0x0000
    3dc0:	20000078 	.word	0x20000078

00003dc4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3dc4:	2101      	movs	r1, #1
    3dc6:	1e40      	subs	r0, r0, #1
    3dc8:	4081      	lsls	r1, r0
    3dca:	4804      	ldr	r0, [pc, #16]	; (3ddc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3dcc:	68c0      	ldr	r0, [r0, #12]
    3dce:	4201      	tst	r1, r0
    3dd0:	d001      	beq.n	3dd6 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3dd2:	2001      	movs	r0, #1
    3dd4:	4770      	bx	lr
    3dd6:	2000      	movs	r0, #0
    3dd8:	4770      	bx	lr
    3dda:	0000      	.short	0x0000
    3ddc:	20000078 	.word	0x20000078

00003de0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3de0:	4901      	ldr	r1, [pc, #4]	; (3de8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3de2:	6800      	ldr	r0, [r0, #0]
    3de4:	60c8      	str	r0, [r1, #12]
    3de6:	4770      	bx	lr
    3de8:	20000078 	.word	0x20000078

00003dec <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3dec:	4904      	ldr	r1, [pc, #16]	; (3e00 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3dee:	6802      	ldr	r2, [r0, #0]
    3df0:	6840      	ldr	r0, [r0, #4]
    3df2:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3df6:	600a      	str	r2, [r1, #0]
    3df8:	4a02      	ldr	r2, [pc, #8]	; (3e04 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3dfa:	4310      	orrs	r0, r2
    3dfc:	6048      	str	r0, [r1, #4]
    3dfe:	4770      	bx	lr
    3e00:	20000078 	.word	0x20000078
    3e04:	024007f8 	.word	0x024007f8

00003e08 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    3e08:	4901      	ldr	r1, [pc, #4]	; (3e10 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    3e0a:	6800      	ldr	r0, [r0, #0]
    3e0c:	6088      	str	r0, [r1, #8]
    3e0e:	4770      	bx	lr
    3e10:	20000078 	.word	0x20000078

00003e14 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3e14:	4805      	ldr	r0, [pc, #20]	; (3e2c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    3e16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e1a:	6001      	str	r1, [r0, #0]
    3e1c:	0cc9      	lsrs	r1, r1, #19
    3e1e:	6041      	str	r1, [r0, #4]
    3e20:	2100      	movs	r1, #0
    3e22:	6081      	str	r1, [r0, #8]
    3e24:	211f      	movs	r1, #31
    3e26:	60c1      	str	r1, [r0, #12]
    3e28:	4770      	bx	lr
    3e2a:	0000      	.short	0x0000
    3e2c:	20000078 	.word	0x20000078

00003e30 <sdc_hci_cmd_cb_reset>:
    3e30:	b510      	push	{r4, lr}
    3e32:	f7ff ffef 	bl	3e14 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3e36:	2000      	movs	r0, #0
    3e38:	f7ff ff74 	bl	3d24 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    3e3c:	f00d fc03 	bl	11646 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3e40:	4604      	mov	r4, r0
    3e42:	4803      	ldr	r0, [pc, #12]	; (3e50 <sdc_hci_cmd_cb_reset+0x20>)
    3e44:	6800      	ldr	r0, [r0, #0]
    3e46:	b100      	cbz	r0, 3e4a <sdc_hci_cmd_cb_reset+0x1a>
    3e48:	4780      	blx	r0
    3e4a:	4620      	mov	r0, r4
    3e4c:	bd10      	pop	{r4, pc}
    3e4e:	0000      	.short	0x0000
    3e50:	20000088 	.word	0x20000088

00003e54 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    3e54:	4901      	ldr	r1, [pc, #4]	; (3e5c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    3e56:	6008      	str	r0, [r1, #0]
    3e58:	4770      	bx	lr
    3e5a:	0000      	.short	0x0000
    3e5c:	20000088 	.word	0x20000088

00003e60 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    3e60:	2102      	movs	r1, #2
    3e62:	8001      	strh	r1, [r0, #0]
    3e64:	8041      	strh	r1, [r0, #2]
    3e66:	2100      	movs	r1, #0
    3e68:	7101      	strb	r1, [r0, #4]
    3e6a:	21d4      	movs	r1, #212	; 0xd4
    3e6c:	7141      	strb	r1, [r0, #5]
    3e6e:	f24b 5143 	movw	r1, #46403	; 0xb543
    3e72:	80c1      	strh	r1, [r0, #6]
    3e74:	4901      	ldr	r1, [pc, #4]	; (3e7c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    3e76:	6081      	str	r1, [r0, #8]
    3e78:	2000      	movs	r0, #0
    3e7a:	4770      	bx	lr
    3e7c:	e92263cf 	.word	0xe92263cf

00003e80 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>:
    3e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e84:	4607      	mov	r7, r0
    3e86:	b111      	cbz	r1, 3e8e <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xe>
    3e88:	2000      	movs	r0, #0
    3e8a:	b960      	cbnz	r0, 3ea6 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    3e8c:	e001      	b.n	3e92 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x12>
    3e8e:	2001      	movs	r0, #1
    3e90:	e7fb      	b.n	3e8a <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xa>
    3e92:	2901      	cmp	r1, #1
    3e94:	d007      	beq.n	3ea6 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    3e96:	2000      	movs	r0, #0
    3e98:	2800      	cmp	r0, #0
    3e9a:	d01f      	beq.n	3edc <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x5c>
    3e9c:	2400      	movs	r4, #0
    3e9e:	4812      	ldr	r0, [pc, #72]	; (3ee8 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x68>)
    3ea0:	2901      	cmp	r1, #1
    3ea2:	d002      	beq.n	3eaa <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2a>
    3ea4:	e002      	b.n	3eac <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2c>
    3ea6:	2001      	movs	r0, #1
    3ea8:	e7f6      	b.n	3e98 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x18>
    3eaa:	7804      	ldrb	r4, [r0, #0]
    3eac:	2300      	movs	r3, #0
    3eae:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3eb2:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    3eb6:	f810 e001 	ldrb.w	lr, [r0, r1]
    3eba:	e008      	b.n	3ece <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x4e>
    3ebc:	1918      	adds	r0, r3, r4
    3ebe:	f8dc 500c 	ldr.w	r5, [ip, #12]
    3ec2:	b280      	uxth	r0, r0
    3ec4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    3ec8:	b125      	cbz	r5, 3ed4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x54>
    3eca:	1c5b      	adds	r3, r3, #1
    3ecc:	b29b      	uxth	r3, r3
    3ece:	459e      	cmp	lr, r3
    3ed0:	d8f4      	bhi.n	3ebc <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x3c>
    3ed2:	4630      	mov	r0, r6
    3ed4:	8038      	strh	r0, [r7, #0]
    3ed6:	42b0      	cmp	r0, r6
    3ed8:	d102      	bne.n	3ee0 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x60>
    3eda:	2000      	movs	r0, #0
    3edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ee4:	f000 b8b4 	b.w	4050 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x74>
    3ee8:	20001070 	.word	0x20001070

00003eec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    3eec:	b510      	push	{r4, lr}
    3eee:	2802      	cmp	r0, #2
    3ef0:	d304      	bcc.n	3efc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    3ef2:	f240 1153 	movw	r1, #339	; 0x153
    3ef6:	2017      	movs	r0, #23
    3ef8:	f7ff fe44 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3efc:	4901      	ldr	r1, [pc, #4]	; (3f04 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    3efe:	5c08      	ldrb	r0, [r1, r0]
    3f00:	bd10      	pop	{r4, pc}
    3f02:	0000      	.short	0x0000
    3f04:	20001070 	.word	0x20001070

00003f08 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    3f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f0a:	4605      	mov	r5, r0
    3f0c:	18c8      	adds	r0, r1, r3
    3f0e:	28ff      	cmp	r0, #255	; 0xff
    3f10:	d902      	bls.n	3f18 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    3f12:	f240 1121 	movw	r1, #289	; 0x121
    3f16:	e00f      	b.n	3f38 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    3f18:	429a      	cmp	r2, r3
    3f1a:	d902      	bls.n	3f22 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
    3f1c:	f44f 7191 	mov.w	r1, #290	; 0x122
    3f20:	e00a      	b.n	3f38 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    3f22:	b2c4      	uxtb	r4, r0
    3f24:	9500      	str	r5, [sp, #0]
    3f26:	b155      	cbz	r5, 3f3e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x36>
    3f28:	2600      	movs	r6, #0
    3f2a:	1ce8      	adds	r0, r5, #3
    3f2c:	f020 0003 	bic.w	r0, r0, #3
    3f30:	42a8      	cmp	r0, r5
    3f32:	d006      	beq.n	3f42 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    3f34:	f44f 7194 	mov.w	r1, #296	; 0x128
    3f38:	2017      	movs	r0, #23
    3f3a:	f7ff fe23 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f3e:	2601      	movs	r6, #1
    3f40:	e7f3      	b.n	3f2a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    3f42:	4f12      	ldr	r7, [pc, #72]	; (3f8c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x84>)
    3f44:	4668      	mov	r0, sp
    3f46:	703b      	strb	r3, [r7, #0]
    3f48:	7079      	strb	r1, [r7, #1]
    3f4a:	4631      	mov	r1, r6
    3f4c:	f000 f8c6 	bl	40dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    3f50:	2100      	movs	r1, #0
    3f52:	468c      	mov	ip, r1
    3f54:	9800      	ldr	r0, [sp, #0]
    3f56:	1cc0      	adds	r0, r0, #3
    3f58:	f020 0003 	bic.w	r0, r0, #3
    3f5c:	9000      	str	r0, [sp, #0]
    3f5e:	b95e      	cbnz	r6, 3f78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x70>
    3f60:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    3f64:	60d8      	str	r0, [r3, #12]
    3f66:	2000      	movs	r0, #0
    3f68:	e004      	b.n	3f74 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x6c>
    3f6a:	68da      	ldr	r2, [r3, #12]
    3f6c:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    3f70:	1c40      	adds	r0, r0, #1
    3f72:	b2c0      	uxtb	r0, r0
    3f74:	42a0      	cmp	r0, r4
    3f76:	d3f8      	bcc.n	3f6a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x62>
    3f78:	9800      	ldr	r0, [sp, #0]
    3f7a:	1c49      	adds	r1, r1, #1
    3f7c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3f80:	b2c9      	uxtb	r1, r1
    3f82:	9000      	str	r0, [sp, #0]
    3f84:	2902      	cmp	r1, #2
    3f86:	d3e5      	bcc.n	3f54 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x4c>
    3f88:	1b40      	subs	r0, r0, r5
    3f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f8c:	20001070 	.word	0x20001070

00003f90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    3f90:	b570      	push	{r4, r5, r6, lr}
    3f92:	4604      	mov	r4, r0
    3f94:	f00b fed6 	bl	fd44 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    3f98:	b108      	cbz	r0, 3f9e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    3f9a:	2010      	movs	r0, #16
    3f9c:	bd70      	pop	{r4, r5, r6, pc}
    3f9e:	7825      	ldrb	r5, [r4, #0]
    3fa0:	f000 f84e 	bl	4040 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    3fa4:	4602      	mov	r2, r0
    3fa6:	480c      	ldr	r0, [pc, #48]	; (3fd8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    3fa8:	8861      	ldrh	r1, [r4, #2]
    3faa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3fae:	e00e      	b.n	3fce <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    3fb0:	68c3      	ldr	r3, [r0, #12]
    3fb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    3fb6:	b143      	cbz	r3, 3fca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    3fb8:	1c4a      	adds	r2, r1, #1
    3fba:	8062      	strh	r2, [r4, #2]
    3fbc:	80a1      	strh	r1, [r4, #4]
    3fbe:	68c0      	ldr	r0, [r0, #12]
    3fc0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3fc4:	60a0      	str	r0, [r4, #8]
    3fc6:	2000      	movs	r0, #0
    3fc8:	bd70      	pop	{r4, r5, r6, pc}
    3fca:	1c49      	adds	r1, r1, #1
    3fcc:	b289      	uxth	r1, r1
    3fce:	4291      	cmp	r1, r2
    3fd0:	d3ee      	bcc.n	3fb0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    3fd2:	8061      	strh	r1, [r4, #2]
    3fd4:	2005      	movs	r0, #5
    3fd6:	bd70      	pop	{r4, r5, r6, pc}
    3fd8:	20001070 	.word	0x20001070

00003fdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    3fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fe0:	4607      	mov	r7, r0
    3fe2:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    3fe6:	460c      	mov	r4, r1
    3fe8:	f243 0602 	movw	r6, #12290	; 0x3002
    3fec:	38ff      	subs	r0, #255	; 0xff
    3fee:	d020      	beq.n	4032 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    3ff0:	2c02      	cmp	r4, #2
    3ff2:	d302      	bcc.n	3ffa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    3ff4:	2007      	movs	r0, #7
    3ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ffa:	4638      	mov	r0, r7
    3ffc:	f000 f85e 	bl	40bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4000:	0005      	movs	r5, r0
    4002:	d016      	beq.n	4032 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4004:	480c      	ldr	r0, [pc, #48]	; (4038 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4006:	4629      	mov	r1, r5
    4008:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    400c:	4638      	mov	r0, r7
    400e:	4790      	blx	r2
    4010:	480a      	ldr	r0, [pc, #40]	; (403c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4012:	2100      	movs	r1, #0
    4014:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    4018:	68f0      	ldr	r0, [r6, #12]
    401a:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    401e:	4620      	mov	r0, r4
    4020:	f000 f88e 	bl	4140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    4024:	4602      	mov	r2, r0
    4026:	4629      	mov	r1, r5
    4028:	6870      	ldr	r0, [r6, #4]
    402a:	f00b fdc3 	bl	fbb4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    402e:	2000      	movs	r0, #0
    4030:	e7e1      	b.n	3ff6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4032:	4630      	mov	r0, r6
    4034:	e7df      	b.n	3ff6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4036:	0000      	.short	0x0000
    4038:	00004160 	.word	0x00004160
    403c:	20001070 	.word	0x20001070
    4040:	4902      	ldr	r1, [pc, #8]	; (404c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x70>)
    4042:	7808      	ldrb	r0, [r1, #0]
    4044:	7849      	ldrb	r1, [r1, #1]
    4046:	4408      	add	r0, r1
    4048:	b2c0      	uxtb	r0, r0
    404a:	4770      	bx	lr
    404c:	20001070 	.word	0x20001070
    4050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4054:	4690      	mov	r8, r2
    4056:	460e      	mov	r6, r1
    4058:	4607      	mov	r7, r0
    405a:	f00b fde5 	bl	fc28 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    405e:	b140      	cbz	r0, 4072 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x96>
    4060:	4814      	ldr	r0, [pc, #80]	; (40b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>)
    4062:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    4066:	68e0      	ldr	r0, [r4, #12]
    4068:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    406c:	b118      	cbz	r0, 4076 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9a>
    406e:	21f4      	movs	r1, #244	; 0xf4
    4070:	e013      	b.n	409a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    4072:	21f3      	movs	r1, #243	; 0xf3
    4074:	e011      	b.n	409a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    4076:	6860      	ldr	r0, [r4, #4]
    4078:	2800      	cmp	r0, #0
    407a:	d019      	beq.n	40b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    407c:	4630      	mov	r0, r6
    407e:	f000 f85f 	bl	4140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    4082:	4601      	mov	r1, r0
    4084:	6860      	ldr	r0, [r4, #4]
    4086:	f00b fd47 	bl	fb18 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    408a:	0005      	movs	r5, r0
    408c:	d00f      	beq.n	40ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd2>
    408e:	68e0      	ldr	r0, [r4, #12]
    4090:	2e02      	cmp	r6, #2
    4092:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    4096:	d303      	bcc.n	40a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    4098:	21ff      	movs	r1, #255	; 0xff
    409a:	2017      	movs	r0, #23
    409c:	f7ff fd72 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40a0:	4805      	ldr	r0, [pc, #20]	; (40b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xdc>)
    40a2:	4642      	mov	r2, r8
    40a4:	4629      	mov	r1, r5
    40a6:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    40aa:	4638      	mov	r0, r7
    40ac:	4798      	blx	r3
    40ae:	4628      	mov	r0, r5
    40b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40b4:	20001070 	.word	0x20001070
    40b8:	00004158 	.word	0x00004158
    40bc:	b570      	push	{r4, r5, r6, lr}
    40be:	460c      	mov	r4, r1
    40c0:	4605      	mov	r5, r0
    40c2:	f00b fdb1 	bl	fc28 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    40c6:	2800      	cmp	r0, #0
    40c8:	d005      	beq.n	40d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfa>
    40ca:	4803      	ldr	r0, [pc, #12]	; (40d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfc>)
    40cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    40d0:	68c0      	ldr	r0, [r0, #12]
    40d2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    40d6:	bd70      	pop	{r4, r5, r6, pc}
    40d8:	20001070 	.word	0x20001070
    40dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    40e0:	4f16      	ldr	r7, [pc, #88]	; (413c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x160>)
    40e2:	4688      	mov	r8, r1
    40e4:	4605      	mov	r5, r0
    40e6:	2400      	movs	r4, #0
    40e8:	6828      	ldr	r0, [r5, #0]
    40ea:	1cc0      	adds	r0, r0, #3
    40ec:	f020 0003 	bic.w	r0, r0, #3
    40f0:	6028      	str	r0, [r5, #0]
    40f2:	4620      	mov	r0, r4
    40f4:	f000 f824 	bl	4140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    40f8:	5d39      	ldrb	r1, [r7, r4]
    40fa:	4341      	muls	r1, r0
    40fc:	f1b8 0f00 	cmp.w	r8, #0
    4100:	d001      	beq.n	4106 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    4102:	2000      	movs	r0, #0
    4104:	e000      	b.n	4108 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12c>
    4106:	6828      	ldr	r0, [r5, #0]
    4108:	9000      	str	r0, [sp, #0]
    410a:	b118      	cbz	r0, 4114 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    410c:	2600      	movs	r6, #0
    410e:	b11e      	cbz	r6, 4118 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13c>
    4110:	2000      	movs	r0, #0
    4112:	e002      	b.n	411a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4114:	2601      	movs	r6, #1
    4116:	e7fa      	b.n	410e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    4118:	4668      	mov	r0, sp
    411a:	f00b fd2a 	bl	fb72 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    411e:	b91e      	cbnz	r6, 4128 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    4120:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    4124:	9a00      	ldr	r2, [sp, #0]
    4126:	604a      	str	r2, [r1, #4]
    4128:	6829      	ldr	r1, [r5, #0]
    412a:	1c64      	adds	r4, r4, #1
    412c:	4408      	add	r0, r1
    412e:	b2e4      	uxtb	r4, r4
    4130:	6028      	str	r0, [r5, #0]
    4132:	2c02      	cmp	r4, #2
    4134:	d3d8      	bcc.n	40e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    4136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    413a:	0000      	.short	0x0000
    413c:	20001070 	.word	0x20001070
    4140:	4903      	ldr	r1, [pc, #12]	; (4150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x174>)
    4142:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4146:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    414a:	1cc0      	adds	r0, r0, #3
    414c:	4008      	ands	r0, r1
    414e:	4770      	bx	lr
    4150:	00004154 	.word	0x00004154
    4154:	02280190 	.word	0x02280190
    4158:	00010eff 	.word	0x00010eff
    415c:	00010ccf 	.word	0x00010ccf
    4160:	00010f35 	.word	0x00010f35
    4164:	00010ce5 	.word	0x00010ce5

00004168 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4168:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    416c:	4c26      	ldr	r4, [pc, #152]	; (4208 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    416e:	4680      	mov	r8, r0
    4170:	b081      	sub	sp, #4
    4172:	6820      	ldr	r0, [r4, #0]
    4174:	469a      	mov	sl, r3
    4176:	4693      	mov	fp, r2
    4178:	b158      	cbz	r0, 4192 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    417a:	7a02      	ldrb	r2, [r0, #8]
    417c:	4542      	cmp	r2, r8
    417e:	d903      	bls.n	4188 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4180:	6841      	ldr	r1, [r0, #4]
    4182:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4186:	b140      	cbz	r0, 419a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4188:	f243 0002 	movw	r0, #12290	; 0x3002
    418c:	b005      	add	sp, #20
    418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4192:	21a5      	movs	r1, #165	; 0xa5
    4194:	2018      	movs	r0, #24
    4196:	f7ff fcf5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    419a:	4619      	mov	r1, r3
    419c:	9802      	ldr	r0, [sp, #8]
    419e:	f00b fd64 	bl	fc6a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    41a2:	b287      	uxth	r7, r0
    41a4:	4658      	mov	r0, fp
    41a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    41a8:	f00b fd56 	bl	fc58 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    41ac:	b286      	uxth	r6, r0
    41ae:	19b8      	adds	r0, r7, r6
    41b0:	1d00      	adds	r0, r0, #4
    41b2:	b285      	uxth	r5, r0
    41b4:	6820      	ldr	r0, [r4, #0]
    41b6:	46a1      	mov	r9, r4
    41b8:	4629      	mov	r1, r5
    41ba:	6800      	ldr	r0, [r0, #0]
    41bc:	f00b fcac 	bl	fb18 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    41c0:	0004      	movs	r4, r0
    41c2:	d01f      	beq.n	4204 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    41c4:	8065      	strh	r5, [r4, #2]
    41c6:	8026      	strh	r6, [r4, #0]
    41c8:	980e      	ldr	r0, [sp, #56]	; 0x38
    41ca:	1d25      	adds	r5, r4, #4
    41cc:	9000      	str	r0, [sp, #0]
    41ce:	4631      	mov	r1, r6
    41d0:	465a      	mov	r2, fp
    41d2:	2301      	movs	r3, #1
    41d4:	4628      	mov	r0, r5
    41d6:	f00b fbda 	bl	f98e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    41da:	8820      	ldrh	r0, [r4, #0]
    41dc:	4639      	mov	r1, r7
    41de:	4428      	add	r0, r5
    41e0:	2301      	movs	r3, #1
    41e2:	9a02      	ldr	r2, [sp, #8]
    41e4:	f8cd a000 	str.w	sl, [sp]
    41e8:	f00b fbd1 	bl	f98e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    41ec:	8820      	ldrh	r0, [r4, #0]
    41ee:	1941      	adds	r1, r0, r5
    41f0:	4628      	mov	r0, r5
    41f2:	f00b fc02 	bl	f9fa <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    41f6:	f8d9 0000 	ldr.w	r0, [r9]
    41fa:	6841      	ldr	r1, [r0, #4]
    41fc:	2000      	movs	r0, #0
    41fe:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4202:	e7c3      	b.n	418c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4204:	2004      	movs	r0, #4
    4206:	e7c1      	b.n	418c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4208:	2000008c 	.word	0x2000008c

0000420c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    420c:	b570      	push	{r4, r5, r6, lr}
    420e:	4c14      	ldr	r4, [pc, #80]	; (4260 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4210:	6823      	ldr	r3, [r4, #0]
    4212:	b18b      	cbz	r3, 4238 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4214:	7a19      	ldrb	r1, [r3, #8]
    4216:	4281      	cmp	r1, r0
    4218:	d912      	bls.n	4240 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    421a:	685a      	ldr	r2, [r3, #4]
    421c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4220:	b171      	cbz	r1, 4240 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4222:	2500      	movs	r5, #0
    4224:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4228:	884a      	ldrh	r2, [r1, #2]
    422a:	6818      	ldr	r0, [r3, #0]
    422c:	f00b fcc2 	bl	fbb4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4230:	6821      	ldr	r1, [r4, #0]
    4232:	2000      	movs	r0, #0
    4234:	7a0a      	ldrb	r2, [r1, #8]
    4236:	e00c      	b.n	4252 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4238:	21c8      	movs	r1, #200	; 0xc8
    423a:	2018      	movs	r0, #24
    423c:	f7ff fca2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4240:	f243 0002 	movw	r0, #12290	; 0x3002
    4244:	bd70      	pop	{r4, r5, r6, pc}
    4246:	684b      	ldr	r3, [r1, #4]
    4248:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    424c:	b933      	cbnz	r3, 425c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    424e:	1c40      	adds	r0, r0, #1
    4250:	b2c0      	uxtb	r0, r0
    4252:	4282      	cmp	r2, r0
    4254:	d8f7      	bhi.n	4246 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4256:	6808      	ldr	r0, [r1, #0]
    4258:	f00b fca1 	bl	fb9e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    425c:	2000      	movs	r0, #0
    425e:	bd70      	pop	{r4, r5, r6, pc}
    4260:	2000008c 	.word	0x2000008c

00004264 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4268:	460d      	mov	r5, r1
    426a:	0004      	movs	r4, r0
    426c:	4690      	mov	r8, r2
    426e:	f04f 0600 	mov.w	r6, #0
    4272:	d009      	beq.n	4288 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4274:	2700      	movs	r7, #0
    4276:	1ce0      	adds	r0, r4, #3
    4278:	f020 0003 	bic.w	r0, r0, #3
    427c:	42a0      	cmp	r0, r4
    427e:	d005      	beq.n	428c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4280:	2186      	movs	r1, #134	; 0x86
    4282:	2018      	movs	r0, #24
    4284:	f7ff fc7e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4288:	2701      	movs	r7, #1
    428a:	e7f4      	b.n	4276 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    428c:	b1cd      	cbz	r5, 42c2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    428e:	4611      	mov	r1, r2
    4290:	2000      	movs	r0, #0
    4292:	f00b fc6e 	bl	fb72 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4296:	300c      	adds	r0, #12
    4298:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    429c:	b98f      	cbnz	r7, 42c2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    429e:	4f0a      	ldr	r7, [pc, #40]	; (42c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    42a0:	f104 000c 	add.w	r0, r4, #12
    42a4:	00aa      	lsls	r2, r5, #2
    42a6:	603c      	str	r4, [r7, #0]
    42a8:	7225      	strb	r5, [r4, #8]
    42aa:	6060      	str	r0, [r4, #4]
    42ac:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    42b0:	6020      	str	r0, [r4, #0]
    42b2:	2100      	movs	r1, #0
    42b4:	6860      	ldr	r0, [r4, #4]
    42b6:	f00a fbb7 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    42ba:	4641      	mov	r1, r8
    42bc:	6838      	ldr	r0, [r7, #0]
    42be:	f00b fc58 	bl	fb72 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    42c2:	4630      	mov	r0, r6
    42c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42c8:	2000008c 	.word	0x2000008c

000042cc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    42cc:	b570      	push	{r4, r5, r6, lr}
    42ce:	4d08      	ldr	r5, [pc, #32]	; (42f0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    42d0:	6828      	ldr	r0, [r5, #0]
    42d2:	2800      	cmp	r0, #0
    42d4:	d00a      	beq.n	42ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    42d6:	2400      	movs	r4, #0
    42d8:	e004      	b.n	42e4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    42da:	4620      	mov	r0, r4
    42dc:	f7ff ff96 	bl	420c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    42e0:	1c64      	adds	r4, r4, #1
    42e2:	b2e4      	uxtb	r4, r4
    42e4:	6828      	ldr	r0, [r5, #0]
    42e6:	7a00      	ldrb	r0, [r0, #8]
    42e8:	42a0      	cmp	r0, r4
    42ea:	d8f6      	bhi.n	42da <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    42ec:	bd70      	pop	{r4, r5, r6, pc}
    42ee:	0000      	.short	0x0000
    42f0:	2000008c 	.word	0x2000008c

000042f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    42f4:	4909      	ldr	r1, [pc, #36]	; (431c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    42f6:	b510      	push	{r4, lr}
    42f8:	4602      	mov	r2, r0
    42fa:	6809      	ldr	r1, [r1, #0]
    42fc:	2000      	movs	r0, #0
    42fe:	b149      	cbz	r1, 4314 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4300:	7a0b      	ldrb	r3, [r1, #8]
    4302:	4293      	cmp	r3, r2
    4304:	d905      	bls.n	4312 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4306:	6849      	ldr	r1, [r1, #4]
    4308:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    430c:	2900      	cmp	r1, #0
    430e:	d000      	beq.n	4312 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4310:	1d08      	adds	r0, r1, #4
    4312:	bd10      	pop	{r4, pc}
    4314:	21ee      	movs	r1, #238	; 0xee
    4316:	2018      	movs	r0, #24
    4318:	f7ff fc34 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    431c:	2000008c 	.word	0x2000008c

00004320 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4320:	490a      	ldr	r1, [pc, #40]	; (434c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4322:	b510      	push	{r4, lr}
    4324:	4602      	mov	r2, r0
    4326:	6809      	ldr	r1, [r1, #0]
    4328:	2000      	movs	r0, #0
    432a:	b159      	cbz	r1, 4344 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    432c:	7a0b      	ldrb	r3, [r1, #8]
    432e:	4293      	cmp	r3, r2
    4330:	d907      	bls.n	4342 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4332:	6849      	ldr	r1, [r1, #4]
    4334:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4338:	2900      	cmp	r1, #0
    433a:	d002      	beq.n	4342 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    433c:	f831 0b04 	ldrh.w	r0, [r1], #4
    4340:	4408      	add	r0, r1
    4342:	bd10      	pop	{r4, pc}
    4344:	21fc      	movs	r1, #252	; 0xfc
    4346:	2018      	movs	r0, #24
    4348:	f7ff fc1c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    434c:	2000008c 	.word	0x2000008c
    4350:	4909      	ldr	r1, [pc, #36]	; (4378 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x58>)
    4352:	b510      	push	{r4, lr}
    4354:	4807      	ldr	r0, [pc, #28]	; (4374 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x54>)
    4356:	6008      	str	r0, [r1, #0]
    4358:	4b08      	ldr	r3, [pc, #32]	; (437c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x5c>)
    435a:	2011      	movs	r0, #17
    435c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4360:	2200      	movs	r2, #0
    4362:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4366:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    436a:	1c40      	adds	r0, r0, #1
    436c:	b2c0      	uxtb	r0, r0
    436e:	2814      	cmp	r0, #20
    4370:	d3f4      	bcc.n	435c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x3c>
    4372:	bd10      	pop	{r4, pc}
    4374:	fffe0000 	.word	0xfffe0000
    4378:	4001f508 	.word	0x4001f508
    437c:	4001f000 	.word	0x4001f000
    4380:	b570      	push	{r4, r5, r6, lr}
    4382:	2420      	movs	r4, #32
    4384:	2100      	movs	r1, #0
    4386:	2301      	movs	r3, #1
    4388:	fa20 f201 	lsr.w	r2, r0, r1
    438c:	07d2      	lsls	r2, r2, #31
    438e:	d020      	beq.n	43d2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    4390:	b24a      	sxtb	r2, r1
    4392:	2a00      	cmp	r2, #0
    4394:	db10      	blt.n	43b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x98>
    4396:	bf00      	nop
    4398:	ea4f 1652 	mov.w	r6, r2, lsr #5
    439c:	ea4f 0686 	mov.w	r6, r6, lsl #2
    43a0:	f002 051f 	and.w	r5, r2, #31
    43a4:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    43a8:	fa03 f505 	lsl.w	r5, r3, r5
    43ac:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    43b0:	f3bf 8f4f 	dsb	sy
    43b4:	f3bf 8f6f 	isb	sy
    43b8:	db0b      	blt.n	43d2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    43ba:	f002 051f 	and.w	r5, r2, #31
    43be:	ea4f 1252 	mov.w	r2, r2, lsr #5
    43c2:	ea4f 0282 	mov.w	r2, r2, lsl #2
    43c6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    43ca:	fa03 f505 	lsl.w	r5, r3, r5
    43ce:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    43d2:	f101 0101 	add.w	r1, r1, #1
    43d6:	42a1      	cmp	r1, r4
    43d8:	d3d6      	bcc.n	4388 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    43da:	bd70      	pop	{r4, r5, r6, pc}
    43dc:	b570      	push	{r4, r5, r6, lr}
    43de:	0041      	lsls	r1, r0, #1
    43e0:	f04f 0300 	mov.w	r3, #0
    43e4:	d501      	bpl.n	43ea <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xca>
    43e6:	491a      	ldr	r1, [pc, #104]	; (4450 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x130>)
    43e8:	600b      	str	r3, [r1, #0]
    43ea:	0484      	lsls	r4, r0, #18
    43ec:	f04f 0101 	mov.w	r1, #1
    43f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    43f4:	d507      	bpl.n	4406 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xe6>
    43f6:	4c17      	ldr	r4, [pc, #92]	; (4454 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x134>)
    43f8:	6061      	str	r1, [r4, #4]
    43fa:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    43fe:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    4402:	4c15      	ldr	r4, [pc, #84]	; (4458 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x138>)
    4404:	6023      	str	r3, [r4, #0]
    4406:	f3c0 3480 	ubfx	r4, r0, #14, #1
    440a:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    440e:	42ac      	cmp	r4, r5
    4410:	d003      	beq.n	441a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xfa>
    4412:	2172      	movs	r1, #114	; 0x72
    4414:	201b      	movs	r0, #27
    4416:	f7ff fbb5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    441a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    441e:	d012      	beq.n	4446 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x126>
    4420:	480e      	ldr	r0, [pc, #56]	; (445c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x13c>)
    4422:	6041      	str	r1, [r0, #4]
    4424:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4428:	480d      	ldr	r0, [pc, #52]	; (4460 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x140>)
    442a:	6081      	str	r1, [r0, #8]
    442c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4430:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4434:	4c0b      	ldr	r4, [pc, #44]	; (4464 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x144>)
    4436:	6023      	str	r3, [r4, #0]
    4438:	1d25      	adds	r5, r4, #4
    443a:	6029      	str	r1, [r5, #0]
    443c:	6081      	str	r1, [r0, #8]
    443e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4442:	6023      	str	r3, [r4, #0]
    4444:	6029      	str	r1, [r5, #0]
    4446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    444a:	f7ff bf81 	b.w	4350 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    444e:	0000      	.short	0x0000
    4450:	4001e504 	.word	0x4001e504
    4454:	4000d000 	.word	0x4000d000
    4458:	4000d504 	.word	0x4000d504
    445c:	4000e000 	.word	0x4000e000
    4460:	4000f000 	.word	0x4000f000
    4464:	4000f500 	.word	0x4000f500

00004468 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4468:	b570      	push	{r4, r5, r6, lr}
    446a:	4c0b      	ldr	r4, [pc, #44]	; (4498 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x30>)
    446c:	460d      	mov	r5, r1
    446e:	6020      	str	r0, [r4, #0]
    4470:	f7ff ffb4 	bl	43dc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xbc>
    4474:	6820      	ldr	r0, [r4, #0]
    4476:	f7ff ff83 	bl	4380 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x60>
    447a:	f000 f879 	bl	4570 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    447e:	f000 f959 	bl	4734 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>
    4482:	f7ff ff65 	bl	4350 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4486:	f00b fc26 	bl	fcd6 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    448a:	4628      	mov	r0, r5
    448c:	f000 f8aa 	bl	45e4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4494:	f000 b8c2 	b.w	461c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4498:	20000090 	.word	0x20000090

0000449c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    449c:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    44a0:	4e2f      	ldr	r6, [pc, #188]	; (4560 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    44a2:	4683      	mov	fp, r0
    44a4:	6830      	ldr	r0, [r6, #0]
    44a6:	9001      	str	r0, [sp, #4]
    44a8:	2701      	movs	r7, #1
    44aa:	482e      	ldr	r0, [pc, #184]	; (4564 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    44ac:	f00a fa22 	bl	e8f4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    44b0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4564 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    44b4:	b920      	cbnz	r0, 44c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    44b6:	2700      	movs	r7, #0
    44b8:	f108 0001 	add.w	r0, r8, #1
    44bc:	f00a fa31 	bl	e922 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    44c0:	4c29      	ldr	r4, [pc, #164]	; (4568 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    44c2:	2500      	movs	r5, #0
    44c4:	f04f 0903 	mov.w	r9, #3
    44c8:	2001      	movs	r0, #1
    44ca:	6060      	str	r0, [r4, #4]
    44cc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    44d0:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    44d4:	f8c6 b000 	str.w	fp, [r6]
    44d8:	6020      	str	r0, [r4, #0]
    44da:	f8df a090 	ldr.w	sl, [pc, #144]	; 456c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    44de:	e017      	b.n	4510 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    44e0:	f8da 0000 	ldr.w	r0, [sl]
    44e4:	06c0      	lsls	r0, r0, #27
    44e6:	d513      	bpl.n	4510 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    44e8:	200e      	movs	r0, #14
    44ea:	f00b fbc7 	bl	fc7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    44ee:	f3ef 8010 	mrs	r0, PRIMASK
    44f2:	9000      	str	r0, [sp, #0]
    44f4:	b672      	cpsid	i
    44f6:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    44fa:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    44fe:	b920      	cbnz	r0, 450a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4500:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4504:	b908      	cbnz	r0, 450a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4506:	f7ff f983 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    450a:	9800      	ldr	r0, [sp, #0]
    450c:	b900      	cbnz	r0, 4510 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    450e:	b662      	cpsie	i
    4510:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4514:	b918      	cbnz	r0, 451e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4516:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    451a:	2800      	cmp	r0, #0
    451c:	d0e0      	beq.n	44e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    451e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4522:	2800      	cmp	r0, #0
    4524:	d1d0      	bne.n	44c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    4526:	b137      	cbz	r7, 4536 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4528:	9801      	ldr	r0, [sp, #4]
    452a:	6030      	str	r0, [r6, #0]
    452c:	f108 0001 	add.w	r0, r8, #1
    4530:	f00a f9e0 	bl	e8f4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4534:	e011      	b.n	455a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    4536:	f108 0001 	add.w	r0, r8, #1
    453a:	f00a f9db 	bl	e8f4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    453e:	2800      	cmp	r0, #0
    4540:	d1ba      	bne.n	44b8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4542:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    4546:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    454a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    454e:	200e      	movs	r0, #14
    4550:	f00b fb94 	bl	fc7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4554:	4803      	ldr	r0, [pc, #12]	; (4564 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4556:	f00a f9e4 	bl	e922 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    455a:	2000      	movs	r0, #0
    455c:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4560:	4000e504 	.word	0x4000e504
    4564:	200003a8 	.word	0x200003a8
    4568:	4000e000 	.word	0x4000e000
    456c:	e000ed10 	.word	0xe000ed10

00004570 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4570:	b510      	push	{r4, lr}
    4572:	4808      	ldr	r0, [pc, #32]	; (4594 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4574:	f00a f9d1 	bl	e91a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4578:	b108      	cbz	r0, 457e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    457a:	2124      	movs	r1, #36	; 0x24
    457c:	e006      	b.n	458c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    457e:	4805      	ldr	r0, [pc, #20]	; (4594 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4580:	1c40      	adds	r0, r0, #1
    4582:	f00a f9ca 	bl	e91a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4586:	2800      	cmp	r0, #0
    4588:	d003      	beq.n	4592 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    458a:	2128      	movs	r1, #40	; 0x28
    458c:	201d      	movs	r0, #29
    458e:	f7ff faf9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4592:	bd10      	pop	{r4, pc}
    4594:	200003a8 	.word	0x200003a8

00004598 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4598:	b570      	push	{r4, r5, r6, lr}
    459a:	4911      	ldr	r1, [pc, #68]	; (45e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    459c:	680a      	ldr	r2, [r1, #0]
    459e:	b1ea      	cbz	r2, 45dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    45a0:	2300      	movs	r3, #0
    45a2:	461d      	mov	r5, r3
    45a4:	2401      	movs	r4, #1
    45a6:	684a      	ldr	r2, [r1, #4]
    45a8:	1c52      	adds	r2, r2, #1
    45aa:	604a      	str	r2, [r1, #4]
    45ac:	2a09      	cmp	r2, #9
    45ae:	d300      	bcc.n	45b2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    45b0:	604d      	str	r5, [r1, #4]
    45b2:	790e      	ldrb	r6, [r1, #4]
    45b4:	fa04 f206 	lsl.w	r2, r4, r6
    45b8:	680e      	ldr	r6, [r1, #0]
    45ba:	4216      	tst	r6, r2
    45bc:	d00b      	beq.n	45d6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    45be:	f3ef 8310 	mrs	r3, PRIMASK
    45c2:	b672      	cpsid	i
    45c4:	680c      	ldr	r4, [r1, #0]
    45c6:	4394      	bics	r4, r2
    45c8:	600c      	str	r4, [r1, #0]
    45ca:	b903      	cbnz	r3, 45ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    45cc:	b662      	cpsie	i
    45ce:	6849      	ldr	r1, [r1, #4]
    45d0:	6001      	str	r1, [r0, #0]
    45d2:	2000      	movs	r0, #0
    45d4:	bd70      	pop	{r4, r5, r6, pc}
    45d6:	1c5b      	adds	r3, r3, #1
    45d8:	2b09      	cmp	r3, #9
    45da:	d3e4      	bcc.n	45a6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    45dc:	2005      	movs	r0, #5
    45de:	bd70      	pop	{r4, r5, r6, pc}
    45e0:	20000094 	.word	0x20000094

000045e4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    45e4:	4802      	ldr	r0, [pc, #8]	; (45f0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    45e6:	2100      	movs	r1, #0
    45e8:	6001      	str	r1, [r0, #0]
    45ea:	6041      	str	r1, [r0, #4]
    45ec:	4770      	bx	lr
    45ee:	0000      	.short	0x0000
    45f0:	20000094 	.word	0x20000094

000045f4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    45f4:	b510      	push	{r4, lr}
    45f6:	4c08      	ldr	r4, [pc, #32]	; (4618 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    45f8:	7861      	ldrb	r1, [r4, #1]
    45fa:	b109      	cbz	r1, 4600 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    45fc:	200f      	movs	r0, #15
    45fe:	bd10      	pop	{r4, pc}
    4600:	f7ff f896 	bl	3730 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4604:	7020      	strb	r0, [r4, #0]
    4606:	28ff      	cmp	r0, #255	; 0xff
    4608:	d001      	beq.n	460e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    460a:	2000      	movs	r0, #0
    460c:	bd10      	pop	{r4, pc}
    460e:	2172      	movs	r1, #114	; 0x72
    4610:	201f      	movs	r0, #31
    4612:	f7ff fab7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4616:	0000      	.short	0x0000
    4618:	2000009c 	.word	0x2000009c

0000461c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    461c:	4901      	ldr	r1, [pc, #4]	; (4624 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    461e:	2000      	movs	r0, #0
    4620:	7048      	strb	r0, [r1, #1]
    4622:	4770      	bx	lr
    4624:	2000009c 	.word	0x2000009c

00004628 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>:
    4628:	4906      	ldr	r1, [pc, #24]	; (4644 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1c>)
    462a:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
    462e:	2801      	cmp	r0, #1
    4630:	d107      	bne.n	4642 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1a>
    4632:	4805      	ldr	r0, [pc, #20]	; (4648 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x20>)
    4634:	6800      	ldr	r0, [r0, #0]
    4636:	2200      	movs	r2, #0
    4638:	b2c0      	uxtb	r0, r0
    463a:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    463e:	f000 b8e1 	b.w	4804 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>
    4642:	4770      	bx	lr
    4644:	4000d000 	.word	0x4000d000
    4648:	4000d508 	.word	0x4000d508

0000464c <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>:
    464c:	4901      	ldr	r1, [pc, #4]	; (4654 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ+0x8>)
    464e:	2001      	movs	r0, #1
    4650:	6008      	str	r0, [r1, #0]
    4652:	4770      	bx	lr
    4654:	4000d504 	.word	0x4000d504

00004658 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>:
    4658:	b510      	push	{r4, lr}
    465a:	4806      	ldr	r0, [pc, #24]	; (4674 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x1c>)
    465c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    4660:	2900      	cmp	r1, #0
    4662:	d0fb      	beq.n	465c <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x4>
    4664:	f7ff ffe0 	bl	4628 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>
    4668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    466c:	200d      	movs	r0, #13
    466e:	f00b bb14 	b.w	fc9a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    4672:	0000      	.short	0x0000
    4674:	4000d000 	.word	0x4000d000

00004678 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>:
    4678:	b570      	push	{r4, r5, r6, lr}
    467a:	200d      	movs	r0, #13
    467c:	f00b fb1a 	bl	fcb4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    4680:	4c08      	ldr	r4, [pc, #32]	; (46a4 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY+0x2c>)
    4682:	2000      	movs	r0, #0
    4684:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4688:	2501      	movs	r5, #1
    468a:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    468e:	200d      	movs	r0, #13
    4690:	f00b fb03 	bl	fc9a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    4694:	6025      	str	r5, [r4, #0]
    4696:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    469a:	1460      	asrs	r0, r4, #17
    469c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    46a0:	bd70      	pop	{r4, r5, r6, pc}
    46a2:	0000      	.short	0x0000
    46a4:	4000d000 	.word	0x4000d000

000046a8 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>:
    46a8:	b510      	push	{r4, lr}
    46aa:	200d      	movs	r0, #13
    46ac:	f00b fb02 	bl	fcb4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    46b0:	4805      	ldr	r0, [pc, #20]	; (46c8 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x20>)
    46b2:	2101      	movs	r1, #1
    46b4:	6041      	str	r1, [r0, #4]
    46b6:	2100      	movs	r1, #0
    46b8:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    46bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46c0:	200d      	movs	r0, #13
    46c2:	f00b baea 	b.w	fc9a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    46c6:	0000      	.short	0x0000
    46c8:	4000d000 	.word	0x4000d000
    46cc:	b510      	push	{r4, lr}
    46ce:	4805      	ldr	r0, [pc, #20]	; (46e4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x3c>)
    46d0:	f00a f910 	bl	e8f4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    46d4:	2800      	cmp	r0, #0
    46d6:	d103      	bne.n	46e0 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x38>
    46d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46dc:	f7ff bfcc 	b.w	4678 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>
    46e0:	bd10      	pop	{r4, pc}
    46e2:	0000      	.short	0x0000
    46e4:	200000b8 	.word	0x200000b8
    46e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46ec:	4615      	mov	r5, r2
    46ee:	460e      	mov	r6, r1
    46f0:	4604      	mov	r4, r0
    46f2:	2700      	movs	r7, #0
    46f4:	f00b fb09 	bl	fd0a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    46f8:	42a8      	cmp	r0, r5
    46fa:	d315      	bcc.n	4728 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x80>
    46fc:	2300      	movs	r3, #0
    46fe:	2041      	movs	r0, #65	; 0x41
    4700:	e00f      	b.n	4722 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x7a>
    4702:	bf00      	nop
    4704:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    4708:	5ca2      	ldrb	r2, [r4, r2]
    470a:	54f2      	strb	r2, [r6, r3]
    470c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    4710:	1c49      	adds	r1, r1, #1
    4712:	fbb1 f2f0 	udiv	r2, r1, r0
    4716:	fb00 1112 	mls	r1, r0, r2, r1
    471a:	1c5b      	adds	r3, r3, #1
    471c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    4720:	b2db      	uxtb	r3, r3
    4722:	42ab      	cmp	r3, r5
    4724:	d3ee      	bcc.n	4704 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x5c>
    4726:	2701      	movs	r7, #1
    4728:	f7ff ffd0 	bl	46cc <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    472c:	4638      	mov	r0, r7
    472e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004734 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>:
    4734:	490e      	ldr	r1, [pc, #56]	; (4770 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x3c>)
    4736:	b510      	push	{r4, lr}
    4738:	2000      	movs	r0, #0
    473a:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    473e:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4742:	3143      	adds	r1, #67	; 0x43
    4744:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4748:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    474c:	3143      	adds	r1, #67	; 0x43
    474e:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4752:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4756:	4807      	ldr	r0, [pc, #28]	; (4774 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    4758:	f00a f8df 	bl	e91a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    475c:	4805      	ldr	r0, [pc, #20]	; (4774 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    475e:	1c40      	adds	r0, r0, #1
    4760:	f00a f8db 	bl	e91a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4764:	f7ff ff72 	bl	464c <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>
    4768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    476c:	f7ff bfae 	b.w	46cc <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    4770:	20001960 	.word	0x20001960
    4774:	200000b8 	.word	0x200000b8

00004778 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY>:
    4778:	4801      	ldr	r0, [pc, #4]	; (4780 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY+0x8>)
    477a:	f00b bac6 	b.w	fd0a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    477e:	0000      	.short	0x0000
    4780:	200019a3 	.word	0x200019a3

00004784 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>:
    4784:	460a      	mov	r2, r1
    4786:	4601      	mov	r1, r0
    4788:	4801      	ldr	r0, [pc, #4]	; (4790 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y+0xc>)
    478a:	f7ff bfad 	b.w	46e8 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    478e:	0000      	.short	0x0000
    4790:	200019a3 	.word	0x200019a3

00004794 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>:
    4794:	4801      	ldr	r0, [pc, #4]	; (479c <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ+0x8>)
    4796:	f00b bab8 	b.w	fd0a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    479a:	0000      	.short	0x0000
    479c:	20001960 	.word	0x20001960

000047a0 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>:
    47a0:	460a      	mov	r2, r1
    47a2:	4601      	mov	r1, r0
    47a4:	4801      	ldr	r0, [pc, #4]	; (47ac <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI+0xc>)
    47a6:	f7ff bf9f 	b.w	46e8 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    47aa:	0000      	.short	0x0000
    47ac:	20001960 	.word	0x20001960

000047b0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>:
    47b0:	b570      	push	{r4, r5, r6, lr}
    47b2:	460c      	mov	r4, r1
    47b4:	4606      	mov	r6, r0
    47b6:	2941      	cmp	r1, #65	; 0x41
    47b8:	d903      	bls.n	47c2 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x12>
    47ba:	21fb      	movs	r1, #251	; 0xfb
    47bc:	2023      	movs	r0, #35	; 0x23
    47be:	f7ff f9e1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47c2:	480e      	ldr	r0, [pc, #56]	; (47fc <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x4c>)
    47c4:	6800      	ldr	r0, [r0, #0]
    47c6:	3810      	subs	r0, #16
    47c8:	b240      	sxtb	r0, r0
    47ca:	f00b fa8f 	bl	fcec <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    47ce:	b2c5      	uxtb	r5, r0
    47d0:	200d      	movs	r0, #13
    47d2:	f00b fa8b 	bl	fcec <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    47d6:	b2c0      	uxtb	r0, r0
    47d8:	4285      	cmp	r5, r0
    47da:	d801      	bhi.n	47e0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x30>
    47dc:	2501      	movs	r5, #1
    47de:	e004      	b.n	47ea <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    47e0:	2500      	movs	r5, #0
    47e2:	e002      	b.n	47ea <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    47e4:	b10d      	cbz	r5, 47ea <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    47e6:	f7ff ff37 	bl	4658 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>
    47ea:	4622      	mov	r2, r4
    47ec:	4631      	mov	r1, r6
    47ee:	4804      	ldr	r0, [pc, #16]	; (4800 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x50>)
    47f0:	f7ff ff7a 	bl	46e8 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    47f4:	2800      	cmp	r0, #0
    47f6:	d0f5      	beq.n	47e4 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x34>
    47f8:	bd70      	pop	{r4, r5, r6, pc}
    47fa:	0000      	.short	0x0000
    47fc:	e000ed04 	.word	0xe000ed04
    4800:	20001960 	.word	0x20001960

00004804 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>:
    4804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4808:	4f1f      	ldr	r7, [pc, #124]	; (4888 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    480a:	4606      	mov	r6, r0
    480c:	2500      	movs	r5, #0
    480e:	bf00      	nop
    4810:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
    4814:	4620      	mov	r0, r4
    4816:	f00b fa84 	bl	fd22 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    481a:	b300      	cbz	r0, 485e <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x5a>
    481c:	1c6d      	adds	r5, r5, #1
    481e:	b2ed      	uxtb	r5, r5
    4820:	2d03      	cmp	r5, #3
    4822:	d3f5      	bcc.n	4810 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0xc>
    4824:	4819      	ldr	r0, [pc, #100]	; (488c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4826:	f00b fa7c 	bl	fd22 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    482a:	2800      	cmp	r0, #0
    482c:	d02a      	beq.n	4884 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    482e:	4817      	ldr	r0, [pc, #92]	; (488c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4830:	3843      	subs	r0, #67	; 0x43
    4832:	f00b fa76 	bl	fd22 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4836:	2800      	cmp	r0, #0
    4838:	d024      	beq.n	4884 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    483a:	4814      	ldr	r0, [pc, #80]	; (488c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    483c:	3043      	adds	r0, #67	; 0x43
    483e:	f00b fa70 	bl	fd22 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4842:	2800      	cmp	r0, #0
    4844:	d01e      	beq.n	4884 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4846:	f7ff ff2f 	bl	46a8 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>
    484a:	480f      	ldr	r0, [pc, #60]	; (4888 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    484c:	1f00      	subs	r0, r0, #4
    484e:	f00a f851 	bl	e8f4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4852:	3023      	adds	r0, #35	; 0x23
    4854:	d010      	beq.n	4878 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x74>
    4856:	21b3      	movs	r1, #179	; 0xb3
    4858:	2023      	movs	r0, #35	; 0x23
    485a:	f7ff f993 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    485e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    4862:	2141      	movs	r1, #65	; 0x41
    4864:	5426      	strb	r6, [r4, r0]
    4866:	f814 0f41 	ldrb.w	r0, [r4, #65]!
    486a:	1c40      	adds	r0, r0, #1
    486c:	fbb0 f2f1 	udiv	r2, r0, r1
    4870:	fb01 0012 	mls	r0, r1, r2, r0
    4874:	7020      	strb	r0, [r4, #0]
    4876:	e7d5      	b.n	4824 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x20>
    4878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    487c:	4802      	ldr	r0, [pc, #8]	; (4888 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    487e:	1f00      	subs	r0, r0, #4
    4880:	f00a b84f 	b.w	e922 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4888:	200000bc 	.word	0x200000bc
    488c:	200019a3 	.word	0x200019a3

00004890 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    4890:	4905      	ldr	r1, [pc, #20]	; (48a8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    4892:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4894:	4282      	cmp	r2, r0
    4896:	bf18      	it	ne
    4898:	4770      	bxne	lr
    489a:	2000      	movs	r0, #0
    489c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    48a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    48a4:	8488      	strh	r0, [r1, #36]	; 0x24
    48a6:	4770      	bx	lr
    48a8:	200018f0 	.word	0x200018f0

000048ac <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    48ac:	4806      	ldr	r0, [pc, #24]	; (48c8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    48ae:	4a07      	ldr	r2, [pc, #28]	; (48cc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    48b0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    48b2:	8852      	ldrh	r2, [r2, #2]
    48b4:	4291      	cmp	r1, r2
    48b6:	d105      	bne.n	48c4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
    48b8:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    48bc:	2800      	cmp	r0, #0
    48be:	bf1c      	itt	ne
    48c0:	2000      	movne	r0, #0
    48c2:	4770      	bxne	lr
    48c4:	2001      	movs	r0, #1
    48c6:	4770      	bx	lr
    48c8:	200018f0 	.word	0x200018f0
    48cc:	20000394 	.word	0x20000394

000048d0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    48d0:	4901      	ldr	r1, [pc, #4]	; (48d8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    48d2:	8048      	strh	r0, [r1, #2]
    48d4:	4770      	bx	lr
    48d6:	0000      	.short	0x0000
    48d8:	20000394 	.word	0x20000394

000048dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    48dc:	4808      	ldr	r0, [pc, #32]	; (4900 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    48de:	4a09      	ldr	r2, [pc, #36]	; (4904 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    48e0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    48e2:	8852      	ldrh	r2, [r2, #2]
    48e4:	4291      	cmp	r1, r2
    48e6:	d109      	bne.n	48fc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    48e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    48ec:	8481      	strh	r1, [r0, #36]	; 0x24
    48ee:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    48f2:	b119      	cbz	r1, 48fc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    48f4:	2100      	movs	r1, #0
    48f6:	7001      	strb	r1, [r0, #0]
    48f8:	2001      	movs	r0, #1
    48fa:	4770      	bx	lr
    48fc:	2000      	movs	r0, #0
    48fe:	4770      	bx	lr
    4900:	200018f0 	.word	0x200018f0
    4904:	20000394 	.word	0x20000394

00004908 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4908:	4907      	ldr	r1, [pc, #28]	; (4928 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    490a:	f101 0022 	add.w	r0, r1, #34	; 0x22
    490e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4912:	2a01      	cmp	r2, #1
    4914:	bf04      	itt	eq
    4916:	2000      	moveq	r0, #0
    4918:	4770      	bxeq	lr
    491a:	2201      	movs	r2, #1
    491c:	7002      	strb	r2, [r0, #0]
    491e:	4803      	ldr	r0, [pc, #12]	; (492c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4920:	8800      	ldrh	r0, [r0, #0]
    4922:	8488      	strh	r0, [r1, #36]	; 0x24
    4924:	4610      	mov	r0, r2
    4926:	4770      	bx	lr
    4928:	200018f0 	.word	0x200018f0
    492c:	20000394 	.word	0x20000394

00004930 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4930:	4907      	ldr	r1, [pc, #28]	; (4950 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4932:	4b08      	ldr	r3, [pc, #32]	; (4954 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    4934:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4936:	885b      	ldrh	r3, [r3, #2]
    4938:	429a      	cmp	r2, r3
    493a:	d106      	bne.n	494a <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    493c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4940:	2a00      	cmp	r2, #0
    4942:	bf1e      	ittt	ne
    4944:	6001      	strne	r1, [r0, #0]
    4946:	2001      	movne	r0, #1
    4948:	4770      	bxne	lr
    494a:	2000      	movs	r0, #0
    494c:	4770      	bx	lr
    494e:	0000      	.short	0x0000
    4950:	200018f0 	.word	0x200018f0
    4954:	20000394 	.word	0x20000394

00004958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4958:	4909      	ldr	r1, [pc, #36]	; (4980 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    495a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    495c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4960:	3bff      	subs	r3, #255	; 0xff
    4962:	d003      	beq.n	496c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
    4964:	2100      	movs	r1, #0
    4966:	6001      	str	r1, [r0, #0]
    4968:	4608      	mov	r0, r1
    496a:	4770      	bx	lr
    496c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4970:	4903      	ldr	r1, [pc, #12]	; (4980 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4972:	2a01      	cmp	r2, #1
    4974:	bf1a      	itte	ne
    4976:	6001      	strne	r1, [r0, #0]
    4978:	2001      	movne	r0, #1
    497a:	2000      	moveq	r0, #0
    497c:	4770      	bx	lr
    497e:	0000      	.short	0x0000
    4980:	200018f0 	.word	0x200018f0

00004984 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4984:	4901      	ldr	r1, [pc, #4]	; (498c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4986:	8008      	strh	r0, [r1, #0]
    4988:	4770      	bx	lr
    498a:	0000      	.short	0x0000
    498c:	20000394 	.word	0x20000394

00004990 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    4990:	4905      	ldr	r1, [pc, #20]	; (49a8 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x18>)
    4992:	2000      	movs	r0, #0
    4994:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4998:	f64f 70ff 	movw	r0, #65535	; 0xffff
    499c:	8488      	strh	r0, [r1, #36]	; 0x24
    499e:	4903      	ldr	r1, [pc, #12]	; (49ac <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x1c>)
    49a0:	8008      	strh	r0, [r1, #0]
    49a2:	8048      	strh	r0, [r1, #2]
    49a4:	4770      	bx	lr
    49a6:	0000      	.short	0x0000
    49a8:	200018f0 	.word	0x200018f0
    49ac:	20000394 	.word	0x20000394

000049b0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    49b0:	4905      	ldr	r1, [pc, #20]	; (49c8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    49b2:	2000      	movs	r0, #0
    49b4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    49b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    49bc:	8488      	strh	r0, [r1, #36]	; 0x24
    49be:	4903      	ldr	r1, [pc, #12]	; (49cc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    49c0:	8008      	strh	r0, [r1, #0]
    49c2:	8048      	strh	r0, [r1, #2]
    49c4:	4770      	bx	lr
    49c6:	0000      	.short	0x0000
    49c8:	200018f0 	.word	0x200018f0
    49cc:	20000394 	.word	0x20000394

000049d0 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>:
    49d0:	4b0d      	ldr	r3, [pc, #52]	; (4a08 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x38>)
    49d2:	b169      	cbz	r1, 49f0 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x20>
    49d4:	2901      	cmp	r1, #1
    49d6:	bf04      	itt	eq
    49d8:	7899      	ldrbeq	r1, [r3, #2]
    49da:	4281      	cmpeq	r1, r0
    49dc:	d110      	bne.n	4a00 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    49de:	f8d3 000f 	ldr.w	r0, [r3, #15]
    49e2:	6010      	str	r0, [r2, #0]
    49e4:	f8b3 0013 	ldrh.w	r0, [r3, #19]
    49e8:	8090      	strh	r0, [r2, #4]
    49ea:	f04f 0001 	mov.w	r0, #1
    49ee:	4770      	bx	lr
    49f0:	7858      	ldrb	r0, [r3, #1]
    49f2:	b128      	cbz	r0, 4a00 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    49f4:	f8d3 0003 	ldr.w	r0, [r3, #3]
    49f8:	6010      	str	r0, [r2, #0]
    49fa:	f8b3 0007 	ldrh.w	r0, [r3, #7]
    49fe:	e7f3      	b.n	49e8 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x18>
    4a00:	f04f 0000 	mov.w	r0, #0
    4a04:	4770      	bx	lr
    4a06:	0000      	.short	0x0000
    4a08:	200003aa 	.word	0x200003aa

00004a0c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>:
    4a0c:	4a07      	ldr	r2, [pc, #28]	; (4a2c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x20>)
    4a0e:	b129      	cbz	r1, 4a1c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x10>
    4a10:	2901      	cmp	r1, #1
    4a12:	bf04      	itt	eq
    4a14:	7891      	ldrbeq	r1, [r2, #2]
    4a16:	4281      	cmpeq	r1, r0
    4a18:	d002      	beq.n	4a20 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x14>
    4a1a:	e004      	b.n	4a26 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4a1c:	7850      	ldrb	r0, [r2, #1]
    4a1e:	b110      	cbz	r0, 4a26 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4a20:	f04f 0001 	mov.w	r0, #1
    4a24:	4770      	bx	lr
    4a26:	f04f 0000 	mov.w	r0, #0
    4a2a:	4770      	bx	lr
    4a2c:	200003aa 	.word	0x200003aa

00004a30 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a30:	4a0c      	ldr	r2, [pc, #48]	; (4a64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x34>)
    4a32:	b110      	cbz	r0, 4a3a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a34:	2801      	cmp	r0, #1
    4a36:	d008      	beq.n	4a4a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x1a>
    4a38:	e011      	b.n	4a5e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4a3a:	7850      	ldrb	r0, [r2, #1]
    4a3c:	b178      	cbz	r0, 4a5e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4a3e:	f8d2 0003 	ldr.w	r0, [r2, #3]
    4a42:	6008      	str	r0, [r1, #0]
    4a44:	f8b2 0007 	ldrh.w	r0, [r2, #7]
    4a48:	e006      	b.n	4a58 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a4a:	7810      	ldrb	r0, [r2, #0]
    4a4c:	b138      	cbz	r0, 4a5e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4a4e:	f8d2 0009 	ldr.w	r0, [r2, #9]
    4a52:	6008      	str	r0, [r1, #0]
    4a54:	f8b2 000d 	ldrh.w	r0, [r2, #13]
    4a58:	8088      	strh	r0, [r1, #4]
    4a5a:	2001      	movs	r0, #1
    4a5c:	4770      	bx	lr
    4a5e:	2000      	movs	r0, #0
    4a60:	4770      	bx	lr
    4a62:	0000      	.short	0x0000
    4a64:	200003aa 	.word	0x200003aa

00004a68 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    4a68:	4901      	ldr	r1, [pc, #4]	; (4a70 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY+0x8>)
    4a6a:	20ff      	movs	r0, #255	; 0xff
    4a6c:	7088      	strb	r0, [r1, #2]
    4a6e:	4770      	bx	lr
    4a70:	200003aa 	.word	0x200003aa

00004a74 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4a74:	4a0a      	ldr	r2, [pc, #40]	; (4aa0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x2c>)
    4a76:	2301      	movs	r3, #1
    4a78:	b150      	cbz	r0, 4a90 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x1c>
    4a7a:	2801      	cmp	r0, #1
    4a7c:	bf18      	it	ne
    4a7e:	4770      	bxne	lr
    4a80:	7013      	strb	r3, [r2, #0]
    4a82:	6808      	ldr	r0, [r1, #0]
    4a84:	f8c2 0009 	str.w	r0, [r2, #9]
    4a88:	8888      	ldrh	r0, [r1, #4]
    4a8a:	f8a2 000d 	strh.w	r0, [r2, #13]
    4a8e:	4770      	bx	lr
    4a90:	7053      	strb	r3, [r2, #1]
    4a92:	6808      	ldr	r0, [r1, #0]
    4a94:	f8c2 0003 	str.w	r0, [r2, #3]
    4a98:	8888      	ldrh	r0, [r1, #4]
    4a9a:	f8a2 0007 	strh.w	r0, [r2, #7]
    4a9e:	4770      	bx	lr
    4aa0:	200003aa 	.word	0x200003aa

00004aa4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4aa4:	4906      	ldr	r1, [pc, #24]	; (4ac0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4aa6:	b110      	cbz	r0, 4aae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4aa8:	2801      	cmp	r0, #1
    4aaa:	d003      	beq.n	4ab4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4aac:	e006      	b.n	4abc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4aae:	7848      	ldrb	r0, [r1, #1]
    4ab0:	b910      	cbnz	r0, 4ab8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    4ab2:	e003      	b.n	4abc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4ab4:	7808      	ldrb	r0, [r1, #0]
    4ab6:	b108      	cbz	r0, 4abc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4ab8:	2001      	movs	r0, #1
    4aba:	4770      	bx	lr
    4abc:	2000      	movs	r0, #0
    4abe:	4770      	bx	lr
    4ac0:	200003aa 	.word	0x200003aa

00004ac4 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>:
    4ac4:	4901      	ldr	r1, [pc, #4]	; (4acc <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ+0x8>)
    4ac6:	2001      	movs	r0, #1
    4ac8:	7148      	strb	r0, [r1, #5]
    4aca:	4770      	bx	lr
    4acc:	200000c8 	.word	0x200000c8

00004ad0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4ad0:	4901      	ldr	r1, [pc, #4]	; (4ad8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4ad2:	7448      	strb	r0, [r1, #17]
    4ad4:	4770      	bx	lr
    4ad6:	0000      	.short	0x0000
    4ad8:	20000ada 	.word	0x20000ada

00004adc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4adc:	4801      	ldr	r0, [pc, #4]	; (4ae4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4ade:	78c0      	ldrb	r0, [r0, #3]
    4ae0:	4770      	bx	lr
    4ae2:	0000      	.short	0x0000
    4ae4:	200000c8 	.word	0x200000c8

00004ae8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4ae8:	4801      	ldr	r0, [pc, #4]	; (4af0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4aea:	7900      	ldrb	r0, [r0, #4]
    4aec:	4770      	bx	lr
    4aee:	0000      	.short	0x0000
    4af0:	200000c8 	.word	0x200000c8

00004af4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4af4:	4910      	ldr	r1, [pc, #64]	; (4b38 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x44>)
    4af6:	b430      	push	{r4, r5}
    4af8:	7c4a      	ldrb	r2, [r1, #17]
    4afa:	2a00      	cmp	r2, #0
    4afc:	bf19      	ittee	ne
    4afe:	7c0a      	ldrbne	r2, [r1, #16]
    4b00:	2a00      	cmpne	r2, #0
    4b02:	2000      	moveq	r0, #0
    4b04:	bc30      	popeq	{r4, r5}
    4b06:	bf08      	it	eq
    4b08:	4770      	bxeq	lr
    4b0a:	f04f 0200 	mov.w	r2, #0
    4b0e:	f04f 0c1f 	mov.w	ip, #31
    4b12:	4b0a      	ldr	r3, [pc, #40]	; (4b3c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>)
    4b14:	740a      	strb	r2, [r1, #16]
    4b16:	7042      	strb	r2, [r0, #1]
    4b18:	f880 c000 	strb.w	ip, [r0]
    4b1c:	f8d3 415a 	ldr.w	r4, [r3, #346]	; 0x15a
    4b20:	f8d3 515e 	ldr.w	r5, [r3, #350]	; 0x15e
    4b24:	6044      	str	r4, [r0, #4]
    4b26:	6085      	str	r5, [r0, #8]
    4b28:	7c0c      	ldrb	r4, [r1, #16]
    4b2a:	2c00      	cmp	r4, #0
    4b2c:	d1f2      	bne.n	4b14 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x20>
    4b2e:	bc30      	pop	{r4, r5}
    4b30:	f04f 0001 	mov.w	r0, #1
    4b34:	4770      	bx	lr
    4b36:	0000      	.short	0x0000
    4b38:	20000ada 	.word	0x20000ada
    4b3c:	20000988 	.word	0x20000988

00004b40 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4b40:	b570      	push	{r4, r5, r6, lr}
    4b42:	4c08      	ldr	r4, [pc, #32]	; (4b64 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4b44:	4606      	mov	r6, r0
    4b46:	460d      	mov	r5, r1
    4b48:	7820      	ldrb	r0, [r4, #0]
    4b4a:	b118      	cbz	r0, 4b54 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    4b4c:	21ab      	movs	r1, #171	; 0xab
    4b4e:	2027      	movs	r0, #39	; 0x27
    4b50:	f7ff f818 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b54:	2101      	movs	r1, #1
    4b56:	4804      	ldr	r0, [pc, #16]	; (4b68 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    4b58:	f00b fcc9 	bl	104ee <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4b5c:	7226      	strb	r6, [r4, #8]
    4b5e:	6325      	str	r5, [r4, #48]	; 0x30
    4b60:	bd70      	pop	{r4, r5, r6, pc}
    4b62:	0000      	.short	0x0000
    4b64:	200000c8 	.word	0x200000c8
    4b68:	20000ab8 	.word	0x20000ab8

00004b6c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4b6c:	4901      	ldr	r1, [pc, #4]	; (4b74 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4b6e:	2001      	movs	r0, #1
    4b70:	71c8      	strb	r0, [r1, #7]
    4b72:	4770      	bx	lr
    4b74:	200000c8 	.word	0x200000c8

00004b78 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b7c:	4d82      	ldr	r5, [pc, #520]	; (4d88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x210>)
    4b7e:	b085      	sub	sp, #20
    4b80:	782c      	ldrb	r4, [r5, #0]
    4b82:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    4b86:	2c00      	cmp	r4, #0
    4b88:	d175      	bne.n	4c76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4b8a:	2a00      	cmp	r2, #0
    4b8c:	bf1c      	itt	ne
    4b8e:	2b00      	cmpne	r3, #0
    4b90:	f1bc 0f00 	cmpne.w	ip, #0
    4b94:	d06f      	beq.n	4c76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4b96:	f8c5 c020 	str.w	ip, [r5, #32]
    4b9a:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    4b9e:	f04f 0000 	mov.w	r0, #0
    4ba2:	e9c5 2306 	strd	r2, r3, [r5, #24]
    4ba6:	71e8      	strb	r0, [r5, #7]
    4ba8:	71a8      	strb	r0, [r5, #6]
    4baa:	70e8      	strb	r0, [r5, #3]
    4bac:	70a8      	strb	r0, [r5, #2]
    4bae:	7128      	strb	r0, [r5, #4]
    4bb0:	7168      	strb	r0, [r5, #5]
    4bb2:	4f76      	ldr	r7, [pc, #472]	; (4d8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x214>)
    4bb4:	81e8      	strh	r0, [r5, #14]
    4bb6:	8228      	strh	r0, [r5, #16]
    4bb8:	6878      	ldr	r0, [r7, #4]
    4bba:	f100 0678 	add.w	r6, r0, #120	; 0x78
    4bbe:	4604      	mov	r4, r0
    4bc0:	f008 fe84 	bl	d8cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4bc4:	f008 fa28 	bl	d018 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4bc8:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    4bcc:	f008 ff16 	bl	d9fc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4bd0:	f104 0016 	add.w	r0, r4, #22
    4bd4:	f009 f9f4 	bl	dfc0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4bd8:	f104 0012 	add.w	r0, r4, #18
    4bdc:	f009 f9e4 	bl	dfa8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4be0:	7ef0      	ldrb	r0, [r6, #27]
    4be2:	f009 fa3f 	bl	e064 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4be6:	7838      	ldrb	r0, [r7, #0]
    4be8:	f641 584c 	movw	r8, #7500	; 0x1d4c
    4bec:	2800      	cmp	r0, #0
    4bee:	d046      	beq.n	4c7e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x106>
    4bf0:	2004      	movs	r0, #4
    4bf2:	f7fe fe91 	bl	3918 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    4bf6:	6860      	ldr	r0, [r4, #4]
    4bf8:	4540      	cmp	r0, r8
    4bfa:	bf28      	it	cs
    4bfc:	2096      	movcs	r0, #150	; 0x96
    4bfe:	d203      	bcs.n	4c08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x90>
    4c00:	2001      	movs	r0, #1
    4c02:	f009 f987 	bl	df14 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    4c06:	204d      	movs	r0, #77	; 0x4d
    4c08:	f008 fdb2 	bl	d770 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    4c0c:	6878      	ldr	r0, [r7, #4]
    4c0e:	f890 0180 	ldrb.w	r0, [r0, #384]	; 0x180
    4c12:	2800      	cmp	r0, #0
    4c14:	bf18      	it	ne
    4c16:	f008 fda1 	blne	d75c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4c1a:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4c1e:	2001      	movs	r0, #1
    4c20:	f008 fbba 	bl	d398 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4c24:	2800      	cmp	r0, #0
    4c26:	bf04      	itt	eq
    4c28:	b005      	addeq	sp, #20
    4c2a:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4c2e:	7838      	ldrb	r0, [r7, #0]
    4c30:	2800      	cmp	r0, #0
    4c32:	bf0c      	ite	eq
    4c34:	2003      	moveq	r0, #3
    4c36:	2001      	movne	r0, #1
    4c38:	f008 fdf8 	bl	d82c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4c3c:	4854      	ldr	r0, [pc, #336]	; (4d90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x218>)
    4c3e:	e890 100e 	ldmia.w	r0, {r1, r2, r3, ip}
    4c42:	e88d 100e 	stmia.w	sp, {r1, r2, r3, ip}
    4c46:	6900      	ldr	r0, [r0, #16]
    4c48:	9004      	str	r0, [sp, #16]
    4c4a:	7838      	ldrb	r0, [r7, #0]
    4c4c:	2800      	cmp	r0, #0
    4c4e:	bf0c      	ite	eq
    4c50:	4850      	ldreq	r0, [pc, #320]	; (4d94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x21c>)
    4c52:	4851      	ldrne	r0, [pc, #324]	; (4d98 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x220>)
    4c54:	9004      	str	r0, [sp, #16]
    4c56:	4668      	mov	r0, sp
    4c58:	f008 fd04 	bl	d664 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4c5c:	8820      	ldrh	r0, [r4, #0]
    4c5e:	f7ff fb5f 	bl	4320 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4c62:	6368      	str	r0, [r5, #52]	; 0x34
    4c64:	8820      	ldrh	r0, [r4, #0]
    4c66:	f7ff fb45 	bl	42f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4c6a:	63a8      	str	r0, [r5, #56]	; 0x38
    4c6c:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    4c70:	bb68      	cbnz	r0, 4cce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4c72:	e01c      	b.n	4cae <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    4c74:	e7ff      	b.n	4c76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4c76:	21d3      	movs	r1, #211	; 0xd3
    4c78:	2027      	movs	r0, #39	; 0x27
    4c7a:	f7fe ff83 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c7e:	2003      	movs	r0, #3
    4c80:	f7fe fe4a 	bl	3918 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    4c84:	6860      	ldr	r0, [r4, #4]
    4c86:	4540      	cmp	r0, r8
    4c88:	bf28      	it	cs
    4c8a:	2096      	movcs	r0, #150	; 0x96
    4c8c:	d203      	bcs.n	4c96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11e>
    4c8e:	2001      	movs	r0, #1
    4c90:	f009 f940 	bl	df14 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    4c94:	204d      	movs	r0, #77	; 0x4d
    4c96:	f008 fd6b 	bl	d770 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    4c9a:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    4c9e:	2000      	movs	r0, #0
    4ca0:	f008 fb7a 	bl	d398 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4ca4:	2800      	cmp	r0, #0
    4ca6:	d1c2      	bne.n	4c2e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xb6>
    4ca8:	b005      	add	sp, #20
    4caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4cae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4cb0:	b168      	cbz	r0, 4cce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4cb2:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
    4cb4:	8831      	ldrh	r1, [r6, #0]
    4cb6:	4288      	cmp	r0, r1
    4cb8:	d109      	bne.n	4cce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4cba:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    4cbe:	2201      	movs	r2, #1
    4cc0:	4408      	add	r0, r1
    4cc2:	8570      	strh	r0, [r6, #42]	; 0x2a
    4cc4:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    4cc8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    4cca:	f7fd fcc5 	bl	2658 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4cce:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4cd2:	4832      	ldr	r0, [pc, #200]	; (4d9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x224>)
    4cd4:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4cd8:	f500 7884 	add.w	r8, r0, #264	; 0x108
    4cdc:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4ce0:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4ce2:	f8c0 1121 	str.w	r1, [r0, #289]	; 0x121
    4ce6:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4ce8:	f8c0 1125 	str.w	r1, [r0, #293]	; 0x125
    4cec:	20ff      	movs	r0, #255	; 0xff
    4cee:	72a8      	strb	r0, [r5, #10]
    4cf0:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4cf4:	f896 9012 	ldrb.w	r9, [r6, #18]
    4cf8:	f8b4 8038 	ldrh.w	r8, [r4, #56]	; 0x38
    4cfc:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    4cfe:	2908      	cmp	r1, #8
    4d00:	d01c      	beq.n	4d3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c4>
    4d02:	f00b f951 	bl	ffa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4d06:	bf00      	nop
    4d08:	f1b9 0f00 	cmp.w	r9, #0
    4d0c:	bf04      	itt	eq
    4d0e:	1d00      	addeq	r0, r0, #4
    4d10:	b280      	uxtheq	r0, r0
    4d12:	4580      	cmp	r8, r0
    4d14:	bf38      	it	cc
    4d16:	4640      	movcc	r0, r8
    4d18:	b2c0      	uxtb	r0, r0
    4d1a:	7cb1      	ldrb	r1, [r6, #18]
    4d1c:	2900      	cmp	r1, #0
    4d1e:	bf18      	it	ne
    4d20:	2104      	movne	r1, #4
    4d22:	4408      	add	r0, r1
    4d24:	b2c0      	uxtb	r0, r0
    4d26:	7268      	strb	r0, [r5, #9]
    4d28:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    4d2c:	1d09      	adds	r1, r1, #4
    4d2e:	4281      	cmp	r1, r0
    4d30:	d208      	bcs.n	4d44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1cc>
    4d32:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    4d36:	2027      	movs	r0, #39	; 0x27
    4d38:	f7fe ff24 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d3c:	2104      	movs	r1, #4
    4d3e:	f00b f933 	bl	ffa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4d42:	e7e1      	b.n	4d08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    4d44:	7838      	ldrb	r0, [r7, #0]
    4d46:	2800      	cmp	r0, #0
    4d48:	f04f 0001 	mov.w	r0, #1
    4d4c:	d014      	beq.n	4d78 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x200>
    4d4e:	f000 fb4b 	bl	53e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    4d52:	4813      	ldr	r0, [pc, #76]	; (4da0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x228>)
    4d54:	6800      	ldr	r0, [r0, #0]
    4d56:	2803      	cmp	r0, #3
    4d58:	bf18      	it	ne
    4d5a:	280b      	cmpne	r0, #11
    4d5c:	d00f      	beq.n	4d7e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x206>
    4d5e:	4d11      	ldr	r5, [pc, #68]	; (4da4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>)
    4d60:	4628      	mov	r0, r5
    4d62:	f00d f8e4 	bl	11f2e <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>
    4d66:	8830      	ldrh	r0, [r6, #0]
    4d68:	8068      	strh	r0, [r5, #2]
    4d6a:	8820      	ldrh	r0, [r4, #0]
    4d6c:	8028      	strh	r0, [r5, #0]
    4d6e:	7ef0      	ldrb	r0, [r6, #27]
    4d70:	7128      	strb	r0, [r5, #4]
    4d72:	b005      	add	sp, #20
    4d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4d78:	f000 fbc4 	bl	5504 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>
    4d7c:	e7e9      	b.n	4d52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1da>
    4d7e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    4d82:	2027      	movs	r0, #39	; 0x27
    4d84:	f7fe fefe 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d88:	200000c8 	.word	0x200000c8
    4d8c:	20000104 	.word	0x20000104
    4d90:	000057d0 	.word	0x000057d0
    4d94:	0000bd0d 	.word	0x0000bd0d
    4d98:	00008bc1 	.word	0x00008bc1
    4d9c:	20000988 	.word	0x20000988
    4da0:	40001550 	.word	0x40001550
    4da4:	20000ada 	.word	0x20000ada

00004da8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4dac:	0006      	movs	r6, r0
    4dae:	4847      	ldr	r0, [pc, #284]	; (4ecc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x124>)
    4db0:	4d47      	ldr	r5, [pc, #284]	; (4ed0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x128>)
    4db2:	6840      	ldr	r0, [r0, #4]
    4db4:	f100 0478 	add.w	r4, r0, #120	; 0x78
    4db8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4dba:	f890 9001 	ldrb.w	r9, [r0, #1]
    4dbe:	bf18      	it	ne
    4dc0:	2e01      	cmpne	r6, #1
    4dc2:	d103      	bne.n	4dcc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x24>
    4dc4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    4dc6:	f009 fef7 	bl	ebb8 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4dca:	7068      	strb	r0, [r5, #1]
    4dcc:	7868      	ldrb	r0, [r5, #1]
    4dce:	2700      	movs	r7, #0
    4dd0:	f04f 0801 	mov.w	r8, #1
    4dd4:	b150      	cbz	r0, 4dec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x44>
    4dd6:	2801      	cmp	r0, #1
    4dd8:	d030      	beq.n	4e3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dda:	2802      	cmp	r0, #2
    4ddc:	d056      	beq.n	4e8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xe4>
    4dde:	2803      	cmp	r0, #3
    4de0:	d068      	beq.n	4eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x10c>
    4de2:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    4de6:	2027      	movs	r0, #39	; 0x27
    4de8:	f7fe fecc 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dec:	2e01      	cmp	r6, #1
    4dee:	d012      	beq.n	4e16 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6e>
    4df0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4df2:	2800      	cmp	r0, #0
    4df4:	d045      	beq.n	4e82 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    4df6:	89a9      	ldrh	r1, [r5, #12]
    4df8:	1cca      	adds	r2, r1, #3
    4dfa:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    4dfc:	f7fe fd38 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e00:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4e02:	62a8      	str	r0, [r5, #40]	; 0x28
    4e04:	2201      	movs	r2, #1
    4e06:	4649      	mov	r1, r9
    4e08:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4e0a:	f00a fba9 	bl	f560 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4e0e:	2e02      	cmp	r6, #2
    4e10:	bf08      	it	eq
    4e12:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e16:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    4e1a:	1c49      	adds	r1, r1, #1
    4e1c:	f140 0000 	adc.w	r0, r0, #0
    4e20:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    4e24:	79e0      	ldrb	r0, [r4, #7]
    4e26:	2801      	cmp	r0, #1
    4e28:	d101      	bne.n	4e2e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    4e2a:	71e7      	strb	r7, [r4, #7]
    4e2c:	e001      	b.n	4e32 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    4e2e:	f884 8007 	strb.w	r8, [r4, #7]
    4e32:	7a28      	ldrb	r0, [r5, #8]
    4e34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e38:	f7fe bc98 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4e3c:	2e01      	cmp	r6, #1
    4e3e:	d011      	beq.n	4e64 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>
    4e40:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4e42:	b1f0      	cbz	r0, 4e82 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    4e44:	89a9      	ldrh	r1, [r5, #12]
    4e46:	1cca      	adds	r2, r1, #3
    4e48:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    4e4a:	f7fe fd11 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e4e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4e50:	62a8      	str	r0, [r5, #40]	; 0x28
    4e52:	2200      	movs	r2, #0
    4e54:	4649      	mov	r1, r9
    4e56:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4e58:	f00a fb82 	bl	f560 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4e5c:	2e02      	cmp	r6, #2
    4e5e:	bf08      	it	eq
    4e60:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e64:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
    4e68:	1c41      	adds	r1, r0, #1
    4e6a:	f142 0000 	adc.w	r0, r2, #0
    4e6e:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    4e72:	79e0      	ldrb	r0, [r4, #7]
    4e74:	2801      	cmp	r0, #1
    4e76:	bf0c      	ite	eq
    4e78:	71e7      	strbeq	r7, [r4, #7]
    4e7a:	f884 8007 	strbne.w	r8, [r4, #7]
    4e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e82:	f240 31f7 	movw	r1, #1015	; 0x3f7
    4e86:	2027      	movs	r0, #39	; 0x27
    4e88:	f7fe fe7c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e8c:	2e01      	cmp	r6, #1
    4e8e:	d006      	beq.n	4e9e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xf6>
    4e90:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4e92:	f00a fe3a 	bl	fb0a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4e96:	2e02      	cmp	r6, #2
    4e98:	bf08      	it	eq
    4e9a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e9e:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    4ea2:	1c49      	adds	r1, r1, #1
    4ea4:	f140 0000 	adc.w	r0, r0, #0
    4ea8:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    4eac:	79e0      	ldrb	r0, [r4, #7]
    4eae:	2801      	cmp	r0, #1
    4eb0:	d1bd      	bne.n	4e2e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    4eb2:	e7ba      	b.n	4e2a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x82>
    4eb4:	2e01      	cmp	r6, #1
    4eb6:	bf08      	it	eq
    4eb8:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ebc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4ebe:	f00a fe24 	bl	fb0a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4ec2:	7a28      	ldrb	r0, [r5, #8]
    4ec4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ec8:	f7fe bc50 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4ecc:	20000104 	.word	0x20000104
    4ed0:	200000c8 	.word	0x200000c8

00004ed4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4ed4:	4802      	ldr	r0, [pc, #8]	; (4ee0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xc>)
    4ed6:	7800      	ldrb	r0, [r0, #0]
    4ed8:	2800      	cmp	r0, #0
    4eda:	bf18      	it	ne
    4edc:	200c      	movne	r0, #12
    4ede:	4770      	bx	lr
    4ee0:	200000c8 	.word	0x200000c8

00004ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4ee4:	4811      	ldr	r0, [pc, #68]	; (4f2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>)
    4ee6:	b510      	push	{r4, lr}
    4ee8:	7801      	ldrb	r1, [r0, #0]
    4eea:	b159      	cbz	r1, 4f04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
    4eec:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    4ef0:	7800      	ldrb	r0, [r0, #0]
    4ef2:	780a      	ldrb	r2, [r1, #0]
    4ef4:	b152      	cbz	r2, 4f0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28>
    4ef6:	2802      	cmp	r0, #2
    4ef8:	d010      	beq.n	4f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    4efa:	f240 1197 	movw	r1, #407	; 0x197
    4efe:	2027      	movs	r0, #39	; 0x27
    4f00:	f7fe fe40 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f08:	f000 ba12 	b.w	5330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    4f0c:	2801      	cmp	r0, #1
    4f0e:	bf08      	it	eq
    4f10:	bd10      	popeq	{r4, pc}
    4f12:	f240 1193 	movw	r1, #403	; 0x193
    4f16:	2027      	movs	r0, #39	; 0x27
    4f18:	f7fe fe34 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f1c:	6848      	ldr	r0, [r1, #4]
    4f1e:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    4f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f26:	f008 bba9 	b.w	d67c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4f2a:	0000      	.short	0x0000
    4f2c:	200000c8 	.word	0x200000c8
    4f30:	b570      	push	{r4, r5, r6, lr}
    4f32:	4c26      	ldr	r4, [pc, #152]	; (4fcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>)
    4f34:	4605      	mov	r5, r0
    4f36:	2900      	cmp	r1, #0
    4f38:	bf08      	it	eq
    4f3a:	2d01      	cmpeq	r5, #1
    4f3c:	d106      	bne.n	4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>
    4f3e:	78e0      	ldrb	r0, [r4, #3]
    4f40:	f100 0001 	add.w	r0, r0, #1
    4f44:	b2c0      	uxtb	r0, r0
    4f46:	70e0      	strb	r0, [r4, #3]
    4f48:	2801      	cmp	r0, #1
    4f4a:	d83c      	bhi.n	4fc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    4f4c:	69e1      	ldr	r1, [r4, #28]
    4f4e:	4628      	mov	r0, r5
    4f50:	4788      	blx	r1
    4f52:	2800      	cmp	r0, #0
    4f54:	d037      	beq.n	4fc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    4f56:	7960      	ldrb	r0, [r4, #5]
    4f58:	b148      	cbz	r0, 4f6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a>
    4f5a:	2d01      	cmp	r5, #1
    4f5c:	d107      	bne.n	4f6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a>
    4f5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4f60:	7841      	ldrb	r1, [r0, #1]
    4f62:	2900      	cmp	r1, #0
    4f64:	bf04      	itt	eq
    4f66:	7800      	ldrbeq	r0, [r0, #0]
    4f68:	f010 0f10 	tsteq.w	r0, #16
    4f6c:	d02b      	beq.n	4fc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    4f6e:	79a0      	ldrb	r0, [r4, #6]
    4f70:	bb48      	cbnz	r0, 4fc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    4f72:	4817      	ldr	r0, [pc, #92]	; (4fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>)
    4f74:	7801      	ldrb	r1, [r0, #0]
    4f76:	2900      	cmp	r1, #0
    4f78:	bf08      	it	eq
    4f7a:	2d01      	cmpeq	r5, #1
    4f7c:	d004      	beq.n	4f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa4>
    4f7e:	b101      	cbz	r1, 4f82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9e>
    4f80:	b115      	cbz	r5, 4f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa4>
    4f82:	f04f 0000 	mov.w	r0, #0
    4f86:	bd70      	pop	{r4, r5, r6, pc}
    4f88:	4812      	ldr	r0, [pc, #72]	; (4fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>)
    4f8a:	7801      	ldrb	r1, [r0, #0]
    4f8c:	f011 0f10 	tst.w	r1, #16
    4f90:	d106      	bne.n	4fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>
    4f92:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4f94:	7800      	ldrb	r0, [r0, #0]
    4f96:	f010 0f10 	tst.w	r0, #16
    4f9a:	bf08      	it	eq
    4f9c:	2001      	moveq	r0, #1
    4f9e:	d001      	beq.n	4fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    4fa0:	f04f 0000 	mov.w	r0, #0
    4fa4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4fa6:	b932      	cbnz	r2, 4fb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd2>
    4fa8:	89a2      	ldrh	r2, [r4, #12]
    4faa:	b122      	cbz	r2, 4fb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd2>
    4fac:	f011 0f10 	tst.w	r1, #16
    4fb0:	bf08      	it	eq
    4fb2:	2101      	moveq	r1, #1
    4fb4:	d001      	beq.n	4fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd6>
    4fb6:	f04f 0100 	mov.w	r1, #0
    4fba:	89e2      	ldrh	r2, [r4, #14]
    4fbc:	ea40 0002 	orr.w	r0, r0, r2
    4fc0:	4308      	orrs	r0, r1
    4fc2:	bf08      	it	eq
    4fc4:	bd70      	popeq	{r4, r5, r6, pc}
    4fc6:	2001      	movs	r0, #1
    4fc8:	bd70      	pop	{r4, r5, r6, pc}
    4fca:	0000      	.short	0x0000
    4fcc:	200000c8 	.word	0x200000c8
    4fd0:	20000104 	.word	0x20000104
    4fd4:	200000da 	.word	0x200000da
    4fd8:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4fdc:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    4fe0:	2700      	movs	r7, #0
    4fe2:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    4fe6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    4fea:	463d      	mov	r5, r7
    4fec:	f100 0a78 	add.w	sl, r0, #120	; 0x78
    4ff0:	7820      	ldrb	r0, [r4, #0]
    4ff2:	2802      	cmp	r0, #2
    4ff4:	d004      	beq.n	5000 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    4ff6:	f240 4149 	movw	r1, #1097	; 0x449
    4ffa:	2027      	movs	r0, #39	; 0x27
    4ffc:	f7fe fdc2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5000:	7c20      	ldrb	r0, [r4, #16]
    5002:	f010 0f40 	tst.w	r0, #64	; 0x40
    5006:	d107      	bne.n	5018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    5008:	2040      	movs	r0, #64	; 0x40
    500a:	69a2      	ldr	r2, [r4, #24]
    500c:	2100      	movs	r1, #0
    500e:	4790      	blx	r2
    5010:	8a20      	ldrh	r0, [r4, #16]
    5012:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5016:	8220      	strh	r0, [r4, #16]
    5018:	9900      	ldr	r1, [sp, #0]
    501a:	489b      	ldr	r0, [pc, #620]	; (5288 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>)
    501c:	2900      	cmp	r1, #0
    501e:	f000 8100 	beq.w	5222 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    5022:	7941      	ldrb	r1, [r0, #5]
    5024:	1c49      	adds	r1, r1, #1
    5026:	7141      	strb	r1, [r0, #5]
    5028:	f89a 0012 	ldrb.w	r0, [sl, #18]
    502c:	f008 f874 	bl	d118 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5030:	f008 f856 	bl	d0e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5034:	f04f 0901 	mov.w	r9, #1
    5038:	b998      	cbnz	r0, 5062 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    503a:	f89a 0012 	ldrb.w	r0, [sl, #18]
    503e:	b180      	cbz	r0, 5062 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    5040:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5042:	7841      	ldrb	r1, [r0, #1]
    5044:	b169      	cbz	r1, 5062 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    5046:	7800      	ldrb	r0, [r0, #0]
    5048:	f89a 1007 	ldrb.w	r1, [sl, #7]
    504c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5050:	4288      	cmp	r0, r1
    5052:	d106      	bne.n	5062 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    5054:	f884 9002 	strb.w	r9, [r4, #2]
    5058:	b002      	add	sp, #8
    505a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    505e:	f000 b967 	b.w	5330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5062:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5064:	7841      	ldrb	r1, [r0, #1]
    5066:	81a1      	strh	r1, [r4, #12]
    5068:	2900      	cmp	r1, #0
    506a:	bf08      	it	eq
    506c:	62e7      	streq	r7, [r4, #44]	; 0x2c
    506e:	d003      	beq.n	5078 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    5070:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5072:	f00a fd03 	bl	fa7c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5076:	62e0      	str	r0, [r4, #44]	; 0x2c
    5078:	8a20      	ldrh	r0, [r4, #16]
    507a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    507e:	8220      	strh	r0, [r4, #16]
    5080:	70e7      	strb	r7, [r4, #3]
    5082:	f8d8 6004 	ldr.w	r6, [r8, #4]
    5086:	f106 0b78 	add.w	fp, r6, #120	; 0x78
    508a:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    508e:	2801      	cmp	r0, #1
    5090:	d11d      	bne.n	50ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    5092:	f008 ff45 	bl	df20 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    5096:	4659      	mov	r1, fp
    5098:	4630      	mov	r0, r6
    509a:	f00b f85e 	bl	1015a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    509e:	b1b0      	cbz	r0, 50ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    50a0:	f898 0000 	ldrb.w	r0, [r8]
    50a4:	2800      	cmp	r0, #0
    50a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    50aa:	bf0c      	ite	eq
    50ac:	f500 70a6 	addeq.w	r0, r0, #332	; 0x14c
    50b0:	f500 7001 	addne.w	r0, r0, #516	; 0x204
    50b4:	8831      	ldrh	r1, [r6, #0]
    50b6:	8041      	strh	r1, [r0, #2]
    50b8:	f89b 1008 	ldrb.w	r1, [fp, #8]
    50bc:	7101      	strb	r1, [r0, #4]
    50be:	f89b 1009 	ldrb.w	r1, [fp, #9]
    50c2:	7141      	strb	r1, [r0, #5]
    50c4:	f880 9000 	strb.w	r9, [r0]
    50c8:	7a20      	ldrb	r0, [r4, #8]
    50ca:	f7fe fb4f 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    50ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50d0:	f89a 1006 	ldrb.w	r1, [sl, #6]
    50d4:	7800      	ldrb	r0, [r0, #0]
    50d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    50da:	4288      	cmp	r0, r1
    50dc:	d049      	beq.n	5172 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    50de:	f8d8 0004 	ldr.w	r0, [r8, #4]
    50e2:	f100 0678 	add.w	r6, r0, #120	; 0x78
    50e6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    50ea:	2800      	cmp	r0, #0
    50ec:	d03d      	beq.n	516a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    50ee:	2802      	cmp	r0, #2
    50f0:	d10e      	bne.n	5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22c>
    50f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    50f4:	f00a fa00 	bl	f4f8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    50f8:	2800      	cmp	r0, #0
    50fa:	d055      	beq.n	51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    50fc:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    5100:	1c49      	adds	r1, r1, #1
    5102:	f140 0000 	adc.w	r0, r0, #0
    5106:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    510a:	7a20      	ldrb	r0, [r4, #8]
    510c:	f7fe fb2e 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5110:	7177      	strb	r7, [r6, #5]
    5112:	f898 0000 	ldrb.w	r0, [r8]
    5116:	2800      	cmp	r0, #0
    5118:	bf1c      	itt	ne
    511a:	7930      	ldrbne	r0, [r6, #4]
    511c:	2800      	cmpne	r0, #0
    511e:	d009      	beq.n	5134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x250>
    5120:	7137      	strb	r7, [r6, #4]
    5122:	89e2      	ldrh	r2, [r4, #14]
    5124:	4639      	mov	r1, r7
    5126:	f042 0210 	orr.w	r2, r2, #16
    512a:	81e2      	strh	r2, [r4, #14]
    512c:	69a2      	ldr	r2, [r4, #24]
    512e:	f04f 0010 	mov.w	r0, #16
    5132:	4790      	blx	r2
    5134:	78f0      	ldrb	r0, [r6, #3]
    5136:	b190      	cbz	r0, 515e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27a>
    5138:	70f7      	strb	r7, [r6, #3]
    513a:	f7ff fbcf 	bl	48dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    513e:	b390      	cbz	r0, 51a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c2>
    5140:	89e2      	ldrh	r2, [r4, #14]
    5142:	2008      	movs	r0, #8
    5144:	f042 0208 	orr.w	r2, r2, #8
    5148:	81e2      	strh	r2, [r4, #14]
    514a:	69a2      	ldr	r2, [r4, #24]
    514c:	2100      	movs	r1, #0
    514e:	4790      	blx	r2
    5150:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    5154:	1c49      	adds	r1, r1, #1
    5156:	f140 0000 	adc.w	r0, r0, #0
    515a:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    515e:	79b0      	ldrb	r0, [r6, #6]
    5160:	2801      	cmp	r0, #1
    5162:	bf0c      	ite	eq
    5164:	71b7      	strbeq	r7, [r6, #6]
    5166:	f886 9006 	strbne.w	r9, [r6, #6]
    516a:	8a20      	ldrh	r0, [r4, #16]
    516c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5170:	8220      	strh	r0, [r4, #16]
    5172:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5174:	f89a 3007 	ldrb.w	r3, [sl, #7]
    5178:	7808      	ldrb	r0, [r1, #0]
    517a:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    517e:	429a      	cmp	r2, r3
    5180:	d148      	bne.n	5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    5182:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5186:	f000 0003 	and.w	r0, r0, #3
    518a:	f102 0678 	add.w	r6, r2, #120	; 0x78
    518e:	2801      	cmp	r0, #1
    5190:	bf18      	it	ne
    5192:	2802      	cmpne	r0, #2
    5194:	d027      	beq.n	51e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    5196:	2803      	cmp	r0, #3
    5198:	bf1c      	itt	ne
    519a:	79a0      	ldrbne	r0, [r4, #6]
    519c:	f040 0004 	orrne.w	r0, r0, #4
    51a0:	d00c      	beq.n	51bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    51a2:	71a0      	strb	r0, [r4, #6]
    51a4:	e036      	b.n	5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    51a6:	e004      	b.n	51b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ce>
    51a8:	f240 314b 	movw	r1, #843	; 0x34b
    51ac:	2027      	movs	r0, #39	; 0x27
    51ae:	f7fe fce9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51b2:	f240 3163 	movw	r1, #867	; 0x363
    51b6:	2027      	movs	r0, #39	; 0x27
    51b8:	f7fe fce4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51bc:	f886 9002 	strb.w	r9, [r6, #2]
    51c0:	8a22      	ldrh	r2, [r4, #16]
    51c2:	4648      	mov	r0, r9
    51c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    51c8:	8222      	strh	r2, [r4, #16]
    51ca:	89e2      	ldrh	r2, [r4, #14]
    51cc:	f042 0201 	orr.w	r2, r2, #1
    51d0:	81e2      	strh	r2, [r4, #14]
    51d2:	69a2      	ldr	r2, [r4, #24]
    51d4:	4790      	blx	r2
    51d6:	79f0      	ldrb	r0, [r6, #7]
    51d8:	2801      	cmp	r0, #1
    51da:	d101      	bne.n	51e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    51dc:	71f7      	strb	r7, [r6, #7]
    51de:	e019      	b.n	5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    51e0:	f886 9007 	strb.w	r9, [r6, #7]
    51e4:	e016      	b.n	5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    51e6:	7848      	ldrb	r0, [r1, #1]
    51e8:	b1b8      	cbz	r0, 521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    51ea:	8a21      	ldrh	r1, [r4, #16]
    51ec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    51f0:	8221      	strh	r1, [r4, #16]
    51f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    51f4:	b171      	cbz	r1, 5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    51f6:	28fb      	cmp	r0, #251	; 0xfb
    51f8:	bf84      	itt	hi
    51fa:	79a0      	ldrbhi	r0, [r4, #6]
    51fc:	f040 0010 	orrhi.w	r0, r0, #16
    5200:	d8cf      	bhi.n	51a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    5202:	79e0      	ldrb	r0, [r4, #7]
    5204:	2800      	cmp	r0, #0
    5206:	bf08      	it	eq
    5208:	464d      	moveq	r5, r9
    520a:	d003      	beq.n	5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    520c:	2020      	movs	r0, #32
    520e:	69a2      	ldr	r2, [r4, #24]
    5210:	2100      	movs	r1, #0
    5212:	4790      	blx	r2
    5214:	9801      	ldr	r0, [sp, #4]
    5216:	b9b8      	cbnz	r0, 5248 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
    5218:	e011      	b.n	523e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    521a:	79f0      	ldrb	r0, [r6, #7]
    521c:	2801      	cmp	r0, #1
    521e:	d1df      	bne.n	51e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    5220:	e7dc      	b.n	51dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    5222:	7981      	ldrb	r1, [r0, #6]
    5224:	1c49      	adds	r1, r1, #1
    5226:	7181      	strb	r1, [r0, #6]
    5228:	f89a 0012 	ldrb.w	r0, [sl, #18]
    522c:	2800      	cmp	r0, #0
    522e:	bf18      	it	ne
    5230:	f007 ff6c 	blne	d10c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5234:	8a20      	ldrh	r0, [r4, #16]
    5236:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    523a:	8220      	strh	r0, [r4, #16]
    523c:	e7ea      	b.n	5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    523e:	2001      	movs	r0, #1
    5240:	9900      	ldr	r1, [sp, #0]
    5242:	f7ff fe75 	bl	4f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>
    5246:	b148      	cbz	r0, 525c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    5248:	2d00      	cmp	r5, #0
    524a:	bf1c      	itt	ne
    524c:	2000      	movne	r0, #0
    524e:	f7ff fdab 	blne	4da8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5252:	b002      	add	sp, #8
    5254:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5258:	f000 b86a 	b.w	5330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    525c:	2d00      	cmp	r5, #0
    525e:	bf1c      	itt	ne
    5260:	2001      	movne	r0, #1
    5262:	f7ff fda1 	blne	4da8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5266:	2000      	movs	r0, #0
    5268:	f000 f94c 	bl	5504 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>
    526c:	2d00      	cmp	r5, #0
    526e:	bf04      	itt	eq
    5270:	b002      	addeq	sp, #8
    5272:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5276:	2002      	movs	r0, #2
    5278:	b002      	add	sp, #8
    527a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    527e:	f7ff bd93 	b.w	4da8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5282:	0000      	.short	0x0000
    5284:	20000104 	.word	0x20000104
    5288:	20000ada 	.word	0x20000ada
    528c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5290:	4e26      	ldr	r6, [pc, #152]	; (532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    5292:	4681      	mov	r9, r0
    5294:	f1a6 053c 	sub.w	r5, r6, #60	; 0x3c
    5298:	6870      	ldr	r0, [r6, #4]
    529a:	4688      	mov	r8, r1
    529c:	f100 0478 	add.w	r4, r0, #120	; 0x78
    52a0:	7828      	ldrb	r0, [r5, #0]
    52a2:	2801      	cmp	r0, #1
    52a4:	d004      	beq.n	52b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    52a6:	f240 4106 	movw	r1, #1030	; 0x406
    52aa:	2027      	movs	r0, #39	; 0x27
    52ac:	f7fe fc6a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52b0:	78a0      	ldrb	r0, [r4, #2]
    52b2:	2701      	movs	r7, #1
    52b4:	b160      	cbz	r0, 52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>
    52b6:	2100      	movs	r1, #0
    52b8:	70a1      	strb	r1, [r4, #2]
    52ba:	89ea      	ldrh	r2, [r5, #14]
    52bc:	2004      	movs	r0, #4
    52be:	f042 0204 	orr.w	r2, r2, #4
    52c2:	81ea      	strh	r2, [r5, #14]
    52c4:	69aa      	ldr	r2, [r5, #24]
    52c6:	4790      	blx	r2
    52c8:	7830      	ldrb	r0, [r6, #0]
    52ca:	2800      	cmp	r0, #0
    52cc:	bf18      	it	ne
    52ce:	7127      	strbne	r7, [r4, #4]
    52d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    52d2:	2603      	movs	r6, #3
    52d4:	7808      	ldrb	r0, [r1, #0]
    52d6:	ea36 0000 	bics.w	r0, r6, r0
    52da:	d10d      	bne.n	52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    52dc:	7960      	ldrb	r0, [r4, #5]
    52de:	b998      	cbnz	r0, 5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    52e0:	89ea      	ldrh	r2, [r5, #14]
    52e2:	2002      	movs	r0, #2
    52e4:	f042 0202 	orr.w	r2, r2, #2
    52e8:	81ea      	strh	r2, [r5, #14]
    52ea:	69aa      	ldr	r2, [r5, #24]
    52ec:	4790      	blx	r2
    52ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
    52f0:	7800      	ldrb	r0, [r0, #0]
    52f2:	ea36 0000 	bics.w	r0, r6, r0
    52f6:	d007      	beq.n	5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    52f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    52fa:	7840      	ldrb	r0, [r0, #1]
    52fc:	2800      	cmp	r0, #0
    52fe:	bf0e      	itee	eq
    5300:	7167      	strbeq	r7, [r4, #5]
    5302:	2002      	movne	r0, #2
    5304:	7160      	strbne	r0, [r4, #5]
    5306:	e000      	b.n	530a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x426>
    5308:	7166      	strb	r6, [r4, #5]
    530a:	ea38 0009 	bics.w	r0, r8, r9
    530e:	d004      	beq.n	531a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x436>
    5310:	2101      	movs	r1, #1
    5312:	2000      	movs	r0, #0
    5314:	f7ff fe0c 	bl	4f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>
    5318:	b118      	cbz	r0, 5322 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x43e>
    531a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    531e:	f000 b807 	b.w	5330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5322:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5326:	2000      	movs	r0, #0
    5328:	f000 b85e 	b.w	53e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    532c:	20000104 	.word	0x20000104
    5330:	b510      	push	{r4, lr}
    5332:	f007 ffbf 	bl	d2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5336:	f007 fe6f 	bl	d018 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    533a:	4818      	ldr	r0, [pc, #96]	; (539c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b8>)
    533c:	6844      	ldr	r4, [r0, #4]
    533e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    5342:	2801      	cmp	r0, #1
    5344:	bf08      	it	eq
    5346:	f008 fdeb 	bleq	df20 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    534a:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    534e:	b938      	cbnz	r0, 5360 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>
    5350:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    5352:	b128      	cbz	r0, 5360 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>
    5354:	2200      	movs	r2, #0
    5356:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    535a:	4611      	mov	r1, r2
    535c:	f7fd f97c 	bl	2658 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5360:	4c0f      	ldr	r4, [pc, #60]	; (53a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>)
    5362:	2100      	movs	r1, #0
    5364:	69a2      	ldr	r2, [r4, #24]
    5366:	8a20      	ldrh	r0, [r4, #16]
    5368:	4790      	blx	r2
    536a:	6a22      	ldr	r2, [r4, #32]
    536c:	79a1      	ldrb	r1, [r4, #6]
    536e:	78a0      	ldrb	r0, [r4, #2]
    5370:	4790      	blx	r2
    5372:	490c      	ldr	r1, [pc, #48]	; (53a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    5374:	7c48      	ldrb	r0, [r1, #17]
    5376:	b170      	cbz	r0, 5396 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b2>
    5378:	f5a1 70a9 	sub.w	r0, r1, #338	; 0x152
    537c:	f8d0 2152 	ldr.w	r2, [r0, #338]	; 0x152
    5380:	f8d0 3156 	ldr.w	r3, [r0, #342]	; 0x156
    5384:	f8c0 215a 	str.w	r2, [r0, #346]	; 0x15a
    5388:	f8c0 315e 	str.w	r3, [r0, #350]	; 0x15e
    538c:	2001      	movs	r0, #1
    538e:	7408      	strb	r0, [r1, #16]
    5390:	7a20      	ldrb	r0, [r4, #8]
    5392:	f7fe f9eb 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5396:	2000      	movs	r0, #0
    5398:	7020      	strb	r0, [r4, #0]
    539a:	bd10      	pop	{r4, pc}
    539c:	20000104 	.word	0x20000104
    53a0:	200000c8 	.word	0x200000c8
    53a4:	20000ada 	.word	0x20000ada
    53a8:	4808      	ldr	r0, [pc, #32]	; (53cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e8>)
    53aa:	b510      	push	{r4, lr}
    53ac:	7800      	ldrb	r0, [r0, #0]
    53ae:	2802      	cmp	r0, #2
    53b0:	d004      	beq.n	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    53b2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    53b6:	2027      	movs	r0, #39	; 0x27
    53b8:	f7fe fbe4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53bc:	4904      	ldr	r1, [pc, #16]	; (53d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ec>)
    53be:	2001      	movs	r0, #1
    53c0:	71c8      	strb	r0, [r1, #7]
    53c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    53c6:	f7ff bfb3 	b.w	5330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    53ca:	0000      	.short	0x0000
    53cc:	200000c8 	.word	0x200000c8
    53d0:	20000ada 	.word	0x20000ada
    53d4:	4803      	ldr	r0, [pc, #12]	; (53e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x500>)
    53d6:	7800      	ldrb	r0, [r0, #0]
    53d8:	2800      	cmp	r0, #0
    53da:	bf08      	it	eq
    53dc:	4770      	bxeq	lr
    53de:	f7ff bfa7 	b.w	5330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    53e2:	0000      	.short	0x0000
    53e4:	200000c8 	.word	0x200000c8
    53e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53ec:	f8df 8104 	ldr.w	r8, [pc, #260]	; 54f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>
    53f0:	4606      	mov	r6, r0
    53f2:	f8d8 4004 	ldr.w	r4, [r8, #4]
    53f6:	f104 0778 	add.w	r7, r4, #120	; 0x78
    53fa:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    53fe:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    5400:	f894 908a 	ldrb.w	r9, [r4, #138]	; 0x8a
    5404:	8f25      	ldrh	r5, [r4, #56]	; 0x38
    5406:	2908      	cmp	r1, #8
    5408:	d011      	beq.n	542e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    540a:	f00a fdcd 	bl	ffa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    540e:	bf00      	nop
    5410:	f1b9 0f00 	cmp.w	r9, #0
    5414:	bf04      	itt	eq
    5416:	1d00      	addeq	r0, r0, #4
    5418:	b280      	uxtheq	r0, r0
    541a:	4285      	cmp	r5, r0
    541c:	bf38      	it	cc
    541e:	4628      	movcc	r0, r5
    5420:	f000 09ff 	and.w	r9, r0, #255	; 0xff
    5424:	4d34      	ldr	r5, [pc, #208]	; (54f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>)
    5426:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5428:	62a8      	str	r0, [r5, #40]	; 0x28
    542a:	b976      	cbnz	r6, 544a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x566>
    542c:	e003      	b.n	5436 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x552>
    542e:	2104      	movs	r1, #4
    5430:	f00a fdba 	bl	ffa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5434:	e7ec      	b.n	5410 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    5436:	7a68      	ldrb	r0, [r5, #9]
    5438:	7aa9      	ldrb	r1, [r5, #10]
    543a:	4288      	cmp	r0, r1
    543c:	d105      	bne.n	544a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x566>
    543e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    5442:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    5446:	4288      	cmp	r0, r1
    5448:	d004      	beq.n	5454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    544a:	7a68      	ldrb	r0, [r5, #9]
    544c:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    5450:	f008 fdbe 	bl	dfd0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5454:	7cb8      	ldrb	r0, [r7, #18]
    5456:	b348      	cbz	r0, 54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>
    5458:	4828      	ldr	r0, [pc, #160]	; (54fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x618>)
    545a:	f008 fad5 	bl	da08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    545e:	f898 0000 	ldrb.w	r0, [r8]
    5462:	2800      	cmp	r0, #0
    5464:	bf0c      	ite	eq
    5466:	2001      	moveq	r0, #1
    5468:	2000      	movne	r0, #0
    546a:	f080 0101 	eor.w	r1, r0, #1
    546e:	4824      	ldr	r0, [pc, #144]	; (5500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x61c>)
    5470:	7601      	strb	r1, [r0, #24]
    5472:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    5476:	e9c0 1204 	strd	r1, r2, [r0, #16]
    547a:	f5a0 7284 	sub.w	r2, r0, #264	; 0x108
    547e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    5480:	f007 fdba 	bl	cff8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5484:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    5488:	2801      	cmp	r0, #1
    548a:	bf08      	it	eq
    548c:	2200      	moveq	r2, #0
    548e:	d008      	beq.n	54a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5490:	2802      	cmp	r0, #2
    5492:	bf08      	it	eq
    5494:	2201      	moveq	r2, #1
    5496:	d004      	beq.n	54a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5498:	f240 31b3 	movw	r1, #947	; 0x3b3
    549c:	2006      	movs	r0, #6
    549e:	f7fe fb71 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54a2:	4649      	mov	r1, r9
    54a4:	2001      	movs	r0, #1
    54a6:	f007 fdd5 	bl	d054 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    54aa:	e004      	b.n	54b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d2>
    54ac:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    54ae:	f008 faab 	bl	da08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54b2:	f007 fdb1 	bl	d018 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    54b6:	2e00      	cmp	r6, #0
    54b8:	bf04      	itt	eq
    54ba:	2000      	moveq	r0, #0
    54bc:	f008 f912 	bleq	d6e4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    54c0:	f641 514c 	movw	r1, #7500	; 0x1d4c
    54c4:	6860      	ldr	r0, [r4, #4]
    54c6:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    54ca:	4288      	cmp	r0, r1
    54cc:	f04f 0201 	mov.w	r2, #1
    54d0:	f04f 0100 	mov.w	r1, #0
    54d4:	bf34      	ite	cc
    54d6:	2001      	movcc	r0, #1
    54d8:	2000      	movcs	r0, #0
    54da:	f008 fc75 	bl	ddc8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    54de:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    54e2:	2801      	cmp	r0, #1
    54e4:	bf08      	it	eq
    54e6:	f008 fd27 	bleq	df38 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    54ea:	2002      	movs	r0, #2
    54ec:	7028      	strb	r0, [r5, #0]
    54ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54f2:	0000      	.short	0x0000
    54f4:	20000104 	.word	0x20000104
    54f8:	200000c8 	.word	0x200000c8
    54fc:	20000988 	.word	0x20000988
    5500:	20000a90 	.word	0x20000a90
    5504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5508:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 57c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8dc>
    550c:	0002      	movs	r2, r0
    550e:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    5512:	f8d8 5004 	ldr.w	r5, [r8, #4]
    5516:	7aa0      	ldrb	r0, [r4, #10]
    5518:	b083      	sub	sp, #12
    551a:	f895 1066 	ldrb.w	r1, [r5, #102]	; 0x66
    551e:	f105 0778 	add.w	r7, r5, #120	; 0x78
    5522:	f1a8 0b18 	sub.w	fp, r8, #24
    5526:	bf01      	itttt	eq
    5528:	7a62      	ldrbeq	r2, [r4, #9]
    552a:	4282      	cmpeq	r2, r0
    552c:	f895 2067 	ldrbeq.w	r2, [r5, #103]	; 0x67
    5530:	428a      	cmpeq	r2, r1
    5532:	d001      	beq.n	5538 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>
    5534:	f008 fd4c 	bl	dfd0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5538:	7978      	ldrb	r0, [r7, #5]
    553a:	f8df a288 	ldr.w	sl, [pc, #648]	; 57c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e0>
    553e:	f04f 0900 	mov.w	r9, #0
    5542:	2601      	movs	r6, #1
    5544:	b150      	cbz	r0, 555c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x678>
    5546:	2801      	cmp	r0, #1
    5548:	d06d      	beq.n	5626 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    554a:	2802      	cmp	r0, #2
    554c:	d06c      	beq.n	5628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x744>
    554e:	2803      	cmp	r0, #3
    5550:	d06b      	beq.n	562a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    5552:	f240 2162 	movw	r1, #610	; 0x262
    5556:	2027      	movs	r0, #39	; 0x27
    5558:	f7fe fb14 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    555c:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5560:	f100 0178 	add.w	r1, r0, #120	; 0x78
    5564:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    5568:	2b24      	cmp	r3, #36	; 0x24
    556a:	bf1c      	itt	ne
    556c:	7b49      	ldrbne	r1, [r1, #13]
    556e:	2924      	cmpne	r1, #36	; 0x24
    5570:	d008      	beq.n	5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>
    5572:	f04f 0202 	mov.w	r2, #2
    5576:	2b1f      	cmp	r3, #31
    5578:	bf18      	it	ne
    557a:	2b20      	cmpne	r3, #32
    557c:	d01c      	beq.n	55b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    557e:	2922      	cmp	r1, #34	; 0x22
    5580:	d033      	beq.n	55ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5582:	e053      	b.n	562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    5584:	f898 1000 	ldrb.w	r1, [r8]
    5588:	2900      	cmp	r1, #0
    558a:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    558e:	d00a      	beq.n	55a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    5590:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    5594:	2800      	cmp	r0, #0
    5596:	d04e      	beq.n	5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5598:	2901      	cmp	r1, #1
    559a:	bf18      	it	ne
    559c:	2801      	cmpne	r0, #1
    559e:	d038      	beq.n	5612 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    55a0:	f04f 0102 	mov.w	r1, #2
    55a4:	e047      	b.n	5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    55a6:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    55aa:	2800      	cmp	r0, #0
    55ac:	d043      	beq.n	5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    55ae:	2901      	cmp	r1, #1
    55b0:	bf18      	it	ne
    55b2:	2801      	cmpne	r0, #1
    55b4:	d02d      	beq.n	5612 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    55b6:	e7f3      	b.n	55a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    55b8:	2922      	cmp	r1, #34	; 0x22
    55ba:	d016      	beq.n	55ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    55bc:	f898 1000 	ldrb.w	r1, [r8]
    55c0:	b381      	cbz	r1, 5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x740>
    55c2:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    55c6:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    55ca:	f010 0f01 	tst.w	r0, #1
    55ce:	bf18      	it	ne
    55d0:	4630      	movne	r0, r6
    55d2:	d004      	beq.n	55de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fa>
    55d4:	2901      	cmp	r1, #1
    55d6:	bf18      	it	ne
    55d8:	2801      	cmpne	r0, #1
    55da:	d01a      	beq.n	5612 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    55dc:	e7e0      	b.n	55a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    55de:	f010 0f02 	tst.w	r0, #2
    55e2:	bf18      	it	ne
    55e4:	4610      	movne	r0, r2
    55e6:	d1f5      	bne.n	55d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    55e8:	e025      	b.n	5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    55ea:	f898 1000 	ldrb.w	r1, [r8]
    55ee:	b1c9      	cbz	r1, 5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x740>
    55f0:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    55f4:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    55f8:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    55fc:	ea03 0000 	and.w	r0, r3, r0
    5600:	f010 0f01 	tst.w	r0, #1
    5604:	bf18      	it	ne
    5606:	4630      	movne	r0, r6
    5608:	d006      	beq.n	5618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x734>
    560a:	2901      	cmp	r1, #1
    560c:	bf18      	it	ne
    560e:	2801      	cmpne	r0, #1
    5610:	d1c6      	bne.n	55a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    5612:	f04f 0101 	mov.w	r1, #1
    5616:	e00e      	b.n	5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5618:	f010 0f02 	tst.w	r0, #2
    561c:	bf18      	it	ne
    561e:	4610      	movne	r0, r2
    5620:	d1f3      	bne.n	560a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    5622:	e008      	b.n	5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5624:	e002      	b.n	562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    5626:	e029      	b.n	567c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>
    5628:	e03b      	b.n	56a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7be>
    562a:	e04a      	b.n	56c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7de>
    562c:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5630:	2904      	cmp	r1, #4
    5632:	bf08      	it	eq
    5634:	2108      	moveq	r1, #8
    5636:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    5638:	f00a fcb6 	bl	ffa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    563c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    563e:	4281      	cmp	r1, r0
    5640:	bf38      	it	cc
    5642:	4608      	movcc	r0, r1
    5644:	f8ad 0004 	strh.w	r0, [sp, #4]
    5648:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    564c:	4658      	mov	r0, fp
    564e:	f7ff f96f 	bl	4930 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5652:	b148      	cbz	r0, 5668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x784>
    5654:	89e2      	ldrh	r2, [r4, #14]
    5656:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    565c:	81e2      	strh	r2, [r4, #14]
    565e:	69a2      	ldr	r2, [r4, #24]
    5660:	2080      	movs	r0, #128	; 0x80
    5662:	4790      	blx	r2
    5664:	70fe      	strb	r6, [r7, #3]
    5666:	e030      	b.n	56ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5668:	466a      	mov	r2, sp
    566a:	a901      	add	r1, sp, #4
    566c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    566e:	f00a f92e 	bl	f8ce <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    5672:	6260      	str	r0, [r4, #36]	; 0x24
    5674:	b110      	cbz	r0, 567c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>
    5676:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
    567a:	b111      	cbz	r1, 5682 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x79e>
    567c:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
    5680:	e023      	b.n	56ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5682:	f89d 1000 	ldrb.w	r1, [sp]
    5686:	b931      	cbnz	r1, 5696 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b2>
    5688:	f8a0 9000 	strh.w	r9, [r0]
    568c:	f880 9002 	strb.w	r9, [r0, #2]
    5690:	2101      	movs	r1, #1
    5692:	f00a ff2c 	bl	104ee <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5696:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    569a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    569c:	f00a fee1 	bl	10462 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    56a0:	e013      	b.n	56ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    56a2:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    56a6:	f8ad 0004 	strh.w	r0, [sp, #4]
    56aa:	466a      	mov	r2, sp
    56ac:	a901      	add	r1, sp, #4
    56ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
    56b0:	f00a f90d 	bl	f8ce <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    56b4:	6260      	str	r0, [r4, #36]	; 0x24
    56b6:	b940      	cbnz	r0, 56ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    56b8:	f240 2153 	movw	r1, #595	; 0x253
    56bc:	2027      	movs	r0, #39	; 0x27
    56be:	f7fe fa61 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56c2:	4658      	mov	r0, fp
    56c4:	f7ff f934 	bl	4930 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    56c8:	b1e0      	cbz	r0, 5704 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x820>
    56ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    56cc:	2208      	movs	r2, #8
    56ce:	7801      	ldrb	r1, [r0, #0]
    56d0:	f021 0308 	bic.w	r3, r1, #8
    56d4:	7003      	strb	r3, [r0, #0]
    56d6:	79b9      	ldrb	r1, [r7, #6]
    56d8:	ea02 01c1 	and.w	r1, r2, r1, lsl #3
    56dc:	4319      	orrs	r1, r3
    56de:	f021 0304 	bic.w	r3, r1, #4
    56e2:	7003      	strb	r3, [r0, #0]
    56e4:	79f9      	ldrb	r1, [r7, #7]
    56e6:	2204      	movs	r2, #4
    56e8:	ea02 0181 	and.w	r1, r2, r1, lsl #2
    56ec:	4319      	orrs	r1, r3
    56ee:	f021 0110 	bic.w	r1, r1, #16
    56f2:	7001      	strb	r1, [r0, #0]
    56f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    56f6:	f00a f8bb 	bl	f870 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    56fa:	2800      	cmp	r0, #0
    56fc:	bf18      	it	ne
    56fe:	46b1      	movne	r9, r6
    5700:	d10f      	bne.n	5722 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83e>
    5702:	e004      	b.n	570e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x82a>
    5704:	f44f 7117 	mov.w	r1, #604	; 0x25c
    5708:	2027      	movs	r0, #39	; 0x27
    570a:	f7fe fa3b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    570e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5710:	2103      	movs	r1, #3
    5712:	7800      	ldrb	r0, [r0, #0]
    5714:	ea31 0000 	bics.w	r0, r1, r0
    5718:	d003      	beq.n	5722 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83e>
    571a:	f7ff f8c7 	bl	48ac <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    571e:	f080 0901 	eor.w	r9, r0, #1
    5722:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5724:	7801      	ldrb	r1, [r0, #0]
    5726:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
    572a:	7001      	strb	r1, [r0, #0]
    572c:	7c79      	ldrb	r1, [r7, #17]
    572e:	2900      	cmp	r1, #0
    5730:	bf1c      	itt	ne
    5732:	7841      	ldrbne	r1, [r0, #1]
    5734:	2900      	cmpne	r1, #0
    5736:	d027      	beq.n	5788 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a4>
    5738:	4823      	ldr	r0, [pc, #140]	; (57c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e4>)
    573a:	f008 f965 	bl	da08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    573e:	f898 0000 	ldrb.w	r0, [r8]
    5742:	2800      	cmp	r0, #0
    5744:	bf0c      	ite	eq
    5746:	2101      	moveq	r1, #1
    5748:	2100      	movne	r1, #0
    574a:	4820      	ldr	r0, [pc, #128]	; (57cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e8>)
    574c:	7601      	strb	r1, [r0, #24]
    574e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    5752:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5756:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
    575a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    575c:	f007 fc4c 	bl	cff8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5760:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
    5764:	2801      	cmp	r0, #1
    5766:	bf08      	it	eq
    5768:	2200      	moveq	r2, #0
    576a:	d008      	beq.n	577e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x89a>
    576c:	2802      	cmp	r0, #2
    576e:	bf08      	it	eq
    5770:	2201      	moveq	r2, #1
    5772:	d004      	beq.n	577e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x89a>
    5774:	f240 31b3 	movw	r1, #947	; 0x3b3
    5778:	2006      	movs	r0, #6
    577a:	f7fe fa03 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    577e:	21fb      	movs	r1, #251	; 0xfb
    5780:	2000      	movs	r0, #0
    5782:	f007 fc67 	bl	d054 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5786:	e003      	b.n	5790 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ac>
    5788:	f008 f93e 	bl	da08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    578c:	f007 fc44 	bl	d018 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5790:	6868      	ldr	r0, [r5, #4]
    5792:	f641 514c 	movw	r1, #7500	; 0x1d4c
    5796:	4288      	cmp	r0, r1
    5798:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
    579c:	f04f 0201 	mov.w	r2, #1
    57a0:	4611      	mov	r1, r2
    57a2:	bf34      	ite	cc
    57a4:	2001      	movcc	r0, #1
    57a6:	2000      	movcs	r0, #0
    57a8:	f008 fb0e 	bl	ddc8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    57ac:	7126      	strb	r6, [r4, #4]
    57ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57b0:	8801      	ldrh	r1, [r0, #0]
    57b2:	8261      	strh	r1, [r4, #18]
    57b4:	7880      	ldrb	r0, [r0, #2]
    57b6:	7520      	strb	r0, [r4, #20]
    57b8:	7026      	strb	r6, [r4, #0]
    57ba:	b003      	add	sp, #12
    57bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57c0:	20000104 	.word	0x20000104
    57c4:	20000ab8 	.word	0x20000ab8
    57c8:	20000988 	.word	0x20000988
    57cc:	20000a90 	.word	0x20000a90
    57d0:	000053a9 	.word	0x000053a9
    57d4:	00004fd9 	.word	0x00004fd9
    57d8:	0000528d 	.word	0x0000528d
    57dc:	000053d5 	.word	0x000053d5
    57e0:	00000000 	.word	0x00000000

000057e4 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    57e4:	460a      	mov	r2, r1
    57e6:	4907      	ldr	r1, [pc, #28]	; (5804 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    57e8:	b510      	push	{r4, lr}
    57ea:	7809      	ldrb	r1, [r1, #0]
    57ec:	b141      	cbz	r1, 5800 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    57ee:	4b06      	ldr	r3, [pc, #24]	; (5808 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    57f0:	7899      	ldrb	r1, [r3, #2]
    57f2:	b129      	cbz	r1, 5800 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    57f4:	4402      	add	r2, r0
    57f6:	1cd8      	adds	r0, r3, #3
    57f8:	f007 fb28 	bl	ce4c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    57fc:	2001      	movs	r0, #1
    57fe:	bd10      	pop	{r4, pc}
    5800:	2000      	movs	r0, #0
    5802:	bd10      	pop	{r4, pc}
    5804:	20000398 	.word	0x20000398
    5808:	20001a29 	.word	0x20001a29

0000580c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    580c:	4800      	ldr	r0, [pc, #0]	; (5810 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    580e:	4770      	bx	lr
    5810:	20001bfc 	.word	0x20001bfc

00005814 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5814:	4904      	ldr	r1, [pc, #16]	; (5828 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5816:	788a      	ldrb	r2, [r1, #2]
    5818:	4282      	cmp	r2, r0
    581a:	bf86      	itte	hi
    581c:	4408      	addhi	r0, r1
    581e:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    5822:	2000      	movls	r0, #0
    5824:	4770      	bx	lr
    5826:	0000      	.short	0x0000
    5828:	20001a29 	.word	0x20001a29

0000582c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    582c:	4904      	ldr	r1, [pc, #16]	; (5840 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    582e:	788a      	ldrb	r2, [r1, #2]
    5830:	4282      	cmp	r2, r0
    5832:	bf86      	itte	hi
    5834:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5838:	3083      	addhi	r0, #131	; 0x83
    583a:	2000      	movls	r0, #0
    583c:	4770      	bx	lr
    583e:	0000      	.short	0x0000
    5840:	20001a29 	.word	0x20001a29

00005844 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5844:	4a05      	ldr	r2, [pc, #20]	; (585c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5846:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    584a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    584e:	6802      	ldr	r2, [r0, #0]
    5850:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5854:	8880      	ldrh	r0, [r0, #4]
    5856:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    585a:	4770      	bx	lr
    585c:	20001a29 	.word	0x20001a29

00005860 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5864:	460e      	mov	r6, r1
    5866:	4607      	mov	r7, r0
    5868:	4615      	mov	r5, r2
    586a:	2106      	movs	r1, #6
    586c:	4630      	mov	r0, r6
    586e:	f000 fe3b 	bl	64e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5872:	4c1c      	ldr	r4, [pc, #112]	; (58e4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x84>)
    5874:	b198      	cbz	r0, 589e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x3e>
    5876:	78a1      	ldrb	r1, [r4, #2]
    5878:	b171      	cbz	r1, 5898 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    587a:	f504 709d 	add.w	r0, r4, #314	; 0x13a
    587e:	f011 0f01 	tst.w	r1, #1
    5882:	bf18      	it	ne
    5884:	f800 5f01 	strbne.w	r5, [r0, #1]!
    5888:	78a1      	ldrb	r1, [r4, #2]
    588a:	0849      	lsrs	r1, r1, #1
    588c:	d004      	beq.n	5898 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    588e:	7045      	strb	r5, [r0, #1]
    5890:	f800 5f02 	strb.w	r5, [r0, #2]!
    5894:	1e49      	subs	r1, r1, #1
    5896:	d1fa      	bne.n	588e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2e>
    5898:	2001      	movs	r0, #1
    589a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    589e:	4638      	mov	r0, r7
    58a0:	4631      	mov	r1, r6
    58a2:	f000 fad5 	bl	5e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    58a6:	2810      	cmp	r0, #16
    58a8:	d019      	beq.n	58de <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    58aa:	78a3      	ldrb	r3, [r4, #2]
    58ac:	2100      	movs	r1, #0
    58ae:	2b00      	cmp	r3, #0
    58b0:	d915      	bls.n	58de <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    58b2:	1862      	adds	r2, r4, r1
    58b4:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
    58b8:	4282      	cmp	r2, r0
    58ba:	d10b      	bne.n	58d4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x74>
    58bc:	2910      	cmp	r1, #16
    58be:	bf18      	it	ne
    58c0:	2908      	cmpne	r1, #8
    58c2:	d00c      	beq.n	58de <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    58c4:	eb04 0001 	add.w	r0, r4, r1
    58c8:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    58cc:	f04f 0001 	mov.w	r0, #1
    58d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58d4:	f101 0101 	add.w	r1, r1, #1
    58d8:	b2c9      	uxtb	r1, r1
    58da:	428b      	cmp	r3, r1
    58dc:	d8e9      	bhi.n	58b2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x52>
    58de:	2000      	movs	r0, #0
    58e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58e4:	20001a29 	.word	0x20001a29

000058e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    58e8:	4904      	ldr	r1, [pc, #16]	; (58fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    58ea:	788a      	ldrb	r2, [r1, #2]
    58ec:	4282      	cmp	r2, r0
    58ee:	bf86      	itte	hi
    58f0:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    58f4:	1cc0      	addhi	r0, r0, #3
    58f6:	2000      	movls	r0, #0
    58f8:	4770      	bx	lr
    58fa:	0000      	.short	0x0000
    58fc:	20001a29 	.word	0x20001a29

00005900 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5900:	b510      	push	{r4, lr}
    5902:	f240 12d3 	movw	r2, #467	; 0x1d3
    5906:	2100      	movs	r1, #0
    5908:	4807      	ldr	r0, [pc, #28]	; (5928 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    590a:	f009 f88d 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    590e:	2208      	movs	r2, #8
    5910:	21ff      	movs	r1, #255	; 0xff
    5912:	4806      	ldr	r0, [pc, #24]	; (592c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5914:	f009 f888 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5918:	4805      	ldr	r0, [pc, #20]	; (5930 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    591a:	2100      	movs	r1, #0
    591c:	7001      	strb	r1, [r0, #0]
    591e:	7041      	strb	r1, [r0, #1]
    5920:	f44f 7161 	mov.w	r1, #900	; 0x384
    5924:	8041      	strh	r1, [r0, #2]
    5926:	bd10      	pop	{r4, pc}
    5928:	20001a29 	.word	0x20001a29
    592c:	2000039c 	.word	0x2000039c
    5930:	20000398 	.word	0x20000398

00005934 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5934:	4901      	ldr	r1, [pc, #4]	; (593c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5936:	7008      	strb	r0, [r1, #0]
    5938:	4770      	bx	lr
    593a:	0000      	.short	0x0000
    593c:	20000398 	.word	0x20000398

00005940 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5940:	4801      	ldr	r0, [pc, #4]	; (5948 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5942:	7800      	ldrb	r0, [r0, #0]
    5944:	4770      	bx	lr
    5946:	0000      	.short	0x0000
    5948:	20000398 	.word	0x20000398

0000594c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    594c:	4b0b      	ldr	r3, [pc, #44]	; (597c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    594e:	f893 c002 	ldrb.w	ip, [r3, #2]
    5952:	4584      	cmp	ip, r0
    5954:	bf9c      	itt	ls
    5956:	2000      	movls	r0, #0
    5958:	4770      	bxls	lr
    595a:	4418      	add	r0, r3
    595c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5960:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5964:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5968:	700b      	strb	r3, [r1, #0]
    596a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    596e:	6011      	str	r1, [r2, #0]
    5970:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5974:	8090      	strh	r0, [r2, #4]
    5976:	2001      	movs	r0, #1
    5978:	4770      	bx	lr
    597a:	0000      	.short	0x0000
    597c:	20001a29 	.word	0x20001a29

00005980 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5980:	4907      	ldr	r1, [pc, #28]	; (59a0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5982:	788a      	ldrb	r2, [r1, #2]
    5984:	4282      	cmp	r2, r0
    5986:	bf9c      	itt	ls
    5988:	2000      	movls	r0, #0
    598a:	4770      	bxls	lr
    598c:	4408      	add	r0, r1
    598e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5992:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5996:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    599a:	f000 0001 	and.w	r0, r0, #1
    599e:	4770      	bx	lr
    59a0:	20001a29 	.word	0x20001a29

000059a4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    59a4:	b510      	push	{r4, lr}
    59a6:	f000 fa53 	bl	5e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    59aa:	2810      	cmp	r0, #16
    59ac:	d014      	beq.n	59d8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    59ae:	4a0b      	ldr	r2, [pc, #44]	; (59dc <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    59b0:	4601      	mov	r1, r0
    59b2:	2000      	movs	r0, #0
    59b4:	f892 c002 	ldrb.w	ip, [r2, #2]
    59b8:	f1bc 0f00 	cmp.w	ip, #0
    59bc:	d90c      	bls.n	59d8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    59be:	1813      	adds	r3, r2, r0
    59c0:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    59c4:	428b      	cmp	r3, r1
    59c6:	d103      	bne.n	59d0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    59c8:	2810      	cmp	r0, #16
    59ca:	bf18      	it	ne
    59cc:	bd10      	popne	{r4, pc}
    59ce:	e003      	b.n	59d8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    59d0:	1c40      	adds	r0, r0, #1
    59d2:	b2c0      	uxtb	r0, r0
    59d4:	4584      	cmp	ip, r0
    59d6:	d8f2      	bhi.n	59be <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    59d8:	2008      	movs	r0, #8
    59da:	bd10      	pop	{r4, pc}
    59dc:	20001a29 	.word	0x20001a29

000059e0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    59e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59e4:	4698      	mov	r8, r3
    59e6:	4691      	mov	r9, r2
    59e8:	460f      	mov	r7, r1
    59ea:	4606      	mov	r6, r0
    59ec:	f000 fa30 	bl	5e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    59f0:	4c2d      	ldr	r4, [pc, #180]	; (5aa8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc8>)
    59f2:	4605      	mov	r5, r0
    59f4:	2810      	cmp	r0, #16
    59f6:	d017      	beq.n	5a28 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x48>
    59f8:	78a1      	ldrb	r1, [r4, #2]
    59fa:	2000      	movs	r0, #0
    59fc:	2900      	cmp	r1, #0
    59fe:	d90e      	bls.n	5a1e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5a00:	1822      	adds	r2, r4, r0
    5a02:	f892 3103 	ldrb.w	r3, [r2, #259]	; 0x103
    5a06:	42ab      	cmp	r3, r5
    5a08:	d105      	bne.n	5a16 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x36>
    5a0a:	2810      	cmp	r0, #16
    5a0c:	bf1c      	itt	ne
    5a0e:	2012      	movne	r0, #18
    5a10:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a14:	e003      	b.n	5a1e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5a16:	1c40      	adds	r0, r0, #1
    5a18:	b2c0      	uxtb	r0, r0
    5a1a:	4281      	cmp	r1, r0
    5a1c:	d8f0      	bhi.n	5a00 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5a1e:	2908      	cmp	r1, #8
    5a20:	d23f      	bcs.n	5aa2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5a22:	2d10      	cmp	r5, #16
    5a24:	d003      	beq.n	5a2e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x4e>
    5a26:	e018      	b.n	5a5a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x7a>
    5a28:	78a1      	ldrb	r1, [r4, #2]
    5a2a:	2908      	cmp	r1, #8
    5a2c:	d239      	bcs.n	5aa2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5a2e:	7825      	ldrb	r5, [r4, #0]
    5a30:	2100      	movs	r1, #0
    5a32:	1c68      	adds	r0, r5, #1
    5a34:	7020      	strb	r0, [r4, #0]
    5a36:	2d10      	cmp	r5, #16
    5a38:	d303      	bcc.n	5a42 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x62>
    5a3a:	2146      	movs	r1, #70	; 0x46
    5a3c:	2028      	movs	r0, #40	; 0x28
    5a3e:	f7fe f8a1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a42:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
    5a46:	683a      	ldr	r2, [r7, #0]
    5a48:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
    5a4c:	88ba      	ldrh	r2, [r7, #4]
    5a4e:	f8a0 2158 	strh.w	r2, [r0, #344]	; 0x158
    5a52:	f880 6153 	strb.w	r6, [r0, #339]	; 0x153
    5a56:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5a5a:	78a6      	ldrb	r6, [r4, #2]
    5a5c:	2210      	movs	r2, #16
    5a5e:	1c70      	adds	r0, r6, #1
    5a60:	70a0      	strb	r0, [r4, #2]
    5a62:	eb04 1706 	add.w	r7, r4, r6, lsl #4
    5a66:	1cf8      	adds	r0, r7, #3
    5a68:	4649      	mov	r1, r9
    5a6a:	f000 fd07 	bl	647c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5a6e:	f107 0083 	add.w	r0, r7, #131	; 0x83
    5a72:	2210      	movs	r2, #16
    5a74:	4641      	mov	r1, r8
    5a76:	f000 fd01 	bl	647c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5a7a:	2110      	movs	r1, #16
    5a7c:	4640      	mov	r0, r8
    5a7e:	f000 fd33 	bl	64e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5a82:	4434      	add	r4, r6
    5a84:	2110      	movs	r1, #16
    5a86:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5a8a:	4648      	mov	r0, r9
    5a8c:	f000 fd2c 	bl	64e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5a90:	f884 014b 	strb.w	r0, [r4, #331]	; 0x14b
    5a94:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
    5a98:	2000      	movs	r0, #0
    5a9a:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
    5a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5aa2:	2007      	movs	r0, #7
    5aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5aa8:	20001a29 	.word	0x20001a29

00005aac <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5aac:	b470      	push	{r4, r5, r6}
    5aae:	484d      	ldr	r0, [pc, #308]	; (5be4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x138>)
    5ab0:	7881      	ldrb	r1, [r0, #2]
    5ab2:	1e49      	subs	r1, r1, #1
    5ab4:	b24b      	sxtb	r3, r1
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	bfbc      	itt	lt
    5aba:	bc70      	poplt	{r4, r5, r6}
    5abc:	4770      	bxlt	lr
    5abe:	bf00      	nop
    5ac0:	7881      	ldrb	r1, [r0, #2]
    5ac2:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    5ac6:	1e49      	subs	r1, r1, #1
    5ac8:	b2ca      	uxtb	r2, r1
    5aca:	7082      	strb	r2, [r0, #2]
    5acc:	fa50 f183 	uxtab	r1, r0, r3
    5ad0:	f891 1103 	ldrb.w	r1, [r1, #259]	; 0x103
    5ad4:	4594      	cmp	ip, r2
    5ad6:	d03e      	beq.n	5b56 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xaa>
    5ad8:	eb00 1502 	add.w	r5, r0, r2, lsl #4
    5adc:	eb00 140c 	add.w	r4, r0, ip, lsl #4
    5ae0:	f8d5 6003 	ldr.w	r6, [r5, #3]
    5ae4:	f8c4 6003 	str.w	r6, [r4, #3]
    5ae8:	f8d5 6007 	ldr.w	r6, [r5, #7]
    5aec:	f8c4 6007 	str.w	r6, [r4, #7]
    5af0:	f8d5 600b 	ldr.w	r6, [r5, #11]
    5af4:	f8c4 600b 	str.w	r6, [r4, #11]
    5af8:	f8d5 600f 	ldr.w	r6, [r5, #15]
    5afc:	f8c4 600f 	str.w	r6, [r4, #15]
    5b00:	f8d5 6083 	ldr.w	r6, [r5, #131]	; 0x83
    5b04:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    5b08:	f8d5 6087 	ldr.w	r6, [r5, #135]	; 0x87
    5b0c:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    5b10:	f8d5 608b 	ldr.w	r6, [r5, #139]	; 0x8b
    5b14:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    5b18:	f8d5 508f 	ldr.w	r5, [r5, #143]	; 0x8f
    5b1c:	f8c4 508f 	str.w	r5, [r4, #143]	; 0x8f
    5b20:	1885      	adds	r5, r0, r2
    5b22:	eb00 040c 	add.w	r4, r0, ip
    5b26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5b2a:	f895 6103 	ldrb.w	r6, [r5, #259]	; 0x103
    5b2e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    5b32:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    5b36:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
    5b3a:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    5b3e:	f8d2 610b 	ldr.w	r6, [r2, #267]	; 0x10b
    5b42:	f8cc 610b 	str.w	r6, [ip, #267]	; 0x10b
    5b46:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5b4a:	f8ac 210f 	strh.w	r2, [ip, #271]	; 0x10f
    5b4e:	f895 213b 	ldrb.w	r2, [r5, #315]	; 0x13b
    5b52:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
    5b56:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    5b5a:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    5b5e:	f012 0f01 	tst.w	r2, #1
    5b62:	d133      	bne.n	5bcc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5b64:	f890 c002 	ldrb.w	ip, [r0, #2]
    5b68:	2200      	movs	r2, #0
    5b6a:	f1bc 0f00 	cmp.w	ip, #0
    5b6e:	d90b      	bls.n	5b88 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    5b70:	1884      	adds	r4, r0, r2
    5b72:	f894 5103 	ldrb.w	r5, [r4, #259]	; 0x103
    5b76:	428d      	cmp	r5, r1
    5b78:	d102      	bne.n	5b80 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xd4>
    5b7a:	2a10      	cmp	r2, #16
    5b7c:	d126      	bne.n	5bcc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5b7e:	e003      	b.n	5b88 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    5b80:	1c52      	adds	r2, r2, #1
    5b82:	b2d2      	uxtb	r2, r2
    5b84:	4594      	cmp	ip, r2
    5b86:	d8f3      	bhi.n	5b70 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc4>
    5b88:	7802      	ldrb	r2, [r0, #0]
    5b8a:	1e52      	subs	r2, r2, #1
    5b8c:	b2d2      	uxtb	r2, r2
    5b8e:	7002      	strb	r2, [r0, #0]
    5b90:	428a      	cmp	r2, r1
    5b92:	d01b      	beq.n	5bcc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5b94:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    5b98:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    5b9c:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    5ba0:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    5ba4:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    5ba8:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    5bac:	7884      	ldrb	r4, [r0, #2]
    5bae:	f890 c000 	ldrb.w	ip, [r0]
    5bb2:	2200      	movs	r2, #0
    5bb4:	2c00      	cmp	r4, #0
    5bb6:	d909      	bls.n	5bcc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5bb8:	1885      	adds	r5, r0, r2
    5bba:	f895 5103 	ldrb.w	r5, [r5, #259]	; 0x103
    5bbe:	4565      	cmp	r5, ip
    5bc0:	d10b      	bne.n	5bda <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x12e>
    5bc2:	2a10      	cmp	r2, #16
    5bc4:	bf1c      	itt	ne
    5bc6:	4402      	addne	r2, r0
    5bc8:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    5bcc:	1e59      	subs	r1, r3, #1
    5bce:	b24b      	sxtb	r3, r1
    5bd0:	2b00      	cmp	r3, #0
    5bd2:	f6bf af75 	bge.w	5ac0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x14>
    5bd6:	bc70      	pop	{r4, r5, r6}
    5bd8:	4770      	bx	lr
    5bda:	1c52      	adds	r2, r2, #1
    5bdc:	b2d2      	uxtb	r2, r2
    5bde:	4294      	cmp	r4, r2
    5be0:	d8ea      	bhi.n	5bb8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x10c>
    5be2:	e7f3      	b.n	5bcc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5be4:	20001a29 	.word	0x20001a29

00005be8 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    5be8:	b510      	push	{r4, lr}
    5bea:	f000 f931 	bl	5e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bee:	2810      	cmp	r0, #16
    5bf0:	d016      	beq.n	5c20 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    5bf2:	4a0c      	ldr	r2, [pc, #48]	; (5c24 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x3c>)
    5bf4:	4601      	mov	r1, r0
    5bf6:	2000      	movs	r0, #0
    5bf8:	7893      	ldrb	r3, [r2, #2]
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d910      	bls.n	5c20 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    5bfe:	bf00      	nop
    5c00:	eb02 0c00 	add.w	ip, r2, r0
    5c04:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5c08:	458c      	cmp	ip, r1
    5c0a:	d105      	bne.n	5c18 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x30>
    5c0c:	2810      	cmp	r0, #16
    5c0e:	d007      	beq.n	5c20 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    5c10:	f000 f942 	bl	5e98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xec>
    5c14:	2001      	movs	r0, #1
    5c16:	bd10      	pop	{r4, pc}
    5c18:	1c40      	adds	r0, r0, #1
    5c1a:	b2c0      	uxtb	r0, r0
    5c1c:	4283      	cmp	r3, r0
    5c1e:	d8ef      	bhi.n	5c00 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x18>
    5c20:	2000      	movs	r0, #0
    5c22:	bd10      	pop	{r4, pc}
    5c24:	20001a29 	.word	0x20001a29

00005c28 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5c28:	4801      	ldr	r0, [pc, #4]	; (5c30 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5c2a:	8840      	ldrh	r0, [r0, #2]
    5c2c:	4770      	bx	lr
    5c2e:	0000      	.short	0x0000
    5c30:	20000398 	.word	0x20000398

00005c34 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5c34:	b138      	cbz	r0, 5c46 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5c36:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5c3a:	4288      	cmp	r0, r1
    5c3c:	d803      	bhi.n	5c46 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5c3e:	4903      	ldr	r1, [pc, #12]	; (5c4c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5c40:	8048      	strh	r0, [r1, #2]
    5c42:	2001      	movs	r0, #1
    5c44:	4770      	bx	lr
    5c46:	2000      	movs	r0, #0
    5c48:	4770      	bx	lr
    5c4a:	0000      	.short	0x0000
    5c4c:	20000398 	.word	0x20000398

00005c50 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5c50:	4906      	ldr	r1, [pc, #24]	; (5c6c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    5c52:	788a      	ldrb	r2, [r1, #2]
    5c54:	4282      	cmp	r2, r0
    5c56:	d906      	bls.n	5c66 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    5c58:	4408      	add	r0, r1
    5c5a:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5c5e:	2800      	cmp	r0, #0
    5c60:	bf04      	itt	eq
    5c62:	2001      	moveq	r0, #1
    5c64:	4770      	bxeq	lr
    5c66:	2000      	movs	r0, #0
    5c68:	4770      	bx	lr
    5c6a:	0000      	.short	0x0000
    5c6c:	20001a29 	.word	0x20001a29

00005c70 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5c70:	b570      	push	{r4, r5, r6, lr}
    5c72:	460d      	mov	r5, r1
    5c74:	4604      	mov	r4, r0
    5c76:	f000 f8eb 	bl	5e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5c7a:	4a1a      	ldr	r2, [pc, #104]	; (5ce4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    5c7c:	2810      	cmp	r0, #16
    5c7e:	d014      	beq.n	5caa <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    5c80:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    5c84:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    5c88:	f010 0f01 	tst.w	r0, #1
    5c8c:	bf1c      	itt	ne
    5c8e:	2001      	movne	r0, #1
    5c90:	bd70      	popne	{r4, r5, r6, pc}
    5c92:	7850      	ldrb	r0, [r2, #1]
    5c94:	2808      	cmp	r0, #8
    5c96:	bf3c      	itt	cc
    5c98:	2001      	movcc	r0, #1
    5c9a:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    5c9e:	d21e      	bcs.n	5cde <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    5ca0:	7850      	ldrb	r0, [r2, #1]
    5ca2:	1c40      	adds	r0, r0, #1
    5ca4:	7050      	strb	r0, [r2, #1]
    5ca6:	2001      	movs	r0, #1
    5ca8:	bd70      	pop	{r4, r5, r6, pc}
    5caa:	7850      	ldrb	r0, [r2, #1]
    5cac:	2808      	cmp	r0, #8
    5cae:	d216      	bcs.n	5cde <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    5cb0:	7813      	ldrb	r3, [r2, #0]
    5cb2:	2001      	movs	r0, #1
    5cb4:	1c59      	adds	r1, r3, #1
    5cb6:	7011      	strb	r1, [r2, #0]
    5cb8:	2b10      	cmp	r3, #16
    5cba:	d303      	bcc.n	5cc4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    5cbc:	2146      	movs	r1, #70	; 0x46
    5cbe:	2028      	movs	r0, #40	; 0x28
    5cc0:	f7fd ff60 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5cc8:	6829      	ldr	r1, [r5, #0]
    5cca:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    5cce:	88a9      	ldrh	r1, [r5, #4]
    5cd0:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5cd4:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5cd8:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    5cdc:	e7e0      	b.n	5ca0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    5cde:	2000      	movs	r0, #0
    5ce0:	bd70      	pop	{r4, r5, r6, pc}
    5ce2:	0000      	.short	0x0000
    5ce4:	20001a29 	.word	0x20001a29

00005ce8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    5ce8:	4901      	ldr	r1, [pc, #4]	; (5cf0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    5cea:	7048      	strb	r0, [r1, #1]
    5cec:	4770      	bx	lr
    5cee:	0000      	.short	0x0000
    5cf0:	20000398 	.word	0x20000398

00005cf4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5cf4:	b470      	push	{r4, r5, r6}
    5cf6:	482b      	ldr	r0, [pc, #172]	; (5da4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    5cf8:	2500      	movs	r5, #0
    5cfa:	7801      	ldrb	r1, [r0, #0]
    5cfc:	1e49      	subs	r1, r1, #1
    5cfe:	b24b      	sxtb	r3, r1
    5d00:	2b00      	cmp	r3, #0
    5d02:	db46      	blt.n	5d92 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    5d04:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    5d08:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5d0c:	f011 0f01 	tst.w	r1, #1
    5d10:	d03b      	beq.n	5d8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5d12:	7842      	ldrb	r2, [r0, #1]
    5d14:	b2d9      	uxtb	r1, r3
    5d16:	1e52      	subs	r2, r2, #1
    5d18:	7042      	strb	r2, [r0, #1]
    5d1a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    5d1e:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    5d22:	f890 c002 	ldrb.w	ip, [r0, #2]
    5d26:	2200      	movs	r2, #0
    5d28:	f1bc 0f00 	cmp.w	ip, #0
    5d2c:	d90b      	bls.n	5d46 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    5d2e:	1884      	adds	r4, r0, r2
    5d30:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    5d34:	428e      	cmp	r6, r1
    5d36:	d102      	bne.n	5d3e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    5d38:	2a10      	cmp	r2, #16
    5d3a:	d126      	bne.n	5d8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5d3c:	e003      	b.n	5d46 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    5d3e:	1c52      	adds	r2, r2, #1
    5d40:	b2d2      	uxtb	r2, r2
    5d42:	4594      	cmp	ip, r2
    5d44:	d8f3      	bhi.n	5d2e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    5d46:	7802      	ldrb	r2, [r0, #0]
    5d48:	1e52      	subs	r2, r2, #1
    5d4a:	b2d2      	uxtb	r2, r2
    5d4c:	7002      	strb	r2, [r0, #0]
    5d4e:	428a      	cmp	r2, r1
    5d50:	d01b      	beq.n	5d8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5d52:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    5d56:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    5d5a:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    5d5e:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    5d62:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    5d66:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    5d6a:	7884      	ldrb	r4, [r0, #2]
    5d6c:	f890 c000 	ldrb.w	ip, [r0]
    5d70:	2200      	movs	r2, #0
    5d72:	2c00      	cmp	r4, #0
    5d74:	d909      	bls.n	5d8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5d76:	1886      	adds	r6, r0, r2
    5d78:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    5d7c:	4566      	cmp	r6, ip
    5d7e:	d10c      	bne.n	5d9a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    5d80:	2a10      	cmp	r2, #16
    5d82:	bf1c      	itt	ne
    5d84:	4402      	addne	r2, r0
    5d86:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    5d8a:	1e59      	subs	r1, r3, #1
    5d8c:	b24b      	sxtb	r3, r1
    5d8e:	2b00      	cmp	r3, #0
    5d90:	dab8      	bge.n	5d04 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    5d92:	4805      	ldr	r0, [pc, #20]	; (5da8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    5d94:	7045      	strb	r5, [r0, #1]
    5d96:	bc70      	pop	{r4, r5, r6}
    5d98:	4770      	bx	lr
    5d9a:	1c52      	adds	r2, r2, #1
    5d9c:	b2d2      	uxtb	r2, r2
    5d9e:	4294      	cmp	r4, r2
    5da0:	d8e9      	bhi.n	5d76 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    5da2:	e7f2      	b.n	5d8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5da4:	20001a29 	.word	0x20001a29
    5da8:	20000398 	.word	0x20000398

00005dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5db0:	4d25      	ldr	r5, [pc, #148]	; (5e48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5db2:	2600      	movs	r6, #0
    5db4:	4634      	mov	r4, r6
    5db6:	7828      	ldrb	r0, [r5, #0]
    5db8:	2800      	cmp	r0, #0
    5dba:	bf8c      	ite	hi
    5dbc:	4f23      	ldrhi	r7, [pc, #140]	; (5e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5dbe:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dc2:	bf00      	nop
    5dc4:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5dc8:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    5dcc:	f011 0f01 	tst.w	r1, #1
    5dd0:	d032      	beq.n	5e38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5dd2:	78aa      	ldrb	r2, [r5, #2]
    5dd4:	2100      	movs	r1, #0
    5dd6:	4623      	mov	r3, r4
    5dd8:	2a00      	cmp	r2, #0
    5dda:	d909      	bls.n	5df0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    5ddc:	eb05 0c01 	add.w	ip, r5, r1
    5de0:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5de4:	459c      	cmp	ip, r3
    5de6:	d004      	beq.n	5df2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    5de8:	1c49      	adds	r1, r1, #1
    5dea:	b2c9      	uxtb	r1, r1
    5dec:	428a      	cmp	r2, r1
    5dee:	d8f5      	bhi.n	5ddc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    5df0:	2110      	movs	r1, #16
    5df2:	428a      	cmp	r2, r1
    5df4:	bf86      	itte	hi
    5df6:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    5dfa:	1cd3      	addhi	r3, r2, #3
    5dfc:	2300      	movls	r3, #0
    5dfe:	2200      	movs	r2, #0
    5e00:	2910      	cmp	r1, #16
    5e02:	d00c      	beq.n	5e1e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    5e04:	eb05 0c01 	add.w	ip, r5, r1
    5e08:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    5e0c:	f1b8 0f01 	cmp.w	r8, #1
    5e10:	d004      	beq.n	5e1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    5e12:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    5e16:	f1bc 0f00 	cmp.w	ip, #0
    5e1a:	d000      	beq.n	5e1e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    5e1c:	2201      	movs	r2, #1
    5e1e:	1e52      	subs	r2, r2, #1
    5e20:	4213      	tst	r3, r2
    5e22:	d109      	bne.n	5e38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5e24:	55b9      	strb	r1, [r7, r6]
    5e26:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    5e2a:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    5e2e:	4630      	mov	r0, r6
    5e30:	1c73      	adds	r3, r6, #1
    5e32:	b2de      	uxtb	r6, r3
    5e34:	f008 fb9c 	bl	e570 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5e38:	1c60      	adds	r0, r4, #1
    5e3a:	b2c4      	uxtb	r4, r0
    5e3c:	7828      	ldrb	r0, [r5, #0]
    5e3e:	42a0      	cmp	r0, r4
    5e40:	d8c0      	bhi.n	5dc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    5e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e46:	0000      	.short	0x0000
    5e48:	20001a29 	.word	0x20001a29
    5e4c:	2000039c 	.word	0x2000039c
    5e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e54:	4d0f      	ldr	r5, [pc, #60]	; (5e94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>)
    5e56:	4606      	mov	r6, r0
    5e58:	2400      	movs	r4, #0
    5e5a:	7828      	ldrb	r0, [r5, #0]
    5e5c:	460f      	mov	r7, r1
    5e5e:	2800      	cmp	r0, #0
    5e60:	d912      	bls.n	5e88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xdc>
    5e62:	bf00      	nop
    5e64:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5e68:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5e6c:	42b1      	cmp	r1, r6
    5e6e:	d106      	bne.n	5e7e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd2>
    5e70:	2206      	movs	r2, #6
    5e72:	4639      	mov	r1, r7
    5e74:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5e78:	f008 fdc6 	bl	ea08 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5e7c:	b138      	cbz	r0, 5e8e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe2>
    5e7e:	1c60      	adds	r0, r4, #1
    5e80:	b2c4      	uxtb	r4, r0
    5e82:	7828      	ldrb	r0, [r5, #0]
    5e84:	42a0      	cmp	r0, r4
    5e86:	d8ed      	bhi.n	5e64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb8>
    5e88:	2010      	movs	r0, #16
    5e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e8e:	4620      	mov	r0, r4
    5e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e94:	20001a29 	.word	0x20001a29
    5e98:	b470      	push	{r4, r5, r6}
    5e9a:	4949      	ldr	r1, [pc, #292]	; (5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x214>)
    5e9c:	180d      	adds	r5, r1, r0
    5e9e:	788a      	ldrb	r2, [r1, #2]
    5ea0:	1e52      	subs	r2, r2, #1
    5ea2:	b2d3      	uxtb	r3, r2
    5ea4:	708b      	strb	r3, [r1, #2]
    5ea6:	f895 2103 	ldrb.w	r2, [r5, #259]	; 0x103
    5eaa:	4298      	cmp	r0, r3
    5eac:	d03d      	beq.n	5f2a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x17e>
    5eae:	eb01 1400 	add.w	r4, r1, r0, lsl #4
    5eb2:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
    5eb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5eba:	f8dc 6003 	ldr.w	r6, [ip, #3]
    5ebe:	f8c4 6003 	str.w	r6, [r4, #3]
    5ec2:	f8dc 6007 	ldr.w	r6, [ip, #7]
    5ec6:	f8c4 6007 	str.w	r6, [r4, #7]
    5eca:	f8dc 600b 	ldr.w	r6, [ip, #11]
    5ece:	f8c4 600b 	str.w	r6, [r4, #11]
    5ed2:	f8dc 600f 	ldr.w	r6, [ip, #15]
    5ed6:	f8c4 600f 	str.w	r6, [r4, #15]
    5eda:	f8dc 6083 	ldr.w	r6, [ip, #131]	; 0x83
    5ede:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    5ee2:	f8dc 6087 	ldr.w	r6, [ip, #135]	; 0x87
    5ee6:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    5eea:	f8dc 608b 	ldr.w	r6, [ip, #139]	; 0x8b
    5eee:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    5ef2:	f8dc c08f 	ldr.w	ip, [ip, #143]	; 0x8f
    5ef6:	f8c4 c08f 	str.w	ip, [r4, #143]	; 0x8f
    5efa:	eb01 0c03 	add.w	ip, r1, r3
    5efe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5f02:	f89c 4103 	ldrb.w	r4, [ip, #259]	; 0x103
    5f06:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    5f0a:	f885 4103 	strb.w	r4, [r5, #259]	; 0x103
    5f0e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5f12:	f8d3 410b 	ldr.w	r4, [r3, #267]	; 0x10b
    5f16:	f8c0 410b 	str.w	r4, [r0, #267]	; 0x10b
    5f1a:	f8b3 310f 	ldrh.w	r3, [r3, #271]	; 0x10f
    5f1e:	f8a0 310f 	strh.w	r3, [r0, #271]	; 0x10f
    5f22:	f89c 013b 	ldrb.w	r0, [ip, #315]	; 0x13b
    5f26:	f885 013b 	strb.w	r0, [r5, #315]	; 0x13b
    5f2a:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    5f2e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5f32:	f010 0f01 	tst.w	r0, #1
    5f36:	bf1c      	itt	ne
    5f38:	bc70      	popne	{r4, r5, r6}
    5f3a:	4770      	bxne	lr
    5f3c:	2000      	movs	r0, #0
    5f3e:	788c      	ldrb	r4, [r1, #2]
    5f40:	2c00      	cmp	r4, #0
    5f42:	d90d      	bls.n	5f60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    5f44:	180b      	adds	r3, r1, r0
    5f46:	f893 c103 	ldrb.w	ip, [r3, #259]	; 0x103
    5f4a:	4594      	cmp	ip, r2
    5f4c:	d104      	bne.n	5f58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ac>
    5f4e:	2810      	cmp	r0, #16
    5f50:	bf1c      	itt	ne
    5f52:	bc70      	popne	{r4, r5, r6}
    5f54:	4770      	bxne	lr
    5f56:	e003      	b.n	5f60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    5f58:	1c40      	adds	r0, r0, #1
    5f5a:	b2c0      	uxtb	r0, r0
    5f5c:	4284      	cmp	r4, r0
    5f5e:	d8f1      	bhi.n	5f44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    5f60:	7808      	ldrb	r0, [r1, #0]
    5f62:	1e40      	subs	r0, r0, #1
    5f64:	b2c0      	uxtb	r0, r0
    5f66:	7008      	strb	r0, [r1, #0]
    5f68:	4290      	cmp	r0, r2
    5f6a:	bf04      	itt	eq
    5f6c:	bc70      	popeq	{r4, r5, r6}
    5f6e:	4770      	bxeq	lr
    5f70:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    5f74:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5f78:	f8d0 c153 	ldr.w	ip, [r0, #339]	; 0x153
    5f7c:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    5f80:	f8d0 0157 	ldr.w	r0, [r0, #343]	; 0x157
    5f84:	f8c3 0157 	str.w	r0, [r3, #343]	; 0x157
    5f88:	788c      	ldrb	r4, [r1, #2]
    5f8a:	780b      	ldrb	r3, [r1, #0]
    5f8c:	2000      	movs	r0, #0
    5f8e:	2c00      	cmp	r4, #0
    5f90:	bf9c      	itt	ls
    5f92:	bc70      	popls	{r4, r5, r6}
    5f94:	4770      	bxls	lr
    5f96:	bf00      	nop
    5f98:	eb01 0c00 	add.w	ip, r1, r0
    5f9c:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5fa0:	459c      	cmp	ip, r3
    5fa2:	d106      	bne.n	5fb2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x206>
    5fa4:	2810      	cmp	r0, #16
    5fa6:	bf1c      	itt	ne
    5fa8:	4408      	addne	r0, r1
    5faa:	f880 2103 	strbne.w	r2, [r0, #259]	; 0x103
    5fae:	bc70      	pop	{r4, r5, r6}
    5fb0:	4770      	bx	lr
    5fb2:	1c40      	adds	r0, r0, #1
    5fb4:	b2c0      	uxtb	r0, r0
    5fb6:	4284      	cmp	r4, r0
    5fb8:	d8ee      	bhi.n	5f98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ec>
    5fba:	bc70      	pop	{r4, r5, r6}
    5fbc:	4770      	bx	lr
    5fbe:	0000      	.short	0x0000
    5fc0:	20001a29 	.word	0x20001a29
    5fc4:	4925      	ldr	r1, [pc, #148]	; (605c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2b0>)
    5fc6:	b410      	push	{r4}
    5fc8:	784a      	ldrb	r2, [r1, #1]
    5fca:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    5fce:	1e52      	subs	r2, r2, #1
    5fd0:	704a      	strb	r2, [r1, #1]
    5fd2:	2200      	movs	r2, #0
    5fd4:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5fd8:	f891 c002 	ldrb.w	ip, [r1, #2]
    5fdc:	f1bc 0f00 	cmp.w	ip, #0
    5fe0:	d90d      	bls.n	5ffe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    5fe2:	188b      	adds	r3, r1, r2
    5fe4:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    5fe8:	4284      	cmp	r4, r0
    5fea:	d104      	bne.n	5ff6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24a>
    5fec:	2a10      	cmp	r2, #16
    5fee:	bf1c      	itt	ne
    5ff0:	bc10      	popne	{r4}
    5ff2:	4770      	bxne	lr
    5ff4:	e003      	b.n	5ffe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    5ff6:	1c52      	adds	r2, r2, #1
    5ff8:	b2d2      	uxtb	r2, r2
    5ffa:	4594      	cmp	ip, r2
    5ffc:	d8f1      	bhi.n	5fe2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x236>
    5ffe:	780a      	ldrb	r2, [r1, #0]
    6000:	1e52      	subs	r2, r2, #1
    6002:	b2d2      	uxtb	r2, r2
    6004:	700a      	strb	r2, [r1, #0]
    6006:	4282      	cmp	r2, r0
    6008:	bf04      	itt	eq
    600a:	bc10      	popeq	{r4}
    600c:	4770      	bxeq	lr
    600e:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    6012:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    6016:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    601a:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    601e:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    6022:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    6026:	788c      	ldrb	r4, [r1, #2]
    6028:	f891 c000 	ldrb.w	ip, [r1]
    602c:	2200      	movs	r2, #0
    602e:	2c00      	cmp	r4, #0
    6030:	bf9c      	itt	ls
    6032:	bc10      	popls	{r4}
    6034:	4770      	bxls	lr
    6036:	188b      	adds	r3, r1, r2
    6038:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    603c:	4563      	cmp	r3, ip
    603e:	d106      	bne.n	604e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2a2>
    6040:	2a10      	cmp	r2, #16
    6042:	bf1c      	itt	ne
    6044:	4411      	addne	r1, r2
    6046:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    604a:	bc10      	pop	{r4}
    604c:	4770      	bx	lr
    604e:	1c52      	adds	r2, r2, #1
    6050:	b2d2      	uxtb	r2, r2
    6052:	4294      	cmp	r4, r2
    6054:	d8ef      	bhi.n	6036 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x28a>
    6056:	bc10      	pop	{r4}
    6058:	4770      	bx	lr
    605a:	0000      	.short	0x0000
    605c:	20001a29 	.word	0x20001a29

00006060 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    6060:	b570      	push	{r4, r5, r6, lr}
    6062:	b08c      	sub	sp, #48	; 0x30
    6064:	f100 0410 	add.w	r4, r0, #16
    6068:	461d      	mov	r5, r3
    606a:	4616      	mov	r6, r2
    606c:	f10d 3cff 	add.w	ip, sp, #4294967295	; 0xffffffff
    6070:	f05f 0008 	movs.w	r0, #8
    6074:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    6078:	f88c 2001 	strb.w	r2, [ip, #1]
    607c:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    6080:	f80c 2f02 	strb.w	r2, [ip, #2]!
    6084:	1e40      	subs	r0, r0, #1
    6086:	d1f5      	bne.n	6074 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    6088:	f101 0c10 	add.w	ip, r1, #16
    608c:	466c      	mov	r4, sp
    608e:	f10d 010f 	add.w	r1, sp, #15
    6092:	2008      	movs	r0, #8
    6094:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    6098:	704a      	strb	r2, [r1, #1]
    609a:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    609e:	f801 2f02 	strb.w	r2, [r1, #2]!
    60a2:	1e40      	subs	r0, r0, #1
    60a4:	d1f6      	bne.n	6094 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    60a6:	4620      	mov	r0, r4
    60a8:	f009 fdf5 	bl	fc96 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    60ac:	b17e      	cbz	r6, 60ce <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    60ae:	1e6a      	subs	r2, r5, #1
    60b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    60b4:	f05f 0108 	movs.w	r1, #8
    60b8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    60bc:	7053      	strb	r3, [r2, #1]
    60be:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    60c2:	f802 3f02 	strb.w	r3, [r2, #2]!
    60c6:	1e49      	subs	r1, r1, #1
    60c8:	d1f6      	bne.n	60b8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    60ca:	b00c      	add	sp, #48	; 0x30
    60cc:	bd70      	pop	{r4, r5, r6, pc}
    60ce:	9808      	ldr	r0, [sp, #32]
    60d0:	6028      	str	r0, [r5, #0]
    60d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    60d4:	6068      	str	r0, [r5, #4]
    60d6:	980a      	ldr	r0, [sp, #40]	; 0x28
    60d8:	60a8      	str	r0, [r5, #8]
    60da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    60dc:	60e8      	str	r0, [r5, #12]
    60de:	b00c      	add	sp, #48	; 0x30
    60e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000060e4 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    60e4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    60e8:	7e44      	ldrb	r4, [r0, #25]
    60ea:	b10c      	cbz	r4, 60f0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    60ec:	2c25      	cmp	r4, #37	; 0x25
    60ee:	d903      	bls.n	60f8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x14>
    60f0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    60f4:	2012      	movs	r0, #18
    60f6:	4770      	bx	lr
    60f8:	2a00      	cmp	r2, #0
    60fa:	bf02      	ittt	eq
    60fc:	2000      	moveq	r0, #0
    60fe:	e8bd 03f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9}
    6102:	4770      	bxeq	lr
    6104:	f891 c011 	ldrb.w	ip, [r1, #17]
    6108:	261f      	movs	r6, #31
    610a:	2301      	movs	r3, #1
    610c:	4d6c      	ldr	r5, [pc, #432]	; (62c0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    610e:	f04f 0800 	mov.w	r8, #0
    6112:	f1bc 0f00 	cmp.w	ip, #0
    6116:	d073      	beq.n	6200 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    6118:	f1bc 0f01 	cmp.w	ip, #1
    611c:	bf1e      	ittt	ne
    611e:	201f      	movne	r0, #31
    6120:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    6124:	4770      	bxne	lr
    6126:	f8b0 c000 	ldrh.w	ip, [r0]
    612a:	7d0a      	ldrb	r2, [r1, #20]
    612c:	7c8f      	ldrb	r7, [r1, #18]
    612e:	f891 9013 	ldrb.w	r9, [r1, #19]
    6132:	407a      	eors	r2, r7
    6134:	7d4f      	ldrb	r7, [r1, #21]
    6136:	ea87 0709 	eor.w	r7, r7, r9
    613a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    613e:	ea82 0c0c 	eor.w	ip, r2, ip
    6142:	2700      	movs	r7, #0
    6144:	f00c 09ff 	and.w	r9, ip, #255	; 0xff
    6148:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    614c:	fa99 f9a9 	rbit	r9, r9
    6150:	fa9c fcac 	rbit	ip, ip
    6154:	ea4f 6919 	mov.w	r9, r9, lsr #24
    6158:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    615c:	ea49 2c0c 	orr.w	ip, r9, ip, lsl #8
    6160:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
    6164:	1c7f      	adds	r7, r7, #1
    6166:	4494      	add	ip, r2
    6168:	b2ff      	uxtb	r7, r7
    616a:	fa1f fc8c 	uxth.w	ip, ip
    616e:	2f03      	cmp	r7, #3
    6170:	d3e8      	bcc.n	6144 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x60>
    6172:	ea8c 0c02 	eor.w	ip, ip, r2
    6176:	4f52      	ldr	r7, [pc, #328]	; (62c0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    6178:	2200      	movs	r2, #0
    617a:	fbec 7205 	umlal	r7, r2, ip, r5
    617e:	0912      	lsrs	r2, r2, #4
    6180:	f06f 0524 	mvn.w	r5, #36	; 0x24
    6184:	fb02 c205 	mla	r2, r2, r5, ip
    6188:	b2d2      	uxtb	r2, r2
    618a:	eb01 07d2 	add.w	r7, r1, r2, lsr #3
    618e:	7682      	strb	r2, [r0, #26]
    6190:	f002 0507 	and.w	r5, r2, #7
    6194:	7b3f      	ldrb	r7, [r7, #12]
    6196:	fa03 f505 	lsl.w	r5, r3, r5
    619a:	422f      	tst	r7, r5
    619c:	bf18      	it	ne
    619e:	76c2      	strbne	r2, [r0, #27]
    61a0:	d17e      	bne.n	62a0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1bc>
    61a2:	fb04 f20c 	mul.w	r2, r4, ip
    61a6:	0c12      	lsrs	r2, r2, #16
    61a8:	1c52      	adds	r2, r2, #1
    61aa:	b2d2      	uxtb	r2, r2
    61ac:	f05f 0400 	movs.w	r4, #0
    61b0:	eb00 0c04 	add.w	ip, r0, r4
    61b4:	f89c c014 	ldrb.w	ip, [ip, #20]
    61b8:	4594      	cmp	ip, r2
    61ba:	bf3c      	itt	cc
    61bc:	eba2 020c 	subcc.w	r2, r2, ip
    61c0:	b2d2      	uxtbcc	r2, r2
    61c2:	d312      	bcc.n	61ea <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x106>
    61c4:	190d      	adds	r5, r1, r4
    61c6:	f04f 0c00 	mov.w	ip, #0
    61ca:	7b2d      	ldrb	r5, [r5, #12]
    61cc:	fa03 f70c 	lsl.w	r7, r3, ip
    61d0:	423d      	tst	r5, r7
    61d2:	bf1c      	itt	ne
    61d4:	1e52      	subne	r2, r2, #1
    61d6:	b2d2      	uxtbne	r2, r2
    61d8:	2a00      	cmp	r2, #0
    61da:	d069      	beq.n	62b0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1cc>
    61dc:	f10c 0c01 	add.w	ip, ip, #1
    61e0:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    61e4:	f1bc 0f08 	cmp.w	ip, #8
    61e8:	d3f0      	bcc.n	61cc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xe8>
    61ea:	f104 0c01 	add.w	ip, r4, #1
    61ee:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    61f2:	2c05      	cmp	r4, #5
    61f4:	d3dc      	bcc.n	61b0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xcc>
    61f6:	4630      	mov	r0, r6
    61f8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    61fc:	4770      	bx	lr
    61fe:	e7ff      	b.n	6200 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    6200:	f890 c01a 	ldrb.w	ip, [r0, #26]
    6204:	f891 4020 	ldrb.w	r4, [r1, #32]
    6208:	4647      	mov	r7, r8
    620a:	fb04 c202 	mla	r2, r4, r2, ip
    620e:	4c2c      	ldr	r4, [pc, #176]	; (62c0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    6210:	f04f 0c00 	mov.w	ip, #0
    6214:	fbe2 4c05 	umlal	r4, ip, r2, r5
    6218:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    621c:	f06f 0424 	mvn.w	r4, #36	; 0x24
    6220:	fb0c 2204 	mla	r2, ip, r4, r2
    6224:	b2d2      	uxtb	r2, r2
    6226:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    622a:	7682      	strb	r2, [r0, #26]
    622c:	f002 0c07 	and.w	ip, r2, #7
    6230:	7b24      	ldrb	r4, [r4, #12]
    6232:	fa03 fc0c 	lsl.w	ip, r3, ip
    6236:	ea14 0f0c 	tst.w	r4, ip
    623a:	bf1f      	itttt	ne
    623c:	76c2      	strbne	r2, [r0, #27]
    623e:	4640      	movne	r0, r8
    6240:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    6244:	4770      	bxne	lr
    6246:	f890 c019 	ldrb.w	ip, [r0, #25]
    624a:	fbb2 f4fc 	udiv	r4, r2, ip
    624e:	fb0c 2214 	mls	r2, ip, r4, r2
    6252:	1c52      	adds	r2, r2, #1
    6254:	b2d2      	uxtb	r2, r2
    6256:	2400      	movs	r4, #0
    6258:	eb00 0c04 	add.w	ip, r0, r4
    625c:	f89c c014 	ldrb.w	ip, [ip, #20]
    6260:	4594      	cmp	ip, r2
    6262:	bf3c      	itt	cc
    6264:	eba2 020c 	subcc.w	r2, r2, ip
    6268:	b2d2      	uxtbcc	r2, r2
    626a:	d312      	bcc.n	6292 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1ae>
    626c:	190d      	adds	r5, r1, r4
    626e:	f04f 0c00 	mov.w	ip, #0
    6272:	7b2d      	ldrb	r5, [r5, #12]
    6274:	fa03 f80c 	lsl.w	r8, r3, ip
    6278:	ea15 0f08 	tst.w	r5, r8
    627c:	bf1c      	itt	ne
    627e:	1e52      	subne	r2, r2, #1
    6280:	b2d2      	uxtbne	r2, r2
    6282:	b172      	cbz	r2, 62a2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1be>
    6284:	f10c 0c01 	add.w	ip, ip, #1
    6288:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    628c:	f1bc 0f08 	cmp.w	ip, #8
    6290:	d3f0      	bcc.n	6274 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x190>
    6292:	f104 0c01 	add.w	ip, r4, #1
    6296:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    629a:	2c05      	cmp	r4, #5
    629c:	d3dc      	bcc.n	6258 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x174>
    629e:	e7aa      	b.n	61f6 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x112>
    62a0:	e009      	b.n	62b6 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1d2>
    62a2:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    62a6:	76c1      	strb	r1, [r0, #27]
    62a8:	4638      	mov	r0, r7
    62aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    62ae:	4770      	bx	lr
    62b0:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    62b4:	76c1      	strb	r1, [r0, #27]
    62b6:	4640      	mov	r0, r8
    62b8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    62bc:	4770      	bx	lr
    62be:	0000      	.short	0x0000
    62c0:	6eb3e453 	.word	0x6eb3e453

000062c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    62c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62c8:	2701      	movs	r7, #1
    62ca:	4604      	mov	r4, r0
    62cc:	2500      	movs	r5, #0
    62ce:	b169      	cbz	r1, 62ec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
    62d0:	2901      	cmp	r1, #1
    62d2:	d05d      	beq.n	6390 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>
    62d4:	2902      	cmp	r1, #2
    62d6:	d07c      	beq.n	63d2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10e>
    62d8:	2903      	cmp	r1, #3
    62da:	bf18      	it	ne
    62dc:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    62e0:	4601      	mov	r1, r0
    62e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62e6:	3078      	adds	r0, #120	; 0x78
    62e8:	f009 bfff 	b.w	102ea <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    62ec:	f104 0678 	add.w	r6, r4, #120	; 0x78
    62f0:	2288      	movs	r2, #136	; 0x88
    62f2:	2100      	movs	r1, #0
    62f4:	4630      	mov	r0, r6
    62f6:	f008 fb97 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    62fa:	71b5      	strb	r5, [r6, #6]
    62fc:	71f5      	strb	r5, [r6, #7]
    62fe:	7335      	strb	r5, [r6, #12]
    6300:	7375      	strb	r5, [r6, #13]
    6302:	73f5      	strb	r5, [r6, #15]
    6304:	7435      	strb	r5, [r6, #16]
    6306:	7175      	strb	r5, [r6, #5]
    6308:	76b5      	strb	r5, [r6, #26]
    630a:	76f5      	strb	r5, [r6, #27]
    630c:	f006 fd86 	bl	ce1c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6310:	f644 112b 	movw	r1, #18731	; 0x492b
    6314:	4008      	ands	r0, r1
    6316:	f886 0046 	strb.w	r0, [r6, #70]	; 0x46
    631a:	0a00      	lsrs	r0, r0, #8
    631c:	f886 0047 	strb.w	r0, [r6, #71]	; 0x47
    6320:	20fe      	movs	r0, #254	; 0xfe
    6322:	f886 007c 	strb.w	r0, [r6, #124]	; 0x7c
    6326:	8826      	ldrh	r6, [r4, #0]
    6328:	2274      	movs	r2, #116	; 0x74
    632a:	2100      	movs	r1, #0
    632c:	4620      	mov	r0, r4
    632e:	f008 fb7b 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6332:	8026      	strh	r6, [r4, #0]
    6334:	2101      	movs	r1, #1
    6336:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    633a:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    633e:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    6342:	2100      	movs	r1, #0
    6344:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6348:	f00a fb39 	bl	109be <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    634c:	221b      	movs	r2, #27
    634e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    6352:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    6356:	66e5      	str	r5, [r4, #108]	; 0x6c
    6358:	6725      	str	r5, [r4, #112]	; 0x70
    635a:	7467      	strb	r7, [r4, #17]
    635c:	2280      	movs	r2, #128	; 0x80
    635e:	2100      	movs	r1, #0
    6360:	f504 7080 	add.w	r0, r4, #256	; 0x100
    6364:	f008 fb60 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6368:	4842      	ldr	r0, [pc, #264]	; (6474 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b0>)
    636a:	6060      	str	r0, [r4, #4]
    636c:	2212      	movs	r2, #18
    636e:	2100      	movs	r1, #0
    6370:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    6374:	f008 fb58 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6378:	f884 5181 	strb.w	r5, [r4, #385]	; 0x181
    637c:	f884 5188 	strb.w	r5, [r4, #392]	; 0x188
    6380:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
    6384:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    6388:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
    638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6390:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
    6394:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
    6398:	6861      	ldr	r1, [r4, #4]
    639a:	4837      	ldr	r0, [pc, #220]	; (6478 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b4>)
    639c:	460a      	mov	r2, r1
    639e:	4408      	add	r0, r1
    63a0:	fbb0 f0f1 	udiv	r0, r0, r1
    63a4:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    63a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    63ac:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    63b0:	8963      	ldrh	r3, [r4, #10]
    63b2:	f104 0078 	add.w	r0, r4, #120	; 0x78
    63b6:	f000 f8bb 	bl	6530 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    63ba:	4621      	mov	r1, r4
    63bc:	f104 0078 	add.w	r0, r4, #120	; 0x78
    63c0:	f009 ff93 	bl	102ea <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    63c4:	f008 fafc 	bl	e9c0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    63c8:	b3f0      	cbz	r0, 6448 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x184>
    63ca:	f8d4 1012 	ldr.w	r1, [r4, #18]
    63ce:	0c08      	lsrs	r0, r1, #16
    63d0:	e000      	b.n	63d4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x110>
    63d2:	e045      	b.n	6460 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19c>
    63d4:	f06f 021f 	mvn.w	r2, #31
    63d8:	ea02 2291 	and.w	r2, r2, r1, lsr #10
    63dc:	261f      	movs	r6, #31
    63de:	f5a0 41aa 	sub.w	r1, r0, #21760	; 0x5500
    63e2:	3954      	subs	r1, #84	; 0x54
    63e4:	bf1c      	itt	ne
    63e6:	f5a0 41aa 	subne.w	r1, r0, #21760	; 0x5500
    63ea:	f1b1 0155 	subsne.w	r1, r1, #85	; 0x55
    63ee:	d00a      	beq.n	6406 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x142>
    63f0:	f5a0 5128 	sub.w	r1, r0, #10752	; 0x2a00
    63f4:	39aa      	subs	r1, #170	; 0xaa
    63f6:	bf1e      	ittt	ne
    63f8:	f5a0 412a 	subne.w	r1, r0, #43520	; 0xaa00
    63fc:	f1b1 01aa 	subsne.w	r1, r1, #170	; 0xaa
    6400:	f04f 0901 	movne.w	r9, #1
    6404:	d101      	bne.n	640a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x146>
    6406:	f04f 0900 	mov.w	r9, #0
    640a:	f04f 0c00 	mov.w	ip, #0
    640e:	4663      	mov	r3, ip
    6410:	ea4f 010c 	mov.w	r1, ip
    6414:	ea8c 0800 	eor.w	r8, ip, r0
    6418:	ea6f 0808 	mvn.w	r8, r8
    641c:	ea48 0803 	orr.w	r8, r8, r3
    6420:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    6424:	d018      	beq.n	6458 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    6426:	f002 0801 	and.w	r8, r2, #1
    642a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    642e:	ea4c 3cc8 	orr.w	ip, ip, r8, lsl #15
    6432:	f006 0801 	and.w	r8, r6, #1
    6436:	085b      	lsrs	r3, r3, #1
    6438:	0852      	lsrs	r2, r2, #1
    643a:	0876      	lsrs	r6, r6, #1
    643c:	1c49      	adds	r1, r1, #1
    643e:	ea43 33c8 	orr.w	r3, r3, r8, lsl #15
    6442:	2916      	cmp	r1, #22
    6444:	d3e6      	bcc.n	6414 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x150>
    6446:	e000      	b.n	644a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x186>
    6448:	e002      	b.n	6450 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x18c>
    644a:	f1b9 0f00 	cmp.w	r9, #0
    644e:	d003      	beq.n	6458 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    6450:	f884 5180 	strb.w	r5, [r4, #384]	; 0x180
    6454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6458:	f884 7180 	strb.w	r7, [r4, #384]	; 0x180
    645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6460:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    6464:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6468:	6861      	ldr	r1, [r4, #4]
    646a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    646e:	3078      	adds	r0, #120	; 0x78
    6470:	f000 b85e 	b.w	6530 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    6474:	003d0900 	.word	0x003d0900
    6478:	01c9c37f 	.word	0x01c9c37f

0000647c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    647c:	2a00      	cmp	r2, #0
    647e:	bf08      	it	eq
    6480:	4770      	bxeq	lr
    6482:	4411      	add	r1, r2
    6484:	1e40      	subs	r0, r0, #1
    6486:	f012 0f01 	tst.w	r2, #1
    648a:	d003      	beq.n	6494 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x18>
    648c:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    6490:	f800 3f01 	strb.w	r3, [r0, #1]!
    6494:	0852      	lsrs	r2, r2, #1
    6496:	bf08      	it	eq
    6498:	4770      	bxeq	lr
    649a:	bf00      	nop
    649c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    64a0:	7043      	strb	r3, [r0, #1]
    64a2:	f811 3d02 	ldrb.w	r3, [r1, #-2]!
    64a6:	f800 3f02 	strb.w	r3, [r0, #2]!
    64aa:	1e52      	subs	r2, r2, #1
    64ac:	d1f6      	bne.n	649c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x20>
    64ae:	4770      	bx	lr

000064b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    64b0:	b510      	push	{r4, lr}
    64b2:	2820      	cmp	r0, #32
    64b4:	bf3e      	ittt	cc
    64b6:	4904      	ldrcc	r1, [pc, #16]	; (64c8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    64b8:	f831 0010 	ldrhcc.w	r0, [r1, r0, lsl #1]
    64bc:	bd10      	popcc	{r4, pc}
    64be:	f240 1187 	movw	r1, #391	; 0x187
    64c2:	2029      	movs	r0, #41	; 0x29
    64c4:	f7fd fb5e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64c8:	20001916 	.word	0x20001916

000064cc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    64cc:	b510      	push	{r4, lr}
    64ce:	2820      	cmp	r0, #32
    64d0:	bf3e      	ittt	cc
    64d2:	4a04      	ldrcc	r2, [pc, #16]	; (64e4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    64d4:	f822 1010 	strhcc.w	r1, [r2, r0, lsl #1]
    64d8:	bd10      	popcc	{r4, pc}
    64da:	f240 118d 	movw	r1, #397	; 0x18d
    64de:	2029      	movs	r0, #41	; 0x29
    64e0:	f7fd fb50 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64e4:	20001916 	.word	0x20001916

000064e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    64e8:	b430      	push	{r4, r5}
    64ea:	2200      	movs	r2, #0
    64ec:	f1a1 0c01 	sub.w	ip, r1, #1
    64f0:	f1bc 0f00 	cmp.w	ip, #0
    64f4:	dd12      	ble.n	651c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    64f6:	1e43      	subs	r3, r0, #1
    64f8:	f011 0f01 	tst.w	r1, #1
    64fc:	bf08      	it	eq
    64fe:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    6502:	785c      	ldrb	r4, [r3, #1]
    6504:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    6508:	d008      	beq.n	651c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    650a:	bf00      	nop
    650c:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    6510:	4322      	orrs	r2, r4
    6512:	785c      	ldrb	r4, [r3, #1]
    6514:	432a      	orrs	r2, r5
    6516:	f1bc 0c01 	subs.w	ip, ip, #1
    651a:	d1f7      	bne.n	650c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    651c:	1e49      	subs	r1, r1, #1
    651e:	bf5c      	itt	pl
    6520:	5c40      	ldrbpl	r0, [r0, r1]
    6522:	4302      	orrpl	r2, r0
    6524:	2a00      	cmp	r2, #0
    6526:	bf0c      	ite	eq
    6528:	2001      	moveq	r0, #1
    652a:	2000      	movne	r0, #0
    652c:	bc30      	pop	{r4, r5}
    652e:	4770      	bx	lr
    6530:	b410      	push	{r4}
    6532:	f04f 0c00 	mov.w	ip, #0
    6536:	f8a0 c02e 	strh.w	ip, [r0, #46]	; 0x2e
    653a:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
    653e:	4c16      	ldr	r4, [pc, #88]	; (6598 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb0>)
    6540:	fb0c fc01 	mul.w	ip, ip, r1
    6544:	fbbc fcf2 	udiv	ip, ip, r2
    6548:	f8a0 c032 	strh.w	ip, [r0, #50]	; 0x32
    654c:	f242 7c10 	movw	ip, #10000	; 0x2710
    6550:	fb03 f30c 	mul.w	r3, r3, ip
    6554:	fbb3 f3f2 	udiv	r3, r3, r2
    6558:	1c5b      	adds	r3, r3, #1
    655a:	b29b      	uxth	r3, r3
    655c:	fb03 fc02 	mul.w	ip, r3, r2
    6560:	8603      	strh	r3, [r0, #48]	; 0x30
    6562:	45a4      	cmp	ip, r4
    6564:	bf84      	itt	hi
    6566:	1e5b      	subhi	r3, r3, #1
    6568:	8603      	strhhi	r3, [r0, #48]	; 0x30
    656a:	4b0c      	ldr	r3, [pc, #48]	; (659c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb4>)
    656c:	f240 2c71 	movw	ip, #625	; 0x271
    6570:	fbb3 f3f2 	udiv	r3, r3, r2
    6574:	1c5b      	adds	r3, r3, #1
    6576:	86c3      	strh	r3, [r0, #54]	; 0x36
    6578:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    657a:	fb03 f30c 	mul.w	r3, r3, ip
    657e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6582:	1e5b      	subs	r3, r3, #1
    6584:	fbb3 f3f2 	udiv	r3, r3, r2
    6588:	6243      	str	r3, [r0, #36]	; 0x24
    658a:	6a03      	ldr	r3, [r0, #32]
    658c:	4359      	muls	r1, r3
    658e:	fbb1 f1f2 	udiv	r1, r1, r2
    6592:	6201      	str	r1, [r0, #32]
    6594:	bc10      	pop	{r4}
    6596:	4770      	bx	lr
    6598:	01e84800 	.word	0x01e84800
    659c:	02625a00 	.word	0x02625a00
    65a0:	78c3      	ldrb	r3, [r0, #3]
    65a2:	4602      	mov	r2, r0
    65a4:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    65a8:	bf08      	it	eq
    65aa:	4770      	bxeq	lr
    65ac:	2005      	movs	r0, #5
    65ae:	7912      	ldrb	r2, [r2, #4]
    65b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    65b4:	f012 0f01 	tst.w	r2, #1
    65b8:	d037      	beq.n	662a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x142>
    65ba:	2900      	cmp	r1, #0
    65bc:	bf14      	ite	ne
    65be:	200b      	movne	r0, #11
    65c0:	4770      	bxeq	lr
    65c2:	bf00      	nop
    65c4:	f012 0f02 	tst.w	r2, #2
    65c8:	d032      	beq.n	6630 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x148>
    65ca:	2901      	cmp	r1, #1
    65cc:	bf14      	ite	ne
    65ce:	1d80      	addne	r0, r0, #6
    65d0:	4770      	bxeq	lr
    65d2:	bf00      	nop
    65d4:	f012 0f04 	tst.w	r2, #4
    65d8:	d02d      	beq.n	6636 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x14e>
    65da:	2902      	cmp	r1, #2
    65dc:	bf14      	ite	ne
    65de:	1c40      	addne	r0, r0, #1
    65e0:	4770      	bxeq	lr
    65e2:	bf00      	nop
    65e4:	f012 0f08 	tst.w	r2, #8
    65e8:	d028      	beq.n	663c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x154>
    65ea:	2903      	cmp	r1, #3
    65ec:	bf14      	ite	ne
    65ee:	1c80      	addne	r0, r0, #2
    65f0:	4770      	bxeq	lr
    65f2:	bf00      	nop
    65f4:	f012 0f10 	tst.w	r2, #16
    65f8:	d023      	beq.n	6642 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x15a>
    65fa:	2904      	cmp	r1, #4
    65fc:	bf14      	ite	ne
    65fe:	1cc0      	addne	r0, r0, #3
    6600:	4770      	bxeq	lr
    6602:	bf00      	nop
    6604:	f012 0f20 	tst.w	r2, #32
    6608:	d01e      	beq.n	6648 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x160>
    660a:	2905      	cmp	r1, #5
    660c:	bf1a      	itte	ne
    660e:	3012      	addne	r0, #18
    6610:	b2c0      	uxtbne	r0, r0
    6612:	4770      	bxeq	lr
    6614:	f012 0f40 	tst.w	r2, #64	; 0x40
    6618:	d019      	beq.n	664e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x166>
    661a:	2906      	cmp	r1, #6
    661c:	bf1a      	itte	ne
    661e:	1c40      	addne	r0, r0, #1
    6620:	b2c0      	uxtbne	r0, r0
    6622:	4770      	bxeq	lr
    6624:	2907      	cmp	r1, #7
    6626:	d118      	bne.n	665a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6628:	e014      	b.n	6654 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x16c>
    662a:	2900      	cmp	r1, #0
    662c:	d1ca      	bne.n	65c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xdc>
    662e:	e014      	b.n	665a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6630:	2901      	cmp	r1, #1
    6632:	d1cf      	bne.n	65d4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xec>
    6634:	e011      	b.n	665a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6636:	2902      	cmp	r1, #2
    6638:	d1d4      	bne.n	65e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xfc>
    663a:	e00e      	b.n	665a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    663c:	2903      	cmp	r1, #3
    663e:	d1d9      	bne.n	65f4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10c>
    6640:	e00b      	b.n	665a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6642:	2904      	cmp	r1, #4
    6644:	d1de      	bne.n	6604 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x11c>
    6646:	e008      	b.n	665a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6648:	2905      	cmp	r1, #5
    664a:	d1e3      	bne.n	6614 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x12c>
    664c:	e005      	b.n	665a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    664e:	2906      	cmp	r1, #6
    6650:	d1e8      	bne.n	6624 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x13c>
    6652:	e002      	b.n	665a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6654:	4283      	cmp	r3, r0
    6656:	bf88      	it	hi
    6658:	4770      	bxhi	lr
    665a:	2000      	movs	r0, #0
    665c:	4770      	bx	lr
	...

00006660 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6660:	7841      	ldrb	r1, [r0, #1]
    6662:	b141      	cbz	r1, 6676 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6664:	78c0      	ldrb	r0, [r0, #3]
    6666:	2819      	cmp	r0, #25
    6668:	d203      	bcs.n	6672 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    666a:	4a04      	ldr	r2, [pc, #16]	; (667c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    666c:	5c10      	ldrb	r0, [r2, r0]
    666e:	4288      	cmp	r0, r1
    6670:	d101      	bne.n	6676 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6672:	2001      	movs	r0, #1
    6674:	4770      	bx	lr
    6676:	2000      	movs	r0, #0
    6678:	4770      	bx	lr
    667a:	0000      	.short	0x0000
    667c:	00011f50 	.word	0x00011f50

00006680 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    6680:	a20c      	add	r2, pc, #48	; (adr r2, 66b4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x34>)
    6682:	b082      	sub	sp, #8
    6684:	e9d2 1200 	ldrd	r1, r2, [r2]
    6688:	e9cd 1200 	strd	r1, r2, [sp]
    668c:	7901      	ldrb	r1, [r0, #4]
    668e:	7940      	ldrb	r0, [r0, #5]
    6690:	f001 0207 	and.w	r2, r1, #7
    6694:	4669      	mov	r1, sp
    6696:	f81d 2002 	ldrb.w	r2, [sp, r2]
    669a:	2a01      	cmp	r2, #1
    669c:	d807      	bhi.n	66ae <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2e>
    669e:	f000 0007 	and.w	r0, r0, #7
    66a2:	5c08      	ldrb	r0, [r1, r0]
    66a4:	2801      	cmp	r0, #1
    66a6:	bf9e      	ittt	ls
    66a8:	2001      	movls	r0, #1
    66aa:	b002      	addls	sp, #8
    66ac:	4770      	bxls	lr
    66ae:	2000      	movs	r0, #0
    66b0:	b002      	add	sp, #8
    66b2:	4770      	bx	lr
    66b4:	02010100 	.word	0x02010100
    66b8:	03020201 	.word	0x03020201

000066bc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    66bc:	b510      	push	{r4, lr}
    66be:	2201      	movs	r2, #1
    66c0:	70c1      	strb	r1, [r0, #3]
    66c2:	2919      	cmp	r1, #25
    66c4:	bf3c      	itt	cc
    66c6:	4a06      	ldrcc	r2, [pc, #24]	; (66e0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    66c8:	5c52      	ldrbcc	r2, [r2, r1]
    66ca:	d306      	bcc.n	66da <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    66cc:	29ff      	cmp	r1, #255	; 0xff
    66ce:	d004      	beq.n	66da <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    66d0:	f240 31b3 	movw	r1, #947	; 0x3b3
    66d4:	202a      	movs	r0, #42	; 0x2a
    66d6:	f7fd fa55 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66da:	7042      	strb	r2, [r0, #1]
    66dc:	bd10      	pop	{r4, pc}
    66de:	0000      	.short	0x0000
    66e0:	00011f50 	.word	0x00011f50

000066e4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    66e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66e8:	b084      	sub	sp, #16
    66ea:	9804      	ldr	r0, [sp, #16]
    66ec:	b160      	cbz	r0, 6708 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x24>
    66ee:	f8df 8124 	ldr.w	r8, [pc, #292]	; 6814 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x130>
    66f2:	2102      	movs	r1, #2
    66f4:	f508 7014 	add.w	r0, r8, #592	; 0x250
    66f8:	f00a f805 	bl	10706 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    66fc:	b148      	cbz	r0, 6712 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2e>
    66fe:	f240 31c3 	movw	r1, #963	; 0x3c3
    6702:	202b      	movs	r0, #43	; 0x2b
    6704:	f7fd fa3e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6708:	f240 31c2 	movw	r1, #962	; 0x3c2
    670c:	202b      	movs	r0, #43	; 0x2b
    670e:	f7fd fa39 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6712:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6716:	9000      	str	r0, [sp, #0]
    6718:	2000      	movs	r0, #0
    671a:	f7fd fbe7 	bl	3eec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    671e:	4604      	mov	r4, r0
    6720:	2001      	movs	r0, #1
    6722:	f7fd fbe3 	bl	3eec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6726:	4420      	add	r0, r4
    6728:	f000 0bff 	and.w	fp, r0, #255	; 0xff
    672c:	f10b 0001 	add.w	r0, fp, #1
    6730:	f000 0aff 	and.w	sl, r0, #255	; 0xff
    6734:	f04f 0900 	mov.w	r9, #0
    6738:	4837      	ldr	r0, [pc, #220]	; (6818 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x134>)
    673a:	6801      	ldr	r1, [r0, #0]
    673c:	b119      	cbz	r1, 6746 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x62>
    673e:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6742:	4550      	cmp	r0, sl
    6744:	d006      	beq.n	6754 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x70>
    6746:	4835      	ldr	r0, [pc, #212]	; (681c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x138>)
    6748:	6801      	ldr	r1, [r0, #0]
    674a:	b131      	cbz	r1, 675a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    674c:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6750:	4558      	cmp	r0, fp
    6752:	d102      	bne.n	675a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6754:	9804      	ldr	r0, [sp, #16]
    6756:	4788      	blx	r1
    6758:	e006      	b.n	6768 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x84>
    675a:	4831      	ldr	r0, [pc, #196]	; (6820 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x13c>)
    675c:	6802      	ldr	r2, [r0, #0]
    675e:	b12a      	cbz	r2, 676c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    6760:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6764:	9904      	ldr	r1, [sp, #16]
    6766:	4790      	blx	r2
    6768:	2800      	cmp	r0, #0
    676a:	d13b      	bne.n	67e4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    676c:	f508 7414 	add.w	r4, r8, #592	; 0x250
    6770:	2502      	movs	r5, #2
    6772:	2000      	movs	r0, #0
    6774:	f7fd fbba 	bl	3eec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6778:	4606      	mov	r6, r0
    677a:	2001      	movs	r0, #1
    677c:	f7fd fbb6 	bl	3eec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6780:	4430      	add	r0, r6
    6782:	b2c7      	uxtb	r7, r0
    6784:	2600      	movs	r6, #0
    6786:	f117 0f02 	cmn.w	r7, #2
    678a:	bf18      	it	ne
    678c:	443d      	addne	r5, r7
    678e:	d014      	beq.n	67ba <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xd6>
    6790:	8820      	ldrh	r0, [r4, #0]
    6792:	1c40      	adds	r0, r0, #1
    6794:	b280      	uxth	r0, r0
    6796:	8020      	strh	r0, [r4, #0]
    6798:	42a8      	cmp	r0, r5
    679a:	bf28      	it	cs
    679c:	f8a4 9000 	strhcs.w	r9, [r4]
    67a0:	8820      	ldrh	r0, [r4, #0]
    67a2:	42b8      	cmp	r0, r7
    67a4:	d301      	bcc.n	67aa <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xc6>
    67a6:	42a8      	cmp	r0, r5
    67a8:	d30b      	bcc.n	67c2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    67aa:	a902      	add	r1, sp, #8
    67ac:	f009 fb2d 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    67b0:	b138      	cbz	r0, 67c2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    67b2:	1c70      	adds	r0, r6, #1
    67b4:	b2c6      	uxtb	r6, r0
    67b6:	42b5      	cmp	r5, r6
    67b8:	d8ea      	bhi.n	6790 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xac>
    67ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
    67be:	8020      	strh	r0, [r4, #0]
    67c0:	e004      	b.n	67cc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xe8>
    67c2:	f8b8 1250 	ldrh.w	r1, [r8, #592]	; 0x250
    67c6:	9800      	ldr	r0, [sp, #0]
    67c8:	4281      	cmp	r1, r0
    67ca:	d1b5      	bne.n	6738 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x54>
    67cc:	4815      	ldr	r0, [pc, #84]	; (6824 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x140>)
    67ce:	6801      	ldr	r1, [r0, #0]
    67d0:	b111      	cbz	r1, 67d8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xf4>
    67d2:	9804      	ldr	r0, [sp, #16]
    67d4:	4788      	blx	r1
    67d6:	b928      	cbnz	r0, 67e4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    67d8:	4813      	ldr	r0, [pc, #76]	; (6828 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x144>)
    67da:	6801      	ldr	r1, [r0, #0]
    67dc:	b131      	cbz	r1, 67ec <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    67de:	9804      	ldr	r0, [sp, #16]
    67e0:	4788      	blx	r1
    67e2:	b118      	cbz	r0, 67ec <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    67e4:	b005      	add	sp, #20
    67e6:	2001      	movs	r0, #1
    67e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67ec:	f898 023f 	ldrb.w	r0, [r8, #575]	; 0x23f
    67f0:	2800      	cmp	r0, #0
    67f2:	bf04      	itt	eq
    67f4:	b005      	addeq	sp, #20
    67f6:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67fa:	9804      	ldr	r0, [sp, #16]
    67fc:	2121      	movs	r1, #33	; 0x21
    67fe:	f880 9001 	strb.w	r9, [r0, #1]
    6802:	9804      	ldr	r0, [sp, #16]
    6804:	7001      	strb	r1, [r0, #0]
    6806:	f888 923f 	strb.w	r9, [r8, #575]	; 0x23f
    680a:	b005      	add	sp, #20
    680c:	2001      	movs	r0, #1
    680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6812:	0000      	.short	0x0000
    6814:	200011a4 	.word	0x200011a4
    6818:	20000354 	.word	0x20000354
    681c:	20000364 	.word	0x20000364
    6820:	2000035c 	.word	0x2000035c
    6824:	2000036c 	.word	0x2000036c
    6828:	20000358 	.word	0x20000358

0000682c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    682c:	b510      	push	{r4, lr}
    682e:	4604      	mov	r4, r0
    6830:	4815      	ldr	r0, [pc, #84]	; (6888 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x5c>)
    6832:	6801      	ldr	r1, [r0, #0]
    6834:	b329      	cbz	r1, 6882 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6836:	4620      	mov	r0, r4
    6838:	4788      	blx	r1
    683a:	b310      	cbz	r0, 6882 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    683c:	7820      	ldrb	r0, [r4, #0]
    683e:	2814      	cmp	r0, #20
    6840:	d002      	beq.n	6848 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x1c>
    6842:	2817      	cmp	r0, #23
    6844:	d003      	beq.n	684e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x22>
    6846:	e01a      	b.n	687e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6848:	7920      	ldrb	r0, [r4, #4]
    684a:	b928      	cbnz	r0, 6858 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x2c>
    684c:	e017      	b.n	687e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    684e:	7920      	ldrb	r0, [r4, #4]
    6850:	b1a8      	cbz	r0, 687e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6852:	f000 fe07 	bl	7464 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6856:	b990      	cbnz	r0, 687e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6858:	88e4      	ldrh	r4, [r4, #6]
    685a:	2101      	movs	r1, #1
    685c:	4620      	mov	r0, r4
    685e:	f009 f9c8 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6862:	b160      	cbz	r0, 687e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6864:	8800      	ldrh	r0, [r0, #0]
    6866:	f7fe f813 	bl	4890 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    686a:	2101      	movs	r1, #1
    686c:	4620      	mov	r0, r4
    686e:	f7fd fbb5 	bl	3fdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6872:	b120      	cbz	r0, 687e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6874:	f240 1115 	movw	r1, #277	; 0x115
    6878:	202b      	movs	r0, #43	; 0x2b
    687a:	f7fd f983 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    687e:	2001      	movs	r0, #1
    6880:	bd10      	pop	{r4, pc}
    6882:	2000      	movs	r0, #0
    6884:	bd10      	pop	{r4, pc}
    6886:	0000      	.short	0x0000
    6888:	20000350 	.word	0x20000350

0000688c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6890:	b083      	sub	sp, #12
    6892:	460d      	mov	r5, r1
    6894:	4606      	mov	r6, r0
    6896:	4669      	mov	r1, sp
    6898:	f009 fab7 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    689c:	2800      	cmp	r0, #0
    689e:	d17d      	bne.n	699c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    68a0:	f8df 9188 	ldr.w	r9, [pc, #392]	; 6a2c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1a0>
    68a4:	f8df a188 	ldr.w	sl, [pc, #392]	; 6a30 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1a4>
    68a8:	f05f 0700 	movs.w	r7, #0
    68ac:	f89d 0000 	ldrb.w	r0, [sp]
    68b0:	b180      	cbz	r0, 68d4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    68b2:	f000 fba9 	bl	7008 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    68b6:	42b0      	cmp	r0, r6
    68b8:	d070      	beq.n	699c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    68ba:	f8da 2000 	ldr.w	r2, [sl]
    68be:	b31a      	cbz	r2, 6908 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    68c0:	4629      	mov	r1, r5
    68c2:	4630      	mov	r0, r6
    68c4:	4790      	blx	r2
    68c6:	b1f8      	cbz	r0, 6908 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    68c8:	4628      	mov	r0, r5
    68ca:	f000 f9e9 	bl	6ca0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    68ce:	2800      	cmp	r0, #0
    68d0:	d1ec      	bne.n	68ac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    68d2:	e0a2      	b.n	6a1a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    68d4:	f005 f9d2 	bl	bc7c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    68d8:	42b0      	cmp	r0, r6
    68da:	d05f      	beq.n	699c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    68dc:	f8d9 2000 	ldr.w	r2, [r9]
    68e0:	b14a      	cbz	r2, 68f6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    68e2:	4629      	mov	r1, r5
    68e4:	4630      	mov	r0, r6
    68e6:	4790      	blx	r2
    68e8:	b128      	cbz	r0, 68f6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    68ea:	4628      	mov	r0, r5
    68ec:	f000 f9d8 	bl	6ca0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    68f0:	2800      	cmp	r0, #0
    68f2:	d1db      	bne.n	68ac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    68f4:	e091      	b.n	6a1a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    68f6:	9801      	ldr	r0, [sp, #4]
    68f8:	f100 0478 	add.w	r4, r0, #120	; 0x78
    68fc:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    6900:	b968      	cbnz	r0, 691e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6902:	7f20      	ldrb	r0, [r4, #28]
    6904:	b940      	cbnz	r0, 6918 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x8c>
    6906:	e00a      	b.n	691e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6908:	9801      	ldr	r0, [sp, #4]
    690a:	f100 0478 	add.w	r4, r0, #120	; 0x78
    690e:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
    6912:	b920      	cbnz	r0, 691e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6914:	7f20      	ldrb	r0, [r4, #28]
    6916:	b110      	cbz	r0, 691e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6918:	f04f 0b01 	mov.w	fp, #1
    691c:	e001      	b.n	6922 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x96>
    691e:	f04f 0b00 	mov.w	fp, #0
    6922:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
    6926:	2800      	cmp	r0, #0
    6928:	bf1c      	itt	ne
    692a:	f894 0040 	ldrbne.w	r0, [r4, #64]	; 0x40
    692e:	f010 0f02 	tstne.w	r0, #2
    6932:	d017      	beq.n	6964 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    6934:	706f      	strb	r7, [r5, #1]
    6936:	f04f 0001 	mov.w	r0, #1
    693a:	7028      	strb	r0, [r5, #0]
    693c:	712f      	strb	r7, [r5, #4]
    693e:	f8a5 6005 	strh.w	r6, [r5, #5]
    6942:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    6946:	71e8      	strb	r0, [r5, #7]
    6948:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    694c:	8128      	strh	r0, [r5, #8]
    694e:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    6952:	8168      	strh	r0, [r5, #10]
    6954:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
    6958:	4628      	mov	r0, r5
    695a:	f000 f9a1 	bl	6ca0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    695e:	2800      	cmp	r0, #0
    6960:	d1a4      	bne.n	68ac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6962:	e05a      	b.n	6a1a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6964:	4630      	mov	r0, r6
    6966:	f7fd fcdb 	bl	4320 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    696a:	ea5f 0800 	movs.w	r8, r0
    696e:	d01b      	beq.n	69a8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x11c>
    6970:	f008 fed8 	bl	f724 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6974:	b1e8      	cbz	r0, 69b2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    6976:	706f      	strb	r7, [r5, #1]
    6978:	210f      	movs	r1, #15
    697a:	7029      	strb	r1, [r5, #0]
    697c:	80ee      	strh	r6, [r5, #6]
    697e:	8128      	strh	r0, [r5, #8]
    6980:	2101      	movs	r1, #1
    6982:	1e40      	subs	r0, r0, #1
    6984:	7129      	strb	r1, [r5, #4]
    6986:	b284      	uxth	r4, r0
    6988:	2200      	movs	r2, #0
    698a:	4611      	mov	r1, r2
    698c:	4640      	mov	r0, r8
    698e:	f009 f837 	bl	fa00 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6992:	1e61      	subs	r1, r4, #1
    6994:	b28c      	uxth	r4, r1
    6996:	d2f7      	bcs.n	6988 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xfc>
    6998:	4628      	mov	r0, r5
    699a:	e000      	b.n	699e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    699c:	e041      	b.n	6a22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    699e:	f000 f97f 	bl	6ca0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    69a2:	2800      	cmp	r0, #0
    69a4:	d182      	bne.n	68ac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    69a6:	e038      	b.n	6a1a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    69a8:	f44f 710f 	mov.w	r1, #572	; 0x23c
    69ac:	202b      	movs	r0, #43	; 0x2b
    69ae:	f7fd f8e9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69b2:	4630      	mov	r0, r6
    69b4:	f7fd fc9e 	bl	42f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    69b8:	b148      	cbz	r0, 69ce <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x142>
    69ba:	f1bb 0f00 	cmp.w	fp, #0
    69be:	d030      	beq.n	6a22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    69c0:	f008 fd92 	bl	f4e8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    69c4:	b368      	cbz	r0, 6a22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    69c6:	f89d 0000 	ldrb.w	r0, [sp]
    69ca:	b128      	cbz	r0, 69d8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x14c>
    69cc:	e00b      	b.n	69e6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x15a>
    69ce:	f240 215a 	movw	r1, #602	; 0x25a
    69d2:	202b      	movs	r0, #43	; 0x2b
    69d4:	f7fd f8d6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69d8:	9801      	ldr	r0, [sp, #4]
    69da:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    69de:	8841      	ldrh	r1, [r0, #2]
    69e0:	42b1      	cmp	r1, r6
    69e2:	bf08      	it	eq
    69e4:	7007      	strbeq	r7, [r0, #0]
    69e6:	4630      	mov	r0, r6
    69e8:	f7fd ff52 	bl	4890 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    69ec:	2100      	movs	r1, #0
    69ee:	4630      	mov	r0, r6
    69f0:	f7fd faf4 	bl	3fdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    69f4:	2101      	movs	r1, #1
    69f6:	4630      	mov	r0, r6
    69f8:	f7fd faf0 	bl	3fdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    69fc:	706f      	strb	r7, [r5, #1]
    69fe:	200c      	movs	r0, #12
    6a00:	7028      	strb	r0, [r5, #0]
    6a02:	712f      	strb	r7, [r5, #4]
    6a04:	f8a5 6005 	strh.w	r6, [r5, #5]
    6a08:	7f60      	ldrb	r0, [r4, #29]
    6a0a:	71e8      	strb	r0, [r5, #7]
    6a0c:	7727      	strb	r7, [r4, #28]
    6a0e:	4628      	mov	r0, r5
    6a10:	f000 f946 	bl	6ca0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6a14:	2800      	cmp	r0, #0
    6a16:	f47f af49 	bne.w	68ac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6a1a:	b003      	add	sp, #12
    6a1c:	2001      	movs	r0, #1
    6a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a22:	b003      	add	sp, #12
    6a24:	2000      	movs	r0, #0
    6a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a2a:	0000      	.short	0x0000
    6a2c:	20000360 	.word	0x20000360
    6a30:	20000368 	.word	0x20000368

00006a34 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a38:	f8df 815c 	ldr.w	r8, [pc, #348]	; 6b98 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x164>
    6a3c:	4681      	mov	r9, r0
    6a3e:	b085      	sub	sp, #20
    6a40:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    6a44:	468a      	mov	sl, r1
    6a46:	b130      	cbz	r0, 6a56 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6a48:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    6a4c:	2800      	cmp	r0, #0
    6a4e:	bf04      	itt	eq
    6a50:	b005      	addeq	sp, #20
    6a52:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a56:	2100      	movs	r1, #0
    6a58:	f208 204e 	addw	r0, r8, #590	; 0x24e
    6a5c:	f009 fe53 	bl	10706 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6a60:	2800      	cmp	r0, #0
    6a62:	d17a      	bne.n	6b5a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x126>
    6a64:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6a68:	f04f 0b00 	mov.w	fp, #0
    6a6c:	f8cd 0000 	str.w	r0, [sp]
    6a70:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6a74:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    6a78:	39ff      	subs	r1, #255	; 0xff
    6a7a:	d057      	beq.n	6b2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6a7c:	f8a9 0000 	strh.w	r0, [r9]
    6a80:	f889 b005 	strb.w	fp, [r9, #5]
    6a84:	f7fd fc36 	bl	42f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6a88:	4605      	mov	r5, r0
    6a8a:	f008 fe79 	bl	f780 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    6a8e:	0004      	movs	r4, r0
    6a90:	d04c      	beq.n	6b2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6a92:	4601      	mov	r1, r0
    6a94:	aa01      	add	r2, sp, #4
    6a96:	4628      	mov	r0, r5
    6a98:	f008 fe97 	bl	f7ca <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6a9c:	f8a9 0002 	strh.w	r0, [r9, #2]
    6aa0:	b128      	cbz	r0, 6aae <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x7a>
    6aa2:	28fb      	cmp	r0, #251	; 0xfb
    6aa4:	d907      	bls.n	6ab6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x82>
    6aa6:	21c1      	movs	r1, #193	; 0xc1
    6aa8:	202b      	movs	r0, #43	; 0x2b
    6aaa:	f7fd f86b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6aae:	21c0      	movs	r1, #192	; 0xc0
    6ab0:	202b      	movs	r0, #43	; 0x2b
    6ab2:	f7fd f867 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ab6:	9801      	ldr	r0, [sp, #4]
    6ab8:	f009 fcac 	bl	10414 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    6abc:	2101      	movs	r1, #1
    6abe:	2801      	cmp	r0, #1
    6ac0:	bf08      	it	eq
    6ac2:	f889 1004 	strbeq.w	r1, [r9, #4]
    6ac6:	d008      	beq.n	6ada <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6ac8:	2802      	cmp	r0, #2
    6aca:	bf08      	it	eq
    6acc:	f889 0004 	strbeq.w	r0, [r9, #4]
    6ad0:	d003      	beq.n	6ada <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6ad2:	21d0      	movs	r1, #208	; 0xd0
    6ad4:	202b      	movs	r0, #43	; 0x2b
    6ad6:	f7fd f855 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ada:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    6ade:	2003      	movs	r0, #3
    6ae0:	9000      	str	r0, [sp, #0]
    6ae2:	4652      	mov	r2, sl
    6ae4:	4621      	mov	r1, r4
    6ae6:	4628      	mov	r0, r5
    6ae8:	f008 fc94 	bl	f414 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    6aec:	4628      	mov	r0, r5
    6aee:	f8c9 a008 	str.w	sl, [r9, #8]
    6af2:	f008 fdc1 	bl	f678 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    6af6:	b188      	cbz	r0, 6b1c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe8>
    6af8:	2200      	movs	r2, #0
    6afa:	4611      	mov	r1, r2
    6afc:	4628      	mov	r0, r5
    6afe:	f008 ff7f 	bl	fa00 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6b02:	b178      	cbz	r0, 6b24 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6b04:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    6b08:	b120      	cbz	r0, 6b14 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    6b0a:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    6b0e:	1e40      	subs	r0, r0, #1
    6b10:	f8a8 025a 	strh.w	r0, [r8, #602]	; 0x25a
    6b14:	b005      	add	sp, #20
    6b16:	2001      	movs	r0, #1
    6b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b1c:	21e0      	movs	r1, #224	; 0xe0
    6b1e:	202b      	movs	r0, #43	; 0x2b
    6b20:	f7fd f830 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b24:	21e5      	movs	r1, #229	; 0xe5
    6b26:	202b      	movs	r0, #43	; 0x2b
    6b28:	f7fd f82c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b2c:	2600      	movs	r6, #0
    6b2e:	f208 244e 	addw	r4, r8, #590	; 0x24e
    6b32:	4630      	mov	r0, r6
    6b34:	f7fd f9da 	bl	3eec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6b38:	4605      	mov	r5, r0
    6b3a:	2001      	movs	r0, #1
    6b3c:	f7fd f9d6 	bl	3eec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6b40:	4428      	add	r0, r5
    6b42:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    6b46:	4637      	mov	r7, r6
    6b48:	bf18      	it	ne
    6b4a:	442e      	addne	r6, r5
    6b4c:	d016      	beq.n	6b7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x148>
    6b4e:	8820      	ldrh	r0, [r4, #0]
    6b50:	1c40      	adds	r0, r0, #1
    6b52:	b280      	uxth	r0, r0
    6b54:	8020      	strh	r0, [r4, #0]
    6b56:	42b0      	cmp	r0, r6
    6b58:	e000      	b.n	6b5c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x128>
    6b5a:	e019      	b.n	6b90 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    6b5c:	bf28      	it	cs
    6b5e:	f8a4 b000 	strhcs.w	fp, [r4]
    6b62:	8820      	ldrh	r0, [r4, #0]
    6b64:	42a8      	cmp	r0, r5
    6b66:	d301      	bcc.n	6b6c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x138>
    6b68:	42b0      	cmp	r0, r6
    6b6a:	d30b      	bcc.n	6b84 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    6b6c:	a902      	add	r1, sp, #8
    6b6e:	f009 f94c 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6b72:	b138      	cbz	r0, 6b84 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    6b74:	1c78      	adds	r0, r7, #1
    6b76:	b2c7      	uxtb	r7, r0
    6b78:	42be      	cmp	r6, r7
    6b7a:	d8e8      	bhi.n	6b4e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x11a>
    6b7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6b80:	8020      	strh	r0, [r4, #0]
    6b82:	e005      	b.n	6b90 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    6b84:	f8b8 124e 	ldrh.w	r1, [r8, #590]	; 0x24e
    6b88:	9800      	ldr	r0, [sp, #0]
    6b8a:	4281      	cmp	r1, r0
    6b8c:	f47f af70 	bne.w	6a70 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3c>
    6b90:	b005      	add	sp, #20
    6b92:	2000      	movs	r0, #0
    6b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b98:	200011a4 	.word	0x200011a4

00006b9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    6b9c:	b510      	push	{r4, lr}
    6b9e:	7901      	ldrb	r1, [r0, #4]
    6ba0:	b161      	cbz	r1, 6bbc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6ba2:	2901      	cmp	r1, #1
    6ba4:	bf1c      	itt	ne
    6ba6:	2000      	movne	r0, #0
    6ba8:	bd10      	popne	{r4, pc}
    6baa:	8842      	ldrh	r2, [r0, #2]
    6bac:	6883      	ldr	r3, [r0, #8]
    6bae:	8800      	ldrh	r0, [r0, #0]
    6bb0:	f05f 0101 	movs.w	r1, #1
    6bb4:	f000 f80e 	bl	6bd4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x38>
    6bb8:	b940      	cbnz	r0, 6bcc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>
    6bba:	e004      	b.n	6bc6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    6bbc:	8842      	ldrh	r2, [r0, #2]
    6bbe:	6883      	ldr	r3, [r0, #8]
    6bc0:	8800      	ldrh	r0, [r0, #0]
    6bc2:	2102      	movs	r1, #2
    6bc4:	e7f6      	b.n	6bb4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6bc6:	4902      	ldr	r1, [pc, #8]	; (6bd0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>)
    6bc8:	2001      	movs	r0, #1
    6bca:	7008      	strb	r0, [r1, #0]
    6bcc:	2001      	movs	r0, #1
    6bce:	bd10      	pop	{r4, pc}
    6bd0:	200011a4 	.word	0x200011a4
    6bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bd8:	b084      	sub	sp, #16
    6bda:	4689      	mov	r9, r1
    6bdc:	469a      	mov	sl, r3
    6bde:	4615      	mov	r5, r2
    6be0:	4606      	mov	r6, r0
    6be2:	a902      	add	r1, sp, #8
    6be4:	f009 f911 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6be8:	2800      	cmp	r0, #0
    6bea:	d14e      	bne.n	6c8a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    6bec:	9803      	ldr	r0, [sp, #12]
    6bee:	2d00      	cmp	r5, #0
    6bf0:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6bf4:	bf04      	itt	eq
    6bf6:	2001      	moveq	r0, #1
    6bf8:	74e0      	strbeq	r0, [r4, #19]
    6bfa:	d046      	beq.n	6c8a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    6bfc:	4630      	mov	r0, r6
    6bfe:	f7fd fb8f 	bl	4320 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6c02:	ea5f 0800 	movs.w	r8, r0
    6c06:	d00d      	beq.n	6c24 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x88>
    6c08:	4629      	mov	r1, r5
    6c0a:	f008 fdee 	bl	f7ea <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6c0e:	0007      	movs	r7, r0
    6c10:	d004      	beq.n	6c1c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6c12:	4822      	ldr	r0, [pc, #136]	; (6c9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x100>)
    6c14:	f8b0 0242 	ldrh.w	r0, [r0, #578]	; 0x242
    6c18:	4285      	cmp	r5, r0
    6c1a:	d907      	bls.n	6c2c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x90>
    6c1c:	b004      	add	sp, #16
    6c1e:	2000      	movs	r0, #0
    6c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c24:	2181      	movs	r1, #129	; 0x81
    6c26:	202b      	movs	r0, #43	; 0x2b
    6c28:	f7fc ffac 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c2c:	aa01      	add	r2, sp, #4
    6c2e:	4639      	mov	r1, r7
    6c30:	4640      	mov	r0, r8
    6c32:	f008 fdca 	bl	f7ca <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6c36:	9801      	ldr	r0, [sp, #4]
    6c38:	2600      	movs	r6, #0
    6c3a:	8006      	strh	r6, [r0, #0]
    6c3c:	7086      	strb	r6, [r0, #2]
    6c3e:	7ce1      	ldrb	r1, [r4, #19]
    6c40:	2900      	cmp	r1, #0
    6c42:	bf18      	it	ne
    6c44:	f04f 0902 	movne.w	r9, #2
    6c48:	4649      	mov	r1, r9
    6c4a:	f009 fc50 	bl	104ee <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6c4e:	2003      	movs	r0, #3
    6c50:	9000      	str	r0, [sp, #0]
    6c52:	462b      	mov	r3, r5
    6c54:	4652      	mov	r2, sl
    6c56:	4639      	mov	r1, r7
    6c58:	4640      	mov	r0, r8
    6c5a:	f008 fc10 	bl	f47e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6c5e:	4629      	mov	r1, r5
    6c60:	4640      	mov	r0, r8
    6c62:	f008 fd32 	bl	f6ca <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6c66:	b1a0      	cbz	r0, 6c92 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf6>
    6c68:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6c6c:	b160      	cbz	r0, 6c88 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    6c6e:	9803      	ldr	r0, [sp, #12]
    6c70:	f890 010d 	ldrb.w	r0, [r0, #269]	; 0x10d
    6c74:	b128      	cbz	r0, 6c82 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe6>
    6c76:	9803      	ldr	r0, [sp, #12]
    6c78:	f880 610d 	strb.w	r6, [r0, #269]	; 0x10d
    6c7c:	9803      	ldr	r0, [sp, #12]
    6c7e:	f009 ffb3 	bl	10be8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    6c82:	9803      	ldr	r0, [sp, #12]
    6c84:	f8a0 6102 	strh.w	r6, [r0, #258]	; 0x102
    6c88:	74e6      	strb	r6, [r4, #19]
    6c8a:	b004      	add	sp, #16
    6c8c:	2001      	movs	r0, #1
    6c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c92:	2197      	movs	r1, #151	; 0x97
    6c94:	202b      	movs	r0, #43	; 0x2b
    6c96:	f7fc ff75 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c9a:	0000      	.short	0x0000
    6c9c:	200011a4 	.word	0x200011a4
    6ca0:	b530      	push	{r4, r5, lr}
    6ca2:	4604      	mov	r4, r0
    6ca4:	4862      	ldr	r0, [pc, #392]	; (6e30 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x294>)
    6ca6:	b087      	sub	sp, #28
    6ca8:	f890 1256 	ldrb.w	r1, [r0, #598]	; 0x256
    6cac:	7820      	ldrb	r0, [r4, #0]
    6cae:	f011 0f01 	tst.w	r1, #1
    6cb2:	bf08      	it	eq
    6cb4:	281d      	cmpeq	r0, #29
    6cb6:	d004      	beq.n	6cc2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x126>
    6cb8:	281c      	cmp	r0, #28
    6cba:	d024      	beq.n	6d06 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x16a>
    6cbc:	2815      	cmp	r0, #21
    6cbe:	d07c      	beq.n	6dba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21e>
    6cc0:	e0b2      	b.n	6e28 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    6cc2:	88a0      	ldrh	r0, [r4, #4]
    6cc4:	f8ad 0000 	strh.w	r0, [sp]
    6cc8:	a902      	add	r1, sp, #8
    6cca:	f009 f89e 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6cce:	b118      	cbz	r0, 6cd8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x13c>
    6cd0:	2151      	movs	r1, #81	; 0x51
    6cd2:	202b      	movs	r0, #43	; 0x2b
    6cd4:	f7fc ff56 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd8:	9803      	ldr	r0, [sp, #12]
    6cda:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    6cde:	f88d 1002 	strb.w	r1, [sp, #2]
    6ce2:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    6ce6:	f88d 0003 	strb.w	r0, [sp, #3]
    6cea:	2000      	movs	r0, #0
    6cec:	f8ad 0004 	strh.w	r0, [sp, #4]
    6cf0:	2102      	movs	r1, #2
    6cf2:	4668      	mov	r0, sp
    6cf4:	f00a fccf 	bl	11696 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6cf8:	2800      	cmp	r0, #0
    6cfa:	d04c      	beq.n	6d96 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1fa>
    6cfc:	f240 112b 	movw	r1, #299	; 0x12b
    6d00:	202b      	movs	r0, #43	; 0x2b
    6d02:	f7fc ff3f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d06:	f011 0f02 	tst.w	r1, #2
    6d0a:	d011      	beq.n	6d30 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>
    6d0c:	88a5      	ldrh	r5, [r4, #4]
    6d0e:	2101      	movs	r1, #1
    6d10:	4628      	mov	r0, r5
    6d12:	f008 ff6e 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d16:	2800      	cmp	r0, #0
    6d18:	bf1c      	itt	ne
    6d1a:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
    6d1e:	2800      	cmpne	r0, #0
    6d20:	d03a      	beq.n	6d98 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1fc>
    6d22:	88a4      	ldrh	r4, [r4, #4]
    6d24:	a903      	add	r1, sp, #12
    6d26:	4620      	mov	r0, r4
    6d28:	f00a fb8f 	bl	1144a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6d2c:	b1e8      	cbz	r0, 6d6a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ce>
    6d2e:	e047      	b.n	6dc0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x224>
    6d30:	88a4      	ldrh	r4, [r4, #4]
    6d32:	a903      	add	r1, sp, #12
    6d34:	4620      	mov	r0, r4
    6d36:	f00a fb88 	bl	1144a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6d3a:	bbe8      	cbnz	r0, 6db8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21c>
    6d3c:	f8ad 4000 	strh.w	r4, [sp]
    6d40:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6d44:	f8ad 0002 	strh.w	r0, [sp, #2]
    6d48:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6d4c:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d50:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6d54:	f8ad 0006 	strh.w	r0, [sp, #6]
    6d58:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6d5c:	f8ad 0008 	strh.w	r0, [sp, #8]
    6d60:	4668      	mov	r0, sp
    6d62:	f00a fbe1 	bl	11528 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6d66:	bb48      	cbnz	r0, 6dbc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x220>
    6d68:	e04a      	b.n	6e00 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6d6a:	f8ad 4000 	strh.w	r4, [sp]
    6d6e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6d72:	f8ad 0002 	strh.w	r0, [sp, #2]
    6d76:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6d7a:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d7e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6d82:	f8ad 0006 	strh.w	r0, [sp, #6]
    6d86:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6d8a:	f8ad 0008 	strh.w	r0, [sp, #8]
    6d8e:	4668      	mov	r0, sp
    6d90:	f00a fbca 	bl	11528 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6d94:	b990      	cbnz	r0, 6dbc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x220>
    6d96:	e033      	b.n	6e00 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6d98:	2100      	movs	r1, #0
    6d9a:	4628      	mov	r0, r5
    6d9c:	f008 ff29 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6da0:	2800      	cmp	r0, #0
    6da2:	bf1c      	itt	ne
    6da4:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
    6da8:	2800      	cmpne	r0, #0
    6daa:	d03d      	beq.n	6e28 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    6dac:	88a4      	ldrh	r4, [r4, #4]
    6dae:	a903      	add	r1, sp, #12
    6db0:	4620      	mov	r0, r4
    6db2:	f00a fb4a 	bl	1144a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6db6:	e002      	b.n	6dbe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x222>
    6db8:	e002      	b.n	6dc0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x224>
    6dba:	e024      	b.n	6e06 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x26a>
    6dbc:	e01b      	b.n	6df6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x25a>
    6dbe:	b120      	cbz	r0, 6dca <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x22e>
    6dc0:	f44f 7199 	mov.w	r1, #306	; 0x132
    6dc4:	202b      	movs	r0, #43	; 0x2b
    6dc6:	f7fc fedd 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dca:	f8ad 4000 	strh.w	r4, [sp]
    6dce:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6dd2:	f8ad 0002 	strh.w	r0, [sp, #2]
    6dd6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6dda:	f8ad 0004 	strh.w	r0, [sp, #4]
    6dde:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6de2:	f8ad 0006 	strh.w	r0, [sp, #6]
    6de6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6dea:	f8ad 0008 	strh.w	r0, [sp, #8]
    6dee:	4668      	mov	r0, sp
    6df0:	f00a fb9a 	bl	11528 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6df4:	b120      	cbz	r0, 6e00 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6df6:	f240 113b 	movw	r1, #315	; 0x13b
    6dfa:	202b      	movs	r0, #43	; 0x2b
    6dfc:	f7fc fec2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e00:	b007      	add	sp, #28
    6e02:	2001      	movs	r0, #1
    6e04:	bd30      	pop	{r4, r5, pc}
    6e06:	f011 0f04 	tst.w	r1, #4
    6e0a:	bf04      	itt	eq
    6e0c:	7ba0      	ldrbeq	r0, [r4, #14]
    6e0e:	f010 0f01 	tsteq.w	r0, #1
    6e12:	d0f5      	beq.n	6e00 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6e14:	88a0      	ldrh	r0, [r4, #4]
    6e16:	4669      	mov	r1, sp
    6e18:	f008 fff7 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6e1c:	b920      	cbnz	r0, 6e28 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    6e1e:	9801      	ldr	r0, [sp, #4]
    6e20:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6e24:	2800      	cmp	r0, #0
    6e26:	d1eb      	bne.n	6e00 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    6e28:	b007      	add	sp, #28
    6e2a:	2000      	movs	r0, #0
    6e2c:	bd30      	pop	{r4, r5, pc}
    6e2e:	0000      	.short	0x0000
    6e30:	200011a4 	.word	0x200011a4

00006e34 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    6e34:	b570      	push	{r4, r5, r6, lr}
    6e36:	4c13      	ldr	r4, [pc, #76]	; (6e84 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x50>)
    6e38:	4605      	mov	r5, r0
    6e3a:	7c61      	ldrb	r1, [r4, #17]
    6e3c:	2902      	cmp	r1, #2
    6e3e:	bf18      	it	ne
    6e40:	2903      	cmpne	r1, #3
    6e42:	d109      	bne.n	6e58 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x24>
    6e44:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    6e48:	f104 0144 	add.w	r1, r4, #68	; 0x44
    6e4c:	f7fe fdaa 	bl	59a4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6e50:	2808      	cmp	r0, #8
    6e52:	bf1c      	itt	ne
    6e54:	2001      	movne	r0, #1
    6e56:	bd70      	popne	{r4, r5, r6, pc}
    6e58:	7c60      	ldrb	r0, [r4, #17]
    6e5a:	b145      	cbz	r5, 6e6e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x3a>
    6e5c:	2800      	cmp	r0, #0
    6e5e:	bf16      	itet	ne
    6e60:	2802      	cmpne	r0, #2
    6e62:	2000      	moveq	r0, #0
    6e64:	2001      	movne	r0, #1
    6e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e6a:	f7fd be1b 	b.w	4aa4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    6e6e:	2800      	cmp	r0, #0
    6e70:	bf1a      	itte	ne
    6e72:	2802      	cmpne	r0, #2
    6e74:	2101      	movne	r1, #1
    6e76:	2100      	moveq	r1, #0
    6e78:	7820      	ldrb	r0, [r4, #0]
    6e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e7e:	f7fd bdc5 	b.w	4a0c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>
    6e82:	0000      	.short	0x0000
    6e84:	20001404 	.word	0x20001404

00006e88 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e8c:	4c5c      	ldr	r4, [pc, #368]	; (7000 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>)
    6e8e:	4601      	mov	r1, r0
    6e90:	7c60      	ldrb	r0, [r4, #17]
    6e92:	2800      	cmp	r0, #0
    6e94:	bf16      	itet	ne
    6e96:	2802      	cmpne	r0, #2
    6e98:	2000      	moveq	r0, #0
    6e9a:	2001      	movne	r0, #1
    6e9c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    6ea0:	b301      	cbz	r1, 6ee4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5c>
    6ea2:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    6ea6:	f7fd fdc3 	bl	4a30 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6eaa:	7c60      	ldrb	r0, [r4, #17]
    6eac:	2802      	cmp	r0, #2
    6eae:	bf16      	itet	ne
    6eb0:	2803      	cmpne	r0, #3
    6eb2:	2101      	moveq	r1, #1
    6eb4:	2100      	movne	r1, #0
    6eb6:	74a1      	strb	r1, [r4, #18]
    6eb8:	f04f 0008 	mov.w	r0, #8
    6ebc:	74e0      	strb	r0, [r4, #19]
    6ebe:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    6ec2:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    6ec6:	f04f 0501 	mov.w	r5, #1
    6eca:	f04f 0600 	mov.w	r6, #0
    6ece:	2801      	cmp	r0, #1
    6ed0:	bf04      	itt	eq
    6ed2:	7952      	ldrbeq	r2, [r2, #5]
    6ed4:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    6ed8:	d013      	beq.n	6f02 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    6eda:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    6ede:	2801      	cmp	r0, #1
    6ee0:	d008      	beq.n	6ef4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x6c>
    6ee2:	e00c      	b.n	6efe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6ee4:	7823      	ldrb	r3, [r4, #0]
    6ee6:	4601      	mov	r1, r0
    6ee8:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    6eec:	4618      	mov	r0, r3
    6eee:	f7fd fd6f 	bl	49d0 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>
    6ef2:	e7da      	b.n	6eaa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x22>
    6ef4:	7950      	ldrb	r0, [r2, #5]
    6ef6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    6efa:	2840      	cmp	r0, #64	; 0x40
    6efc:	d001      	beq.n	6f02 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    6efe:	2000      	movs	r0, #0
    6f00:	e000      	b.n	6f04 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7c>
    6f02:	2001      	movs	r0, #1
    6f04:	7520      	strb	r0, [r4, #20]
    6f06:	2900      	cmp	r1, #0
    6f08:	bf04      	itt	eq
    6f0a:	78a0      	ldrbeq	r0, [r4, #2]
    6f0c:	f010 0f04 	tsteq.w	r0, #4
    6f10:	d006      	beq.n	6f20 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x98>
    6f12:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    6f16:	f104 0144 	add.w	r1, r4, #68	; 0x44
    6f1a:	f7fe fd43 	bl	59a4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6f1e:	74e0      	strb	r0, [r4, #19]
    6f20:	6366      	str	r6, [r4, #52]	; 0x34
    6f22:	f007 fc1c 	bl	e75e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6f26:	63a0      	str	r0, [r4, #56]	; 0x38
    6f28:	2700      	movs	r7, #0
    6f2a:	7ce0      	ldrb	r0, [r4, #19]
    6f2c:	f7fe fc7e 	bl	582c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6f30:	4680      	mov	r8, r0
    6f32:	7ca0      	ldrb	r0, [r4, #18]
    6f34:	2800      	cmp	r0, #0
    6f36:	bf18      	it	ne
    6f38:	f1b8 0f00 	cmpne.w	r8, #0
    6f3c:	d003      	beq.n	6f46 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6f3e:	7ce0      	ldrb	r0, [r4, #19]
    6f40:	f7fe fc68 	bl	5814 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6f44:	b168      	cbz	r0, 6f62 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xda>
    6f46:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    6f4a:	2800      	cmp	r0, #0
    6f4c:	bf1c      	itt	ne
    6f4e:	7d20      	ldrbne	r0, [r4, #20]
    6f50:	2800      	cmpne	r0, #0
    6f52:	d01e      	beq.n	6f92 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    6f54:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    6f58:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    6f5c:	2901      	cmp	r1, #1
    6f5e:	d00e      	beq.n	6f7e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf6>
    6f60:	e012      	b.n	6f88 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x100>
    6f62:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    6f66:	463a      	mov	r2, r7
    6f68:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    6f6c:	4640      	mov	r0, r8
    6f6e:	f008 fefe 	bl	fd6e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6f72:	7ce1      	ldrb	r1, [r4, #19]
    6f74:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    6f78:	f7fe fc64 	bl	5844 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    6f7c:	e009      	b.n	6f92 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    6f7e:	7940      	ldrb	r0, [r0, #5]
    6f80:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    6f84:	2840      	cmp	r0, #64	; 0x40
    6f86:	d032      	beq.n	6fee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x166>
    6f88:	4631      	mov	r1, r6
    6f8a:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    6f8e:	f008 fede 	bl	fd4e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    6f92:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    6f96:	78a0      	ldrb	r0, [r4, #2]
    6f98:	f010 0f04 	tst.w	r0, #4
    6f9c:	bf1a      	itte	ne
    6f9e:	7ca0      	ldrbne	r0, [r4, #18]
    6fa0:	2800      	cmpne	r0, #0
    6fa2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fa6:	f04f 0700 	mov.w	r7, #0
    6faa:	7ce0      	ldrb	r0, [r4, #19]
    6fac:	f7fe fc9c 	bl	58e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6fb0:	0006      	movs	r6, r0
    6fb2:	bf08      	it	eq
    6fb4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fb8:	2110      	movs	r1, #16
    6fba:	f7ff fa95 	bl	64e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6fbe:	2800      	cmp	r0, #0
    6fc0:	bf18      	it	ne
    6fc2:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fc6:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    6fca:	463a      	mov	r2, r7
    6fcc:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    6fd0:	4630      	mov	r0, r6
    6fd2:	f008 fecc 	bl	fd6e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6fd6:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    6fda:	4c0a      	ldr	r4, [pc, #40]	; (7004 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x17c>)
    6fdc:	6820      	ldr	r0, [r4, #0]
    6fde:	f009 fb62 	bl	106a6 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6fe2:	6820      	ldr	r0, [r4, #0]
    6fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6fe8:	2101      	movs	r1, #1
    6fea:	f009 bb63 	b.w	106b4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6fee:	f7fe fc0d 	bl	580c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    6ff2:	463a      	mov	r2, r7
    6ff4:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    6ff8:	f008 feb9 	bl	fd6e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6ffc:	e7c9      	b.n	6f92 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    6ffe:	0000      	.short	0x0000
    7000:	20001404 	.word	0x20001404
    7004:	2000010c 	.word	0x2000010c

00007008 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>:
    7008:	4804      	ldr	r0, [pc, #16]	; (701c <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA+0x14>)
    700a:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    700e:	2900      	cmp	r1, #0
    7010:	bf14      	ite	ne
    7012:	f8b0 006c 	ldrhne.w	r0, [r0, #108]	; 0x6c
    7016:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    701a:	4770      	bx	lr
    701c:	20001404 	.word	0x20001404

00007020 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    7020:	480b      	ldr	r0, [pc, #44]	; (7050 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x30>)
    7022:	8840      	ldrh	r0, [r0, #2]
    7024:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7028:	b131      	cbz	r1, 7038 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x18>
    702a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    702e:	2800      	cmp	r0, #0
    7030:	bf04      	itt	eq
    7032:	201f      	moveq	r0, #31
    7034:	4770      	bxeq	lr
    7036:	e002      	b.n	703e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1e>
    7038:	f3c0 0140 	ubfx	r1, r0, #1, #1
    703c:	b109      	cbz	r1, 7042 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x22>
    703e:	2000      	movs	r0, #0
    7040:	4770      	bx	lr
    7042:	f010 0f01 	tst.w	r0, #1
    7046:	bf14      	ite	ne
    7048:	20ee      	movne	r0, #238	; 0xee
    704a:	20ff      	moveq	r0, #255	; 0xff
    704c:	4770      	bx	lr
    704e:	0000      	.short	0x0000
    7050:	20001404 	.word	0x20001404

00007054 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    7054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7058:	4c41      	ldr	r4, [pc, #260]	; (7160 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x10c>)
    705a:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    705e:	2500      	movs	r5, #0
    7060:	b181      	cbz	r1, 7084 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    7062:	7045      	strb	r5, [r0, #1]
    7064:	211b      	movs	r1, #27
    7066:	7001      	strb	r1, [r0, #0]
    7068:	f8d4 1099 	ldr.w	r1, [r4, #153]	; 0x99
    706c:	6041      	str	r1, [r0, #4]
    706e:	f8d4 109d 	ldr.w	r1, [r4, #157]	; 0x9d
    7072:	6081      	str	r1, [r0, #8]
    7074:	f894 10a1 	ldrb.w	r1, [r4, #161]	; 0xa1
    7078:	7301      	strb	r1, [r0, #12]
    707a:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
    707e:	2001      	movs	r0, #1
    7080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7084:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
    7088:	b141      	cbz	r1, 709c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x48>
    708a:	7045      	strb	r5, [r0, #1]
    708c:	2107      	movs	r1, #7
    708e:	7001      	strb	r1, [r0, #0]
    7090:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    7094:	6041      	str	r1, [r0, #4]
    7096:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    709a:	e05d      	b.n	7158 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    709c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    70a0:	2114      	movs	r1, #20
    70a2:	4f30      	ldr	r7, [pc, #192]	; (7164 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x110>)
    70a4:	2601      	movs	r6, #1
    70a6:	b30a      	cbz	r2, 70ec <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x98>
    70a8:	4680      	mov	r8, r0
    70aa:	7045      	strb	r5, [r0, #1]
    70ac:	f800 1b04 	strb.w	r1, [r0], #4
    70b0:	2220      	movs	r2, #32
    70b2:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    70b6:	f7fc fbdb 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    70ba:	f888 6008 	strb.w	r6, [r8, #8]
    70be:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    70c2:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    70c6:	2800      	cmp	r0, #0
    70c8:	d146      	bne.n	7158 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    70ca:	bf00      	nop
    70cc:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    70d0:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    70d4:	6878      	ldr	r0, [r7, #4]
    70d6:	7c41      	ldrb	r1, [r0, #17]
    70d8:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    70dc:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
    70e0:	8800      	ldrh	r0, [r0, #0]
    70e2:	f7fd f907 	bl	42f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    70e6:	f008 fc3a 	bl	f95e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    70ea:	e035      	b.n	7158 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    70ec:	f894 208a 	ldrb.w	r2, [r4, #138]	; 0x8a
    70f0:	b302      	cbz	r2, 7134 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xe0>
    70f2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    70f6:	b18a      	cbz	r2, 711c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xc8>
    70f8:	4680      	mov	r8, r0
    70fa:	7045      	strb	r5, [r0, #1]
    70fc:	f800 1b04 	strb.w	r1, [r0], #4
    7100:	2220      	movs	r2, #32
    7102:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    7106:	f7fc fbb3 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    710a:	f888 6008 	strb.w	r6, [r8, #8]
    710e:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    7112:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    7116:	2800      	cmp	r0, #0
    7118:	d0d8      	beq.n	70cc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x78>
    711a:	e01d      	b.n	7158 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    711c:	7045      	strb	r5, [r0, #1]
    711e:	2117      	movs	r1, #23
    7120:	7001      	strb	r1, [r0, #0]
    7122:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    7126:	6041      	str	r1, [r0, #4]
    7128:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    712c:	8101      	strh	r1, [r0, #8]
    712e:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
    7132:	e011      	b.n	7158 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7134:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
    7138:	2900      	cmp	r1, #0
    713a:	bf04      	itt	eq
    713c:	2000      	moveq	r0, #0
    713e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7142:	7045      	strb	r5, [r0, #1]
    7144:	2120      	movs	r1, #32
    7146:	f800 1b04 	strb.w	r1, [r0], #4
    714a:	2222      	movs	r2, #34	; 0x22
    714c:	f104 01a3 	add.w	r1, r4, #163	; 0xa3
    7150:	f7fc fb8e 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7154:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    7158:	2001      	movs	r0, #1
    715a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    715e:	0000      	.short	0x0000
    7160:	20001404 	.word	0x20001404
    7164:	2000010c 	.word	0x2000010c

00007168 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    7168:	4801      	ldr	r0, [pc, #4]	; (7170 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q+0x8>)
    716a:	6880      	ldr	r0, [r0, #8]
    716c:	4770      	bx	lr
    716e:	0000      	.short	0x0000
    7170:	20001404 	.word	0x20001404

00007174 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    7174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7176:	4c0f      	ldr	r4, [pc, #60]	; (71b4 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x40>)
    7178:	8861      	ldrh	r1, [r4, #2]
    717a:	f3c1 1200 	ubfx	r2, r1, #4, #1
    717e:	2a00      	cmp	r2, #0
    7180:	bf04      	itt	eq
    7182:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
    7186:	2900      	cmpeq	r1, #0
    7188:	d111      	bne.n	71ae <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x3a>
    718a:	4605      	mov	r5, r0
    718c:	f104 0018 	add.w	r0, r4, #24
    7190:	f009 fc79 	bl	10a86 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7194:	7922      	ldrb	r2, [r4, #4]
    7196:	7963      	ldrb	r3, [r4, #5]
    7198:	2600      	movs	r6, #0
    719a:	4629      	mov	r1, r5
    719c:	9600      	str	r6, [sp, #0]
    719e:	f000 ff19 	bl	7fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    71a2:	4601      	mov	r1, r0
    71a4:	68a0      	ldr	r0, [r4, #8]
    71a6:	4281      	cmp	r1, r0
    71a8:	bf84      	itt	hi
    71aa:	4630      	movhi	r0, r6
    71ac:	bdf8      	pophi	{r3, r4, r5, r6, r7, pc}
    71ae:	2001      	movs	r0, #1
    71b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71b2:	0000      	.short	0x0000
    71b4:	20001404 	.word	0x20001404

000071b8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    71b8:	b538      	push	{r3, r4, r5, lr}
    71ba:	4c0d      	ldr	r4, [pc, #52]	; (71f0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x38>)
    71bc:	f104 0018 	add.w	r0, r4, #24
    71c0:	f009 fc61 	bl	10a86 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    71c4:	8861      	ldrh	r1, [r4, #2]
    71c6:	f3c1 1200 	ubfx	r2, r1, #4, #1
    71ca:	b122      	cbz	r2, 71d6 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x1e>
    71cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    71d0:	2228      	movs	r2, #40	; 0x28
    71d2:	f001 baa5 	b.w	8720 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    71d6:	f3c1 0140 	ubfx	r1, r1, #1, #1
    71da:	2900      	cmp	r1, #0
    71dc:	bf14      	ite	ne
    71de:	8e61      	ldrhne	r1, [r4, #50]	; 0x32
    71e0:	8e21      	ldrheq	r1, [r4, #48]	; 0x30
    71e2:	2201      	movs	r2, #1
    71e4:	9200      	str	r2, [sp, #0]
    71e6:	7963      	ldrb	r3, [r4, #5]
    71e8:	7922      	ldrb	r2, [r4, #4]
    71ea:	f000 fef3 	bl	7fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    71ee:	bd38      	pop	{r3, r4, r5, pc}
    71f0:	20001404 	.word	0x20001404

000071f4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    71f4:	4904      	ldr	r1, [pc, #16]	; (7208 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0x14>)
    71f6:	2200      	movs	r2, #0
    71f8:	624a      	str	r2, [r1, #36]	; 0x24
    71fa:	884b      	ldrh	r3, [r1, #2]
    71fc:	2b1d      	cmp	r3, #29
    71fe:	bf0c      	ite	eq
    7200:	734a      	strbeq	r2, [r1, #13]
    7202:	7348      	strbne	r0, [r1, #13]
    7204:	4770      	bx	lr
    7206:	0000      	.short	0x0000
    7208:	20001404 	.word	0x20001404

0000720c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    720c:	b538      	push	{r3, r4, r5, lr}
    720e:	4d56      	ldr	r5, [pc, #344]	; (7368 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15c>)
    7210:	4604      	mov	r4, r0
    7212:	7a80      	ldrb	r0, [r0, #10]
    7214:	7468      	strb	r0, [r5, #17]
    7216:	7820      	ldrb	r0, [r4, #0]
    7218:	7028      	strb	r0, [r5, #0]
    721a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    721e:	f8ad 0000 	strh.w	r0, [sp]
    7222:	f89d 0000 	ldrb.w	r0, [sp]
    7226:	f000 0101 	and.w	r1, r0, #1
    722a:	f3c0 0240 	ubfx	r2, r0, #1, #1
    722e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7232:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7236:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    723a:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    723e:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7242:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7246:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    724a:	f3c0 1240 	ubfx	r2, r0, #5, #1
    724e:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7252:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7256:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    725a:	8068      	strh	r0, [r5, #2]
    725c:	7d20      	ldrb	r0, [r4, #20]
    725e:	2801      	cmp	r0, #1
    7260:	bf18      	it	ne
    7262:	2802      	cmpne	r0, #2
    7264:	d006      	beq.n	7274 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x68>
    7266:	bf00      	nop
    7268:	f240 21a1 	movw	r1, #673	; 0x2a1
    726c:	f04f 0006 	mov.w	r0, #6
    7270:	f7fc fc88 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7274:	7128      	strb	r0, [r5, #4]
    7276:	7860      	ldrb	r0, [r4, #1]
    7278:	f010 0f10 	tst.w	r0, #16
    727c:	d009      	beq.n	7292 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x86>
    727e:	7a61      	ldrb	r1, [r4, #9]
    7280:	f105 0018 	add.w	r0, r5, #24
    7284:	f009 fc52 	bl	10b2c <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7288:	7d20      	ldrb	r0, [r4, #20]
    728a:	2101      	movs	r1, #1
    728c:	2802      	cmp	r0, #2
    728e:	d10b      	bne.n	72a8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x9c>
    7290:	e006      	b.n	72a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x94>
    7292:	7da0      	ldrb	r0, [r4, #22]
    7294:	2801      	cmp	r0, #1
    7296:	bf14      	ite	ne
    7298:	2802      	cmpne	r0, #2
    729a:	7168      	strbeq	r0, [r5, #5]
    729c:	d1e4      	bne.n	7268 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x5c>
    729e:	e7ee      	b.n	727e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x72>
    72a0:	7d60      	ldrb	r0, [r4, #21]
    72a2:	f100 0001 	add.w	r0, r0, #1
    72a6:	b2c1      	uxtb	r1, r0
    72a8:	7ea0      	ldrb	r0, [r4, #26]
    72aa:	f100 0001 	add.w	r0, r0, #1
    72ae:	b2c2      	uxtb	r2, r0
    72b0:	f105 0018 	add.w	r0, r5, #24
    72b4:	f009 fbd0 	bl	10a58 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    72b8:	78a8      	ldrb	r0, [r5, #2]
    72ba:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    72be:	2800      	cmp	r0, #0
    72c0:	bf1c      	itt	ne
    72c2:	2000      	movne	r0, #0
    72c4:	60a8      	strne	r0, [r5, #8]
    72c6:	d01c      	beq.n	7302 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    72c8:	7ca0      	ldrb	r0, [r4, #18]
    72ca:	7428      	strb	r0, [r5, #16]
    72cc:	7ae0      	ldrb	r0, [r4, #11]
    72ce:	2800      	cmp	r0, #0
    72d0:	bf16      	itet	ne
    72d2:	2802      	cmpne	r0, #2
    72d4:	2000      	moveq	r0, #0
    72d6:	2001      	movne	r0, #1
    72d8:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
    72dc:	68e0      	ldr	r0, [r4, #12]
    72de:	6468      	str	r0, [r5, #68]	; 0x44
    72e0:	8a20      	ldrh	r0, [r4, #16]
    72e2:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
    72e6:	7de0      	ldrb	r0, [r4, #23]
    72e8:	f895 1020 	ldrb.w	r1, [r5, #32]
    72ec:	f360 1107 	bfi	r1, r0, #4, #4
    72f0:	f885 1020 	strb.w	r1, [r5, #32]
    72f4:	7e20      	ldrb	r0, [r4, #24]
    72f6:	2801      	cmp	r0, #1
    72f8:	bf18      	it	ne
    72fa:	2000      	movne	r0, #0
    72fc:	7328      	strb	r0, [r5, #12]
    72fe:	2000      	movs	r0, #0
    7300:	bd38      	pop	{r3, r4, r5, pc}
    7302:	7860      	ldrb	r0, [r4, #1]
    7304:	f010 0f10 	tst.w	r0, #16
    7308:	f105 0018 	add.w	r0, r5, #24
    730c:	d022      	beq.n	7354 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    730e:	f009 fbba 	bl	10a86 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7312:	8869      	ldrh	r1, [r5, #2]
    7314:	2228      	movs	r2, #40	; 0x28
    7316:	f001 fa03 	bl	8720 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    731a:	bf00      	nop
    731c:	f240 2171 	movw	r1, #625	; 0x271
    7320:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7324:	fbb0 f0f1 	udiv	r0, r0, r1
    7328:	4348      	muls	r0, r1
    732a:	f8d4 1002 	ldr.w	r1, [r4, #2]
    732e:	f240 2271 	movw	r2, #625	; 0x271
    7332:	0a09      	lsrs	r1, r1, #8
    7334:	434a      	muls	r2, r1
    7336:	f8d4 1005 	ldr.w	r1, [r4, #5]
    733a:	f240 2371 	movw	r3, #625	; 0x271
    733e:	0a09      	lsrs	r1, r1, #8
    7340:	4359      	muls	r1, r3
    7342:	4290      	cmp	r0, r2
    7344:	bf98      	it	ls
    7346:	60aa      	strls	r2, [r5, #8]
    7348:	d9be      	bls.n	72c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    734a:	4288      	cmp	r0, r1
    734c:	bf94      	ite	ls
    734e:	60a8      	strls	r0, [r5, #8]
    7350:	60a9      	strhi	r1, [r5, #8]
    7352:	e7b9      	b.n	72c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    7354:	f009 fb97 	bl	10a86 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7358:	2101      	movs	r1, #1
    735a:	9100      	str	r1, [sp, #0]
    735c:	796b      	ldrb	r3, [r5, #5]
    735e:	792a      	ldrb	r2, [r5, #4]
    7360:	21fb      	movs	r1, #251	; 0xfb
    7362:	f000 fe37 	bl	7fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    7366:	e7d9      	b.n	731c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x110>
    7368:	20001404 	.word	0x20001404

0000736c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    736c:	b570      	push	{r4, r5, r6, lr}
    736e:	491b      	ldr	r1, [pc, #108]	; (73dc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x70>)
    7370:	2400      	movs	r4, #0
    7372:	700c      	strb	r4, [r1, #0]
    7374:	4d1a      	ldr	r5, [pc, #104]	; (73e0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x74>)
    7376:	6028      	str	r0, [r5, #0]
    7378:	7808      	ldrb	r0, [r1, #0]
    737a:	b120      	cbz	r0, 7386 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    737c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
    7380:	202d      	movs	r0, #45	; 0x2d
    7382:	f7fc fbff 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7386:	22c8      	movs	r2, #200	; 0xc8
    7388:	2100      	movs	r1, #0
    738a:	4816      	ldr	r0, [pc, #88]	; (73e4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    738c:	f007 fb4c 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7390:	4814      	ldr	r0, [pc, #80]	; (73e4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    7392:	f8c0 40c8 	str.w	r4, [r0, #200]	; 0xc8
    7396:	f8c0 40cc 	str.w	r4, [r0, #204]	; 0xcc
    739a:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
    739e:	f8c0 40d4 	str.w	r4, [r0, #212]	; 0xd4
    73a2:	21ff      	movs	r1, #255	; 0xff
    73a4:	f800 1b21 	strb.w	r1, [r0], #33
    73a8:	217f      	movs	r1, #127	; 0x7f
    73aa:	f800 191f 	strb.w	r1, [r0], #-31
    73ae:	2113      	movs	r1, #19
    73b0:	f820 1b5e 	strh.w	r1, [r0], #94
    73b4:	2101      	movs	r1, #1
    73b6:	f800 1951 	strb.w	r1, [r0], #-81
    73ba:	f800 4b09 	strb.w	r4, [r0], #9
    73be:	f009 fbda 	bl	10b76 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    73c2:	f005 ff33 	bl	d22c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    73c6:	f005 fd59 	bl	ce7c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    73ca:	68a8      	ldr	r0, [r5, #8]
    73cc:	2800      	cmp	r0, #0
    73ce:	bf18      	it	ne
    73d0:	bd70      	popne	{r4, r5, r6, pc}
    73d2:	f240 21cf 	movw	r1, #719	; 0x2cf
    73d6:	202d      	movs	r0, #45	; 0x2d
    73d8:	f7fc fbd4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73dc:	200014cc 	.word	0x200014cc
    73e0:	2000010c 	.word	0x2000010c
    73e4:	20001404 	.word	0x20001404

000073e8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    73e8:	4907      	ldr	r1, [pc, #28]	; (7408 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x20>)
    73ea:	8848      	ldrh	r0, [r1, #2]
    73ec:	f3c0 1200 	ubfx	r2, r0, #4, #1
    73f0:	b93a      	cbnz	r2, 7402 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    73f2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    73f6:	b120      	cbz	r0, 7402 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    73f8:	f8b1 0064 	ldrh.w	r0, [r1, #100]	; 0x64
    73fc:	2800      	cmp	r0, #0
    73fe:	bf08      	it	eq
    7400:	4770      	bxeq	lr
    7402:	2001      	movs	r0, #1
    7404:	4770      	bx	lr
    7406:	0000      	.short	0x0000
    7408:	20001404 	.word	0x20001404

0000740c <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
    740c:	4807      	ldr	r0, [pc, #28]	; (742c <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x20>)
    740e:	8840      	ldrh	r0, [r0, #2]
    7410:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7414:	b119      	cbz	r1, 741e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
    7416:	f3c0 0080 	ubfx	r0, r0, #2, #1
    741a:	b128      	cbz	r0, 7428 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    741c:	e002      	b.n	7424 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x18>
    741e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7422:	b108      	cbz	r0, 7428 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    7424:	2000      	movs	r0, #0
    7426:	4770      	bx	lr
    7428:	2001      	movs	r0, #1
    742a:	4770      	bx	lr
    742c:	20001404 	.word	0x20001404

00007430 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    7430:	4802      	ldr	r0, [pc, #8]	; (743c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ+0xc>)
    7432:	7880      	ldrb	r0, [r0, #2]
    7434:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7438:	4770      	bx	lr
    743a:	0000      	.short	0x0000
    743c:	20001404 	.word	0x20001404

00007440 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    7440:	4802      	ldr	r0, [pc, #8]	; (744c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ+0xc>)
    7442:	7880      	ldrb	r0, [r0, #2]
    7444:	f000 0001 	and.w	r0, r0, #1
    7448:	4770      	bx	lr
    744a:	0000      	.short	0x0000
    744c:	20001404 	.word	0x20001404

00007450 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
    7450:	4803      	ldr	r0, [pc, #12]	; (7460 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ+0x10>)
    7452:	8840      	ldrh	r0, [r0, #2]
    7454:	2809      	cmp	r0, #9
    7456:	bf0c      	ite	eq
    7458:	2001      	moveq	r0, #1
    745a:	2000      	movne	r0, #0
    745c:	4770      	bx	lr
    745e:	0000      	.short	0x0000
    7460:	20001404 	.word	0x20001404

00007464 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    7464:	4802      	ldr	r0, [pc, #8]	; (7470 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI+0xc>)
    7466:	7880      	ldrb	r0, [r0, #2]
    7468:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    746c:	4770      	bx	lr
    746e:	0000      	.short	0x0000
    7470:	20001404 	.word	0x20001404

00007474 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    7474:	4802      	ldr	r0, [pc, #8]	; (7480 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY+0xc>)
    7476:	7880      	ldrb	r0, [r0, #2]
    7478:	f3c0 1000 	ubfx	r0, r0, #4, #1
    747c:	4770      	bx	lr
    747e:	0000      	.short	0x0000
    7480:	20001404 	.word	0x20001404

00007484 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    7484:	4802      	ldr	r0, [pc, #8]	; (7490 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ+0xc>)
    7486:	7880      	ldrb	r0, [r0, #2]
    7488:	f3c0 0040 	ubfx	r0, r0, #1, #1
    748c:	4770      	bx	lr
    748e:	0000      	.short	0x0000
    7490:	20001404 	.word	0x20001404

00007494 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7494:	4902      	ldr	r1, [pc, #8]	; (74a0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7496:	4801      	ldr	r0, [pc, #4]	; (749c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7498:	6088      	str	r0, [r1, #8]
    749a:	4770      	bx	lr
    749c:	00008708 	.word	0x00008708
    74a0:	2000010c 	.word	0x2000010c

000074a4 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    74a4:	4801      	ldr	r0, [pc, #4]	; (74ac <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY+0x8>)
    74a6:	f990 000f 	ldrsb.w	r0, [r0, #15]
    74aa:	4770      	bx	lr
    74ac:	20001404 	.word	0x20001404

000074b0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    74b0:	4903      	ldr	r1, [pc, #12]	; (74c0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0x10>)
    74b2:	7809      	ldrb	r1, [r1, #0]
    74b4:	4281      	cmp	r1, r0
    74b6:	bf0c      	ite	eq
    74b8:	2001      	moveq	r0, #1
    74ba:	2000      	movne	r0, #0
    74bc:	4770      	bx	lr
    74be:	0000      	.short	0x0000
    74c0:	20001404 	.word	0x20001404

000074c4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    74c4:	4801      	ldr	r0, [pc, #4]	; (74cc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0x8>)
    74c6:	6880      	ldr	r0, [r0, #8]
    74c8:	6800      	ldr	r0, [r0, #0]
    74ca:	4700      	bx	r0
    74cc:	2000010c 	.word	0x2000010c

000074d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    74d0:	4816      	ldr	r0, [pc, #88]	; (752c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x5c>)
    74d2:	b510      	push	{r4, lr}
    74d4:	7800      	ldrb	r0, [r0, #0]
    74d6:	2800      	cmp	r0, #0
    74d8:	bf18      	it	ne
    74da:	240c      	movne	r4, #12
    74dc:	d001      	beq.n	74e2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    74de:	4620      	mov	r0, r4
    74e0:	bd10      	pop	{r4, pc}
    74e2:	2400      	movs	r4, #0
    74e4:	22c8      	movs	r2, #200	; 0xc8
    74e6:	4621      	mov	r1, r4
    74e8:	4811      	ldr	r0, [pc, #68]	; (7530 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    74ea:	f007 fa9d 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    74ee:	4910      	ldr	r1, [pc, #64]	; (7530 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    74f0:	2000      	movs	r0, #0
    74f2:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    74f6:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    74fa:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    74fe:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
    7502:	22ff      	movs	r2, #255	; 0xff
    7504:	700a      	strb	r2, [r1, #0]
    7506:	227f      	movs	r2, #127	; 0x7f
    7508:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    750c:	2213      	movs	r2, #19
    750e:	804a      	strh	r2, [r1, #2]
    7510:	2201      	movs	r2, #1
    7512:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
    7516:	73c8      	strb	r0, [r1, #15]
    7518:	f101 0018 	add.w	r0, r1, #24
    751c:	f009 fb2b 	bl	10b76 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7520:	f005 fe84 	bl	d22c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7524:	f005 fcaa 	bl	ce7c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7528:	e7d9      	b.n	74de <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    752a:	0000      	.short	0x0000
    752c:	200014cc 	.word	0x200014cc
    7530:	20001404 	.word	0x20001404

00007534 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    7534:	4801      	ldr	r0, [pc, #4]	; (753c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI+0x8>)
    7536:	7b00      	ldrb	r0, [r0, #12]
    7538:	4770      	bx	lr
    753a:	0000      	.short	0x0000
    753c:	20001404 	.word	0x20001404

00007540 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    7540:	4801      	ldr	r0, [pc, #4]	; (7548 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x8>)
    7542:	7940      	ldrb	r0, [r0, #5]
    7544:	4770      	bx	lr
    7546:	0000      	.short	0x0000
    7548:	20001404 	.word	0x20001404

0000754c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    754c:	4901      	ldr	r1, [pc, #4]	; (7554 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY+0x8>)
    754e:	6048      	str	r0, [r1, #4]
    7550:	4770      	bx	lr
    7552:	0000      	.short	0x0000
    7554:	2000010c 	.word	0x2000010c

00007558 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    7558:	4a05      	ldr	r2, [pc, #20]	; (7570 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y+0x18>)
    755a:	2300      	movs	r3, #0
    755c:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
    7560:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62
    7564:	2001      	movs	r0, #1
    7566:	6591      	str	r1, [r2, #88]	; 0x58
    7568:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
    756c:	4770      	bx	lr
    756e:	0000      	.short	0x0000
    7570:	20001404 	.word	0x20001404

00007574 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    7574:	4a05      	ldr	r2, [pc, #20]	; (758c <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA+0x18>)
    7576:	2300      	movs	r3, #0
    7578:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    757c:	65d1      	str	r1, [r2, #92]	; 0x5c
    757e:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    7582:	2001      	movs	r0, #1
    7584:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    7588:	4770      	bx	lr
    758a:	0000      	.short	0x0000
    758c:	20001404 	.word	0x20001404

00007590 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7590:	4805      	ldr	r0, [pc, #20]	; (75a8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    7592:	b510      	push	{r4, lr}
    7594:	7800      	ldrb	r0, [r0, #0]
    7596:	2801      	cmp	r0, #1
    7598:	bf1c      	itt	ne
    759a:	2000      	movne	r0, #0
    759c:	bd10      	popne	{r4, pc}
    759e:	f000 feb7 	bl	8310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x310>
    75a2:	2000      	movs	r0, #0
    75a4:	bd10      	pop	{r4, pc}
    75a6:	0000      	.short	0x0000
    75a8:	200014cc 	.word	0x200014cc

000075ac <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    75ac:	4901      	ldr	r1, [pc, #4]	; (75b4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY+0x8>)
    75ae:	f881 0054 	strb.w	r0, [r1, #84]	; 0x54
    75b2:	4770      	bx	lr
    75b4:	20001404 	.word	0x20001404

000075b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    75b8:	4904      	ldr	r1, [pc, #16]	; (75cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
    75ba:	4803      	ldr	r0, [pc, #12]	; (75c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
    75bc:	6008      	str	r0, [r1, #0]
    75be:	4905      	ldr	r1, [pc, #20]	; (75d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
    75c0:	4803      	ldr	r0, [pc, #12]	; (75d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
    75c2:	6008      	str	r0, [r1, #0]
    75c4:	4770      	bx	lr
    75c6:	0000      	.short	0x0000
    75c8:	000085e1 	.word	0x000085e1
    75cc:	2000011c 	.word	0x2000011c
    75d0:	00008485 	.word	0x00008485
    75d4:	20000118 	.word	0x20000118

000075d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    75d8:	b570      	push	{r4, r5, r6, lr}
    75da:	4c10      	ldr	r4, [pc, #64]	; (761c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x44>)
    75dc:	4e10      	ldr	r6, [pc, #64]	; (7620 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x48>)
    75de:	2501      	movs	r5, #1
    75e0:	78a0      	ldrb	r0, [r4, #2]
    75e2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    75e6:	b130      	cbz	r0, 75f6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    75e8:	223c      	movs	r2, #60	; 0x3c
    75ea:	21ff      	movs	r1, #255	; 0xff
    75ec:	6870      	ldr	r0, [r6, #4]
    75ee:	f000 fecd 	bl	838c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>
    75f2:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    75f6:	78a0      	ldrb	r0, [r4, #2]
    75f8:	f010 0f01 	tst.w	r0, #1
    75fc:	bf1c      	itt	ne
    75fe:	6870      	ldrne	r0, [r6, #4]
    7600:	8801      	ldrhne	r1, [r0, #0]
    7602:	f04f 023c 	mov.w	r2, #60	; 0x3c
    7606:	bf12      	itee	ne
    7608:	2001      	movne	r0, #1
    760a:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    760e:	2000      	moveq	r0, #0
    7610:	f000 fc16 	bl	7e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    7614:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    7618:	bd70      	pop	{r4, r5, r6, pc}
    761a:	0000      	.short	0x0000
    761c:	20001404 	.word	0x20001404
    7620:	2000010c 	.word	0x2000010c

00007624 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    7624:	4802      	ldr	r0, [pc, #8]	; (7630 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc>)
    7626:	7c00      	ldrb	r0, [r0, #16]
    7628:	2800      	cmp	r0, #0
    762a:	bf18      	it	ne
    762c:	2001      	movne	r0, #1
    762e:	4770      	bx	lr
    7630:	20001404 	.word	0x20001404
    7634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7638:	4e68      	ldr	r6, [pc, #416]	; (77dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1b8>)
    763a:	0007      	movs	r7, r0
    763c:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    7640:	d027      	beq.n	7692 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x6e>
    7642:	f104 0018 	add.w	r0, r4, #24
    7646:	f009 fa73 	bl	10b30 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    764a:	b9c0      	cbnz	r0, 767e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5a>
    764c:	78a0      	ldrb	r0, [r4, #2]
    764e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7652:	2800      	cmp	r0, #0
    7654:	d039      	beq.n	76ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa6>
    7656:	f104 0018 	add.w	r0, r4, #24
    765a:	f009 fa14 	bl	10a86 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    765e:	4605      	mov	r5, r0
    7660:	f104 0018 	add.w	r0, r4, #24
    7664:	f009 fa64 	bl	10b30 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7668:	1a28      	subs	r0, r5, r0
    766a:	b2c0      	uxtb	r0, r0
    766c:	f009 fa90 	bl	10b90 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7670:	6871      	ldr	r1, [r6, #4]
    7672:	4408      	add	r0, r1
    7674:	6070      	str	r0, [r6, #4]
    7676:	f104 0018 	add.w	r0, r4, #24
    767a:	f009 fa84 	bl	10b86 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    767e:	f104 0018 	add.w	r0, r4, #24
    7682:	f009 fa10 	bl	10aa6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7686:	f006 fced 	bl	e064 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    768a:	7921      	ldrb	r1, [r4, #4]
    768c:	2025      	movs	r0, #37	; 0x25
    768e:	f006 fccb 	bl	e028 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7692:	4d53      	ldr	r5, [pc, #332]	; (77e0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1bc>)
    7694:	f894 804a 	ldrb.w	r8, [r4, #74]	; 0x4a
    7698:	2100      	movs	r1, #0
    769a:	6828      	ldr	r0, [r5, #0]
    769c:	8001      	strh	r1, [r0, #0]
    769e:	7801      	ldrb	r1, [r0, #0]
    76a0:	f021 0120 	bic.w	r1, r1, #32
    76a4:	7001      	strb	r1, [r0, #0]
    76a6:	8861      	ldrh	r1, [r4, #2]
    76a8:	2913      	cmp	r1, #19
    76aa:	d02b      	beq.n	7704 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    76ac:	dc11      	bgt.n	76d2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    76ae:	2910      	cmp	r1, #16
    76b0:	bf08      	it	eq
    76b2:	2102      	moveq	r1, #2
    76b4:	d039      	beq.n	772a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    76b6:	2912      	cmp	r1, #18
    76b8:	bf08      	it	eq
    76ba:	2106      	moveq	r1, #6
    76bc:	d035      	beq.n	772a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    76be:	bf00      	nop
    76c0:	f240 51a9 	movw	r1, #1449	; 0x5a9
    76c4:	202d      	movs	r0, #45	; 0x2d
    76c6:	f7fc fa5d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76ce:	f000 be1f 	b.w	8310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x310>
    76d2:	2915      	cmp	r1, #21
    76d4:	bf18      	it	ne
    76d6:	291d      	cmpne	r1, #29
    76d8:	d1f2      	bne.n	76c0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9c>
    76da:	f04f 0101 	mov.w	r1, #1
    76de:	f008 ffc0 	bl	10662 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    76e2:	6828      	ldr	r0, [r5, #0]
    76e4:	f1b8 0f00 	cmp.w	r8, #0
    76e8:	7801      	ldrb	r1, [r0, #0]
    76ea:	f041 0120 	orr.w	r1, r1, #32
    76ee:	7001      	strb	r1, [r0, #0]
    76f0:	d011      	beq.n	7716 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    76f2:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    76f6:	f008 ffd6 	bl	106a6 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    76fa:	2101      	movs	r1, #1
    76fc:	6828      	ldr	r0, [r5, #0]
    76fe:	f008 ffd9 	bl	106b4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7702:	e014      	b.n	772e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7704:	2100      	movs	r1, #0
    7706:	f008 ffac 	bl	10662 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    770a:	6828      	ldr	r0, [r5, #0]
    770c:	7801      	ldrb	r1, [r0, #0]
    770e:	f041 0120 	orr.w	r1, r1, #32
    7712:	7001      	strb	r1, [r0, #0]
    7714:	e00b      	b.n	772e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7716:	f104 0144 	add.w	r1, r4, #68	; 0x44
    771a:	f008 ffc4 	bl	106a6 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    771e:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
    7722:	6828      	ldr	r0, [r5, #0]
    7724:	f008 ffc6 	bl	106b4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7728:	e001      	b.n	772e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    772a:	f008 ff9a 	bl	10662 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    772e:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7732:	6828      	ldr	r0, [r5, #0]
    7734:	f008 ffc7 	bl	106c6 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7738:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    773c:	6828      	ldr	r0, [r5, #0]
    773e:	f008 ffc9 	bl	106d4 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7742:	8860      	ldrh	r0, [r4, #2]
    7744:	281d      	cmp	r0, #29
    7746:	bf18      	it	ne
    7748:	2815      	cmpne	r0, #21
    774a:	d004      	beq.n	7756 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    774c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    774e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7750:	6828      	ldr	r0, [r5, #0]
    7752:	f008 ff2e 	bl	105b2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7756:	b1ef      	cbz	r7, 7794 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x170>
    7758:	f104 0018 	add.w	r0, r4, #24
    775c:	68b7      	ldr	r7, [r6, #8]
    775e:	f009 f992 	bl	10a86 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7762:	4680      	mov	r8, r0
    7764:	f104 0018 	add.w	r0, r4, #24
    7768:	f009 f9e2 	bl	10b30 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    776c:	eba8 0000 	sub.w	r0, r8, r0
    7770:	1e40      	subs	r0, r0, #1
    7772:	b2c0      	uxtb	r0, r0
    7774:	8861      	ldrh	r1, [r4, #2]
    7776:	2228      	movs	r2, #40	; 0x28
    7778:	f000 fff8 	bl	876c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    777c:	19c1      	adds	r1, r0, r7
    777e:	78a0      	ldrb	r0, [r4, #2]
    7780:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7784:	2800      	cmp	r0, #0
    7786:	bf1c      	itt	ne
    7788:	6870      	ldrne	r0, [r6, #4]
    778a:	4401      	addne	r1, r0
    778c:	7922      	ldrb	r2, [r4, #4]
    778e:	2000      	movs	r0, #0
    7790:	f006 f986 	bl	daa0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7794:	6828      	ldr	r0, [r5, #0]
    7796:	f006 f937 	bl	da08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    779a:	2004      	movs	r0, #4
    779c:	7030      	strb	r0, [r6, #0]
    779e:	8860      	ldrh	r0, [r4, #2]
    77a0:	2813      	cmp	r0, #19
    77a2:	d010      	beq.n	77c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    77a4:	dc0b      	bgt.n	77be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x19a>
    77a6:	2810      	cmp	r0, #16
    77a8:	bf08      	it	eq
    77aa:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    77ae:	2812      	cmp	r0, #18
    77b0:	d009      	beq.n	77c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    77b2:	bf00      	nop
    77b4:	f640 4119 	movw	r1, #3097	; 0xc19
    77b8:	202d      	movs	r0, #45	; 0x2d
    77ba:	f7fc f9e3 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77be:	2815      	cmp	r0, #21
    77c0:	bf18      	it	ne
    77c2:	281d      	cmpne	r0, #29
    77c4:	d1f6      	bne.n	77b4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x190>
    77c6:	7923      	ldrb	r3, [r4, #4]
    77c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    77cc:	f04f 0201 	mov.w	r2, #1
    77d0:	4611      	mov	r1, r2
    77d2:	f04f 0000 	mov.w	r0, #0
    77d6:	f006 baf7 	b.w	ddc8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    77da:	0000      	.short	0x0000
    77dc:	200014cc 	.word	0x200014cc
    77e0:	2000010c 	.word	0x2000010c
    77e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    77e8:	4e3d      	ldr	r6, [pc, #244]	; (78e0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2bc>)
    77ea:	4681      	mov	r9, r0
    77ec:	7830      	ldrb	r0, [r6, #0]
    77ee:	2802      	cmp	r0, #2
    77f0:	bf1c      	itt	ne
    77f2:	7830      	ldrbne	r0, [r6, #0]
    77f4:	2803      	cmpne	r0, #3
    77f6:	d005      	beq.n	7804 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1e0>
    77f8:	f44f 613a 	mov.w	r1, #2976	; 0xba0
    77fc:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7800:	f7fc f9c0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7804:	4d37      	ldr	r5, [pc, #220]	; (78e4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c0>)
    7806:	7b28      	ldrb	r0, [r5, #12]
    7808:	b150      	cbz	r0, 7820 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1fc>
    780a:	f105 0021 	add.w	r0, r5, #33	; 0x21
    780e:	f006 fba1 	bl	df54 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7812:	2800      	cmp	r0, #0
    7814:	bf04      	itt	eq
    7816:	207f      	moveq	r0, #127	; 0x7f
    7818:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    781c:	f006 fb80 	bl	df20 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7820:	4c31      	ldr	r4, [pc, #196]	; (78e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c4>)
    7822:	6820      	ldr	r0, [r4, #0]
    7824:	f008 fe7b 	bl	1051e <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>
    7828:	4607      	mov	r7, r0
    782a:	6860      	ldr	r0, [r4, #4]
    782c:	f04f 0800 	mov.w	r8, #0
    7830:	2800      	cmp	r0, #0
    7832:	bf18      	it	ne
    7834:	f890 806b 	ldrbne.w	r8, [r0, #107]	; 0x6b
    7838:	f1b9 0f00 	cmp.w	r9, #0
    783c:	d03e      	beq.n	78bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    783e:	f006 f80b 	bl	d858 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    7842:	2800      	cmp	r0, #0
    7844:	d03a      	beq.n	78bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7846:	2f05      	cmp	r7, #5
    7848:	d11b      	bne.n	7882 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    784a:	6820      	ldr	r0, [r4, #0]
    784c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    7850:	f000 001f 	and.w	r0, r0, #31
    7854:	2810      	cmp	r0, #16
    7856:	d914      	bls.n	7882 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7858:	7ba8      	ldrb	r0, [r5, #14]
    785a:	b190      	cbz	r0, 7882 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    785c:	20ff      	movs	r0, #255	; 0xff
    785e:	f88d 0000 	strb.w	r0, [sp]
    7862:	2701      	movs	r7, #1
    7864:	4669      	mov	r1, sp
    7866:	2005      	movs	r0, #5
    7868:	f000 fb24 	bl	7eb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    786c:	b330      	cbz	r0, 78bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    786e:	f885 70a2 	strb.w	r7, [r5, #162]	; 0xa2
    7872:	6820      	ldr	r0, [r4, #0]
    7874:	2222      	movs	r2, #34	; 0x22
    7876:	1cc1      	adds	r1, r0, #3
    7878:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
    787c:	f7fb fff8 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7880:	e01c      	b.n	78bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7882:	4641      	mov	r1, r8
    7884:	6820      	ldr	r0, [r4, #0]
    7886:	f008 fe4e 	bl	10526 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    788a:	b1b8      	cbz	r0, 78bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    788c:	7831      	ldrb	r1, [r6, #0]
    788e:	4638      	mov	r0, r7
    7890:	2902      	cmp	r1, #2
    7892:	bf1c      	itt	ne
    7894:	7831      	ldrbne	r1, [r6, #0]
    7896:	2903      	cmpne	r1, #3
    7898:	d005      	beq.n	78a6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x282>
    789a:	f640 3179 	movw	r1, #2937	; 0xb79
    789e:	f04f 002d 	mov.w	r0, #45	; 0x2d
    78a2:	f7fc f96f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78a6:	68a1      	ldr	r1, [r4, #8]
    78a8:	7832      	ldrb	r2, [r6, #0]
    78aa:	6949      	ldr	r1, [r1, #20]
    78ac:	f06f 0307 	mvn.w	r3, #7
    78b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    78b4:	5889      	ldr	r1, [r1, r2]
    78b6:	4788      	blx	r1
    78b8:	4605      	mov	r5, r0
    78ba:	e000      	b.n	78be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x29a>
    78bc:	2501      	movs	r5, #1
    78be:	7bb0      	ldrb	r0, [r6, #14]
    78c0:	b118      	cbz	r0, 78ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2a6>
    78c2:	f005 fcb3 	bl	d22c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    78c6:	f005 fad9 	bl	ce7c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    78ca:	2d00      	cmp	r5, #0
    78cc:	bf08      	it	eq
    78ce:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    78d2:	68a0      	ldr	r0, [r4, #8]
    78d4:	6880      	ldr	r0, [r0, #8]
    78d6:	b001      	add	sp, #4
    78d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    78dc:	4700      	bx	r0
    78de:	0000      	.short	0x0000
    78e0:	200014cc 	.word	0x200014cc
    78e4:	20001404 	.word	0x20001404
    78e8:	2000010c 	.word	0x2000010c
    78ec:	b538      	push	{r3, r4, r5, lr}
    78ee:	2803      	cmp	r0, #3
    78f0:	d002      	beq.n	78f8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2d4>
    78f2:	2805      	cmp	r0, #5
    78f4:	d067      	beq.n	79c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a2>
    78f6:	e064      	b.n	79c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    78f8:	20ff      	movs	r0, #255	; 0xff
    78fa:	f88d 0000 	strb.w	r0, [sp]
    78fe:	4669      	mov	r1, sp
    7900:	2003      	movs	r0, #3
    7902:	f000 fad7 	bl	7eb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    7906:	2800      	cmp	r0, #0
    7908:	d05b      	beq.n	79c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    790a:	4c33      	ldr	r4, [pc, #204]	; (79d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b4>)
    790c:	4d33      	ldr	r5, [pc, #204]	; (79dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b8>)
    790e:	7b20      	ldrb	r0, [r4, #12]
    7910:	b3b0      	cbz	r0, 7980 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    7912:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
    7916:	bb98      	cbnz	r0, 7980 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    7918:	f89d 0000 	ldrb.w	r0, [sp]
    791c:	2101      	movs	r1, #1
    791e:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    7922:	7821      	ldrb	r1, [r4, #0]
    7924:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    7928:	28ff      	cmp	r0, #255	; 0xff
    792a:	d011      	beq.n	7950 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x32c>
    792c:	f104 029b 	add.w	r2, r4, #155	; 0x9b
    7930:	1e51      	subs	r1, r2, #1
    7932:	f7fe f80b 	bl	594c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7936:	b130      	cbz	r0, 7946 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x322>
    7938:	f894 009a 	ldrb.w	r0, [r4, #154]	; 0x9a
    793c:	f040 0002 	orr.w	r0, r0, #2
    7940:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    7944:	e012      	b.n	796c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x348>
    7946:	f640 6129 	movw	r1, #3625	; 0xe29
    794a:	202d      	movs	r0, #45	; 0x2d
    794c:	f7fc f91a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7950:	6828      	ldr	r0, [r5, #0]
    7952:	7801      	ldrb	r1, [r0, #0]
    7954:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7958:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    795c:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7960:	f8c4 109b 	str.w	r1, [r4, #155]	; 0x9b
    7964:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7968:	f8a4 009f 	strh.w	r0, [r4, #159]	; 0x9f
    796c:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
    7970:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
    7974:	297f      	cmp	r1, #127	; 0x7f
    7976:	d01f      	beq.n	79b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x394>
    7978:	7001      	strb	r1, [r0, #0]
    797a:	207f      	movs	r0, #127	; 0x7f
    797c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    7980:	6828      	ldr	r0, [r5, #0]
    7982:	2100      	movs	r1, #0
    7984:	8001      	strh	r1, [r0, #0]
    7986:	2104      	movs	r1, #4
    7988:	f008 fe6b 	bl	10662 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    798c:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7990:	6828      	ldr	r0, [r5, #0]
    7992:	f008 fe98 	bl	106c6 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7996:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    799a:	6828      	ldr	r0, [r5, #0]
    799c:	f008 fe9a 	bl	106d4 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    79a0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    79a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    79a4:	6828      	ldr	r0, [r5, #0]
    79a6:	f008 fe9e 	bl	106e6 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    79aa:	490d      	ldr	r1, [pc, #52]	; (79e0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3bc>)
    79ac:	2005      	movs	r0, #5
    79ae:	7008      	strb	r0, [r1, #0]
    79b0:	6828      	ldr	r0, [r5, #0]
    79b2:	f006 f829 	bl	da08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    79b6:	e00c      	b.n	79d2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    79b8:	f640 41cb 	movw	r1, #3275	; 0xccb
    79bc:	202d      	movs	r0, #45	; 0x2d
    79be:	f7fc f8e1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79c2:	2001      	movs	r0, #1
    79c4:	bd38      	pop	{r3, r4, r5, pc}
    79c6:	4807      	ldr	r0, [pc, #28]	; (79e4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c0>)
    79c8:	6800      	ldr	r0, [r0, #0]
    79ca:	b110      	cbz	r0, 79d2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    79cc:	4780      	blx	r0
    79ce:	2800      	cmp	r0, #0
    79d0:	d0f7      	beq.n	79c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    79d2:	2000      	movs	r0, #0
    79d4:	bd38      	pop	{r3, r4, r5, pc}
    79d6:	0000      	.short	0x0000
    79d8:	20001404 	.word	0x20001404
    79dc:	2000010c 	.word	0x2000010c
    79e0:	200014cc 	.word	0x200014cc
    79e4:	2000011c 	.word	0x2000011c
    79e8:	b510      	push	{r4, lr}
    79ea:	b990      	cbnz	r0, 7a12 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    79ec:	2900      	cmp	r1, #0
    79ee:	bf08      	it	eq
    79f0:	bd10      	popeq	{r4, pc}
    79f2:	f000 feed 	bl	87d0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    79f6:	b160      	cbz	r0, 7a12 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    79f8:	4808      	ldr	r0, [pc, #32]	; (7a1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3f8>)
    79fa:	4909      	ldr	r1, [pc, #36]	; (7a20 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3fc>)
    79fc:	6880      	ldr	r0, [r0, #8]
    79fe:	7809      	ldrb	r1, [r1, #0]
    7a00:	6900      	ldr	r0, [r0, #16]
    7a02:	f06f 020f 	mvn.w	r2, #15
    7a06:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7a0a:	5840      	ldr	r0, [r0, r1]
    7a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a10:	4700      	bx	r0
    7a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a16:	f000 bc7b 	b.w	8310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x310>
    7a1a:	0000      	.short	0x0000
    7a1c:	2000010c 	.word	0x2000010c
    7a20:	200014cc 	.word	0x200014cc
    7a24:	b570      	push	{r4, r5, r6, lr}
    7a26:	4c1a      	ldr	r4, [pc, #104]	; (7a90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x46c>)
    7a28:	2500      	movs	r5, #0
    7a2a:	8860      	ldrh	r0, [r4, #2]
    7a2c:	2810      	cmp	r0, #16
    7a2e:	d011      	beq.n	7a54 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x430>
    7a30:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
    7a34:	7bb0      	ldrb	r0, [r6, #14]
    7a36:	b120      	cbz	r0, 7a42 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x41e>
    7a38:	f005 fa4c 	bl	ced4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7a3c:	2040      	movs	r0, #64	; 0x40
    7a3e:	f005 fc05 	bl	d24c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7a42:	4814      	ldr	r0, [pc, #80]	; (7a94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x470>)
    7a44:	6800      	ldr	r0, [r0, #0]
    7a46:	f005 ffdf 	bl	da08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7a4a:	78a0      	ldrb	r0, [r4, #2]
    7a4c:	f010 0f04 	tst.w	r0, #4
    7a50:	d005      	beq.n	7a5e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x43a>
    7a52:	e011      	b.n	7a78 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x454>
    7a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a58:	2001      	movs	r0, #1
    7a5a:	f7ff bdeb 	b.w	7634 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    7a5e:	7c20      	ldrb	r0, [r4, #16]
    7a60:	2801      	cmp	r0, #1
    7a62:	bf14      	ite	ne
    7a64:	2803      	cmpne	r0, #3
    7a66:	2510      	moveq	r5, #16
    7a68:	f045 020e 	orr.w	r2, r5, #14
    7a6c:	f04f 0100 	mov.w	r1, #0
    7a70:	7923      	ldrb	r3, [r4, #4]
    7a72:	4608      	mov	r0, r1
    7a74:	f006 f9a8 	bl	ddc8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7a78:	7b20      	ldrb	r0, [r4, #12]
    7a7a:	2800      	cmp	r0, #0
    7a7c:	bf18      	it	ne
    7a7e:	f006 fa5b 	blne	df38 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    7a82:	2000      	movs	r0, #0
    7a84:	f005 fe2e 	bl	d6e4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7a88:	2002      	movs	r0, #2
    7a8a:	7030      	strb	r0, [r6, #0]
    7a8c:	bd70      	pop	{r4, r5, r6, pc}
    7a8e:	0000      	.short	0x0000
    7a90:	20001404 	.word	0x20001404
    7a94:	2000010c 	.word	0x2000010c
    7a98:	b570      	push	{r4, r5, r6, lr}
    7a9a:	4d1e      	ldr	r5, [pc, #120]	; (7b14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f0>)
    7a9c:	7b28      	ldrb	r0, [r5, #12]
    7a9e:	b150      	cbz	r0, 7ab6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x492>
    7aa0:	f105 0021 	add.w	r0, r5, #33	; 0x21
    7aa4:	f006 fa56 	bl	df54 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7aa8:	2800      	cmp	r0, #0
    7aaa:	bf04      	itt	eq
    7aac:	207f      	moveq	r0, #127	; 0x7f
    7aae:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    7ab2:	f006 fa35 	bl	df20 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7ab6:	4c18      	ldr	r4, [pc, #96]	; (7b18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f4>)
    7ab8:	7ba0      	ldrb	r0, [r4, #14]
    7aba:	b118      	cbz	r0, 7ac4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4a0>
    7abc:	f005 fbb6 	bl	d22c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7ac0:	f005 f9dc 	bl	ce7c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7ac4:	f000 fe84 	bl	87d0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7ac8:	b1a0      	cbz	r0, 7af4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7aca:	8868      	ldrh	r0, [r5, #2]
    7acc:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7ad0:	2900      	cmp	r1, #0
    7ad2:	bf04      	itt	eq
    7ad4:	f3c0 00c0 	ubfxeq	r0, r0, #3, #1
    7ad8:	2800      	cmpeq	r0, #0
    7ada:	d00b      	beq.n	7af4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7adc:	7820      	ldrb	r0, [r4, #0]
    7ade:	2802      	cmp	r0, #2
    7ae0:	bf1c      	itt	ne
    7ae2:	7820      	ldrbne	r0, [r4, #0]
    7ae4:	2803      	cmpne	r0, #3
    7ae6:	d009      	beq.n	7afc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d8>
    7ae8:	f640 21b5 	movw	r1, #2741	; 0xab5
    7aec:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7af0:	f7fc f848 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7af8:	f000 bc0a 	b.w	8310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x310>
    7afc:	4807      	ldr	r0, [pc, #28]	; (7b1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f8>)
    7afe:	7821      	ldrb	r1, [r4, #0]
    7b00:	6880      	ldr	r0, [r0, #8]
    7b02:	68c0      	ldr	r0, [r0, #12]
    7b04:	f06f 0207 	mvn.w	r2, #7
    7b08:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7b0c:	5840      	ldr	r0, [r0, r1]
    7b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b12:	4700      	bx	r0
    7b14:	20001404 	.word	0x20001404
    7b18:	200014cc 	.word	0x200014cc
    7b1c:	2000010c 	.word	0x2000010c

00007b20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b24:	4ea1      	ldr	r6, [pc, #644]	; (7dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28c>)
    7b26:	b087      	sub	sp, #28
    7b28:	7830      	ldrb	r0, [r6, #0]
    7b2a:	2800      	cmp	r0, #0
    7b2c:	d17d      	bne.n	7c2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    7b2e:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    7b32:	7820      	ldrb	r0, [r4, #0]
    7b34:	28ff      	cmp	r0, #255	; 0xff
    7b36:	d078      	beq.n	7c2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    7b38:	2500      	movs	r5, #0
    7b3a:	81b5      	strh	r5, [r6, #12]
    7b3c:	6075      	str	r5, [r6, #4]
    7b3e:	7075      	strb	r5, [r6, #1]
    7b40:	70b5      	strb	r5, [r6, #2]
    7b42:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    7b46:	4628      	mov	r0, r5
    7b48:	f005 fe70 	bl	d82c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    7b4c:	4898      	ldr	r0, [pc, #608]	; (7db0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    7b4e:	af01      	add	r7, sp, #4
    7b50:	f100 010c 	add.w	r1, r0, #12
    7b54:	f8df 825c 	ldr.w	r8, [pc, #604]	; 7db4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>
    7b58:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    7b5c:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    7b60:	69c0      	ldr	r0, [r0, #28]
    7b62:	9005      	str	r0, [sp, #20]
    7b64:	f8d8 0008 	ldr.w	r0, [r8, #8]
    7b68:	6840      	ldr	r0, [r0, #4]
    7b6a:	9004      	str	r0, [sp, #16]
    7b6c:	a801      	add	r0, sp, #4
    7b6e:	f005 fd79 	bl	d664 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7b72:	f005 feab 	bl	d8cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7b76:	f005 fb59 	bl	d22c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7b7a:	f005 f97f 	bl	ce7c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7b7e:	488e      	ldr	r0, [pc, #568]	; (7db8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    7b80:	f006 fa12 	bl	dfa8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7b84:	488d      	ldr	r0, [pc, #564]	; (7dbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>)
    7b86:	f006 fa1b 	bl	dfc0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7b8a:	2000      	movs	r0, #0
    7b8c:	f7fb fec4 	bl	3918 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    7b90:	f104 0018 	add.w	r0, r4, #24
    7b94:	f008 fff7 	bl	10b86 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7b98:	f104 0018 	add.w	r0, r4, #24
    7b9c:	f008 ff83 	bl	10aa6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7ba0:	f006 fa60 	bl	e064 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7ba4:	7921      	ldrb	r1, [r4, #4]
    7ba6:	2025      	movs	r0, #37	; 0x25
    7ba8:	f006 fa3e 	bl	e028 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7bac:	f994 000f 	ldrsb.w	r0, [r4, #15]
    7bb0:	f005 ff24 	bl	d9fc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7bb4:	7921      	ldrb	r1, [r4, #4]
    7bb6:	2000      	movs	r0, #0
    7bb8:	f005 fbee 	bl	d398 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7bbc:	2701      	movs	r7, #1
    7bbe:	60b0      	str	r0, [r6, #8]
    7bc0:	2800      	cmp	r0, #0
    7bc2:	bf08      	it	eq
    7bc4:	7037      	strbeq	r7, [r6, #0]
    7bc6:	f000 80ed 	beq.w	7da4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    7bca:	210f      	movs	r1, #15
    7bcc:	2005      	movs	r0, #5
    7bce:	f005 fb6b 	bl	d2a8 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    7bd2:	7d20      	ldrb	r0, [r4, #20]
    7bd4:	2800      	cmp	r0, #0
    7bd6:	bf01      	itttt	eq
    7bd8:	7ca0      	ldrbeq	r0, [r4, #18]
    7bda:	2800      	cmpeq	r0, #0
    7bdc:	78a0      	ldrbeq	r0, [r4, #2]
    7bde:	f010 0f04 	tsteq.w	r0, #4
    7be2:	d06b      	beq.n	7cbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    7be4:	f006 fdbb 	bl	e75e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7be8:	4681      	mov	r9, r0
    7bea:	4649      	mov	r1, r9
    7bec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7bee:	f7f9 fc47 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7bf2:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 7dc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>
    7bf6:	4682      	mov	sl, r0
    7bf8:	fb90 f0fb 	sdiv	r0, r0, fp
    7bfc:	fb0b a010 	mls	r0, fp, r0, sl
    7c00:	4241      	negs	r1, r0
    7c02:	4648      	mov	r0, r9
    7c04:	f7f9 fc06 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7c08:	63a0      	str	r0, [r4, #56]	; 0x38
    7c0a:	fb9a f0fb 	sdiv	r0, sl, fp
    7c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7c10:	4408      	add	r0, r1
    7c12:	6360      	str	r0, [r4, #52]	; 0x34
    7c14:	f7fe f808 	bl	5c28 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7c1a:	4288      	cmp	r0, r1
    7c1c:	d86a      	bhi.n	7cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7c1e:	e9c4 590d 	strd	r5, r9, [r4, #52]	; 0x34
    7c22:	f04f 0901 	mov.w	r9, #1
    7c26:	7ce0      	ldrb	r0, [r4, #19]
    7c28:	e000      	b.n	7c2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
    7c2a:	e01a      	b.n	7c62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    7c2c:	f7fd fdfe 	bl	582c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7c30:	4682      	mov	sl, r0
    7c32:	7ca0      	ldrb	r0, [r4, #18]
    7c34:	2800      	cmp	r0, #0
    7c36:	bf18      	it	ne
    7c38:	f1ba 0f00 	cmpne.w	sl, #0
    7c3c:	d003      	beq.n	7c46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x126>
    7c3e:	7ce0      	ldrb	r0, [r4, #19]
    7c40:	f7fd fde8 	bl	5814 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    7c44:	b188      	cbz	r0, 7c6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x14a>
    7c46:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    7c4a:	2800      	cmp	r0, #0
    7c4c:	bf1c      	itt	ne
    7c4e:	7d20      	ldrbne	r0, [r4, #20]
    7c50:	2800      	cmpne	r0, #0
    7c52:	d022      	beq.n	7c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7c54:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7c58:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7c5c:	2801      	cmp	r0, #1
    7c5e:	d012      	beq.n	7c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    7c60:	e016      	b.n	7c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7c62:	b007      	add	sp, #28
    7c64:	200c      	movs	r0, #12
    7c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c6a:	463a      	mov	r2, r7
    7c6c:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    7c70:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7c74:	4650      	mov	r0, sl
    7c76:	f008 f87a 	bl	fd6e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7c7a:	7ce1      	ldrb	r1, [r4, #19]
    7c7c:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7c80:	f7fd fde0 	bl	5844 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    7c84:	e009      	b.n	7c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7c86:	7948      	ldrb	r0, [r1, #5]
    7c88:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    7c8c:	2840      	cmp	r0, #64	; 0x40
    7c8e:	d016      	beq.n	7cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    7c90:	4649      	mov	r1, r9
    7c92:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7c96:	f008 f85a 	bl	fd4e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7c9a:	78a0      	ldrb	r0, [r4, #2]
    7c9c:	f010 0f04 	tst.w	r0, #4
    7ca0:	bf1c      	itt	ne
    7ca2:	7ca0      	ldrbne	r0, [r4, #18]
    7ca4:	2800      	cmpne	r0, #0
    7ca6:	d025      	beq.n	7cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7ca8:	7ce0      	ldrb	r0, [r4, #19]
    7caa:	f7fd fe1d 	bl	58e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7cae:	ea5f 0900 	movs.w	r9, r0
    7cb2:	d01f      	beq.n	7cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7cb4:	2110      	movs	r1, #16
    7cb6:	f7fe fc17 	bl	64e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7cba:	b140      	cbz	r0, 7cce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    7cbc:	e01a      	b.n	7cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7cbe:	f7fd fda5 	bl	580c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7cc2:	463a      	mov	r2, r7
    7cc4:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7cc8:	f008 f851 	bl	fd6e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7ccc:	e7e5      	b.n	7c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7cce:	463a      	mov	r2, r7
    7cd0:	f884 704a 	strb.w	r7, [r4, #74]	; 0x4a
    7cd4:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    7cd8:	4648      	mov	r0, r9
    7cda:	f008 f848 	bl	fd6e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7cde:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    7ce2:	f8d8 0000 	ldr.w	r0, [r8]
    7ce6:	f008 fcde 	bl	106a6 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7cea:	2101      	movs	r1, #1
    7cec:	f8d8 0000 	ldr.w	r0, [r8]
    7cf0:	f008 fce0 	bl	106b4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7cf4:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7cf8:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7cfc:	f006 f948 	bl	df90 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    7d00:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7d04:	b340      	cbz	r0, 7d58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x238>
    7d06:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
    7d0a:	8620      	strh	r0, [r4, #48]	; 0x30
    7d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d0e:	62a0      	str	r0, [r4, #40]	; 0x28
    7d10:	78a0      	ldrb	r0, [r4, #2]
    7d12:	f3c0 1000 	ubfx	r0, r0, #4, #1
    7d16:	b9e8      	cbnz	r0, 7d54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x234>
    7d18:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    7d1c:	2102      	movs	r1, #2
    7d1e:	f3c0 070b 	ubfx	r7, r0, #0, #12
    7d22:	f8ad 7000 	strh.w	r7, [sp]
    7d26:	4668      	mov	r0, sp
    7d28:	f7fc fd2c 	bl	4784 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    7d2c:	b128      	cbz	r0, 7d3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x21a>
    7d2e:	f8bd 0000 	ldrh.w	r0, [sp]
    7d32:	f3c0 000b 	ubfx	r0, r0, #0, #12
    7d36:	42b8      	cmp	r0, r7
    7d38:	d104      	bne.n	7d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x224>
    7d3a:	f8bd 0000 	ldrh.w	r0, [sp]
    7d3e:	1c40      	adds	r0, r0, #1
    7d40:	f8ad 0000 	strh.w	r0, [sp]
    7d44:	f8bd 0000 	ldrh.w	r0, [sp]
    7d48:	f8b4 101f 	ldrh.w	r1, [r4, #31]
    7d4c:	f360 010b 	bfi	r1, r0, #0, #12
    7d50:	f8a4 101f 	strh.w	r1, [r4, #31]
    7d54:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    7d58:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7d5c:	b130      	cbz	r0, 7d6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    7d5e:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    7d62:	8660      	strh	r0, [r4, #50]	; 0x32
    7d64:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7d66:	62e0      	str	r0, [r4, #44]	; 0x2c
    7d68:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    7d6c:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    7d70:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7d72:	f3c0 000b 	ubfx	r0, r0, #0, #12
    7d76:	fa50 f081 	uxtab	r0, r0, r1
    7d7a:	7fa1      	ldrb	r1, [r4, #30]
    7d7c:	4b11      	ldr	r3, [pc, #68]	; (7dc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a4>)
    7d7e:	4408      	add	r0, r1
    7d80:	461a      	mov	r2, r3
    7d82:	2100      	movs	r1, #0
    7d84:	fbe0 2103 	umlal	r2, r1, r0, r3
    7d88:	0909      	lsrs	r1, r1, #4
    7d8a:	f06f 0224 	mvn.w	r2, #36	; 0x24
    7d8e:	fb01 0002 	mla	r0, r1, r2, r0
    7d92:	77a0      	strb	r0, [r4, #30]
    7d94:	f7fe f80a 	bl	5dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7d98:	2103      	movs	r1, #3
    7d9a:	f8d8 0000 	ldr.w	r0, [r8]
    7d9e:	f7fd fd21 	bl	57e4 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7da2:	73b0      	strb	r0, [r6, #14]
    7da4:	b007      	add	sp, #28
    7da6:	2000      	movs	r0, #0
    7da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7dac:	200014cc 	.word	0x200014cc
    7db0:	000086d8 	.word	0x000086d8
    7db4:	2000010c 	.word	0x2000010c
    7db8:	000086e0 	.word	0x000086e0
    7dbc:	000086dd 	.word	0x000086dd
    7dc0:	000f4240 	.word	0x000f4240
    7dc4:	6eb3e453 	.word	0x6eb3e453
    7dc8:	b570      	push	{r4, r5, r6, lr}
    7dca:	4d1b      	ldr	r5, [pc, #108]	; (7e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>)
    7dcc:	7828      	ldrb	r0, [r5, #0]
    7dce:	2800      	cmp	r0, #0
    7dd0:	bf08      	it	eq
    7dd2:	bd70      	popeq	{r4, r5, r6, pc}
    7dd4:	7828      	ldrb	r0, [r5, #0]
    7dd6:	4c19      	ldr	r4, [pc, #100]	; (7e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>)
    7dd8:	2802      	cmp	r0, #2
    7dda:	bf1c      	itt	ne
    7ddc:	7828      	ldrbne	r0, [r5, #0]
    7dde:	2803      	cmpne	r0, #3
    7de0:	d112      	bne.n	7e08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7de2:	7b20      	ldrb	r0, [r4, #12]
    7de4:	b150      	cbz	r0, 7dfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    7de6:	f104 0021 	add.w	r0, r4, #33	; 0x21
    7dea:	f006 f8b3 	bl	df54 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7dee:	2800      	cmp	r0, #0
    7df0:	bf04      	itt	eq
    7df2:	207f      	moveq	r0, #127	; 0x7f
    7df4:	f884 0021 	strbeq.w	r0, [r4, #33]	; 0x21
    7df8:	f006 f892 	bl	df20 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7dfc:	7ba8      	ldrb	r0, [r5, #14]
    7dfe:	b118      	cbz	r0, 7e08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7e00:	f005 fa14 	bl	d22c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7e04:	f005 f83a 	bl	ce7c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7e08:	f7fb fd72 	bl	38f0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    7e0c:	f000 fce0 	bl	87d0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7e10:	b168      	cbz	r0, 7e2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    7e12:	78a0      	ldrb	r0, [r4, #2]
    7e14:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7e18:	b920      	cbnz	r0, 7e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7e1a:	f104 0018 	add.w	r0, r4, #24
    7e1e:	f008 fe87 	bl	10b30 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7e22:	b120      	cbz	r0, 7e2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    7e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e28:	2001      	movs	r0, #1
    7e2a:	f7ff bc03 	b.w	7634 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    7e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e32:	f000 ba6d 	b.w	8310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x310>
    7e36:	0000      	.short	0x0000
    7e38:	200014cc 	.word	0x200014cc
    7e3c:	20001404 	.word	0x20001404
    7e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e44:	4b19      	ldr	r3, [pc, #100]	; (7eac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>)
    7e46:	2600      	movs	r6, #0
    7e48:	2701      	movs	r7, #1
    7e4a:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
    7e4e:	781c      	ldrb	r4, [r3, #0]
    7e50:	f893 c00d 	ldrb.w	ip, [r3, #13]
    7e54:	b1b8      	cbz	r0, 7e86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x366>
    7e56:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    7e5a:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
    7e5e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    7e62:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    7e66:	f1bc 0f00 	cmp.w	ip, #0
    7e6a:	bf0c      	ite	eq
    7e6c:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    7e70:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    7e74:	480e      	ldr	r0, [pc, #56]	; (7eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>)
    7e76:	6840      	ldr	r0, [r0, #4]
    7e78:	8800      	ldrh	r0, [r0, #0]
    7e7a:	f7fc fa3b 	bl	42f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e82:	f007 bd72 	b.w	f96a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7e86:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7e8a:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    7e8e:	f8a3 008e 	strh.w	r0, [r3, #142]	; 0x8e
    7e92:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    7e96:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    7e9a:	f1bc 0f00 	cmp.w	ip, #0
    7e9e:	bf14      	ite	ne
    7ea0:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    7ea4:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    7ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7eac:	20001404 	.word	0x20001404
    7eb0:	2000010c 	.word	0x2000010c
    7eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7eb8:	4c43      	ldr	r4, [pc, #268]	; (7fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>)
    7eba:	4680      	mov	r8, r0
    7ebc:	460f      	mov	r7, r1
    7ebe:	8860      	ldrh	r0, [r4, #2]
    7ec0:	f1b8 0f03 	cmp.w	r8, #3
    7ec4:	bf08      	it	eq
    7ec6:	f3c0 0540 	ubfxeq	r5, r0, #1, #1
    7eca:	d008      	beq.n	7ede <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7ecc:	f000 0501 	and.w	r5, r0, #1
    7ed0:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
    7ed4:	2800      	cmp	r0, #0
    7ed6:	bf18      	it	ne
    7ed8:	f04f 0901 	movne.w	r9, #1
    7edc:	d101      	bne.n	7ee2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    7ede:	f04f 0900 	mov.w	r9, #0
    7ee2:	f005 f9db 	bl	d29c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7ee6:	4606      	mov	r6, r0
    7ee8:	f1b8 0f03 	cmp.w	r8, #3
    7eec:	bf0c      	ite	eq
    7eee:	f04f 0802 	moveq.w	r8, #2
    7ef2:	f04f 0801 	movne.w	r8, #1
    7ef6:	ea35 0009 	bics.w	r0, r5, r9
    7efa:	bf08      	it	eq
    7efc:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f00:	4832      	ldr	r0, [pc, #200]	; (7fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ac>)
    7f02:	7b80      	ldrb	r0, [r0, #14]
    7f04:	b138      	cbz	r0, 7f16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f6>
    7f06:	f007 ff6a 	bl	fdde <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7f0a:	7038      	strb	r0, [r7, #0]
    7f0c:	28ff      	cmp	r0, #255	; 0xff
    7f0e:	d002      	beq.n	7f16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f6>
    7f10:	f7fd fd36 	bl	5980 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7f14:	4306      	orrs	r6, r0
    7f16:	4d2e      	ldr	r5, [pc, #184]	; (7fd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>)
    7f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    7f1c:	6828      	ldr	r0, [r5, #0]
    7f1e:	7801      	ldrb	r1, [r0, #0]
    7f20:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7f24:	4291      	cmp	r1, r2
    7f26:	d109      	bne.n	7f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41c>
    7f28:	2206      	movs	r2, #6
    7f2a:	f104 0144 	add.w	r1, r4, #68	; 0x44
    7f2e:	1cc0      	adds	r0, r0, #3
    7f30:	f006 fd6a 	bl	ea08 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7f34:	2800      	cmp	r0, #0
    7f36:	bf08      	it	eq
    7f38:	2001      	moveq	r0, #1
    7f3a:	d000      	beq.n	7f3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41e>
    7f3c:	2000      	movs	r0, #0
    7f3e:	7839      	ldrb	r1, [r7, #0]
    7f40:	29ff      	cmp	r1, #255	; 0xff
    7f42:	d004      	beq.n	7f4e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    7f44:	b9b8      	cbnz	r0, 7f76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    7f46:	7ce0      	ldrb	r0, [r4, #19]
    7f48:	4288      	cmp	r0, r1
    7f4a:	d116      	bne.n	7f7a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    7f4c:	e013      	b.n	7f76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    7f4e:	b1a0      	cbz	r0, 7f7a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    7f50:	6829      	ldr	r1, [r5, #0]
    7f52:	f811 0b03 	ldrb.w	r0, [r1], #3
    7f56:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7f5a:	f7fd fd23 	bl	59a4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7f5e:	4607      	mov	r7, r0
    7f60:	f7fd fe76 	bl	5c50 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    7f64:	b138      	cbz	r0, 7f76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    7f66:	4638      	mov	r0, r7
    7f68:	f7fd fcbe 	bl	58e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7f6c:	b118      	cbz	r0, 7f76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    7f6e:	2110      	movs	r1, #16
    7f70:	f7fe faba 	bl	64e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7f74:	b108      	cbz	r0, 7f7a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    7f76:	2001      	movs	r0, #1
    7f78:	e000      	b.n	7f7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
    7f7a:	2000      	movs	r0, #0
    7f7c:	78a1      	ldrb	r1, [r4, #2]
    7f7e:	f011 0f04 	tst.w	r1, #4
    7f82:	d001      	beq.n	7f88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x468>
    7f84:	b1e0      	cbz	r0, 7fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    7f86:	e018      	b.n	7fba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    7f88:	b9be      	cbnz	r6, 7fba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    7f8a:	7c20      	ldrb	r0, [r4, #16]
    7f8c:	2800      	cmp	r0, #0
    7f8e:	bf18      	it	ne
    7f90:	4540      	cmpne	r0, r8
    7f92:	d115      	bne.n	7fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    7f94:	6829      	ldr	r1, [r5, #0]
    7f96:	f811 0b03 	ldrb.w	r0, [r1], #3
    7f9a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7f9e:	f7fd fd01 	bl	59a4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7fa2:	4604      	mov	r4, r0
    7fa4:	f7fd fe54 	bl	5c50 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    7fa8:	b138      	cbz	r0, 7fba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    7faa:	4620      	mov	r0, r4
    7fac:	f7fd fc9c 	bl	58e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7fb0:	b118      	cbz	r0, 7fba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    7fb2:	2110      	movs	r1, #16
    7fb4:	f7fe fa98 	bl	64e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7fb8:	b110      	cbz	r0, 7fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    7fba:	2001      	movs	r0, #1
    7fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fc0:	2000      	movs	r0, #0
    7fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fc6:	0000      	.short	0x0000
    7fc8:	20001404 	.word	0x20001404
    7fcc:	200014cc 	.word	0x200014cc
    7fd0:	2000010c 	.word	0x2000010c
    7fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fd8:	2a02      	cmp	r2, #2
    7fda:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    7fde:	bf0c      	ite	eq
    7fe0:	f44f 7c7a 	moveq.w	ip, #1000	; 0x3e8
    7fe4:	f640 0c34 	movwne	ip, #2100	; 0x834
    7fe8:	f24a 14df 	movw	r4, #41439	; 0xa1df
    7fec:	44a4      	add	ip, r4
    7fee:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    7ff2:	fbbc f6f4 	udiv	r6, ip, r4
    7ff6:	2a08      	cmp	r2, #8
    7ff8:	bf08      	it	eq
    7ffa:	2440      	moveq	r4, #64	; 0x40
    7ffc:	d00a      	beq.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    7ffe:	2a04      	cmp	r2, #4
    8000:	bf08      	it	eq
    8002:	2410      	moveq	r4, #16
    8004:	d006      	beq.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    8006:	2a02      	cmp	r2, #2
    8008:	bf06      	itte	eq
    800a:	2404      	moveq	r4, #4
    800c:	f04f 0c12 	moveq.w	ip, #18
    8010:	2408      	movne	r4, #8
    8012:	d001      	beq.n	8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    8014:	f04f 0c19 	mov.w	ip, #25
    8018:	fb14 f50c 	smulbb	r5, r4, ip
    801c:	2400      	movs	r4, #0
    801e:	272e      	movs	r7, #46	; 0x2e
    8020:	f04f 0c40 	mov.w	ip, #64	; 0x40
    8024:	2a08      	cmp	r2, #8
    8026:	bf04      	itt	eq
    8028:	4667      	moveq	r7, ip
    802a:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    802e:	d009      	beq.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    8030:	2a04      	cmp	r2, #4
    8032:	bf08      	it	eq
    8034:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    8038:	d004      	beq.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    803a:	4627      	mov	r7, r4
    803c:	2a02      	cmp	r2, #2
    803e:	bf0c      	ite	eq
    8040:	2218      	moveq	r2, #24
    8042:	2228      	movne	r2, #40	; 0x28
    8044:	443a      	add	r2, r7
    8046:	442a      	add	r2, r5
    8048:	fb02 6200 	mla	r2, r2, r0, r6
    804c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    8050:	eb05 10c0 	add.w	r0, r5, r0, lsl #7
    8054:	4402      	add	r2, r0
    8056:	48ad      	ldr	r0, [pc, #692]	; (830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>)
    8058:	f101 050b 	add.w	r5, r1, #11
    805c:	f244 2655 	movw	r6, #16981	; 0x4255
    8060:	7880      	ldrb	r0, [r0, #2]
    8062:	fb05 f506 	mul.w	r5, r5, r6
    8066:	f010 0701 	ands.w	r7, r0, #1
    806a:	ea4f 5895 	mov.w	r8, r5, lsr #22
    806e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8072:	f04f 0a10 	mov.w	sl, #16
    8076:	f44f 75c8 	mov.w	r5, #400	; 0x190
    807a:	f44f 76bf 	mov.w	r6, #382	; 0x17e
    807e:	bf08      	it	eq
    8080:	2800      	cmpeq	r0, #0
    8082:	f000 80f5 	beq.w	8270 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x270>
    8086:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    808a:	b1b8      	cbz	r0, 80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    808c:	2b08      	cmp	r3, #8
    808e:	bf04      	itt	eq
    8090:	46ab      	moveq	fp, r5
    8092:	2040      	moveq	r0, #64	; 0x40
    8094:	d00c      	beq.n	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    8096:	2b04      	cmp	r3, #4
    8098:	bf04      	itt	eq
    809a:	46b3      	moveq	fp, r6
    809c:	2010      	moveq	r0, #16
    809e:	d007      	beq.n	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    80a0:	2b02      	cmp	r3, #2
    80a2:	bf07      	ittee	eq
    80a4:	f104 0b18 	addeq.w	fp, r4, #24
    80a8:	2004      	moveq	r0, #4
    80aa:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
    80ae:	2008      	movne	r0, #8
    80b0:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
    80b4:	eb0e 1080 	add.w	r0, lr, r0, lsl #6
    80b8:	4458      	add	r0, fp
    80ba:	e018      	b.n	80ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xee>
    80bc:	f1b9 0f00 	cmp.w	r9, #0
    80c0:	d017      	beq.n	80f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf2>
    80c2:	2b08      	cmp	r3, #8
    80c4:	bf04      	itt	eq
    80c6:	46ab      	moveq	fp, r5
    80c8:	2040      	moveq	r0, #64	; 0x40
    80ca:	d00c      	beq.n	80e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    80cc:	2b04      	cmp	r3, #4
    80ce:	bf04      	itt	eq
    80d0:	46b3      	moveq	fp, r6
    80d2:	2010      	moveq	r0, #16
    80d4:	d007      	beq.n	80e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    80d6:	2b02      	cmp	r3, #2
    80d8:	bf07      	ittee	eq
    80da:	f104 0b18 	addeq.w	fp, r4, #24
    80de:	2004      	moveq	r0, #4
    80e0:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
    80e4:	2008      	movne	r0, #8
    80e6:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    80ea:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    80ee:	4410      	add	r0, r2
    80f0:	e020      	b.n	8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>
    80f2:	29ff      	cmp	r1, #255	; 0xff
    80f4:	bf34      	ite	cc
    80f6:	4608      	movcc	r0, r1
    80f8:	20ff      	movcs	r0, #255	; 0xff
    80fa:	f100 0b05 	add.w	fp, r0, #5
    80fe:	2b08      	cmp	r3, #8
    8100:	bf04      	itt	eq
    8102:	4660      	moveq	r0, ip
    8104:	fb0b 2200 	mlaeq	r2, fp, r0, r2
    8108:	d04c      	beq.n	81a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>
    810a:	2b04      	cmp	r3, #4
    810c:	bf04      	itt	eq
    810e:	fb0b 220a 	mlaeq	r2, fp, sl, r2
    8112:	202e      	moveq	r0, #46	; 0x2e
    8114:	d046      	beq.n	81a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>
    8116:	2b02      	cmp	r3, #2
    8118:	bf0c      	ite	eq
    811a:	2004      	moveq	r0, #4
    811c:	2008      	movne	r0, #8
    811e:	fb0b 2200 	mla	r2, fp, r0, r2
    8122:	bf07      	ittee	eq
    8124:	4620      	moveq	r0, r4
    8126:	f04f 0b18 	moveq.w	fp, #24
    812a:	2000      	movne	r0, #0
    812c:	f04f 0b28 	movne.w	fp, #40	; 0x28
    8130:	4458      	add	r0, fp
    8132:	4410      	add	r0, r2
    8134:	309c      	adds	r0, #156	; 0x9c
    8136:	2b08      	cmp	r3, #8
    8138:	bf04      	itt	eq
    813a:	462a      	moveq	r2, r5
    813c:	f04f 0b40 	moveq.w	fp, #64	; 0x40
    8140:	d00f      	beq.n	8162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x162>
    8142:	2b04      	cmp	r3, #4
    8144:	bf04      	itt	eq
    8146:	4632      	moveq	r2, r6
    8148:	f04f 0b10 	moveq.w	fp, #16
    814c:	d009      	beq.n	8162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x162>
    814e:	2b02      	cmp	r3, #2
    8150:	bf07      	ittee	eq
    8152:	f104 0218 	addeq.w	r2, r4, #24
    8156:	f04f 0b04 	moveq.w	fp, #4
    815a:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    815e:	f04f 0b08 	movne.w	fp, #8
    8162:	ebcb 0bcb 	rsb	fp, fp, fp, lsl #3
    8166:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    816a:	eb02 024b 	add.w	r2, r2, fp, lsl #1
    816e:	4410      	add	r0, r2
    8170:	3098      	adds	r0, #152	; 0x98
    8172:	b1d7      	cbz	r7, 81aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa>
    8174:	2b08      	cmp	r3, #8
    8176:	bf08      	it	eq
    8178:	2140      	moveq	r1, #64	; 0x40
    817a:	d00c      	beq.n	8196 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196>
    817c:	2b04      	cmp	r3, #4
    817e:	bf04      	itt	eq
    8180:	4635      	moveq	r5, r6
    8182:	2110      	moveq	r1, #16
    8184:	d007      	beq.n	8196 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196>
    8186:	2b02      	cmp	r3, #2
    8188:	bf07      	ittee	eq
    818a:	f104 0518 	addeq.w	r5, r4, #24
    818e:	2104      	moveq	r1, #4
    8190:	f104 0528 	addne.w	r5, r4, #40	; 0x28
    8194:	2108      	movne	r1, #8
    8196:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    819a:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    819e:	4429      	add	r1, r5
    81a0:	4408      	add	r0, r1
    81a2:	e062      	b.n	826a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26a>
    81a4:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    81a8:	e7c2      	b.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    81aa:	f1b9 0f00 	cmp.w	r9, #0
    81ae:	d01b      	beq.n	81e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>
    81b0:	2b08      	cmp	r3, #8
    81b2:	bf04      	itt	eq
    81b4:	462a      	moveq	r2, r5
    81b6:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    81ba:	d00f      	beq.n	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    81bc:	2b04      	cmp	r3, #4
    81be:	bf04      	itt	eq
    81c0:	4632      	moveq	r2, r6
    81c2:	f04f 0c10 	moveq.w	ip, #16
    81c6:	d009      	beq.n	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    81c8:	2b02      	cmp	r3, #2
    81ca:	bf07      	ittee	eq
    81cc:	f104 0218 	addeq.w	r2, r4, #24
    81d0:	f04f 0c04 	moveq.w	ip, #4
    81d4:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    81d8:	f04f 0c08 	movne.w	ip, #8
    81dc:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    81e0:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    81e4:	4410      	add	r0, r2
    81e6:	e020      	b.n	822a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22a>
    81e8:	29ff      	cmp	r1, #255	; 0xff
    81ea:	bf34      	ite	cc
    81ec:	460a      	movcc	r2, r1
    81ee:	22ff      	movcs	r2, #255	; 0xff
    81f0:	1d52      	adds	r2, r2, #5
    81f2:	2b08      	cmp	r3, #8
    81f4:	bf08      	it	eq
    81f6:	fb02 000c 	mlaeq	r0, r2, ip, r0
    81fa:	d01f      	beq.n	823c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>
    81fc:	2b04      	cmp	r3, #4
    81fe:	bf04      	itt	eq
    8200:	fb02 000a 	mlaeq	r0, r2, sl, r0
    8204:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    8208:	d018      	beq.n	823c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>
    820a:	2b02      	cmp	r3, #2
    820c:	bf0c      	ite	eq
    820e:	f04f 0c04 	moveq.w	ip, #4
    8212:	f04f 0c08 	movne.w	ip, #8
    8216:	fb02 000c 	mla	r0, r2, ip, r0
    821a:	bf07      	ittee	eq
    821c:	46a4      	moveq	ip, r4
    821e:	2218      	moveq	r2, #24
    8220:	f04f 0c00 	movne.w	ip, #0
    8224:	2228      	movne	r2, #40	; 0x28
    8226:	4462      	add	r2, ip
    8228:	4410      	add	r0, r2
    822a:	29eb      	cmp	r1, #235	; 0xeb
    822c:	d91d      	bls.n	826a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26a>
    822e:	2b08      	cmp	r3, #8
    8230:	d00a      	beq.n	8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>
    8232:	2b04      	cmp	r3, #4
    8234:	d005      	beq.n	8242 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x242>
    8236:	2b02      	cmp	r3, #2
    8238:	d008      	beq.n	824c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    823a:	e00b      	b.n	8254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x254>
    823c:	f44f 72a8 	mov.w	r2, #336	; 0x150
    8240:	e7f1      	b.n	8226 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x226>
    8242:	4635      	mov	r5, r6
    8244:	2110      	movs	r1, #16
    8246:	e008      	b.n	825a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25a>
    8248:	2140      	movs	r1, #64	; 0x40
    824a:	e006      	b.n	825a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25a>
    824c:	f104 0518 	add.w	r5, r4, #24
    8250:	2104      	movs	r1, #4
    8252:	e002      	b.n	825a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25a>
    8254:	f104 0528 	add.w	r5, r4, #40	; 0x28
    8258:	2108      	movs	r1, #8
    825a:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    825e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    8262:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    8266:	fb08 0001 	mla	r0, r8, r1, r0
    826a:	30e9      	adds	r0, #233	; 0xe9
    826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8270:	f502 70a5 	add.w	r0, r2, #330	; 0x14a
    8274:	f1b9 0f00 	cmp.w	r9, #0
    8278:	d01b      	beq.n	82b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b2>
    827a:	2b08      	cmp	r3, #8
    827c:	bf04      	itt	eq
    827e:	462a      	moveq	r2, r5
    8280:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    8284:	d00f      	beq.n	82a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a6>
    8286:	2b04      	cmp	r3, #4
    8288:	bf04      	itt	eq
    828a:	4632      	moveq	r2, r6
    828c:	f04f 0c10 	moveq.w	ip, #16
    8290:	d009      	beq.n	82a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a6>
    8292:	2b02      	cmp	r3, #2
    8294:	bf07      	ittee	eq
    8296:	f104 0218 	addeq.w	r2, r4, #24
    829a:	f04f 0c04 	moveq.w	ip, #4
    829e:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    82a2:	f04f 0c08 	movne.w	ip, #8
    82a6:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    82aa:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    82ae:	4410      	add	r0, r2
    82b0:	e020      	b.n	82f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    82b2:	29ff      	cmp	r1, #255	; 0xff
    82b4:	bf34      	ite	cc
    82b6:	460a      	movcc	r2, r1
    82b8:	22ff      	movcs	r2, #255	; 0xff
    82ba:	1d52      	adds	r2, r2, #5
    82bc:	2b08      	cmp	r3, #8
    82be:	bf08      	it	eq
    82c0:	fb02 000c 	mlaeq	r0, r2, ip, r0
    82c4:	d01f      	beq.n	8306 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x306>
    82c6:	2b04      	cmp	r3, #4
    82c8:	bf04      	itt	eq
    82ca:	fb02 000a 	mlaeq	r0, r2, sl, r0
    82ce:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    82d2:	d018      	beq.n	8306 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x306>
    82d4:	2b02      	cmp	r3, #2
    82d6:	bf0c      	ite	eq
    82d8:	f04f 0c04 	moveq.w	ip, #4
    82dc:	f04f 0c08 	movne.w	ip, #8
    82e0:	fb02 000c 	mla	r0, r2, ip, r0
    82e4:	bf07      	ittee	eq
    82e6:	46a4      	moveq	ip, r4
    82e8:	2218      	moveq	r2, #24
    82ea:	f04f 0c00 	movne.w	ip, #0
    82ee:	2228      	movne	r2, #40	; 0x28
    82f0:	4462      	add	r2, ip
    82f2:	4410      	add	r0, r2
    82f4:	29eb      	cmp	r1, #235	; 0xeb
    82f6:	d9b8      	bls.n	826a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26a>
    82f8:	2b08      	cmp	r3, #8
    82fa:	d0a5      	beq.n	8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>
    82fc:	2b04      	cmp	r3, #4
    82fe:	d0a0      	beq.n	8242 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x242>
    8300:	2b02      	cmp	r3, #2
    8302:	d1a7      	bne.n	8254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x254>
    8304:	e7a2      	b.n	824c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    8306:	f44f 72a8 	mov.w	r2, #336	; 0x150
    830a:	e7f1      	b.n	82f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>
    830c:	20001404 	.word	0x20001404
    8310:	b570      	push	{r4, r5, r6, lr}
    8312:	4c1c      	ldr	r4, [pc, #112]	; (8384 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x384>)
    8314:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    8318:	6a60      	ldr	r0, [r4, #36]	; 0x24
    831a:	1c40      	adds	r0, r0, #1
    831c:	6260      	str	r0, [r4, #36]	; 0x24
    831e:	7ba8      	ldrb	r0, [r5, #14]
    8320:	2600      	movs	r6, #0
    8322:	b120      	cbz	r0, 832e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32e>
    8324:	f004 ff82 	bl	d22c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8328:	f004 fda8 	bl	ce7c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    832c:	73ae      	strb	r6, [r5, #14]
    832e:	702e      	strb	r6, [r5, #0]
    8330:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
    8334:	b120      	cbz	r0, 8340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    8336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    833a:	2001      	movs	r0, #1
    833c:	f000 ba80 	b.w	8840 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8340:	7b60      	ldrb	r0, [r4, #13]
    8342:	b1d0      	cbz	r0, 837a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37a>
    8344:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8346:	4288      	cmp	r0, r1
    8348:	d817      	bhi.n	837a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37a>
    834a:	2001      	movs	r0, #1
    834c:	f000 fa78 	bl	8840 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8350:	78a0      	ldrb	r0, [r4, #2]
    8352:	f010 0f01 	tst.w	r0, #1
    8356:	d008      	beq.n	836a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36a>
    8358:	480b      	ldr	r0, [pc, #44]	; (8388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>)
    835a:	2243      	movs	r2, #67	; 0x43
    835c:	6840      	ldr	r0, [r0, #4]
    835e:	8801      	ldrh	r1, [r0, #0]
    8360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8364:	2001      	movs	r0, #1
    8366:	f7ff bd6b 	b.w	7e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    836a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    836e:	2243      	movs	r2, #67	; 0x43
    8370:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8374:	2000      	movs	r0, #0
    8376:	f7ff bd63 	b.w	7e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    837a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    837e:	2000      	movs	r0, #0
    8380:	f000 ba5e 	b.w	8840 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8384:	20001404 	.word	0x20001404
    8388:	2000010c 	.word	0x2000010c
    838c:	b570      	push	{r4, r5, r6, lr}
    838e:	4c3a      	ldr	r4, [pc, #232]	; (8478 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x478>)
    8390:	4605      	mov	r5, r0
    8392:	460e      	mov	r6, r1
    8394:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    8398:	b120      	cbz	r0, 83a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>
    839a:	f640 21e9 	movw	r1, #2793	; 0xae9
    839e:	202d      	movs	r0, #45	; 0x2d
    83a0:	f7fb fbf0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83a4:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    83a8:	8828      	ldrh	r0, [r5, #0]
    83aa:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    83ae:	2a00      	cmp	r2, #0
    83b0:	bf18      	it	ne
    83b2:	bd70      	popne	{r4, r5, r6, pc}
    83b4:	6868      	ldr	r0, [r5, #4]
    83b6:	f007 fd4c 	bl	fe52 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    83ba:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    83be:	8928      	ldrh	r0, [r5, #8]
    83c0:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    83c4:	8968      	ldrh	r0, [r5, #10]
    83c6:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    83ca:	f895 0184 	ldrb.w	r0, [r5, #388]	; 0x184
    83ce:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    83d2:	7ca0      	ldrb	r0, [r4, #18]
    83d4:	2500      	movs	r5, #0
    83d6:	b150      	cbz	r0, 83ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ee>
    83d8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    83dc:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    83e0:	2901      	cmp	r1, #1
    83e2:	d104      	bne.n	83ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ee>
    83e4:	7940      	ldrb	r0, [r0, #5]
    83e6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    83ea:	2840      	cmp	r0, #64	; 0x40
    83ec:	d02d      	beq.n	844a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44a>
    83ee:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    83f2:	b148      	cbz	r0, 8408 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x408>
    83f4:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    83f8:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    83fc:	2901      	cmp	r1, #1
    83fe:	bf04      	itt	eq
    8400:	7940      	ldrbeq	r0, [r0, #5]
    8402:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    8406:	d020      	beq.n	844a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44a>
    8408:	481c      	ldr	r0, [pc, #112]	; (847c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x47c>)
    840a:	f009 fd99 	bl	11f40 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    840e:	481c      	ldr	r0, [pc, #112]	; (8480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x480>)
    8410:	2eff      	cmp	r6, #255	; 0xff
    8412:	6800      	ldr	r0, [r0, #0]
    8414:	7801      	ldrb	r1, [r0, #0]
    8416:	f3c1 1180 	ubfx	r1, r1, #6, #1
    841a:	f884 106f 	strb.w	r1, [r4, #111]	; 0x6f
    841e:	f8d0 1003 	ldr.w	r1, [r0, #3]
    8422:	d020      	beq.n	8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    8424:	67e1      	str	r1, [r4, #124]	; 0x7c
    8426:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    842a:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    842e:	f104 0270 	add.w	r2, r4, #112	; 0x70
    8432:	1e51      	subs	r1, r2, #1
    8434:	4630      	mov	r0, r6
    8436:	f7fd fa89 	bl	594c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    843a:	b178      	cbz	r0, 845c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45c>
    843c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8440:	f040 0002 	orr.w	r0, r0, #2
    8444:	f884 006f 	strb.w	r0, [r4, #111]	; 0x6f
    8448:	bd70      	pop	{r4, r5, r6, pc}
    844a:	f8d4 003d 	ldr.w	r0, [r4, #61]	; 0x3d
    844e:	f8c4 0076 	str.w	r0, [r4, #118]	; 0x76
    8452:	f8b4 0041 	ldrh.w	r0, [r4, #65]	; 0x41
    8456:	f8a4 007a 	strh.w	r0, [r4, #122]	; 0x7a
    845a:	e7d8      	b.n	840e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40e>
    845c:	f640 310a 	movw	r1, #2826	; 0xb0a
    8460:	202d      	movs	r0, #45	; 0x2d
    8462:	f7fb fb8f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8466:	6721      	str	r1, [r4, #112]	; 0x70
    8468:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    846c:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    8470:	67e5      	str	r5, [r4, #124]	; 0x7c
    8472:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
    8476:	bd70      	pop	{r4, r5, r6, pc}
    8478:	20001404 	.word	0x20001404
    847c:	2000147a 	.word	0x2000147a
    8480:	2000010c 	.word	0x2000010c
    8484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8488:	b084      	sub	sp, #16
    848a:	4c52      	ldr	r4, [pc, #328]	; (85d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d4>)
    848c:	20ff      	movs	r0, #255	; 0xff
    848e:	f88d 0000 	strb.w	r0, [sp]
    8492:	6820      	ldr	r0, [r4, #0]
    8494:	f04f 0901 	mov.w	r9, #1
    8498:	7801      	ldrb	r1, [r0, #0]
    849a:	f3c1 1880 	ubfx	r8, r1, #6, #1
    849e:	f8d0 1003 	ldr.w	r1, [r0, #3]
    84a2:	9101      	str	r1, [sp, #4]
    84a4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    84a8:	f8ad 0008 	strh.w	r0, [sp, #8]
    84ac:	4669      	mov	r1, sp
    84ae:	2005      	movs	r0, #5
    84b0:	f7ff fd00 	bl	7eb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    84b4:	2800      	cmp	r0, #0
    84b6:	d07d      	beq.n	85b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b4>
    84b8:	e9d4 0500 	ldrd	r0, r5, [r4]
    84bc:	4f46      	ldr	r7, [pc, #280]	; (85d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d8>)
    84be:	f8d0 100f 	ldr.w	r1, [r0, #15]
    84c2:	797e      	ldrb	r6, [r7, #5]
    84c4:	f8c5 1012 	str.w	r1, [r5, #18]
    84c8:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    84cc:	82e9      	strh	r1, [r5, #22]
    84ce:	7d41      	ldrb	r1, [r0, #21]
    84d0:	7629      	strb	r1, [r5, #24]
    84d2:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    84d6:	f007 fcb0 	bl	fe3a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    84da:	4682      	mov	sl, r0
    84dc:	6068      	str	r0, [r5, #4]
    84de:	6820      	ldr	r0, [r4, #0]
    84e0:	4651      	mov	r1, sl
    84e2:	7d80      	ldrb	r0, [r0, #22]
    84e4:	f007 fef7 	bl	102d6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    84e8:	8368      	strh	r0, [r5, #26]
    84ea:	6820      	ldr	r0, [r4, #0]
    84ec:	4651      	mov	r1, sl
    84ee:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    84f2:	f007 fee7 	bl	102c4 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    84f6:	61e8      	str	r0, [r5, #28]
    84f8:	6820      	ldr	r0, [r4, #0]
    84fa:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    84fe:	8129      	strh	r1, [r5, #8]
    8500:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    8504:	8169      	strh	r1, [r5, #10]
    8506:	f100 011f 	add.w	r1, r0, #31
    850a:	f105 000c 	add.w	r0, r5, #12
    850e:	f009 fd12 	bl	11f36 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    8512:	6820      	ldr	r0, [r4, #0]
    8514:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    8518:	f001 011f 	and.w	r1, r1, #31
    851c:	f885 1020 	strb.w	r1, [r5, #32]
    8520:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    8524:	0940      	lsrs	r0, r0, #5
    8526:	f885 0184 	strb.w	r0, [r5, #388]	; 0x184
    852a:	f885 6066 	strb.w	r6, [r5, #102]	; 0x66
    852e:	f885 6067 	strb.w	r6, [r5, #103]	; 0x67
    8532:	2101      	movs	r1, #1
    8534:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
    8538:	2100      	movs	r1, #0
    853a:	f105 0028 	add.w	r0, r5, #40	; 0x28
    853e:	f008 fa3e 	bl	109be <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8542:	7bf8      	ldrb	r0, [r7, #15]
    8544:	f885 006a 	strb.w	r0, [r5, #106]	; 0x6a
    8548:	2200      	movs	r2, #0
    854a:	f89d 1000 	ldrb.w	r1, [sp]
    854e:	6860      	ldr	r0, [r4, #4]
    8550:	f7ff ff1c 	bl	838c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>
    8554:	2106      	movs	r1, #6
    8556:	6860      	ldr	r0, [r4, #4]
    8558:	f000 fb86 	bl	8c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    855c:	481f      	ldr	r0, [pc, #124]	; (85dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5dc>)
    855e:	2100      	movs	r1, #0
    8560:	ad01      	add	r5, sp, #4
    8562:	6806      	ldr	r6, [r0, #0]
    8564:	6820      	ldr	r0, [r4, #0]
    8566:	8001      	strh	r1, [r0, #0]
    8568:	2108      	movs	r1, #8
    856a:	f008 f87a 	bl	10662 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    856e:	2100      	movs	r1, #0
    8570:	6820      	ldr	r0, [r4, #0]
    8572:	f008 f815 	bl	105a0 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    8576:	4631      	mov	r1, r6
    8578:	6820      	ldr	r0, [r4, #0]
    857a:	f008 f844 	bl	10606 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    857e:	2306      	movs	r3, #6
    8580:	2200      	movs	r2, #0
    8582:	f107 013d 	add.w	r1, r7, #61	; 0x3d
    8586:	6820      	ldr	r0, [r4, #0]
    8588:	f008 f823 	bl	105d2 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    858c:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
    8590:	6820      	ldr	r0, [r4, #0]
    8592:	f008 f89f 	bl	106d4 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8596:	4641      	mov	r1, r8
    8598:	6820      	ldr	r0, [r4, #0]
    859a:	f008 f88b 	bl	106b4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    859e:	2306      	movs	r3, #6
    85a0:	2201      	movs	r2, #1
    85a2:	4629      	mov	r1, r5
    85a4:	6820      	ldr	r0, [r4, #0]
    85a6:	f008 f814 	bl	105d2 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    85aa:	7979      	ldrb	r1, [r7, #5]
    85ac:	20ff      	movs	r0, #255	; 0xff
    85ae:	f005 fd3b 	bl	e028 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    85b2:	e000      	b.n	85b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b6>
    85b4:	e007      	b.n	85c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c6>
    85b6:	6820      	ldr	r0, [r4, #0]
    85b8:	f005 fa26 	bl	da08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    85bc:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
    85c0:	2009      	movs	r0, #9
    85c2:	7008      	strb	r0, [r1, #0]
    85c4:	e001      	b.n	85ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ca>
    85c6:	f7ff fea3 	bl	8310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x310>
    85ca:	b004      	add	sp, #16
    85cc:	4648      	mov	r0, r9
    85ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85d2:	0000      	.short	0x0000
    85d4:	2000010c 	.word	0x2000010c
    85d8:	20001404 	.word	0x20001404
    85dc:	000086d8 	.word	0x000086d8
    85e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    85e4:	20ff      	movs	r0, #255	; 0xff
    85e6:	f88d 0000 	strb.w	r0, [sp]
    85ea:	2701      	movs	r7, #1
    85ec:	4669      	mov	r1, sp
    85ee:	2005      	movs	r0, #5
    85f0:	f7ff fc60 	bl	7eb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    85f4:	2800      	cmp	r0, #0
    85f6:	bf08      	it	eq
    85f8:	2700      	moveq	r7, #0
    85fa:	d065      	beq.n	86c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c8>
    85fc:	4d34      	ldr	r5, [pc, #208]	; (86d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d0>)
    85fe:	2601      	movs	r6, #1
    8600:	6828      	ldr	r0, [r5, #0]
    8602:	686c      	ldr	r4, [r5, #4]
    8604:	7802      	ldrb	r2, [r0, #0]
    8606:	7c61      	ldrb	r1, [r4, #17]
    8608:	f3c2 1240 	ubfx	r2, r2, #5, #1
    860c:	4011      	ands	r1, r2
    860e:	7461      	strb	r1, [r4, #17]
    8610:	f8d0 100f 	ldr.w	r1, [r0, #15]
    8614:	f8c4 1012 	str.w	r1, [r4, #18]
    8618:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    861c:	82e1      	strh	r1, [r4, #22]
    861e:	7d41      	ldrb	r1, [r0, #21]
    8620:	7621      	strb	r1, [r4, #24]
    8622:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    8626:	f007 fc08 	bl	fe3a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    862a:	4680      	mov	r8, r0
    862c:	6060      	str	r0, [r4, #4]
    862e:	6828      	ldr	r0, [r5, #0]
    8630:	4641      	mov	r1, r8
    8632:	7d80      	ldrb	r0, [r0, #22]
    8634:	f007 fe4f 	bl	102d6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8638:	8360      	strh	r0, [r4, #26]
    863a:	6828      	ldr	r0, [r5, #0]
    863c:	4641      	mov	r1, r8
    863e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    8642:	f007 fe3f 	bl	102c4 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8646:	61e0      	str	r0, [r4, #28]
    8648:	6828      	ldr	r0, [r5, #0]
    864a:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    864e:	8121      	strh	r1, [r4, #8]
    8650:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    8654:	8161      	strh	r1, [r4, #10]
    8656:	f100 011f 	add.w	r1, r0, #31
    865a:	f104 000c 	add.w	r0, r4, #12
    865e:	f009 fc6a 	bl	11f36 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    8662:	6828      	ldr	r0, [r5, #0]
    8664:	46b0      	mov	r8, r6
    8666:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    866a:	f001 011f 	and.w	r1, r1, #31
    866e:	f884 1020 	strb.w	r1, [r4, #32]
    8672:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    8676:	0940      	lsrs	r0, r0, #5
    8678:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    867c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
    8680:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    8684:	f884 8068 	strb.w	r8, [r4, #104]	; 0x68
    8688:	2100      	movs	r1, #0
    868a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    868e:	f008 f996 	bl	109be <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8692:	4e10      	ldr	r6, [pc, #64]	; (86d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d4>)
    8694:	2200      	movs	r2, #0
    8696:	7bf0      	ldrb	r0, [r6, #15]
    8698:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    869c:	f89d 1000 	ldrb.w	r1, [sp]
    86a0:	6868      	ldr	r0, [r5, #4]
    86a2:	f7ff fe73 	bl	838c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>
    86a6:	f886 8068 	strb.w	r8, [r6, #104]	; 0x68
    86aa:	f896 206a 	ldrb.w	r2, [r6, #106]	; 0x6a
    86ae:	f8b6 106c 	ldrh.w	r1, [r6, #108]	; 0x6c
    86b2:	2001      	movs	r0, #1
    86b4:	f7ff fbc4 	bl	7e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    86b8:	f106 01c8 	add.w	r1, r6, #200	; 0xc8
    86bc:	2000      	movs	r0, #0
    86be:	7008      	strb	r0, [r1, #0]
    86c0:	2105      	movs	r1, #5
    86c2:	6868      	ldr	r0, [r5, #4]
    86c4:	f000 fad0 	bl	8c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    86c8:	4638      	mov	r0, r7
    86ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    86ce:	0000      	.short	0x0000
    86d0:	2000010c 	.word	0x2000010c
    86d4:	20001404 	.word	0x20001404
    86d8:	00000003 	.word	0x00000003
    86dc:	55555501 	.word	0x55555501
    86e0:	8e89bed6 	.word	0x8e89bed6
    86e4:	00007a99 	.word	0x00007a99
    86e8:	000077e5 	.word	0x000077e5
    86ec:	000079e9 	.word	0x000079e9
    86f0:	00000000 	.word	0x00000000
    86f4:	00008bc1 	.word	0x00008bc1
    86f8:	000078ed 	.word	0x000078ed
    86fc:	00007a25 	.word	0x00007a25
    8700:	00010a31 	.word	0x00010a31
    8704:	00010a37 	.word	0x00010a37
    8708:	00010a3d 	.word	0x00010a3d
    870c:	00007dc9 	.word	0x00007dc9
    8710:	00010a53 	.word	0x00010a53
    8714:	00008704 	.word	0x00008704
    8718:	000086fc 	.word	0x000086fc
    871c:	000086f8 	.word	0x000086f8

00008720 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8720:	b510      	push	{r4, lr}
    8722:	1e42      	subs	r2, r0, #1
    8724:	2a02      	cmp	r2, #2
    8726:	d903      	bls.n	8730 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    8728:	21ca      	movs	r1, #202	; 0xca
    872a:	202f      	movs	r0, #47	; 0x2f
    872c:	f7fb fa2a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8730:	1e40      	subs	r0, r0, #1
    8732:	2910      	cmp	r1, #16
    8734:	bf02      	ittt	eq
    8736:	490a      	ldreq	r1, [pc, #40]	; (8760 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    8738:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    873c:	bd10      	popeq	{r4, pc}
    873e:	2912      	cmp	r1, #18
    8740:	bf14      	ite	ne
    8742:	2913      	cmpne	r1, #19
    8744:	4907      	ldreq	r1, [pc, #28]	; (8764 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    8746:	d007      	beq.n	8758 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8748:	2915      	cmp	r1, #21
    874a:	bf08      	it	eq
    874c:	4906      	ldreq	r1, [pc, #24]	; (8768 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    874e:	d003      	beq.n	8758 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8750:	21d8      	movs	r1, #216	; 0xd8
    8752:	202f      	movs	r0, #47	; 0x2f
    8754:	f7fb fa16 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8758:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    875c:	bd10      	pop	{r4, pc}
    875e:	0000      	.short	0x0000
    8760:	00010bb0 	.word	0x00010bb0
    8764:	00010baa 	.word	0x00010baa
    8768:	00010bb6 	.word	0x00010bb6

0000876c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    876c:	1e42      	subs	r2, r0, #1
    876e:	b510      	push	{r4, lr}
    8770:	b2d2      	uxtb	r2, r2
    8772:	2a01      	cmp	r2, #1
    8774:	d905      	bls.n	8782 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    8776:	291d      	cmp	r1, #29
    8778:	d01e      	beq.n	87b8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    877a:	21ee      	movs	r1, #238	; 0xee
    877c:	202f      	movs	r0, #47	; 0x2f
    877e:	f7fb fa01 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8782:	2913      	cmp	r1, #19
    8784:	d014      	beq.n	87b0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8786:	dc08      	bgt.n	879a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8788:	2910      	cmp	r1, #16
    878a:	bf02      	ittt	eq
    878c:	480d      	ldreq	r0, [pc, #52]	; (87c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    878e:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    8792:	bd10      	popeq	{r4, pc}
    8794:	2912      	cmp	r1, #18
    8796:	d00b      	beq.n	87b0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8798:	e005      	b.n	87a6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    879a:	2915      	cmp	r1, #21
    879c:	bf08      	it	eq
    879e:	480a      	ldreq	r0, [pc, #40]	; (87c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    87a0:	d007      	beq.n	87b2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    87a2:	291d      	cmp	r1, #29
    87a4:	d008      	beq.n	87b8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    87a6:	f44f 7181 	mov.w	r1, #258	; 0x102
    87aa:	202f      	movs	r0, #47	; 0x2f
    87ac:	f7fb f9ea 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87b0:	4806      	ldr	r0, [pc, #24]	; (87cc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    87b2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    87b6:	bd10      	pop	{r4, pc}
    87b8:	f240 315a 	movw	r1, #858	; 0x35a
    87bc:	fb10 f001 	smulbb	r0, r0, r1
    87c0:	bd10      	pop	{r4, pc}
    87c2:	0000      	.short	0x0000
    87c4:	00010b9e 	.word	0x00010b9e
    87c8:	00010ba6 	.word	0x00010ba6
    87cc:	00010ba2 	.word	0x00010ba2

000087d0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    87d0:	b570      	push	{r4, r5, r6, lr}
    87d2:	4c1a      	ldr	r4, [pc, #104]	; (883c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x6c>)
    87d4:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    87d8:	2800      	cmp	r0, #0
    87da:	bf1c      	itt	ne
    87dc:	2000      	movne	r0, #0
    87de:	bd70      	popne	{r4, r5, r6, pc}
    87e0:	7a20      	ldrb	r0, [r4, #8]
    87e2:	b138      	cbz	r0, 87f4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    87e4:	68e1      	ldr	r1, [r4, #12]
    87e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    87e8:	4288      	cmp	r0, r1
    87ea:	d903      	bls.n	87f4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    87ec:	f7fe fef4 	bl	75d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    87f0:	2000      	movs	r0, #0
    87f2:	bd70      	pop	{r4, r5, r6, pc}
    87f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    87f6:	b1f8      	cbz	r0, 8838 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    87f8:	f7fe fcb6 	bl	7168 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    87fc:	4605      	mov	r5, r0
    87fe:	f7fe fcdb 	bl	71b8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8802:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    8806:	4428      	add	r0, r5
    8808:	f242 7110 	movw	r1, #10000	; 0x2710
    880c:	1846      	adds	r6, r0, r1
    880e:	f005 ffa6 	bl	e75e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8812:	4605      	mov	r5, r0
    8814:	4629      	mov	r1, r5
    8816:	6b20      	ldr	r0, [r4, #48]	; 0x30
    8818:	f7f8 fe32 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    881c:	6325      	str	r5, [r4, #48]	; 0x30
    881e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8820:	1982      	adds	r2, r0, r6
    8822:	4291      	cmp	r1, r2
    8824:	bf24      	itt	cs
    8826:	1a08      	subcs	r0, r1, r0
    8828:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    882a:	d205      	bcs.n	8838 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    882c:	2001      	movs	r0, #1
    882e:	62e0      	str	r0, [r4, #44]	; 0x2c
    8830:	f7fe fed2 	bl	75d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8834:	2000      	movs	r0, #0
    8836:	bd70      	pop	{r4, r5, r6, pc}
    8838:	2001      	movs	r0, #1
    883a:	bd70      	pop	{r4, r5, r6, pc}
    883c:	200014dc 	.word	0x200014dc

00008840 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    8840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8842:	4f25      	ldr	r7, [pc, #148]	; (88d8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x98>)
    8844:	4c25      	ldr	r4, [pc, #148]	; (88dc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x9c>)
    8846:	2500      	movs	r5, #0
    8848:	b130      	cbz	r0, 8858 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x18>
    884a:	2801      	cmp	r0, #1
    884c:	d039      	beq.n	88c2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x82>
    884e:	f240 7153 	movw	r1, #1875	; 0x753
    8852:	2030      	movs	r0, #48	; 0x30
    8854:	f7fb f996 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8858:	7860      	ldrb	r0, [r4, #1]
    885a:	2600      	movs	r6, #0
    885c:	b160      	cbz	r0, 8878 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x38>
    885e:	2101      	movs	r1, #1
    8860:	4668      	mov	r0, sp
    8862:	f7fb ff8f 	bl	4784 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    8866:	f89d 0000 	ldrb.w	r0, [sp]
    886a:	f242 7110 	movw	r1, #10000	; 0x2710
    886e:	0200      	lsls	r0, r0, #8
    8870:	fbb0 f2f1 	udiv	r2, r0, r1
    8874:	fb01 0612 	mls	r6, r1, r2, r0
    8878:	f7fe fc76 	bl	7168 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    887c:	1981      	adds	r1, r0, r6
    887e:	6a20      	ldr	r0, [r4, #32]
    8880:	f7f8 fdc8 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8884:	6220      	str	r0, [r4, #32]
    8886:	7525      	strb	r5, [r4, #20]
    8888:	77e5      	strb	r5, [r4, #31]
    888a:	2003      	movs	r0, #3
    888c:	77a0      	strb	r0, [r4, #30]
    888e:	2064      	movs	r0, #100	; 0x64
    8890:	83a0      	strh	r0, [r4, #28]
    8892:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    8896:	b928      	cbnz	r0, 88a4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x64>
    8898:	7820      	ldrb	r0, [r4, #0]
    889a:	f104 0114 	add.w	r1, r4, #20
    889e:	f7f8 ff0d 	bl	16bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    88a2:	b148      	cbz	r0, 88b8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x78>
    88a4:	84a5      	strh	r5, [r4, #36]	; 0x24
    88a6:	f004 ffdd 	bl	d864 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    88aa:	f7f9 fd7b 	bl	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    88ae:	7978      	ldrb	r0, [r7, #5]
    88b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    88b4:	f7fa bf5a 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    88b8:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
    88bc:	2030      	movs	r0, #48	; 0x30
    88be:	f7fb f961 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88c2:	7225      	strb	r5, [r4, #8]
    88c4:	f004 ffce 	bl	d864 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    88c8:	f7f9 fd6c 	bl	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    88cc:	7978      	ldrb	r0, [r7, #5]
    88ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    88d2:	f7fa bf4b 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    88d6:	0000      	.short	0x0000
    88d8:	20000120 	.word	0x20000120
    88dc:	200014dc 	.word	0x200014dc

000088e0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    88e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88e4:	4d48      	ldr	r5, [pc, #288]	; (8a08 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    88e6:	4606      	mov	r6, r0
    88e8:	460f      	mov	r7, r1
    88ea:	7c28      	ldrb	r0, [r5, #16]
    88ec:	2800      	cmp	r0, #0
    88ee:	d150      	bne.n	8992 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    88f0:	4846      	ldr	r0, [pc, #280]	; (8a0c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    88f2:	f7f9 fd35 	bl	2360 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    88f6:	2820      	cmp	r0, #32
    88f8:	d04b      	beq.n	8992 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    88fa:	2400      	movs	r4, #0
    88fc:	602c      	str	r4, [r5, #0]
    88fe:	606c      	str	r4, [r5, #4]
    8900:	60ac      	str	r4, [r5, #8]
    8902:	60ec      	str	r4, [r5, #12]
    8904:	612c      	str	r4, [r5, #16]
    8906:	616c      	str	r4, [r5, #20]
    8908:	61ac      	str	r4, [r5, #24]
    890a:	61ec      	str	r4, [r5, #28]
    890c:	622c      	str	r4, [r5, #32]
    890e:	626c      	str	r4, [r5, #36]	; 0x24
    8910:	62ac      	str	r4, [r5, #40]	; 0x28
    8912:	62ec      	str	r4, [r5, #44]	; 0x2c
    8914:	632c      	str	r4, [r5, #48]	; 0x30
    8916:	636c      	str	r4, [r5, #52]	; 0x34
    8918:	63ac      	str	r4, [r5, #56]	; 0x38
    891a:	7028      	strb	r0, [r5, #0]
    891c:	f04f 0803 	mov.w	r8, #3
    8920:	606e      	str	r6, [r5, #4]
    8922:	f885 8010 	strb.w	r8, [r5, #16]
    8926:	b15e      	cbz	r6, 8940 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x60>
    8928:	2101      	movs	r1, #1
    892a:	f506 7098 	add.w	r0, r6, #304	; 0x130
    892e:	f7fb ff3f 	bl	47b0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    8932:	f896 0130 	ldrb.w	r0, [r6, #304]	; 0x130
    8936:	f000 0007 	and.w	r0, r0, #7
    893a:	1c40      	adds	r0, r0, #1
    893c:	f886 0130 	strb.w	r0, [r6, #304]	; 0x130
    8940:	2064      	movs	r0, #100	; 0x64
    8942:	83a8      	strh	r0, [r5, #28]
    8944:	f885 801e 	strb.w	r8, [r5, #30]
    8948:	77ec      	strb	r4, [r5, #31]
    894a:	752c      	strb	r4, [r5, #20]
    894c:	f7f8 feac 	bl	16a8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8950:	8ba9      	ldrh	r1, [r5, #28]
    8952:	4288      	cmp	r0, r1
    8954:	bf98      	it	ls
    8956:	4608      	movls	r0, r1
    8958:	f200 60c2 	addw	r0, r0, #1730	; 0x6c2
    895c:	b286      	uxth	r6, r0
    895e:	f7fe fd81 	bl	7464 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8962:	f04f 0801 	mov.w	r8, #1
    8966:	b1f8      	cbz	r0, 89a8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc8>
    8968:	61af      	str	r7, [r5, #24]
    896a:	f005 fef8 	bl	e75e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    896e:	4631      	mov	r1, r6
    8970:	f7f8 fd50 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8974:	6228      	str	r0, [r5, #32]
    8976:	706c      	strb	r4, [r5, #1]
    8978:	f885 8008 	strb.w	r8, [r5, #8]
    897c:	f7fe fd68 	bl	7450 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    8980:	b150      	cbz	r0, 8998 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb8>
    8982:	f7fe fc19 	bl	71b8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8986:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    898a:	1a38      	subs	r0, r7, r0
    898c:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    8990:	e007      	b.n	89a2 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc2>
    8992:	200c      	movs	r0, #12
    8994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8998:	f008 f8fe 	bl	10b98 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    899c:	1a38      	subs	r0, r7, r0
    899e:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
    89a2:	62ec      	str	r4, [r5, #44]	; 0x2c
    89a4:	60e8      	str	r0, [r5, #12]
    89a6:	e01d      	b.n	89e4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x104>
    89a8:	f7fe fc06 	bl	71b8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    89ac:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    89b0:	61a8      	str	r0, [r5, #24]
    89b2:	f885 8001 	strb.w	r8, [r5, #1]
    89b6:	f005 fed2 	bl	e75e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    89ba:	4680      	mov	r8, r0
    89bc:	2101      	movs	r1, #1
    89be:	4668      	mov	r0, sp
    89c0:	f7fb feee 	bl	47a0 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    89c4:	f89d 0000 	ldrb.w	r0, [sp]
    89c8:	f242 7110 	movw	r1, #10000	; 0x2710
    89cc:	0200      	lsls	r0, r0, #8
    89ce:	fbb0 f2f1 	udiv	r2, r0, r1
    89d2:	fb01 0012 	mls	r0, r1, r2, r0
    89d6:	1981      	adds	r1, r0, r6
    89d8:	4640      	mov	r0, r8
    89da:	f7f8 fd1b 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    89de:	6228      	str	r0, [r5, #32]
    89e0:	e9c5 780b 	strd	r7, r8, [r5, #44]	; 0x2c
    89e4:	7828      	ldrb	r0, [r5, #0]
    89e6:	f105 0114 	add.w	r1, r5, #20
    89ea:	f7f8 fe67 	bl	16bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    89ee:	b130      	cbz	r0, 89fe <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11e>
    89f0:	84ac      	strh	r4, [r5, #36]	; 0x24
    89f2:	2000      	movs	r0, #0
    89f4:	f7fe fdda 	bl	75ac <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    89f8:	2000      	movs	r0, #0
    89fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    89fe:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    8a02:	2030      	movs	r0, #48	; 0x30
    8a04:	f7fb f8be 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a08:	200014dc 	.word	0x200014dc
    8a0c:	0000951d 	.word	0x0000951d

00008a10 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    8a10:	b510      	push	{r4, lr}
    8a12:	4c11      	ldr	r4, [pc, #68]	; (8a58 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x48>)
    8a14:	7c20      	ldrb	r0, [r4, #16]
    8a16:	b158      	cbz	r0, 8a30 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x20>
    8a18:	2001      	movs	r0, #1
    8a1a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    8a1e:	f7fe fdc5 	bl	75ac <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8a22:	7c20      	ldrb	r0, [r4, #16]
    8a24:	2803      	cmp	r0, #3
    8a26:	d005      	beq.n	8a34 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x24>
    8a28:	7c60      	ldrb	r0, [r4, #17]
    8a2a:	2800      	cmp	r0, #0
    8a2c:	bf08      	it	eq
    8a2e:	bd10      	popeq	{r4, pc}
    8a30:	200c      	movs	r0, #12
    8a32:	bd10      	pop	{r4, pc}
    8a34:	7820      	ldrb	r0, [r4, #0]
    8a36:	f7f9 fa5d 	bl	1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8a3a:	7820      	ldrb	r0, [r4, #0]
    8a3c:	f7f9 fb88 	bl	2150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8a40:	7820      	ldrb	r0, [r4, #0]
    8a42:	f7f9 fb63 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8a46:	b110      	cbz	r0, 8a4e <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    8a48:	2000      	movs	r0, #0
    8a4a:	7420      	strb	r0, [r4, #16]
    8a4c:	bd10      	pop	{r4, pc}
    8a4e:	f240 11ef 	movw	r1, #495	; 0x1ef
    8a52:	2030      	movs	r0, #48	; 0x30
    8a54:	f7fb f896 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a58:	200014dc 	.word	0x200014dc

00008a5c <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    8a5c:	4801      	ldr	r0, [pc, #4]	; (8a64 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A+0x8>)
    8a5e:	6840      	ldr	r0, [r0, #4]
    8a60:	4770      	bx	lr
    8a62:	0000      	.short	0x0000
    8a64:	200014dc 	.word	0x200014dc

00008a68 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    8a68:	4802      	ldr	r0, [pc, #8]	; (8a74 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xc>)
    8a6a:	7c00      	ldrb	r0, [r0, #16]
    8a6c:	2800      	cmp	r0, #0
    8a6e:	bf18      	it	ne
    8a70:	2001      	movne	r0, #1
    8a72:	4770      	bx	lr
    8a74:	200014dc 	.word	0x200014dc

00008a78 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    8a78:	4906      	ldr	r1, [pc, #24]	; (8a94 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x1c>)
    8a7a:	7148      	strb	r0, [r1, #5]
    8a7c:	2000      	movs	r0, #0
    8a7e:	7088      	strb	r0, [r1, #2]
    8a80:	2201      	movs	r2, #1
    8a82:	700a      	strb	r2, [r1, #0]
    8a84:	7048      	strb	r0, [r1, #1]
    8a86:	710a      	strb	r2, [r1, #4]
    8a88:	70c8      	strb	r0, [r1, #3]
    8a8a:	4903      	ldr	r1, [pc, #12]	; (8a98 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x20>)
    8a8c:	7408      	strb	r0, [r1, #16]
    8a8e:	f000 b805 	b.w	8a9c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    8a92:	0000      	.short	0x0000
    8a94:	20000120 	.word	0x20000120
    8a98:	200014dc 	.word	0x200014dc

00008a9c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    8a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8aa0:	4c3d      	ldr	r4, [pc, #244]	; (8b98 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xfc>)
    8aa2:	b084      	sub	sp, #16
    8aa4:	7c20      	ldrb	r0, [r4, #16]
    8aa6:	2601      	movs	r6, #1
    8aa8:	2500      	movs	r5, #0
    8aaa:	b148      	cbz	r0, 8ac0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8aac:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    8ab0:	2001      	movs	r0, #1
    8ab2:	f7fe fd7b 	bl	75ac <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8ab6:	7c20      	ldrb	r0, [r4, #16]
    8ab8:	2803      	cmp	r0, #3
    8aba:	bf18      	it	ne
    8abc:	7c60      	ldrbne	r0, [r4, #17]
    8abe:	d00b      	beq.n	8ad8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x3c>
    8ac0:	4f36      	ldr	r7, [pc, #216]	; (8b9c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x100>)
    8ac2:	70fe      	strb	r6, [r7, #3]
    8ac4:	4669      	mov	r1, sp
    8ac6:	2001      	movs	r0, #1
    8ac8:	f007 f89d 	bl	fc06 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8acc:	2800      	cmp	r0, #0
    8ace:	bf08      	it	eq
    8ad0:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    8ad4:	d040      	beq.n	8b58 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    8ad6:	e03a      	b.n	8b4e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xb2>
    8ad8:	7820      	ldrb	r0, [r4, #0]
    8ada:	f7f9 fa0b 	bl	1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8ade:	7820      	ldrb	r0, [r4, #0]
    8ae0:	f7f9 fb36 	bl	2150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8ae4:	7820      	ldrb	r0, [r4, #0]
    8ae6:	f7f9 fb11 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8aea:	2800      	cmp	r0, #0
    8aec:	bf18      	it	ne
    8aee:	7425      	strbne	r5, [r4, #16]
    8af0:	d1e6      	bne.n	8ac0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8af2:	f240 11ef 	movw	r1, #495	; 0x1ef
    8af6:	2030      	movs	r0, #48	; 0x30
    8af8:	f7fb f844 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8afc:	9802      	ldr	r0, [sp, #8]
    8afe:	2800      	cmp	r0, #0
    8b00:	bf1c      	itt	ne
    8b02:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    8b06:	2900      	cmpne	r1, #0
    8b08:	d026      	beq.n	8b58 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    8b0a:	8800      	ldrh	r0, [r0, #0]
    8b0c:	42b0      	cmp	r0, r6
    8b0e:	bf18      	it	ne
    8b10:	f04f 0820 	movne.w	r8, #32
    8b14:	d03b      	beq.n	8b8e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8b16:	2101      	movs	r1, #1
    8b18:	f007 f86b 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8b1c:	0004      	movs	r4, r0
    8b1e:	d021      	beq.n	8b64 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xc8>
    8b20:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8b24:	f7f9 fb14 	bl	2150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8b28:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    8b2c:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8b30:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8b34:	f7fd fcca 	bl	64cc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    8b38:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8b3c:	f7f9 fae6 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8b40:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    8b44:	4669      	mov	r1, sp
    8b46:	2001      	movs	r0, #1
    8b48:	f007 f85d 	bl	fc06 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8b4c:	b1d0      	cbz	r0, 8b84 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    8b4e:	f240 111d 	movw	r1, #285	; 0x11d
    8b52:	2030      	movs	r0, #48	; 0x30
    8b54:	f7fb f816 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b58:	4668      	mov	r0, sp
    8b5a:	f7fb fa19 	bl	3f90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8b5e:	2800      	cmp	r0, #0
    8b60:	d0cc      	beq.n	8afc <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x60>
    8b62:	e014      	b.n	8b8e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8b64:	f240 113d 	movw	r1, #317	; 0x13d
    8b68:	2030      	movs	r0, #48	; 0x30
    8b6a:	f7fb f80b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b6e:	9802      	ldr	r0, [sp, #8]
    8b70:	2800      	cmp	r0, #0
    8b72:	bf1c      	itt	ne
    8b74:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    8b78:	2900      	cmpne	r1, #0
    8b7a:	d003      	beq.n	8b84 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    8b7c:	8800      	ldrh	r0, [r0, #0]
    8b7e:	42b0      	cmp	r0, r6
    8b80:	d1c9      	bne.n	8b16 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x7a>
    8b82:	e004      	b.n	8b8e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8b84:	4668      	mov	r0, sp
    8b86:	f7fb fa03 	bl	3f90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8b8a:	2800      	cmp	r0, #0
    8b8c:	d0ef      	beq.n	8b6e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xd2>
    8b8e:	70fd      	strb	r5, [r7, #3]
    8b90:	b004      	add	sp, #16
    8b92:	2000      	movs	r0, #0
    8b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b98:	200014dc 	.word	0x200014dc
    8b9c:	20000120 	.word	0x20000120

00008ba0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    8ba0:	4806      	ldr	r0, [pc, #24]	; (8bbc <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x1c>)
    8ba2:	7c00      	ldrb	r0, [r0, #16]
    8ba4:	2800      	cmp	r0, #0
    8ba6:	bf1c      	itt	ne
    8ba8:	2000      	movne	r0, #0
    8baa:	4770      	bxne	lr
    8bac:	b510      	push	{r4, lr}
    8bae:	2001      	movs	r0, #1
    8bb0:	f007 f80d 	bl	fbce <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    8bb4:	f080 0001 	eor.w	r0, r0, #1
    8bb8:	bd10      	pop	{r4, pc}
    8bba:	0000      	.short	0x0000
    8bbc:	200014dc 	.word	0x200014dc

00008bc0 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    8bc0:	4904      	ldr	r1, [pc, #16]	; (8bd4 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x14>)
    8bc2:	788a      	ldrb	r2, [r1, #2]
    8bc4:	2a02      	cmp	r2, #2
    8bc6:	bf07      	ittee	eq
    8bc8:	6949      	ldreq	r1, [r1, #20]
    8bca:	f8c1 0178 	streq.w	r0, [r1, #376]	; 0x178
    8bce:	4902      	ldrne	r1, [pc, #8]	; (8bd8 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    8bd0:	6288      	strne	r0, [r1, #40]	; 0x28
    8bd2:	4770      	bx	lr
    8bd4:	20000120 	.word	0x20000120
    8bd8:	200014dc 	.word	0x200014dc

00008bdc <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    8bdc:	4901      	ldr	r1, [pc, #4]	; (8be4 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    8bde:	7008      	strb	r0, [r1, #0]
    8be0:	4770      	bx	lr
    8be2:	0000      	.short	0x0000
    8be4:	20000120 	.word	0x20000120

00008be8 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    8be8:	4901      	ldr	r1, [pc, #4]	; (8bf0 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    8bea:	7048      	strb	r0, [r1, #1]
    8bec:	4770      	bx	lr
    8bee:	0000      	.short	0x0000
    8bf0:	20000120 	.word	0x20000120

00008bf4 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    8bf4:	4905      	ldr	r1, [pc, #20]	; (8c0c <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    8bf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8bfa:	fbb1 f1f2 	udiv	r1, r1, r2
    8bfe:	b510      	push	{r4, lr}
    8c00:	f201 210d 	addw	r1, r1, #525	; 0x20d
    8c04:	f007 fef5 	bl	109f2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8c08:	b280      	uxth	r0, r0
    8c0a:	bd10      	pop	{r4, pc}
    8c0c:	0001527d 	.word	0x0001527d

00008c10 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c14:	4c13      	ldr	r4, [pc, #76]	; (8c64 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x54>)
    8c16:	4606      	mov	r6, r0
    8c18:	f8d0 7178 	ldr.w	r7, [r0, #376]	; 0x178
    8c1c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    8c20:	7860      	ldrb	r0, [r4, #1]
    8c22:	b120      	cbz	r0, 8c2e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1e>
    8c24:	463a      	mov	r2, r7
    8c26:	4628      	mov	r0, r5
    8c28:	f007 f924 	bl	fe74 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8c2c:	4605      	mov	r5, r0
    8c2e:	68a0      	ldr	r0, [r4, #8]
    8c30:	4285      	cmp	r5, r0
    8c32:	d005      	beq.n	8c40 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x30>
    8c34:	6921      	ldr	r1, [r4, #16]
    8c36:	1a28      	subs	r0, r5, r0
    8c38:	4408      	add	r0, r1
    8c3a:	6120      	str	r0, [r4, #16]
    8c3c:	f7f9 fc4a 	bl	24d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8c40:	60a5      	str	r5, [r4, #8]
    8c42:	42af      	cmp	r7, r5
    8c44:	d80a      	bhi.n	8c5c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x4c>
    8c46:	6870      	ldr	r0, [r6, #4]
    8c48:	f641 514c 	movw	r1, #7500	; 0x1d4c
    8c4c:	4281      	cmp	r1, r0
    8c4e:	bf9c      	itt	ls
    8c50:	78e0      	ldrbls	r0, [r4, #3]
    8c52:	2800      	cmpls	r0, #0
    8c54:	bf04      	itt	eq
    8c56:	2001      	moveq	r0, #1
    8c58:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c5c:	f04f 0000 	mov.w	r0, #0
    8c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c64:	20000120 	.word	0x20000120

00008c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c6c:	4a67      	ldr	r2, [pc, #412]	; (8e0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a4>)
    8c6e:	2304      	movs	r3, #4
    8c70:	2600      	movs	r6, #0
    8c72:	4d67      	ldr	r5, [pc, #412]	; (8e10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a8>)
    8c74:	6a92      	ldr	r2, [r2, #40]	; 0x28
    8c76:	2908      	cmp	r1, #8
    8c78:	d27e      	bcs.n	8d78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x110>
    8c7a:	e8df f001 	tbb	[pc, r1]
    8c7e:	2c08      	.short	0x2c08
    8c80:	b1311b04 	.word	0xb1311b04
    8c84:	bbb7      	.short	0xbbb7
    8c86:	4604      	mov	r4, r0
    8c88:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    8c8c:	e006      	b.n	8c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34>
    8c8e:	4604      	mov	r4, r0
    8c90:	78e8      	ldrb	r0, [r5, #3]
    8c92:	2800      	cmp	r0, #0
    8c94:	bf18      	it	ne
    8c96:	f884 3140 	strbne.w	r3, [r4, #320]	; 0x140
    8c9a:	d00d      	beq.n	8cb8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x50>
    8c9c:	f004 fde2 	bl	d864 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8ca0:	f7f9 fb80 	bl	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8ca4:	f8a4 6172 	strh.w	r6, [r4, #370]	; 0x172
    8ca8:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    8cac:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    8cb0:	f884 6155 	strb.w	r6, [r4, #341]	; 0x155
    8cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cb8:	9600      	str	r6, [sp, #0]
    8cba:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    8cbe:	2301      	movs	r3, #1
    8cc0:	2200      	movs	r2, #0
    8cc2:	4620      	mov	r0, r4
    8cc4:	f000 f8f8 	bl	8eb8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    8cc8:	2800      	cmp	r0, #0
    8cca:	d0e7      	beq.n	8c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34>
    8ccc:	f240 619e 	movw	r1, #1694	; 0x69e
    8cd0:	2030      	movs	r0, #48	; 0x30
    8cd2:	f7fa ff57 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cd6:	2103      	movs	r1, #3
    8cd8:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
    8cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ce0:	f004 fdb4 	bl	d84c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8ce4:	696c      	ldr	r4, [r5, #20]
    8ce6:	f8c4 017c 	str.w	r0, [r4, #380]	; 0x17c
    8cea:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    8cee:	f009 f88a 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8cf2:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    8cf6:	1a08      	subs	r0, r1, r0
    8cf8:	68a9      	ldr	r1, [r5, #8]
    8cfa:	4401      	add	r1, r0
    8cfc:	60a9      	str	r1, [r5, #8]
    8cfe:	68e9      	ldr	r1, [r5, #12]
    8d00:	4408      	add	r0, r1
    8d02:	60e8      	str	r0, [r5, #12]
    8d04:	696c      	ldr	r4, [r5, #20]
    8d06:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    8d0a:	2800      	cmp	r0, #0
    8d0c:	bf08      	it	eq
    8d0e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d12:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    8d16:	2803      	cmp	r0, #3
    8d18:	bf18      	it	ne
    8d1a:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d1e:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    8d22:	7829      	ldrb	r1, [r5, #0]
    8d24:	290c      	cmp	r1, #12
    8d26:	d206      	bcs.n	8d36 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xce>
    8d28:	483a      	ldr	r0, [pc, #232]	; (8e14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1ac>)
    8d2a:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
    8d2e:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    8d32:	290c      	cmp	r1, #12
    8d34:	d304      	bcc.n	8d40 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd8>
    8d36:	f44f 7147 	mov.w	r1, #796	; 0x31c
    8d3a:	2006      	movs	r0, #6
    8d3c:	f7fa ff22 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d40:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
    8d44:	1898      	adds	r0, r3, r2
    8d46:	b285      	uxth	r5, r0
    8d48:	f502 60c8 	add.w	r0, r2, #1600	; 0x640
    8d4c:	fa1f f980 	uxth.w	r9, r0
    8d50:	4640      	mov	r0, r8
    8d52:	f009 f858 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8d56:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    8d5a:	1a0f      	subs	r7, r1, r0
    8d5c:	4640      	mov	r0, r8
    8d5e:	f009 f860 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8d62:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    8d66:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    8d6a:	fbb0 f0fa 	udiv	r0, r0, sl
    8d6e:	1a3f      	subs	r7, r7, r0
    8d70:	4640      	mov	r0, r8
    8d72:	f009 f848 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8d76:	e000      	b.n	8d7a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x112>
    8d78:	e043      	b.n	8e02 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19a>
    8d7a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    8d7e:	eba1 0b00 	sub.w	fp, r1, r0
    8d82:	4640      	mov	r0, r8
    8d84:	f009 f84d 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8d88:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8d8c:	4408      	add	r0, r1
    8d8e:	fbb0 f0fa 	udiv	r0, r0, sl
    8d92:	ebab 0000 	sub.w	r0, fp, r0
    8d96:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    8d9a:	4369      	muls	r1, r5
    8d9c:	fbb1 f1f9 	udiv	r1, r1, r9
    8da0:	2229      	movs	r2, #41	; 0x29
    8da2:	eb02 0050 	add.w	r0, r2, r0, lsr #1
    8da6:	3160      	adds	r1, #96	; 0x60
    8da8:	eba0 0251 	sub.w	r2, r0, r1, lsr #1
    8dac:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    8db0:	4297      	cmp	r7, r2
    8db2:	d301      	bcc.n	8db8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x150>
    8db4:	4287      	cmp	r7, r0
    8db6:	d901      	bls.n	8dbc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x154>
    8db8:	f7fa fb4a 	bl	3450 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    8dbc:	4629      	mov	r1, r5
    8dbe:	6860      	ldr	r0, [r4, #4]
    8dc0:	f005 fd01 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8dc4:	6861      	ldr	r1, [r4, #4]
    8dc6:	f641 524c 	movw	r2, #7500	; 0x1d4c
    8dca:	4291      	cmp	r1, r2
    8dcc:	bf34      	ite	cc
    8dce:	2102      	movcc	r1, #2
    8dd0:	2100      	movcs	r1, #0
    8dd2:	4408      	add	r0, r1
    8dd4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    8dd8:	f884 6156 	strb.w	r6, [r4, #342]	; 0x156
    8ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8de0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8de4:	2100      	movs	r1, #0
    8de6:	4610      	mov	r0, r2
    8de8:	f000 b816 	b.w	8e18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    8dec:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
    8df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8df4:	f8d0 0178 	ldr.w	r0, [r0, #376]	; 0x178
    8df8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dfc:	2101      	movs	r1, #1
    8dfe:	f000 b80b 	b.w	8e18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    8e02:	f240 7141 	movw	r1, #1857	; 0x741
    8e06:	2030      	movs	r0, #48	; 0x30
    8e08:	f7fa febc 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e0c:	200014dc 	.word	0x200014dc
    8e10:	20000120 	.word	0x20000120
    8e14:	00010cb6 	.word	0x00010cb6
    8e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e1c:	4c24      	ldr	r4, [pc, #144]	; (8eb0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x248>)
    8e1e:	2500      	movs	r5, #0
    8e20:	4680      	mov	r8, r0
    8e22:	7225      	strb	r5, [r4, #8]
    8e24:	6a26      	ldr	r6, [r4, #32]
    8e26:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    8e2a:	7425      	strb	r5, [r4, #16]
    8e2c:	2701      	movs	r7, #1
    8e2e:	7467      	strb	r7, [r4, #17]
    8e30:	4639      	mov	r1, r7
    8e32:	6860      	ldr	r0, [r4, #4]
    8e34:	f7fd fa46 	bl	62c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8e38:	6861      	ldr	r1, [r4, #4]
    8e3a:	f8c1 6168 	str.w	r6, [r1, #360]	; 0x168
    8e3e:	7820      	ldrb	r0, [r4, #0]
    8e40:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    8e44:	f8c1 8178 	str.w	r8, [r1, #376]	; 0x178
    8e48:	f8c1 616c 	str.w	r6, [r1, #364]	; 0x16c
    8e4c:	8809      	ldrh	r1, [r1, #0]
    8e4e:	f7fd fb3d 	bl	64cc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    8e52:	6864      	ldr	r4, [r4, #4]
    8e54:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    8e58:	2300      	movs	r3, #0
    8e5a:	f8a4 5170 	strh.w	r5, [r4, #368]	; 0x170
    8e5e:	461a      	mov	r2, r3
    8e60:	4619      	mov	r1, r3
    8e62:	4620      	mov	r0, r4
    8e64:	9500      	str	r5, [sp, #0]
    8e66:	f000 f827 	bl	8eb8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    8e6a:	b120      	cbz	r0, 8e76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x20e>
    8e6c:	f240 210e 	movw	r1, #526	; 0x20e
    8e70:	2030      	movs	r0, #48	; 0x30
    8e72:	f7fa fe87 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e76:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    8e7a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    8e7e:	f884 7140 	strb.w	r7, [r4, #320]	; 0x140
    8e82:	f8a4 5152 	strh.w	r5, [r4, #338]	; 0x152
    8e86:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
    8e8a:	f884 5155 	strb.w	r5, [r4, #341]	; 0x155
    8e8e:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    8e92:	1e40      	subs	r0, r0, #1
    8e94:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    8e98:	f8a4 5172 	strh.w	r5, [r4, #370]	; 0x172
    8e9c:	f004 fce2 	bl	d864 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8ea0:	f7f9 fa80 	bl	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8ea4:	4803      	ldr	r0, [pc, #12]	; (8eb4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24c>)
    8ea6:	7940      	ldrb	r0, [r0, #5]
    8ea8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8eac:	f7fa bc5e 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8eb0:	200014dc 	.word	0x200014dc
    8eb4:	20000120 	.word	0x20000120
    8eb8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ebc:	b085      	sub	sp, #20
    8ebe:	4604      	mov	r4, r0
    8ec0:	2000      	movs	r0, #0
    8ec2:	9000      	str	r0, [sp, #0]
    8ec4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    8ec8:	469b      	mov	fp, r3
    8eca:	e9cd 3002 	strd	r3, r0, [sp, #8]
    8ece:	48ff      	ldr	r0, [pc, #1020]	; (92cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    8ed0:	4689      	mov	r9, r1
    8ed2:	7800      	ldrb	r0, [r0, #0]
    8ed4:	280c      	cmp	r0, #12
    8ed6:	d279      	bcs.n	8fcc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    8ed8:	49fd      	ldr	r1, [pc, #1012]	; (92d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x668>)
    8eda:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    8ede:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
    8ee2:	280c      	cmp	r0, #12
    8ee4:	d272      	bcs.n	8fcc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    8ee6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8eea:	4410      	add	r0, r2
    8eec:	b285      	uxth	r5, r0
    8eee:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    8ef2:	280d      	cmp	r0, #13
    8ef4:	bf0c      	ite	eq
    8ef6:	2001      	moveq	r0, #1
    8ef8:	2000      	movne	r0, #0
    8efa:	9004      	str	r0, [sp, #16]
    8efc:	9807      	ldr	r0, [sp, #28]
    8efe:	2800      	cmp	r0, #0
    8f00:	bf04      	itt	eq
    8f02:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
    8f06:	2803      	cmpeq	r0, #3
    8f08:	d128      	bne.n	8f5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    8f0a:	9804      	ldr	r0, [sp, #16]
    8f0c:	b330      	cbz	r0, 8f5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    8f0e:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    8f12:	4548      	cmp	r0, r9
    8f14:	d122      	bne.n	8f5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    8f16:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    8f1a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    8f1e:	6860      	ldr	r0, [r4, #4]
    8f20:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    8f24:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    8f28:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    8f2c:	4408      	add	r0, r1
    8f2e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8f32:	4620      	mov	r0, r4
    8f34:	f000 fd16 	bl	9964 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8f38:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    8f3c:	61e0      	str	r0, [r4, #28]
    8f3e:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    8f42:	8360      	strh	r0, [r4, #26]
    8f44:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    8f48:	6060      	str	r0, [r4, #4]
    8f4a:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    8f4e:	8120      	strh	r0, [r4, #8]
    8f50:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    8f54:	8160      	strh	r0, [r4, #10]
    8f56:	2002      	movs	r0, #2
    8f58:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    8f5c:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    8f60:	f504 76ac 	add.w	r6, r4, #344	; 0x158
    8f64:	eba9 0000 	sub.w	r0, r9, r0
    8f68:	fa0f f880 	sxth.w	r8, r0
    8f6c:	f8b4 0170 	ldrh.w	r0, [r4, #368]	; 0x170
    8f70:	eba9 0000 	sub.w	r0, r9, r0
    8f74:	b207      	sxth	r7, r0
    8f76:	2f00      	cmp	r7, #0
    8f78:	da09      	bge.n	8f8e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x326>
    8f7a:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    8f7e:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    8f82:	2001      	movs	r0, #1
    8f84:	9002      	str	r0, [sp, #8]
    8f86:	2000      	movs	r0, #0
    8f88:	4647      	mov	r7, r8
    8f8a:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    8f8e:	48cf      	ldr	r0, [pc, #828]	; (92cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    8f90:	f04f 0a00 	mov.w	sl, #0
    8f94:	7900      	ldrb	r0, [r0, #4]
    8f96:	2800      	cmp	r0, #0
    8f98:	d07e      	beq.n	9098 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    8f9a:	f7fa fa77 	bl	348c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8f9e:	2800      	cmp	r0, #0
    8fa0:	d07a      	beq.n	9098 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    8fa2:	f8b4 012c 	ldrh.w	r0, [r4, #300]	; 0x12c
    8fa6:	2802      	cmp	r0, #2
    8fa8:	d37f      	bcc.n	90aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    8faa:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    8fae:	2802      	cmp	r0, #2
    8fb0:	d07b      	beq.n	90aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    8fb2:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    8fb6:	2800      	cmp	r0, #0
    8fb8:	d177      	bne.n	90aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    8fba:	6860      	ldr	r0, [r4, #4]
    8fbc:	f641 514c 	movw	r1, #7500	; 0x1d4c
    8fc0:	4288      	cmp	r0, r1
    8fc2:	d372      	bcc.n	90aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    8fc4:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    8fc8:	290c      	cmp	r1, #12
    8fca:	d304      	bcc.n	8fd6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x36e>
    8fcc:	f44f 7147 	mov.w	r1, #796	; 0x31c
    8fd0:	2006      	movs	r0, #6
    8fd2:	f7fa fdd7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fd6:	4abe      	ldr	r2, [pc, #760]	; (92d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x668>)
    8fd8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8fdc:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    8fe0:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
    8fe4:	b289      	uxth	r1, r1
    8fe6:	460d      	mov	r5, r1
    8fe8:	2a01      	cmp	r2, #1
    8fea:	d017      	beq.n	901c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    8fec:	f005 fbeb 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8ff0:	4601      	mov	r1, r0
    8ff2:	6862      	ldr	r2, [r4, #4]
    8ff4:	f641 504c 	movw	r0, #7500	; 0x1d4c
    8ff8:	4282      	cmp	r2, r0
    8ffa:	bf2c      	ite	cs
    8ffc:	2000      	movcs	r0, #0
    8ffe:	2002      	movcc	r0, #2
    9000:	4408      	add	r0, r1
    9002:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    9006:	b280      	uxth	r0, r0
    9008:	4442      	add	r2, r8
    900a:	1bd1      	subs	r1, r2, r7
    900c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    9010:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9014:	1a82      	subs	r2, r0, r2
    9016:	fb01 aa02 	mla	sl, r1, r2, sl
    901a:	e043      	b.n	90a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x43c>
    901c:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    9020:	2803      	cmp	r0, #3
    9022:	d056      	beq.n	90d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x46a>
    9024:	48ab      	ldr	r0, [pc, #684]	; (92d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>)
    9026:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    902a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    902e:	f006 fffa 	bl	10026 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    9032:	69e1      	ldr	r1, [r4, #28]
    9034:	4408      	add	r0, r1
    9036:	9001      	str	r0, [sp, #4]
    9038:	4629      	mov	r1, r5
    903a:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    903e:	f005 fbc2 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9042:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    9046:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    904a:	1a82      	subs	r2, r0, r2
    904c:	fb01 aa02 	mla	sl, r1, r2, sl
    9050:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    9054:	4629      	mov	r1, r5
    9056:	9801      	ldr	r0, [sp, #4]
    9058:	f005 fbb5 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    905c:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    9060:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    9064:	1a41      	subs	r1, r0, r1
    9066:	448a      	add	sl, r1
    9068:	4629      	mov	r1, r5
    906a:	6860      	ldr	r0, [r4, #4]
    906c:	f005 fbab 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9070:	4601      	mov	r1, r0
    9072:	6862      	ldr	r2, [r4, #4]
    9074:	f641 504c 	movw	r0, #7500	; 0x1d4c
    9078:	4282      	cmp	r2, r0
    907a:	bf34      	ite	cc
    907c:	2002      	movcc	r0, #2
    907e:	2000      	movcs	r0, #0
    9080:	4408      	add	r0, r1
    9082:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    9086:	4442      	add	r2, r8
    9088:	1bd1      	subs	r1, r2, r7
    908a:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    908e:	1a89      	subs	r1, r1, r2
    9090:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    9094:	1a82      	subs	r2, r0, r2
    9096:	e000      	b.n	909a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x432>
    9098:	e007      	b.n	90aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    909a:	1e49      	subs	r1, r1, #1
    909c:	fb01 aa02 	mla	sl, r1, r2, sl
    90a0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    90a4:	2001      	movs	r0, #1
    90a6:	f884 0156 	strb.w	r0, [r4, #342]	; 0x156
    90aa:	f8cd a004 	str.w	sl, [sp, #4]
    90ae:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    90b2:	f24a 3aa1 	movw	sl, #41889	; 0xa3a1
    90b6:	b190      	cbz	r0, 90de <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x476>
    90b8:	2801      	cmp	r0, #1
    90ba:	f000 80ed 	beq.w	9298 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    90be:	2802      	cmp	r0, #2
    90c0:	d079      	beq.n	91b6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x54e>
    90c2:	2803      	cmp	r0, #3
    90c4:	f000 811b 	beq.w	92fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x696>
    90c8:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    90cc:	2030      	movs	r0, #48	; 0x30
    90ce:	f7fa fd59 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90d2:	69e1      	ldr	r1, [r4, #28]
    90d4:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    90d8:	4408      	add	r0, r1
    90da:	9001      	str	r0, [sp, #4]
    90dc:	e7ac      	b.n	9038 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3d0>
    90de:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    90e2:	2800      	cmp	r0, #0
    90e4:	d062      	beq.n	91ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x544>
    90e6:	487b      	ldr	r0, [pc, #492]	; (92d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>)
    90e8:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    90ec:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    90f0:	f006 ff99 	bl	10026 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    90f4:	4607      	mov	r7, r0
    90f6:	69e0      	ldr	r0, [r4, #28]
    90f8:	4629      	mov	r1, r5
    90fa:	4438      	add	r0, r7
    90fc:	f005 fb63 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9100:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    9104:	4629      	mov	r1, r5
    9106:	6860      	ldr	r0, [r4, #4]
    9108:	f005 fb5d 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    910c:	6862      	ldr	r2, [r4, #4]
    910e:	f641 514c 	movw	r1, #7500	; 0x1d4c
    9112:	428a      	cmp	r2, r1
    9114:	bf2c      	ite	cs
    9116:	2100      	movcs	r1, #0
    9118:	2102      	movcc	r1, #2
    911a:	4408      	add	r0, r1
    911c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9120:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9124:	f008 fe7d 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9128:	f64d 7141 	movw	r1, #57153	; 0xdf41
    912c:	4408      	add	r0, r1
    912e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    9132:	fbb0 f0f5 	udiv	r0, r0, r5
    9136:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    913a:	f44f 71a8 	mov.w	r1, #336	; 0x150
    913e:	4620      	mov	r0, r4
    9140:	f007 fbf3 	bl	1092a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    9144:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    9148:	9000      	str	r0, [sp, #0]
    914a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    914e:	f008 fe68 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9152:	4450      	add	r0, sl
    9154:	fbb0 f0f5 	udiv	r0, r0, r5
    9158:	69e1      	ldr	r1, [r4, #28]
    915a:	9a00      	ldr	r2, [sp, #0]
    915c:	4439      	add	r1, r7
    915e:	1a09      	subs	r1, r1, r0
    9160:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9164:	1a09      	subs	r1, r1, r0
    9166:	4411      	add	r1, r2
    9168:	3920      	subs	r1, #32
    916a:	9100      	str	r1, [sp, #0]
    916c:	0040      	lsls	r0, r0, #1
    916e:	8b61      	ldrh	r1, [r4, #26]
    9170:	3060      	adds	r0, #96	; 0x60
    9172:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    9176:	1847      	adds	r7, r0, r1
    9178:	4640      	mov	r0, r8
    917a:	f008 fe52 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    917e:	4450      	add	r0, sl
    9180:	fbb0 f5f5 	udiv	r5, r0, r5
    9184:	4640      	mov	r0, r8
    9186:	f008 fe3e 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    918a:	4950      	ldr	r1, [pc, #320]	; (92cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    918c:	4428      	add	r0, r5
    918e:	4438      	add	r0, r7
    9190:	6188      	str	r0, [r1, #24]
    9192:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    9196:	9900      	ldr	r1, [sp, #0]
    9198:	1a08      	subs	r0, r1, r0
    919a:	f5b0 7ff5 	cmp.w	r0, #490	; 0x1ea
    919e:	f200 8122 	bhi.w	93e6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    91a2:	f240 41c2 	movw	r1, #1218	; 0x4c2
    91a6:	2030      	movs	r0, #48	; 0x30
    91a8:	f7fa fcec 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91ac:	f240 41a2 	movw	r1, #1186	; 0x4a2
    91b0:	2030      	movs	r0, #48	; 0x30
    91b2:	f7fa fce7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91b6:	69e1      	ldr	r1, [r4, #28]
    91b8:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    91bc:	4408      	add	r0, r1
    91be:	4629      	mov	r1, r5
    91c0:	f005 fb01 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    91c4:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    91c8:	4629      	mov	r1, r5
    91ca:	6860      	ldr	r0, [r4, #4]
    91cc:	f005 fafb 	bl	e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    91d0:	6862      	ldr	r2, [r4, #4]
    91d2:	f641 514c 	movw	r1, #7500	; 0x1d4c
    91d6:	428a      	cmp	r2, r1
    91d8:	bf34      	ite	cc
    91da:	2102      	movcc	r1, #2
    91dc:	2100      	movcs	r1, #0
    91de:	4408      	add	r0, r1
    91e0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    91e4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    91e8:	f008 fe1b 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    91ec:	f64d 7141 	movw	r1, #57153	; 0xdf41
    91f0:	4408      	add	r0, r1
    91f2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    91f6:	fbb0 f0f7 	udiv	r0, r0, r7
    91fa:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    91fe:	f44f 71a8 	mov.w	r1, #336	; 0x150
    9202:	4620      	mov	r0, r4
    9204:	f007 fb91 	bl	1092a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    9208:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    920c:	b9e0      	cbnz	r0, 9248 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5e0>
    920e:	f1bb 0f00 	cmp.w	fp, #0
    9212:	d019      	beq.n	9248 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5e0>
    9214:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    9218:	4628      	mov	r0, r5
    921a:	f008 fe02 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    921e:	4450      	add	r0, sl
    9220:	fbb0 f0f7 	udiv	r0, r0, r7
    9224:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    9228:	69e2      	ldr	r2, [r4, #28]
    922a:	4408      	add	r0, r1
    922c:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    9230:	4411      	add	r1, r2
    9232:	eba1 0800 	sub.w	r8, r1, r0
    9236:	4628      	mov	r0, r5
    9238:	f008 fde5 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    923c:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    9240:	1a08      	subs	r0, r1, r0
    9242:	4440      	add	r0, r8
    9244:	3820      	subs	r0, #32
    9246:	e006      	b.n	9256 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ee>
    9248:	69e1      	ldr	r1, [r4, #28]
    924a:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    924e:	4408      	add	r0, r1
    9250:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    9254:	1a40      	subs	r0, r0, r1
    9256:	9000      	str	r0, [sp, #0]
    9258:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    925c:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    9260:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9264:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    9268:	fb01 0002 	mla	r0, r1, r2, r0
    926c:	0040      	lsls	r0, r0, #1
    926e:	8b61      	ldrh	r1, [r4, #26]
    9270:	3060      	adds	r0, #96	; 0x60
    9272:	1845      	adds	r5, r0, r1
    9274:	4640      	mov	r0, r8
    9276:	f008 fdd4 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    927a:	4450      	add	r0, sl
    927c:	fbb0 f7f7 	udiv	r7, r0, r7
    9280:	4640      	mov	r0, r8
    9282:	f008 fdc0 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9286:	4911      	ldr	r1, [pc, #68]	; (92cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    9288:	4438      	add	r0, r7
    928a:	4428      	add	r0, r5
    928c:	6188      	str	r0, [r1, #24]
    928e:	2001      	movs	r0, #1
    9290:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    9294:	e0a7      	b.n	93e6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    9296:	bf00      	nop
    9298:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    929c:	6860      	ldr	r0, [r4, #4]
    929e:	1a80      	subs	r0, r0, r2
    92a0:	4378      	muls	r0, r7
    92a2:	9000      	str	r0, [sp, #0]
    92a4:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    92a8:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    92ac:	4440      	add	r0, r8
    92ae:	1a40      	subs	r0, r0, r1
    92b0:	f8d4 c134 	ldr.w	ip, [r4, #308]	; 0x134
    92b4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    92b8:	1e40      	subs	r0, r0, #1
    92ba:	fb0c 3101 	mla	r1, ip, r1, r3
    92be:	fb00 1002 	mla	r0, r0, r2, r1
    92c2:	0040      	lsls	r0, r0, #1
    92c4:	8b61      	ldrh	r1, [r4, #26]
    92c6:	3060      	adds	r0, #96	; 0x60
    92c8:	1845      	adds	r5, r0, r1
    92ca:	e005      	b.n	92d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x670>
    92cc:	20000120 	.word	0x20000120
    92d0:	00010cb6 	.word	0x00010cb6
    92d4:	200014dc 	.word	0x200014dc
    92d8:	f894 7067 	ldrb.w	r7, [r4, #103]	; 0x67
    92dc:	4638      	mov	r0, r7
    92de:	f008 fda0 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    92e2:	eb00 010a 	add.w	r1, r0, sl
    92e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    92ea:	fbb1 f8f0 	udiv	r8, r1, r0
    92ee:	4638      	mov	r0, r7
    92f0:	f008 fd89 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    92f4:	4987      	ldr	r1, [pc, #540]	; (9514 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    92f6:	4440      	add	r0, r8
    92f8:	4428      	add	r0, r5
    92fa:	6188      	str	r0, [r1, #24]
    92fc:	e073      	b.n	93e6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    92fe:	6860      	ldr	r0, [r4, #4]
    9300:	4378      	muls	r0, r7
    9302:	9000      	str	r0, [sp, #0]
    9304:	f1bb 0f00 	cmp.w	fp, #0
    9308:	d007      	beq.n	931a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6b2>
    930a:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    930e:	2900      	cmp	r1, #0
    9310:	bf04      	itt	eq
    9312:	2100      	moveq	r1, #0
    9314:	f884 1157 	strbeq.w	r1, [r4, #343]	; 0x157
    9318:	d003      	beq.n	9322 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    931a:	f894 1157 	ldrb.w	r1, [r4, #343]	; 0x157
    931e:	2900      	cmp	r1, #0
    9320:	d161      	bne.n	93e6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    9322:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    9326:	fb07 0011 	mls	r0, r7, r1, r0
    932a:	9000      	str	r0, [sp, #0]
    932c:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
    9330:	2824      	cmp	r0, #36	; 0x24
    9332:	bf1c      	itt	ne
    9334:	f894 0085 	ldrbne.w	r0, [r4, #133]	; 0x85
    9338:	2824      	cmpne	r0, #36	; 0x24
    933a:	d10b      	bne.n	9354 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ec>
    933c:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    9340:	eba9 0000 	sub.w	r0, r9, r0
    9344:	b200      	sxth	r0, r0
    9346:	2800      	cmp	r0, #0
    9348:	db04      	blt.n	9354 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ec>
    934a:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    934e:	2800      	cmp	r0, #0
    9350:	bf18      	it	ne
    9352:	9003      	strne	r0, [sp, #12]
    9354:	9802      	ldr	r0, [sp, #8]
    9356:	b300      	cbz	r0, 939a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x732>
    9358:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    935c:	b9e8      	cbnz	r0, 939a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x732>
    935e:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    9362:	2800      	cmp	r0, #0
    9364:	bf1c      	itt	ne
    9366:	f8d4 0178 	ldrne.w	r0, [r4, #376]	; 0x178
    936a:	2800      	cmpne	r0, #0
    936c:	d07c      	beq.n	9468 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x800>
    936e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9372:	f008 fd56 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9376:	eb00 010a 	add.w	r1, r0, sl
    937a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    937e:	fbb1 f0f0 	udiv	r0, r1, r0
    9382:	9900      	ldr	r1, [sp, #0]
    9384:	1a0d      	subs	r5, r1, r0
    9386:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    938a:	f008 fd3c 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    938e:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    9392:	1a08      	subs	r0, r1, r0
    9394:	4428      	add	r0, r5
    9396:	3820      	subs	r0, #32
    9398:	9000      	str	r0, [sp, #0]
    939a:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    939e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    93a2:	4440      	add	r0, r8
    93a4:	4348      	muls	r0, r1
    93a6:	0040      	lsls	r0, r0, #1
    93a8:	9f03      	ldr	r7, [sp, #12]
    93aa:	f100 0560 	add.w	r5, r0, #96	; 0x60
    93ae:	4638      	mov	r0, r7
    93b0:	f008 fd37 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    93b4:	eb00 010a 	add.w	r1, r0, sl
    93b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    93bc:	fbb1 f8f0 	udiv	r8, r1, r0
    93c0:	4638      	mov	r0, r7
    93c2:	f008 fd20 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    93c6:	4953      	ldr	r1, [pc, #332]	; (9514 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    93c8:	4440      	add	r0, r8
    93ca:	4428      	add	r0, r5
    93cc:	6188      	str	r0, [r1, #24]
    93ce:	6860      	ldr	r0, [r4, #4]
    93d0:	f641 514c 	movw	r1, #7500	; 0x1d4c
    93d4:	4288      	cmp	r0, r1
    93d6:	d206      	bcs.n	93e6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    93d8:	466b      	mov	r3, sp
    93da:	4a4f      	ldr	r2, [pc, #316]	; (9518 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8b0>)
    93dc:	4629      	mov	r1, r5
    93de:	f006 ff60 	bl	102a2 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>
    93e2:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    93e6:	e9dd 1000 	ldrd	r1, r0, [sp]
    93ea:	1a08      	subs	r0, r1, r0
    93ec:	9000      	str	r0, [sp, #0]
    93ee:	4a49      	ldr	r2, [pc, #292]	; (9514 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    93f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    93f4:	6860      	ldr	r0, [r4, #4]
    93f6:	6991      	ldr	r1, [r2, #24]
    93f8:	1ac0      	subs	r0, r0, r3
    93fa:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
    93fe:	61d0      	str	r0, [r2, #28]
    9400:	4281      	cmp	r1, r0
    9402:	bf98      	it	ls
    9404:	4608      	movls	r0, r1
    9406:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    940a:	2000      	movs	r0, #0
    940c:	7030      	strb	r0, [r6, #0]
    940e:	2064      	movs	r0, #100	; 0x64
    9410:	8130      	strh	r0, [r6, #8]
    9412:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    9416:	9900      	ldr	r1, [sp, #0]
    9418:	f7f7 fffc 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    941c:	60f0      	str	r0, [r6, #12]
    941e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    9422:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9424:	4408      	add	r0, r1
    9426:	6070      	str	r0, [r6, #4]
    9428:	68f0      	ldr	r0, [r6, #12]
    942a:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    942e:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
    9432:	f000 facb 	bl	99cc <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>
    9436:	b110      	cbz	r0, 943e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7d6>
    9438:	6870      	ldr	r0, [r6, #4]
    943a:	301e      	adds	r0, #30
    943c:	6070      	str	r0, [r6, #4]
    943e:	2001      	movs	r0, #1
    9440:	72b0      	strb	r0, [r6, #10]
    9442:	f8b4 1100 	ldrh.w	r1, [r4, #256]	; 0x100
    9446:	eba1 0109 	sub.w	r1, r1, r9
    944a:	b209      	sxth	r1, r1
    944c:	2900      	cmp	r1, #0
    944e:	bfc4      	itt	gt
    9450:	2103      	movgt	r1, #3
    9452:	72b1      	strbgt	r1, [r6, #10]
    9454:	9904      	ldr	r1, [sp, #16]
    9456:	b3c9      	cbz	r1, 94cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x864>
    9458:	f1bb 0f00 	cmp.w	fp, #0
    945c:	d027      	beq.n	94ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    945e:	bf00      	nop
    9460:	f8b4 212c 	ldrh.w	r2, [r4, #300]	; 0x12c
    9464:	2a00      	cmp	r2, #0
    9466:	e000      	b.n	946a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x802>
    9468:	e031      	b.n	94ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x866>
    946a:	bf0c      	ite	eq
    946c:	2100      	moveq	r1, #0
    946e:	f8b4 112e 	ldrhne.w	r1, [r4, #302]	; 0x12e
    9472:	f8a4 112e 	strh.w	r1, [r4, #302]	; 0x12e
    9476:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    947a:	1c49      	adds	r1, r1, #1
    947c:	4359      	muls	r1, r3
    947e:	4291      	cmp	r1, r2
    9480:	d215      	bcs.n	94ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    9482:	7ab1      	ldrb	r1, [r6, #10]
    9484:	1e49      	subs	r1, r1, #1
    9486:	2900      	cmp	r1, #0
    9488:	dd11      	ble.n	94ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    948a:	72b0      	strb	r0, [r6, #10]
    948c:	f8b4 012e 	ldrh.w	r0, [r4, #302]	; 0x12e
    9490:	2101      	movs	r1, #1
    9492:	1c40      	adds	r0, r0, #1
    9494:	f8a4 012e 	strh.w	r0, [r4, #302]	; 0x12e
    9498:	f504 7098 	add.w	r0, r4, #304	; 0x130
    949c:	f7fb f972 	bl	4784 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    94a0:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
    94a4:	f000 0007 	and.w	r0, r0, #7
    94a8:	1c40      	adds	r0, r0, #1
    94aa:	f884 0130 	strb.w	r0, [r4, #304]	; 0x130
    94ae:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    94b2:	4631      	mov	r1, r6
    94b4:	f7f8 f902 	bl	16bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    94b8:	b338      	cbz	r0, 950a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a2>
    94ba:	9807      	ldr	r0, [sp, #28]
    94bc:	f080 0001 	eor.w	r0, r0, #1
    94c0:	f884 0154 	strb.w	r0, [r4, #340]	; 0x154
    94c4:	b009      	add	sp, #36	; 0x24
    94c6:	2000      	movs	r0, #0
    94c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94cc:	e004      	b.n	94d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    94ce:	f240 5113 	movw	r1, #1299	; 0x513
    94d2:	2030      	movs	r0, #48	; 0x30
    94d4:	f7fa fb56 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94d8:	f1bb 0f00 	cmp.w	fp, #0
    94dc:	d1c0      	bne.n	9460 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f8>
    94de:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    94e2:	2800      	cmp	r0, #0
    94e4:	d0e3      	beq.n	94ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    94e6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    94ea:	6860      	ldr	r0, [r4, #4]
    94ec:	1a41      	subs	r1, r0, r1
    94ee:	4630      	mov	r0, r6
    94f0:	f006 fe0f 	bl	10112 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    94f4:	0400      	lsls	r0, r0, #16
    94f6:	0c00      	lsrs	r0, r0, #16
    94f8:	d0d9      	beq.n	94ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    94fa:	9912      	ldr	r1, [sp, #72]	; 0x48
    94fc:	2900      	cmp	r1, #0
    94fe:	bf18      	it	ne
    9500:	8008      	strhne	r0, [r1, #0]
    9502:	2001      	movs	r0, #1
    9504:	b009      	add	sp, #36	; 0x24
    9506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    950a:	f240 5175 	movw	r1, #1397	; 0x575
    950e:	2030      	movs	r0, #48	; 0x30
    9510:	f7fa fb38 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9514:	20000120 	.word	0x20000120
    9518:	20000138 	.word	0x20000138
    951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9520:	4cfd      	ldr	r4, [pc, #1012]	; (9918 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcb0>)
    9522:	468a      	mov	sl, r1
    9524:	b083      	sub	sp, #12
    9526:	7c21      	ldrb	r1, [r4, #16]
    9528:	2702      	movs	r7, #2
    952a:	4dfc      	ldr	r5, [pc, #1008]	; (991c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcb4>)
    952c:	2600      	movs	r6, #0
    952e:	f04f 0801 	mov.w	r8, #1
    9532:	f04f 2be0 	mov.w	fp, #3758153728	; 0xe000e000
    9536:	2903      	cmp	r1, #3
    9538:	bf04      	itt	eq
    953a:	7821      	ldrbeq	r1, [r4, #0]
    953c:	4281      	cmpeq	r1, r0
    953e:	f040 80e3 	bne.w	9708 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa0>
    9542:	6860      	ldr	r0, [r4, #4]
    9544:	6168      	str	r0, [r5, #20]
    9546:	7c20      	ldrb	r0, [r4, #16]
    9548:	2803      	cmp	r0, #3
    954a:	d003      	beq.n	9554 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ec>
    954c:	21d2      	movs	r1, #210	; 0xd2
    954e:	2030      	movs	r0, #48	; 0x30
    9550:	f7fa fb18 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9554:	f04f 0903 	mov.w	r9, #3
    9558:	f1ba 0f08 	cmp.w	sl, #8
    955c:	f080 80d0 	bcs.w	9700 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa98>
    9560:	e8df f00a 	tbb	[pc, sl]
    9564:	39391604 	.word	0x39391604
    9568:	c7becef6 	.word	0xc7becef6
    956c:	62a6      	str	r6, [r4, #40]	; 0x28
    956e:	f7fd ffa9 	bl	74c4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    9572:	b120      	cbz	r0, 957e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x916>
    9574:	f240 2169 	movw	r1, #617	; 0x269
    9578:	2030      	movs	r0, #48	; 0x30
    957a:	f7fa fb03 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    957e:	69a0      	ldr	r0, [r4, #24]
    9580:	38f9      	subs	r0, #249	; 0xf9
    9582:	f7f8 ffa7 	bl	24d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9586:	f885 9002 	strb.w	r9, [r5, #2]
    958a:	b003      	add	sp, #12
    958c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9590:	f7fd ff68 	bl	7464 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9594:	b998      	cbnz	r0, 95be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x956>
    9596:	f7fd fe0f 	bl	71b8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    959a:	f500 7586 	add.w	r5, r0, #268	; 0x10c
    959e:	69a0      	ldr	r0, [r4, #24]
    95a0:	42a8      	cmp	r0, r5
    95a2:	d20b      	bcs.n	95bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x954>
    95a4:	1a28      	subs	r0, r5, r0
    95a6:	2104      	movs	r1, #4
    95a8:	f7f7 fe3c 	bl	1224 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    95ac:	b130      	cbz	r0, 95bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x954>
    95ae:	61a5      	str	r5, [r4, #24]
    95b0:	b003      	add	sp, #12
    95b2:	2000      	movs	r0, #0
    95b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95b8:	f7ff b942 	b.w	8840 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    95bc:	61a5      	str	r5, [r4, #24]
    95be:	f7fd ffe7 	bl	7590 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    95c2:	2800      	cmp	r0, #0
    95c4:	bf04      	itt	eq
    95c6:	b003      	addeq	sp, #12
    95c8:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95cc:	f240 219d 	movw	r1, #669	; 0x29d
    95d0:	2030      	movs	r0, #48	; 0x30
    95d2:	f7fa fad7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95d6:	2064      	movs	r0, #100	; 0x64
    95d8:	83a0      	strh	r0, [r4, #28]
    95da:	7526      	strb	r6, [r4, #20]
    95dc:	77e6      	strb	r6, [r4, #31]
    95de:	7a20      	ldrb	r0, [r4, #8]
    95e0:	f04f 0a01 	mov.w	sl, #1
    95e4:	f242 7b10 	movw	fp, #10000	; 0x2710
    95e8:	b158      	cbz	r0, 9602 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x99a>
    95ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    95ee:	6a20      	ldr	r0, [r4, #32]
    95f0:	f7f7 ff10 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    95f4:	6220      	str	r0, [r4, #32]
    95f6:	2100      	movs	r1, #0
    95f8:	f104 0014 	add.w	r0, r4, #20
    95fc:	f006 fd89 	bl	10112 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9600:	e019      	b.n	9636 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ce>
    9602:	2101      	movs	r1, #1
    9604:	4668      	mov	r0, sp
    9606:	f7fb f8cb 	bl	47a0 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    960a:	f89d 0000 	ldrb.w	r0, [sp]
    960e:	0200      	lsls	r0, r0, #8
    9610:	fbb0 f1fb 	udiv	r1, r0, fp
    9614:	fb0b 0a11 	mls	sl, fp, r1, r0
    9618:	f7fd fda6 	bl	7168 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    961c:	4482      	add	sl, r0
    961e:	4651      	mov	r1, sl
    9620:	6a20      	ldr	r0, [r4, #32]
    9622:	f7f7 fef7 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9626:	6220      	str	r0, [r4, #32]
    9628:	4651      	mov	r1, sl
    962a:	f104 0014 	add.w	r0, r4, #20
    962e:	f006 fd70 	bl	10112 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9632:	f100 0a01 	add.w	sl, r0, #1
    9636:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9638:	1c41      	adds	r1, r0, #1
    963a:	290a      	cmp	r1, #10
    963c:	bf3c      	itt	cc
    963e:	4450      	addcc	r0, sl
    9640:	84a0      	strhcc	r0, [r4, #36]	; 0x24
    9642:	6860      	ldr	r0, [r4, #4]
    9644:	b128      	cbz	r0, 9652 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ea>
    9646:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9648:	1c40      	adds	r0, r0, #1
    964a:	280a      	cmp	r0, #10
    964c:	bf28      	it	cs
    964e:	77a7      	strbcs	r7, [r4, #30]
    9650:	d201      	bcs.n	9656 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ee>
    9652:	f884 901e 	strb.w	r9, [r4, #30]
    9656:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    965a:	bb40      	cbnz	r0, 96ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa46>
    965c:	7a20      	ldrb	r0, [r4, #8]
    965e:	b130      	cbz	r0, 966e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa06>
    9660:	68e1      	ldr	r1, [r4, #12]
    9662:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9664:	4288      	cmp	r0, r1
    9666:	d902      	bls.n	966e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa06>
    9668:	f7fd ffb6 	bl	75d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    966c:	e01f      	b.n	96ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa46>
    966e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9670:	b338      	cbz	r0, 96c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa5a>
    9672:	f7fd fd79 	bl	7168 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9676:	4607      	mov	r7, r0
    9678:	f7fd fd9e 	bl	71b8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    967c:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    9680:	4438      	add	r0, r7
    9682:	eb00 090b 	add.w	r9, r0, fp
    9686:	f005 f86a 	bl	e75e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    968a:	4607      	mov	r7, r0
    968c:	4639      	mov	r1, r7
    968e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9690:	f7f7 fef6 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9694:	6327      	str	r7, [r4, #48]	; 0x30
    9696:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9698:	eb00 0209 	add.w	r2, r0, r9
    969c:	4291      	cmp	r1, r2
    969e:	bf24      	itt	cs
    96a0:	1a08      	subcs	r0, r1, r0
    96a2:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    96a4:	d20d      	bcs.n	96c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa5a>
    96a6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    96aa:	f7fd ff95 	bl	75d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    96ae:	7820      	ldrb	r0, [r4, #0]
    96b0:	f7f8 fd2c 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    96b4:	7426      	strb	r6, [r4, #16]
    96b6:	7968      	ldrb	r0, [r5, #5]
    96b8:	b003      	add	sp, #12
    96ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96be:	f7fa b855 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    96c2:	f814 0b14 	ldrb.w	r0, [r4], #20
    96c6:	4621      	mov	r1, r4
    96c8:	f7f7 fff8 	bl	16bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    96cc:	2800      	cmp	r0, #0
    96ce:	bf1c      	itt	ne
    96d0:	b003      	addne	sp, #12
    96d2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96d6:	f240 6174 	movw	r1, #1652	; 0x674
    96da:	2030      	movs	r0, #48	; 0x30
    96dc:	f7fa fa52 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96e0:	f004 fb4e 	bl	dd80 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>
    96e4:	f004 fcc4 	bl	e070 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    96e8:	f8cb 7280 	str.w	r7, [fp, #640]	; 0x280
    96ec:	b003      	add	sp, #12
    96ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96f2:	4608      	mov	r0, r1
    96f4:	f7f8 fd0a 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    96f8:	7426      	strb	r6, [r4, #16]
    96fa:	b003      	add	sp, #12
    96fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9700:	21f3      	movs	r1, #243	; 0xf3
    9702:	2030      	movs	r0, #48	; 0x30
    9704:	f7fa fa3e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9708:	4681      	mov	r9, r0
    970a:	f7fc fed1 	bl	64b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    970e:	2101      	movs	r1, #1
    9710:	f006 fa6f 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9714:	0004      	movs	r4, r0
    9716:	d009      	beq.n	972c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    9718:	4648      	mov	r0, r9
    971a:	f7fc fec9 	bl	64b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    971e:	8821      	ldrh	r1, [r4, #0]
    9720:	4288      	cmp	r0, r1
    9722:	d007      	beq.n	9734 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xacc>
    9724:	219b      	movs	r1, #155	; 0x9b
    9726:	2030      	movs	r0, #48	; 0x30
    9728:	f7fa fa2c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    972c:	219a      	movs	r1, #154	; 0x9a
    972e:	2030      	movs	r0, #48	; 0x30
    9730:	f7fa fa28 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9734:	f04f 0920 	mov.w	r9, #32
    9738:	616c      	str	r4, [r5, #20]
    973a:	f1ba 0f08 	cmp.w	sl, #8
    973e:	f080 810c 	bcs.w	995a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcf2>
    9742:	e8df f00a 	tbb	[pc, sl]
    9746:	5506      	.short	0x5506
    9748:	ed5a5f5f 	.word	0xed5a5f5f
    974c:	ee04      	.short	0xee04
    974e:	e7c7      	b.n	96e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa78>
    9750:	e053      	b.n	97fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb92>
    9752:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
    9756:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
    975a:	f894 1154 	ldrb.w	r1, [r4, #340]	; 0x154
    975e:	4620      	mov	r0, r4
    9760:	b191      	cbz	r1, 9788 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb20>
    9762:	f8b0 2152 	ldrh.w	r2, [r0, #338]	; 0x152
    9766:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    976a:	428a      	cmp	r2, r1
    976c:	d107      	bne.n	977e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb16>
    976e:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
    9772:	1a51      	subs	r1, r2, r1
    9774:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9778:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
    977c:	e00f      	b.n	979e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb36>
    977e:	1a51      	subs	r1, r2, r1
    9780:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9784:	b291      	uxth	r1, r2
    9786:	e008      	b.n	979a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb32>
    9788:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    978c:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
    9790:	1a89      	subs	r1, r1, r2
    9792:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9796:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    979a:	f8a0 1078 	strh.w	r1, [r0, #120]	; 0x78
    979e:	f8d0 1164 	ldr.w	r1, [r0, #356]	; 0x164
    97a2:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    97a6:	f000 f9bd 	bl	9b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    97aa:	f7f7 ff7d 	bl	16a8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    97ae:	2864      	cmp	r0, #100	; 0x64
    97b0:	bf98      	it	ls
    97b2:	2064      	movls	r0, #100	; 0x64
    97b4:	f200 18b9 	addw	r8, r0, #441	; 0x1b9
    97b8:	4620      	mov	r0, r4
    97ba:	f240 221d 	movw	r2, #541	; 0x21d
    97be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    97c0:	f007 f820 	bl	10804 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    97c4:	4606      	mov	r6, r0
    97c6:	4642      	mov	r2, r8
    97c8:	4620      	mov	r0, r4
    97ca:	6861      	ldr	r1, [r4, #4]
    97cc:	f007 f81a 	bl	10804 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    97d0:	4601      	mov	r1, r0
    97d2:	60e8      	str	r0, [r5, #12]
    97d4:	428e      	cmp	r6, r1
    97d6:	bf38      	it	cc
    97d8:	4631      	movcc	r1, r6
    97da:	60a9      	str	r1, [r5, #8]
    97dc:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    97e0:	38bd      	subs	r0, #189	; 0xbd
    97e2:	6128      	str	r0, [r5, #16]
    97e4:	f7f8 fe76 	bl	24d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    97e8:	70af      	strb	r7, [r5, #2]
    97ea:	b003      	add	sp, #12
    97ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97f0:	b003      	add	sp, #12
    97f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97f6:	f000 bb4b 	b.w	9e90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    97fa:	b003      	add	sp, #12
    97fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9800:	f004 bc36 	b.w	e070 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9804:	f004 ffab 	bl	e75e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9808:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
    980c:	4601      	mov	r1, r0
    980e:	4610      	mov	r0, r2
    9810:	f7f7 fe36 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9814:	6861      	ldr	r1, [r4, #4]
    9816:	2900      	cmp	r1, #0
    9818:	bf14      	ite	ne
    981a:	fbb0 f0f1 	udivne	r0, r0, r1
    981e:	4630      	moveq	r0, r6
    9820:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9824:	290d      	cmp	r1, #13
    9826:	d011      	beq.n	984c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe4>
    9828:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    982c:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
    9830:	180b      	adds	r3, r1, r0
    9832:	1ad3      	subs	r3, r2, r3
    9834:	b21b      	sxth	r3, r3
    9836:	2b00      	cmp	r3, #0
    9838:	bfae      	itee	ge
    983a:	1c50      	addge	r0, r2, #1
    983c:	1c40      	addlt	r0, r0, #1
    983e:	4408      	addlt	r0, r1
    9840:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9844:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    9848:	b978      	cbnz	r0, 986a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc02>
    984a:	e005      	b.n	9858 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbf0>
    984c:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9850:	1c40      	adds	r0, r0, #1
    9852:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9856:	e008      	b.n	986a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc02>
    9858:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    985c:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    9860:	4288      	cmp	r0, r1
    9862:	bf04      	itt	eq
    9864:	1c40      	addeq	r0, r0, #1
    9866:	f8a4 0152 	strheq.w	r0, [r4, #338]	; 0x152
    986a:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    986e:	f10d 0a04 	add.w	sl, sp, #4
    9872:	1c40      	adds	r0, r0, #1
    9874:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
    9878:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
    987c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
    9880:	1a40      	subs	r0, r0, r1
    9882:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    9886:	1e40      	subs	r0, r0, #1
    9888:	4408      	add	r0, r1
    988a:	b287      	uxth	r7, r0
    988c:	e034      	b.n	98f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc90>
    988e:	2300      	movs	r3, #0
    9890:	461a      	mov	r2, r3
    9892:	4620      	mov	r0, r4
    9894:	f8cd a000 	str.w	sl, [sp]
    9898:	f7ff fb0e 	bl	8eb8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    989c:	b130      	cbz	r0, 98ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc44>
    989e:	2801      	cmp	r0, #1
    98a0:	d023      	beq.n	98ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc82>
    98a2:	f240 6124 	movw	r1, #1572	; 0x624
    98a6:	2030      	movs	r0, #48	; 0x30
    98a8:	f7fa f96c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ac:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    98ae:	2800      	cmp	r0, #0
    98b0:	bf04      	itt	eq
    98b2:	b003      	addeq	sp, #12
    98b4:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98b8:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    98bc:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    98c0:	1a80      	subs	r0, r0, r2
    98c2:	b201      	sxth	r1, r0
    98c4:	2900      	cmp	r1, #0
    98c6:	bfdc      	itt	le
    98c8:	b003      	addle	sp, #12
    98ca:	e8bd 8ff0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98ce:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    98d2:	4401      	add	r1, r0
    98d4:	1e49      	subs	r1, r1, #1
    98d6:	fb91 f1f0 	sdiv	r1, r1, r0
    98da:	b289      	uxth	r1, r1
    98dc:	fb01 2000 	mla	r0, r1, r0, r2
    98e0:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    98e4:	b003      	add	sp, #12
    98e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98ea:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    98ee:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    98f2:	4408      	add	r0, r1
    98f4:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    98f8:	f8b4 1152 	ldrh.w	r1, [r4, #338]	; 0x152
    98fc:	1a78      	subs	r0, r7, r1
    98fe:	b200      	sxth	r0, r0
    9900:	2800      	cmp	r0, #0
    9902:	dac4      	bge.n	988e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc26>
    9904:	2008      	movs	r0, #8
    9906:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    990a:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
    990e:	4620      	mov	r0, r4
    9910:	f007 fae5 	bl	10ede <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9914:	e00d      	b.n	9932 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcca>
    9916:	e004      	b.n	9922 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcba>
    9918:	200014dc 	.word	0x200014dc
    991c:	20000120 	.word	0x20000120
    9920:	e01b      	b.n	995a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcf2>
    9922:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    9926:	2804      	cmp	r0, #4
    9928:	d003      	beq.n	9932 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcca>
    992a:	21bf      	movs	r1, #191	; 0xbf
    992c:	2030      	movs	r0, #48	; 0x30
    992e:	f7fa f929 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9932:	f884 6140 	strb.w	r6, [r4, #320]	; 0x140
    9936:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    993a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    993e:	f7fc fdc5 	bl	64cc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    9942:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9946:	f7f8 fbe1 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    994a:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    994e:	7968      	ldrb	r0, [r5, #5]
    9950:	b003      	add	sp, #12
    9952:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9956:	f7f9 bf09 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    995a:	21c7      	movs	r1, #199	; 0xc7
    995c:	2030      	movs	r0, #48	; 0x30
    995e:	f7fa f911 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
	...

00009964 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    9964:	b510      	push	{r4, lr}
    9966:	4604      	mov	r4, r0
    9968:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
    996c:	6861      	ldr	r1, [r4, #4]
    996e:	4288      	cmp	r0, r1
    9970:	d109      	bne.n	9986 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    9972:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
    9976:	8922      	ldrh	r2, [r4, #8]
    9978:	4291      	cmp	r1, r2
    997a:	d104      	bne.n	9986 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    997c:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
    9980:	8962      	ldrh	r2, [r4, #10]
    9982:	4291      	cmp	r1, r2
    9984:	d015      	beq.n	99b2 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    9986:	8821      	ldrh	r1, [r4, #0]
    9988:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
    998c:	f006 fa61 	bl	fe52 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9990:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    9994:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    9998:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    999c:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    99a0:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    99a4:	2001      	movs	r0, #1
    99a6:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
    99aa:	4807      	ldr	r0, [pc, #28]	; (99c8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    99ac:	7940      	ldrb	r0, [r0, #5]
    99ae:	f7f9 fedd 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    99b2:	2102      	movs	r1, #2
    99b4:	4620      	mov	r0, r4
    99b6:	f7fc fc85 	bl	62c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    99ba:	2000      	movs	r0, #0
    99bc:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    99c0:	2003      	movs	r0, #3
    99c2:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    99c6:	bd10      	pop	{r4, pc}
    99c8:	20000140 	.word	0x20000140

000099cc <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>:
    99cc:	4802      	ldr	r0, [pc, #8]	; (99d8 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA+0xc>)
    99ce:	6980      	ldr	r0, [r0, #24]
    99d0:	2800      	cmp	r0, #0
    99d2:	bf18      	it	ne
    99d4:	2001      	movne	r0, #1
    99d6:	4770      	bx	lr
    99d8:	20000140 	.word	0x20000140

000099dc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    99dc:	4806      	ldr	r0, [pc, #24]	; (99f8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    99de:	4905      	ldr	r1, [pc, #20]	; (99f4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    99e0:	6501      	str	r1, [r0, #80]	; 0x50
    99e2:	4906      	ldr	r1, [pc, #24]	; (99fc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    99e4:	6541      	str	r1, [r0, #84]	; 0x54
    99e6:	4807      	ldr	r0, [pc, #28]	; (9a04 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    99e8:	4905      	ldr	r1, [pc, #20]	; (9a00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    99ea:	6501      	str	r1, [r0, #80]	; 0x50
    99ec:	4906      	ldr	r1, [pc, #24]	; (9a08 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    99ee:	6541      	str	r1, [r0, #84]	; 0x54
    99f0:	4770      	bx	lr
    99f2:	0000      	.short	0x0000
    99f4:	0000b079 	.word	0x0000b079
    99f8:	20000160 	.word	0x20000160
    99fc:	0000b151 	.word	0x0000b151
    9a00:	0000b951 	.word	0x0000b951
    9a04:	200001c4 	.word	0x200001c4
    9a08:	0000b981 	.word	0x0000b981

00009a0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    9a0c:	491d      	ldr	r1, [pc, #116]	; (9a84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9a0e:	2200      	movs	r2, #0
    9a10:	618a      	str	r2, [r1, #24]
    9a12:	61ca      	str	r2, [r1, #28]
    9a14:	7148      	strb	r0, [r1, #5]
    9a16:	481d      	ldr	r0, [pc, #116]	; (9a8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9a18:	491b      	ldr	r1, [pc, #108]	; (9a88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    9a1a:	6081      	str	r1, [r0, #8]
    9a1c:	491c      	ldr	r1, [pc, #112]	; (9a90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    9a1e:	6041      	str	r1, [r0, #4]
    9a20:	491c      	ldr	r1, [pc, #112]	; (9a94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    9a22:	6001      	str	r1, [r0, #0]
    9a24:	491c      	ldr	r1, [pc, #112]	; (9a98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    9a26:	6281      	str	r1, [r0, #40]	; 0x28
    9a28:	491c      	ldr	r1, [pc, #112]	; (9a9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9a2a:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a2c:	491c      	ldr	r1, [pc, #112]	; (9aa0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    9a2e:	60c1      	str	r1, [r0, #12]
    9a30:	491c      	ldr	r1, [pc, #112]	; (9aa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    9a32:	6181      	str	r1, [r0, #24]
    9a34:	491c      	ldr	r1, [pc, #112]	; (9aa8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    9a36:	6301      	str	r1, [r0, #48]	; 0x30
    9a38:	491c      	ldr	r1, [pc, #112]	; (9aac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9a3a:	6201      	str	r1, [r0, #32]
    9a3c:	491c      	ldr	r1, [pc, #112]	; (9ab0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    9a3e:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a40:	491c      	ldr	r1, [pc, #112]	; (9ab4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    9a42:	6481      	str	r1, [r0, #72]	; 0x48
    9a44:	491c      	ldr	r1, [pc, #112]	; (9ab8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    9a46:	6441      	str	r1, [r0, #68]	; 0x44
    9a48:	491c      	ldr	r1, [pc, #112]	; (9abc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9a4a:	6341      	str	r1, [r0, #52]	; 0x34
    9a4c:	491c      	ldr	r1, [pc, #112]	; (9ac0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    9a4e:	61c1      	str	r1, [r0, #28]
    9a50:	481d      	ldr	r0, [pc, #116]	; (9ac8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    9a52:	491c      	ldr	r1, [pc, #112]	; (9ac4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    9a54:	6081      	str	r1, [r0, #8]
    9a56:	491d      	ldr	r1, [pc, #116]	; (9acc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    9a58:	61c1      	str	r1, [r0, #28]
    9a5a:	491d      	ldr	r1, [pc, #116]	; (9ad0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    9a5c:	6241      	str	r1, [r0, #36]	; 0x24
    9a5e:	491d      	ldr	r1, [pc, #116]	; (9ad4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    9a60:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a62:	491d      	ldr	r1, [pc, #116]	; (9ad8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    9a64:	6101      	str	r1, [r0, #16]
    9a66:	491d      	ldr	r1, [pc, #116]	; (9adc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    9a68:	6141      	str	r1, [r0, #20]
    9a6a:	491d      	ldr	r1, [pc, #116]	; (9ae0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    9a6c:	6441      	str	r1, [r0, #68]	; 0x44
    9a6e:	6341      	str	r1, [r0, #52]	; 0x34
    9a70:	491c      	ldr	r1, [pc, #112]	; (9ae4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    9a72:	6181      	str	r1, [r0, #24]
    9a74:	491c      	ldr	r1, [pc, #112]	; (9ae8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    9a76:	6301      	str	r1, [r0, #48]	; 0x30
    9a78:	491c      	ldr	r1, [pc, #112]	; (9aec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    9a7a:	6481      	str	r1, [r0, #72]	; 0x48
    9a7c:	491c      	ldr	r1, [pc, #112]	; (9af0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    9a7e:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a80:	4770      	bx	lr
    9a82:	0000      	.short	0x0000
    9a84:	20000140 	.word	0x20000140
    9a88:	0000b69d 	.word	0x0000b69d
    9a8c:	20000160 	.word	0x20000160
    9a90:	0000ae05 	.word	0x0000ae05
    9a94:	0000ae69 	.word	0x0000ae69
    9a98:	0000b245 	.word	0x0000b245
    9a9c:	0000b295 	.word	0x0000b295
    9aa0:	0000af25 	.word	0x0000af25
    9aa4:	0000b661 	.word	0x0000b661
    9aa8:	0000b80d 	.word	0x0000b80d
    9aac:	0000afd1 	.word	0x0000afd1
    9ab0:	0000b215 	.word	0x0000b215
    9ab4:	0000b1e1 	.word	0x0000b1e1
    9ab8:	0000b5a9 	.word	0x0000b5a9
    9abc:	0000b611 	.word	0x0000b611
    9ac0:	0000b6d5 	.word	0x0000b6d5
    9ac4:	0000bb6d 	.word	0x0000bb6d
    9ac8:	200001c4 	.word	0x200001c4
    9acc:	0000bb95 	.word	0x0000bb95
    9ad0:	0000b90d 	.word	0x0000b90d
    9ad4:	0000ba29 	.word	0x0000ba29
    9ad8:	0000b8e1 	.word	0x0000b8e1
    9adc:	0000bad1 	.word	0x0000bad1
    9ae0:	0000baad 	.word	0x0000baad
    9ae4:	0000baf5 	.word	0x0000baf5
    9ae8:	0000bc09 	.word	0x0000bc09
    9aec:	0000b9c5 	.word	0x0000b9c5
    9af0:	0000b9f5 	.word	0x0000b9f5

00009af4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    9af4:	4806      	ldr	r0, [pc, #24]	; (9b10 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    9af6:	4905      	ldr	r1, [pc, #20]	; (9b0c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    9af8:	6581      	str	r1, [r0, #88]	; 0x58
    9afa:	4906      	ldr	r1, [pc, #24]	; (9b14 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    9afc:	6601      	str	r1, [r0, #96]	; 0x60
    9afe:	4807      	ldr	r0, [pc, #28]	; (9b1c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    9b00:	4905      	ldr	r1, [pc, #20]	; (9b18 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    9b02:	6581      	str	r1, [r0, #88]	; 0x58
    9b04:	4906      	ldr	r1, [pc, #24]	; (9b20 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    9b06:	65c1      	str	r1, [r0, #92]	; 0x5c
    9b08:	4770      	bx	lr
    9b0a:	0000      	.short	0x0000
    9b0c:	0000b2b5 	.word	0x0000b2b5
    9b10:	20000160 	.word	0x20000160
    9b14:	0000b395 	.word	0x0000b395
    9b18:	0000ba55 	.word	0x0000ba55
    9b1c:	200001c4 	.word	0x200001c4
    9b20:	0000ba85 	.word	0x0000ba85

00009b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    9b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b28:	2701      	movs	r7, #1
    9b2a:	4cd1      	ldr	r4, [pc, #836]	; (9e70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x34c>)
    9b2c:	2500      	movs	r5, #0
    9b2e:	f367 0907 	bfi	r9, r7, #0, #8
    9b32:	80e5      	strh	r5, [r4, #6]
    9b34:	70e5      	strb	r5, [r4, #3]
    9b36:	7125      	strb	r5, [r4, #4]
    9b38:	7025      	strb	r5, [r4, #0]
    9b3a:	60e0      	str	r0, [r4, #12]
    9b3c:	4606      	mov	r6, r0
    9b3e:	f880 710e 	strb.w	r7, [r0, #270]	; 0x10e
    9b42:	8800      	ldrh	r0, [r0, #0]
    9b44:	f7fa fbec 	bl	4320 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9b48:	ea5f 0a00 	movs.w	sl, r0
    9b4c:	d010      	beq.n	9b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c>
    9b4e:	68e0      	ldr	r0, [r4, #12]
    9b50:	8800      	ldrh	r0, [r0, #0]
    9b52:	f7fa ff17 	bl	4984 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    9b56:	68e0      	ldr	r0, [r4, #12]
    9b58:	8800      	ldrh	r0, [r0, #0]
    9b5a:	f7fa feb9 	bl	48d0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9b5e:	68e0      	ldr	r0, [r4, #12]
    9b60:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    9b64:	b1a1      	cbz	r1, 9b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c>
    9b66:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    9b6a:	29fe      	cmp	r1, #254	; 0xfe
    9b6c:	d005      	beq.n	9b7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56>
    9b6e:	e014      	b.n	9b9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x76>
    9b70:	f640 319e 	movw	r1, #2974	; 0xb9e
    9b74:	2031      	movs	r0, #49	; 0x31
    9b76:	f7fa f805 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b7a:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    9b7e:	b189      	cbz	r1, 9ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    9b80:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    9b84:	2301      	movs	r3, #1
    9b86:	4619      	mov	r1, r3
    9b88:	3078      	adds	r0, #120	; 0x78
    9b8a:	f006 f989 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b8e:	b188      	cbz	r0, 9bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    9b90:	68e0      	ldr	r0, [r4, #12]
    9b92:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    9b96:	28fe      	cmp	r0, #254	; 0xfe
    9b98:	d004      	beq.n	9ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    9b9a:	68e0      	ldr	r0, [r4, #12]
    9b9c:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    9ba0:	f000 fbcc 	bl	a33c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ac>
    9ba4:	68e0      	ldr	r0, [r4, #12]
    9ba6:	f890 110f 	ldrb.w	r1, [r0, #271]	; 0x10f
    9baa:	2900      	cmp	r1, #0
    9bac:	bf18      	it	ne
    9bae:	8125      	strhne	r5, [r4, #8]
    9bb0:	d11b      	bne.n	9bea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    9bb2:	e00f      	b.n	9bd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    9bb4:	68e0      	ldr	r0, [r4, #12]
    9bb6:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    9bba:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    9bbe:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    9bc2:	2100      	movs	r1, #0
    9bc4:	2002      	movs	r0, #2
    9bc6:	f001 f879 	bl	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9bca:	68e0      	ldr	r0, [r4, #12]
    9bcc:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
    9bd0:	2002      	movs	r0, #2
    9bd2:	e7e5      	b.n	9ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    9bd4:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    9bd8:	b929      	cbnz	r1, 9be6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2>
    9bda:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    9bdc:	8902      	ldrh	r2, [r0, #8]
    9bde:	4291      	cmp	r1, r2
    9be0:	bf88      	it	hi
    9be2:	8121      	strhhi	r1, [r4, #8]
    9be4:	d801      	bhi.n	9bea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    9be6:	8901      	ldrh	r1, [r0, #8]
    9be8:	8121      	strh	r1, [r4, #8]
    9bea:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    9bee:	1e49      	subs	r1, r1, #1
    9bf0:	fa1f f881 	uxth.w	r8, r1
    9bf4:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    9bf8:	4441      	add	r1, r8
    9bfa:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    9bfe:	f890 110c 	ldrb.w	r1, [r0, #268]	; 0x10c
    9c02:	2900      	cmp	r1, #0
    9c04:	bf1c      	itt	ne
    9c06:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    9c0a:	f880 510c 	strbne.w	r5, [r0, #268]	; 0x10c
    9c0e:	d104      	bne.n	9c1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6>
    9c10:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    9c14:	4441      	add	r1, r8
    9c16:	f8a0 110a 	strh.w	r1, [r0, #266]	; 0x10a
    9c1a:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    9c1e:	4441      	add	r1, r8
    9c20:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    9c24:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9c28:	b939      	cbnz	r1, 9c3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116>
    9c2a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9c2e:	2301      	movs	r3, #1
    9c30:	2106      	movs	r1, #6
    9c32:	3078      	adds	r0, #120	; 0x78
    9c34:	f006 f934 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c38:	b128      	cbz	r0, 9c46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122>
    9c3a:	68e0      	ldr	r0, [r4, #12]
    9c3c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    9c40:	4441      	add	r1, r8
    9c42:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    9c46:	68e0      	ldr	r0, [r4, #12]
    9c48:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    9c4c:	2901      	cmp	r1, #1
    9c4e:	bf9c      	itt	ls
    9c50:	1c49      	addls	r1, r1, #1
    9c52:	f8a0 1102 	strhls.w	r1, [r0, #258]	; 0x102
    9c56:	f1b8 0f00 	cmp.w	r8, #0
    9c5a:	bf18      	it	ne
    9c5c:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    9c60:	4650      	mov	r0, sl
    9c62:	f005 fc41 	bl	f4e8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9c66:	4680      	mov	r8, r0
    9c68:	68e0      	ldr	r0, [r4, #12]
    9c6a:	f890 110d 	ldrb.w	r1, [r0, #269]	; 0x10d
    9c6e:	b199      	cbz	r1, 9c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    9c70:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    9c74:	8922      	ldrh	r2, [r4, #8]
    9c76:	4291      	cmp	r1, r2
    9c78:	d20e      	bcs.n	9c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    9c7a:	f1b8 0f00 	cmp.w	r8, #0
    9c7e:	bf1c      	itt	ne
    9c80:	f890 1181 	ldrbne.w	r1, [r0, #385]	; 0x181
    9c84:	2900      	cmpne	r1, #0
    9c86:	d007      	beq.n	9c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    9c88:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    9c8c:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
    9c90:	4281      	cmp	r1, r0
    9c92:	bf28      	it	cs
    9c94:	f7fa ff16 	blcs	4ac4 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>
    9c98:	68e2      	ldr	r2, [r4, #12]
    9c9a:	f882 510d 	strb.w	r5, [r2, #269]	; 0x10d
    9c9e:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    9ca2:	280b      	cmp	r0, #11
    9ca4:	bf18      	it	ne
    9ca6:	280c      	cmpne	r0, #12
    9ca8:	d118      	bne.n	9cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    9caa:	f8b2 1078 	ldrh.w	r1, [r2, #120]	; 0x78
    9cae:	f8b2 31a4 	ldrh.w	r3, [r2, #420]	; 0x1a4
    9cb2:	eba1 0103 	sub.w	r1, r1, r3
    9cb6:	b209      	sxth	r1, r1
    9cb8:	2900      	cmp	r1, #0
    9cba:	db0f      	blt.n	9cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    9cbc:	f502 71d3 	add.w	r1, r2, #422	; 0x1a6
    9cc0:	f102 000c 	add.w	r0, r2, #12
    9cc4:	f008 f937 	bl	11f36 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    9cc8:	2103      	movs	r1, #3
    9cca:	68e0      	ldr	r0, [r4, #12]
    9ccc:	f7fc fafa 	bl	62c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9cd0:	68e0      	ldr	r0, [r4, #12]
    9cd2:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9cd6:	f880 70c0 	strb.w	r7, [r0, #192]	; 0xc0
    9cda:	e093      	b.n	9e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9cdc:	2824      	cmp	r0, #36	; 0x24
    9cde:	d146      	bne.n	9d6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    9ce0:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    9ce4:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    9ce8:	1a40      	subs	r0, r0, r1
    9cea:	b200      	sxth	r0, r0
    9cec:	2800      	cmp	r0, #0
    9cee:	db3e      	blt.n	9d6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    9cf0:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    9cf4:	2800      	cmp	r0, #0
    9cf6:	bf14      	ite	ne
    9cf8:	f04f 0a01 	movne.w	sl, #1
    9cfc:	f04f 0a00 	moveq.w	sl, #0
    9d00:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    9d04:	2900      	cmp	r1, #0
    9d06:	bf14      	ite	ne
    9d08:	f04f 0c01 	movne.w	ip, #1
    9d0c:	f04f 0c00 	moveq.w	ip, #0
    9d10:	f1ba 0f00 	cmp.w	sl, #0
    9d14:	bf08      	it	eq
    9d16:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    9d1a:	f1bc 0f00 	cmp.w	ip, #0
    9d1e:	bf08      	it	eq
    9d20:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    9d24:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    9d28:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    9d2c:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    9d30:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    9d34:	2801      	cmp	r0, #1
    9d36:	d005      	beq.n	9d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    9d38:	f1ba 0f00 	cmp.w	sl, #0
    9d3c:	bf08      	it	eq
    9d3e:	f1bc 0f00 	cmpeq.w	ip, #0
    9d42:	d003      	beq.n	9d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9d44:	f04f 0000 	mov.w	r0, #0
    9d48:	f001 f82e 	bl	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    9d4c:	68e0      	ldr	r0, [r4, #12]
    9d4e:	f006 fda0 	bl	10892 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9d52:	b130      	cbz	r0, 9d62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    9d54:	68e1      	ldr	r1, [r4, #12]
    9d56:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9d5a:	8808      	ldrh	r0, [r1, #0]
    9d5c:	3128      	adds	r1, #40	; 0x28
    9d5e:	f006 fd1b 	bl	10798 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9d62:	68e0      	ldr	r0, [r4, #12]
    9d64:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9d68:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    9d6c:	e04a      	b.n	9e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9d6e:	f892 0084 	ldrb.w	r0, [r2, #132]	; 0x84
    9d72:	2824      	cmp	r0, #36	; 0x24
    9d74:	bf18      	it	ne
    9d76:	2825      	cmpne	r0, #37	; 0x25
    9d78:	d144      	bne.n	9e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9d7a:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    9d7e:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    9d82:	eba0 0001 	sub.w	r0, r0, r1
    9d86:	b200      	sxth	r0, r0
    9d88:	2800      	cmp	r0, #0
    9d8a:	db3b      	blt.n	9e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9d8c:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    9d90:	2800      	cmp	r0, #0
    9d92:	bf14      	ite	ne
    9d94:	f04f 0a01 	movne.w	sl, #1
    9d98:	f04f 0a00 	moveq.w	sl, #0
    9d9c:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    9da0:	2900      	cmp	r1, #0
    9da2:	bf14      	ite	ne
    9da4:	f04f 0c01 	movne.w	ip, #1
    9da8:	f04f 0c00 	moveq.w	ip, #0
    9dac:	f1ba 0f00 	cmp.w	sl, #0
    9db0:	bf08      	it	eq
    9db2:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    9db6:	f1bc 0f00 	cmp.w	ip, #0
    9dba:	bf08      	it	eq
    9dbc:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    9dc0:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    9dc4:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    9dc8:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    9dcc:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    9dd0:	2801      	cmp	r0, #1
    9dd2:	d005      	beq.n	9de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9dd4:	f1ba 0f00 	cmp.w	sl, #0
    9dd8:	bf08      	it	eq
    9dda:	f1bc 0f00 	cmpeq.w	ip, #0
    9dde:	d003      	beq.n	9de8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    9de0:	f04f 0000 	mov.w	r0, #0
    9de4:	f000 ffe0 	bl	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    9de8:	68e0      	ldr	r0, [r4, #12]
    9dea:	f006 fd52 	bl	10892 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9dee:	b130      	cbz	r0, 9dfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    9df0:	68e1      	ldr	r1, [r4, #12]
    9df2:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9df6:	8808      	ldrh	r0, [r1, #0]
    9df8:	3128      	adds	r1, #40	; 0x28
    9dfa:	f006 fccd 	bl	10798 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9dfe:	68e0      	ldr	r0, [r4, #12]
    9e00:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    9e04:	68e1      	ldr	r1, [r4, #12]
    9e06:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9e0a:	f8b1 2106 	ldrh.w	r2, [r1, #262]	; 0x106
    9e0e:	f7fc f969 	bl	60e4 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    9e12:	68e0      	ldr	r0, [r4, #12]
    9e14:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
    9e18:	2900      	cmp	r1, #0
    9e1a:	bf18      	it	ne
    9e1c:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    9e20:	f1b8 0f00 	cmp.w	r8, #0
    9e24:	bf17      	itett	ne
    9e26:	f890 0110 	ldrbne.w	r0, [r0, #272]	; 0x110
    9e2a:	f880 5110 	strbeq.w	r5, [r0, #272]	; 0x110
    9e2e:	2800      	cmpne	r0, #0
    9e30:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e34:	480f      	ldr	r0, [pc, #60]	; (9e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x350>)
    9e36:	9000      	str	r0, [sp, #0]
    9e38:	4b0f      	ldr	r3, [pc, #60]	; (9e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x354>)
    9e3a:	4a10      	ldr	r2, [pc, #64]	; (9e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>)
    9e3c:	4631      	mov	r1, r6
    9e3e:	4648      	mov	r0, r9
    9e40:	f7fa fe9a 	bl	4b78 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9e44:	69e1      	ldr	r1, [r4, #28]
    9e46:	2900      	cmp	r1, #0
    9e48:	bf1c      	itt	ne
    9e4a:	7860      	ldrbne	r0, [r4, #1]
    9e4c:	f003 fa0c 	blne	d268 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>
    9e50:	68e0      	ldr	r0, [r4, #12]
    9e52:	2301      	movs	r3, #1
    9e54:	2105      	movs	r1, #5
    9e56:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e5a:	3078      	adds	r0, #120	; 0x78
    9e5c:	f006 f820 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e60:	2800      	cmp	r0, #0
    9e62:	bf08      	it	eq
    9e64:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e68:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e6c:	f7fa be7e 	b.w	4b6c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9e70:	20000140 	.word	0x20000140
    9e74:	0000a501 	.word	0x0000a501
    9e78:	00009ead 	.word	0x00009ead
    9e7c:	0000acf5 	.word	0x0000acf5

00009e80 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    9e80:	4802      	ldr	r0, [pc, #8]	; (9e8c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI+0xc>)
    9e82:	2100      	movs	r1, #0
    9e84:	6181      	str	r1, [r0, #24]
    9e86:	61c1      	str	r1, [r0, #28]
    9e88:	4608      	mov	r0, r1
    9e8a:	4770      	bx	lr
    9e8c:	20000140 	.word	0x20000140

00009e90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    9e90:	4805      	ldr	r0, [pc, #20]	; (9ea8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18>)
    9e92:	68c0      	ldr	r0, [r0, #12]
    9e94:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    9e98:	b118      	cbz	r0, 9ea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12>
    9e9a:	2100      	movs	r1, #0
    9e9c:	4608      	mov	r0, r1
    9e9e:	f000 bb2f 	b.w	a500 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x670>
    9ea2:	f7fb b81f 	b.w	4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    9ea6:	0000      	.short	0x0000
    9ea8:	20000140 	.word	0x20000140
    9eac:	490d      	ldr	r1, [pc, #52]	; (9ee4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x54>)
    9eae:	4602      	mov	r2, r0
    9eb0:	78c8      	ldrb	r0, [r1, #3]
    9eb2:	790b      	ldrb	r3, [r1, #4]
    9eb4:	4318      	orrs	r0, r3
    9eb6:	d113      	bne.n	9ee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    9eb8:	4608      	mov	r0, r1
    9eba:	68c0      	ldr	r0, [r0, #12]
    9ebc:	b14a      	cbz	r2, 9ed2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42>
    9ebe:	7989      	ldrb	r1, [r1, #6]
    9ec0:	f011 0f08 	tst.w	r1, #8
    9ec4:	d003      	beq.n	9ece <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3e>
    9ec6:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9eca:	2808      	cmp	r0, #8
    9ecc:	d008      	beq.n	9ee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    9ece:	2001      	movs	r0, #1
    9ed0:	4770      	bx	lr
    9ed2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    9ed6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    9ed8:	428a      	cmp	r2, r1
    9eda:	d801      	bhi.n	9ee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    9edc:	f7fe be98 	b.w	8c10 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    9ee0:	2000      	movs	r0, #0
    9ee2:	4770      	bx	lr
    9ee4:	20000140 	.word	0x20000140
    9ee8:	b570      	push	{r4, r5, r6, lr}
    9eea:	4cf8      	ldr	r4, [pc, #992]	; (a2cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x43c>)
    9eec:	68e0      	ldr	r0, [r4, #12]
    9eee:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    9ef2:	29fe      	cmp	r1, #254	; 0xfe
    9ef4:	bf06      	itte	eq
    9ef6:	78e1      	ldrbeq	r1, [r4, #3]
    9ef8:	2900      	cmpeq	r1, #0
    9efa:	bd70      	popne	{r4, r5, r6, pc}
    9efc:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    9f00:	f04f 0301 	mov.w	r3, #1
    9f04:	4619      	mov	r1, r3
    9f06:	f100 0078 	add.w	r0, r0, #120	; 0x78
    9f0a:	f005 ffc9 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f0e:	2800      	cmp	r0, #0
    9f10:	bf18      	it	ne
    9f12:	bd70      	popne	{r4, r5, r6, pc}
    9f14:	68e0      	ldr	r0, [r4, #12]
    9f16:	2500      	movs	r5, #0
    9f18:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    9f1c:	b159      	cbz	r1, 9f36 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6>
    9f1e:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    9f22:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    9f26:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    9f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f2e:	2100      	movs	r1, #0
    9f30:	2002      	movs	r0, #2
    9f32:	f000 bec3 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9f36:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f3a:	2301      	movs	r3, #1
    9f3c:	2104      	movs	r1, #4
    9f3e:	3078      	adds	r0, #120	; 0x78
    9f40:	f005 ffae 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f44:	0006      	movs	r6, r0
    9f46:	68e0      	ldr	r0, [r4, #12]
    9f48:	d00b      	beq.n	9f62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd2>
    9f4a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9f4e:	2910      	cmp	r1, #16
    9f50:	d07d      	beq.n	a04e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1be>
    9f52:	2914      	cmp	r1, #20
    9f54:	d07c      	beq.n	a050 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0>
    9f56:	2915      	cmp	r1, #21
    9f58:	d07b      	beq.n	a052 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c2>
    9f5a:	291b      	cmp	r1, #27
    9f5c:	d07a      	beq.n	a054 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c4>
    9f5e:	f000 b8f1 	b.w	a144 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b4>
    9f62:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9f66:	f011 0f01 	tst.w	r1, #1
    9f6a:	d005      	beq.n	9f78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe8>
    9f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f70:	2101      	movs	r1, #1
    9f72:	2009      	movs	r0, #9
    9f74:	f000 bea2 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9f78:	f011 0f02 	tst.w	r1, #2
    9f7c:	d00b      	beq.n	9f96 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x106>
    9f7e:	2101      	movs	r1, #1
    9f80:	200c      	movs	r0, #12
    9f82:	f000 fe9b 	bl	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9f86:	68e0      	ldr	r0, [r4, #12]
    9f88:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    9f8c:	f041 0101 	orr.w	r1, r1, #1
    9f90:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    9f94:	bd70      	pop	{r4, r5, r6, pc}
    9f96:	f011 0f04 	tst.w	r1, #4
    9f9a:	d005      	beq.n	9fa8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x118>
    9f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9fa0:	2101      	movs	r1, #1
    9fa2:	2013      	movs	r0, #19
    9fa4:	f000 be8a 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9fa8:	f011 0f08 	tst.w	r1, #8
    9fac:	d009      	beq.n	9fc2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x132>
    9fae:	f890 10f1 	ldrb.w	r1, [r0, #241]	; 0xf1
    9fb2:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    9fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9fba:	2101      	movs	r1, #1
    9fbc:	2007      	movs	r0, #7
    9fbe:	f000 be7d 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    9fc2:	f011 0f30 	tst.w	r1, #48	; 0x30
    9fc6:	d07d      	beq.n	a0c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    9fc8:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    9fcc:	2900      	cmp	r1, #0
    9fce:	d179      	bne.n	a0c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    9fd0:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9fd4:	b1c9      	cbz	r1, a00a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17a>
    9fd6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9fda:	2924      	cmp	r1, #36	; 0x24
    9fdc:	bf1b      	ittet	ne
    9fde:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    9fe2:	2924      	cmpne	r1, #36	; 0x24
    9fe4:	2301      	moveq	r3, #1
    9fe6:	2300      	movne	r3, #0
    9fe8:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    9fec:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    9ff0:	f006 fbfa 	bl	107e8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9ff4:	68e0      	ldr	r0, [r4, #12]
    9ff6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9ffa:	f021 0120 	bic.w	r1, r1, #32
    9ffe:	f041 0110 	orr.w	r1, r1, #16
    a002:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a006:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a00a:	68e0      	ldr	r0, [r4, #12]
    a00c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a010:	f011 0f10 	tst.w	r1, #16
    a014:	d056      	beq.n	a0c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    a016:	f006 fc3c 	bl	10892 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a01a:	68e1      	ldr	r1, [r4, #12]
    a01c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    a020:	2801      	cmp	r0, #1
    a022:	bf04      	itt	eq
    a024:	2002      	moveq	r0, #2
    a026:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    a02a:	d008      	beq.n	a03e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ae>
    a02c:	8808      	ldrh	r0, [r1, #0]
    a02e:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a032:	3128      	adds	r1, #40	; 0x28
    a034:	f006 fbb0 	bl	10798 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a038:	7960      	ldrb	r0, [r4, #5]
    a03a:	f7f9 fb97 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a03e:	68e0      	ldr	r0, [r4, #12]
    a040:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a044:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a048:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a04c:	e003      	b.n	a056 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c6>
    a04e:	e00a      	b.n	a066 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6>
    a050:	e00f      	b.n	a072 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e2>
    a052:	e02b      	b.n	a0ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x21c>
    a054:	e060      	b.n	a118 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x288>
    a056:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a05a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a05e:	2101      	movs	r1, #1
    a060:	2015      	movs	r0, #21
    a062:	f000 be2b 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a06a:	2101      	movs	r1, #1
    a06c:	200b      	movs	r0, #11
    a06e:	f000 be25 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a072:	f7fa fb81 	bl	4778 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY>
    a076:	280c      	cmp	r0, #12
    a078:	bf38      	it	cc
    a07a:	bd70      	popcc	{r4, r5, r6, pc}
    a07c:	2108      	movs	r1, #8
    a07e:	68e0      	ldr	r0, [r4, #12]
    a080:	f500 7092 	add.w	r0, r0, #292	; 0x124
    a084:	f7fa fb7e 	bl	4784 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a088:	b158      	cbz	r0, a0a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x212>
    a08a:	68e0      	ldr	r0, [r4, #12]
    a08c:	2104      	movs	r1, #4
    a08e:	30ec      	adds	r0, #236	; 0xec
    a090:	f7fa fb78 	bl	4784 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a094:	b128      	cbz	r0, a0a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x212>
    a096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a09a:	2101      	movs	r1, #1
    a09c:	2004      	movs	r0, #4
    a09e:	f000 be0d 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a0a2:	f240 719c 	movw	r1, #1948	; 0x79c
    a0a6:	2031      	movs	r0, #49	; 0x31
    a0a8:	f7f9 fd6c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0ac:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    a0b0:	2901      	cmp	r1, #1
    a0b2:	d00d      	beq.n	a0d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x240>
    a0b4:	2902      	cmp	r1, #2
    a0b6:	bf18      	it	ne
    a0b8:	bd70      	popne	{r4, r5, r6, pc}
    a0ba:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a0be:	b1e9      	cbz	r1, a0fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
    a0c0:	2106      	movs	r1, #6
    a0c2:	e000      	b.n	a0c6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x236>
    a0c4:	e02e      	b.n	a124 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x294>
    a0c6:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a0ca:	2101      	movs	r1, #1
    a0cc:	2002      	movs	r0, #2
    a0ce:	e01d      	b.n	a10c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x27c>
    a0d0:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    a0d4:	2900      	cmp	r1, #0
    a0d6:	bf18      	it	ne
    a0d8:	bd70      	popne	{r4, r5, r6, pc}
    a0da:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    a0de:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    a0e2:	2200      	movs	r2, #0
    a0e4:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    a0e8:	f7fb ffba 	bl	6060 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a0ec:	2101      	movs	r1, #1
    a0ee:	2005      	movs	r0, #5
    a0f0:	f000 fde4 	bl	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a0f4:	68e0      	ldr	r0, [r4, #12]
    a0f6:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a0fa:	bd70      	pop	{r4, r5, r6, pc}
    a0fc:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a100:	f010 0f04 	tst.w	r0, #4
    a104:	bf14      	ite	ne
    a106:	2011      	movne	r0, #17
    a108:	200d      	moveq	r0, #13
    a10a:	2101      	movs	r1, #1
    a10c:	f000 fdd6 	bl	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a110:	68e0      	ldr	r0, [r4, #12]
    a112:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a116:	bd70      	pop	{r4, r5, r6, pc}
    a118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a11c:	2101      	movs	r1, #1
    a11e:	2006      	movs	r0, #6
    a120:	f000 bdcc 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a124:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a128:	2921      	cmp	r1, #33	; 0x21
    a12a:	d10b      	bne.n	a144 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b4>
    a12c:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a130:	2902      	cmp	r1, #2
    a132:	d01d      	beq.n	a170 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2e0>
    a134:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a138:	2901      	cmp	r1, #1
    a13a:	bf04      	itt	eq
    a13c:	f890 01bf 	ldrbeq.w	r0, [r0, #447]	; 0x1bf
    a140:	2800      	cmpeq	r0, #0
    a142:	d015      	beq.n	a170 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2e0>
    a144:	68e0      	ldr	r0, [r4, #12]
    a146:	f04f 0301 	mov.w	r3, #1
    a14a:	f04f 0100 	mov.w	r1, #0
    a14e:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a152:	f100 0078 	add.w	r0, r0, #120	; 0x78
    a156:	f005 fea3 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a15a:	b1c8      	cbz	r0, a190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a15c:	68e0      	ldr	r0, [r4, #12]
    a15e:	2301      	movs	r3, #1
    a160:	2104      	movs	r1, #4
    a162:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a166:	3078      	adds	r0, #120	; 0x78
    a168:	f005 fe9a 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a16c:	b130      	cbz	r0, a17c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2ec>
    a16e:	e00f      	b.n	a190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a174:	2101      	movs	r1, #1
    a176:	2017      	movs	r0, #23
    a178:	f000 bda0 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a17c:	68e0      	ldr	r0, [r4, #12]
    a17e:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
    a182:	b128      	cbz	r0, a190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a188:	2100      	movs	r1, #0
    a18a:	2012      	movs	r0, #18
    a18c:	f000 bd96 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a190:	68e0      	ldr	r0, [r4, #12]
    a192:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a196:	2a0a      	cmp	r2, #10
    a198:	d015      	beq.n	a1c6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x336>
    a19a:	2e00      	cmp	r6, #0
    a19c:	bf18      	it	ne
    a19e:	bd70      	popne	{r4, r5, r6, pc}
    a1a0:	2301      	movs	r3, #1
    a1a2:	2100      	movs	r1, #0
    a1a4:	3078      	adds	r0, #120	; 0x78
    a1a6:	f005 fe7b 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1aa:	2800      	cmp	r0, #0
    a1ac:	d07e      	beq.n	a2ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    a1ae:	68e0      	ldr	r0, [r4, #12]
    a1b0:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    a1b4:	b189      	cbz	r1, a1da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x34a>
    a1b6:	2100      	movs	r1, #0
    a1b8:	200e      	movs	r0, #14
    a1ba:	f000 fd7f 	bl	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a1be:	68e0      	ldr	r0, [r4, #12]
    a1c0:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    a1c4:	bd70      	pop	{r4, r5, r6, pc}
    a1c6:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    a1ca:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a1ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a1d2:	2100      	movs	r1, #0
    a1d4:	2007      	movs	r0, #7
    a1d6:	f000 bd71 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a1da:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a1de:	b121      	cbz	r1, a1ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x35a>
    a1e0:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a1e4:	f011 0f03 	tst.w	r1, #3
    a1e8:	d00e      	beq.n	a208 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x378>
    a1ea:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a1ee:	b111      	cbz	r1, a1f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x366>
    a1f0:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    a1f4:	b1c1      	cbz	r1, a228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x398>
    a1f6:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a1fa:	2901      	cmp	r1, #1
    a1fc:	bf04      	itt	eq
    a1fe:	f890 11bf 	ldrbeq.w	r1, [r0, #447]	; 0x1bf
    a202:	2900      	cmpeq	r1, #0
    a204:	d17c      	bne.n	a300 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a206:	e02f      	b.n	a268 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3d8>
    a208:	f04f 0100 	mov.w	r1, #0
    a20c:	f04f 000c 	mov.w	r0, #12
    a210:	f000 fd54 	bl	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a214:	68e0      	ldr	r0, [r4, #12]
    a216:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a21a:	f041 0101 	orr.w	r1, r1, #1
    a21e:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a222:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    a226:	bd70      	pop	{r4, r5, r6, pc}
    a228:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a22c:	2924      	cmp	r1, #36	; 0x24
    a22e:	bf1d      	ittte	ne
    a230:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    a234:	2924      	cmpne	r1, #36	; 0x24
    a236:	2300      	movne	r3, #0
    a238:	2301      	moveq	r3, #1
    a23a:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    a23e:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    a242:	f006 fad1 	bl	107e8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a246:	68e0      	ldr	r0, [r4, #12]
    a248:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a24c:	2100      	movs	r1, #0
    a24e:	2014      	movs	r0, #20
    a250:	f000 fd34 	bl	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a254:	68e0      	ldr	r0, [r4, #12]
    a256:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a25a:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a25e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a262:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a266:	bd70      	pop	{r4, r5, r6, pc}
    a268:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a26c:	2301      	movs	r3, #1
    a26e:	210b      	movs	r1, #11
    a270:	3078      	adds	r0, #120	; 0x78
    a272:	f005 fe15 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a276:	b9c8      	cbnz	r0, a2ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    a278:	68e0      	ldr	r0, [r4, #12]
    a27a:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    a27e:	2901      	cmp	r1, #1
    a280:	bf18      	it	ne
    a282:	2902      	cmpne	r1, #2
    a284:	d006      	beq.n	a294 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x404>
    a286:	bf00      	nop
    a288:	f240 218f 	movw	r1, #655	; 0x28f
    a28c:	f04f 0006 	mov.w	r0, #6
    a290:	f7f9 fc78 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a294:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    a298:	2a01      	cmp	r2, #1
    a29a:	bf18      	it	ne
    a29c:	2a02      	cmpne	r2, #2
    a29e:	d1f3      	bne.n	a288 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3f8>
    a2a0:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    a2a4:	2901      	cmp	r1, #1
    a2a6:	d006      	beq.n	a2b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x426>
    a2a8:	2902      	cmp	r1, #2
    a2aa:	e000      	b.n	a2ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41e>
    a2ac:	e028      	b.n	a300 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a2ae:	bf08      	it	eq
    a2b0:	2b02      	cmpeq	r3, #2
    a2b2:	d002      	beq.n	a2ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42a>
    a2b4:	e00e      	b.n	a2d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a2b6:	2b01      	cmp	r3, #1
    a2b8:	d10c      	bne.n	a2d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a2ba:	f890 11c1 	ldrb.w	r1, [r0, #449]	; 0x1c1
    a2be:	2a01      	cmp	r2, #1
    a2c0:	d006      	beq.n	a2d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x440>
    a2c2:	2a02      	cmp	r2, #2
    a2c4:	bf08      	it	eq
    a2c6:	2902      	cmpeq	r1, #2
    a2c8:	d00d      	beq.n	a2e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    a2ca:	e003      	b.n	a2d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a2cc:	20000140 	.word	0x20000140
    a2d0:	2901      	cmp	r1, #1
    a2d2:	d008      	beq.n	a2e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    a2d4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2d8:	2301      	movs	r3, #1
    a2da:	2103      	movs	r1, #3
    a2dc:	3078      	adds	r0, #120	; 0x78
    a2de:	f005 fddf 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2e2:	b968      	cbnz	r0, a300 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a2e4:	e003      	b.n	a2ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x45e>
    a2e6:	2000      	movs	r0, #0
    a2e8:	f000 fd5e 	bl	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    a2ec:	e008      	b.n	a300 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a2ee:	68e0      	ldr	r0, [r4, #12]
    a2f0:	2301      	movs	r3, #1
    a2f2:	2102      	movs	r1, #2
    a2f4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2f8:	3078      	adds	r0, #120	; 0x78
    a2fa:	f005 fdd1 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2fe:	b1b0      	cbz	r0, a32e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x49e>
    a300:	68e0      	ldr	r0, [r4, #12]
    a302:	2301      	movs	r3, #1
    a304:	2100      	movs	r1, #0
    a306:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a30a:	3078      	adds	r0, #120	; 0x78
    a30c:	f005 fdc8 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a310:	2800      	cmp	r0, #0
    a312:	bf08      	it	eq
    a314:	bd70      	popeq	{r4, r5, r6, pc}
    a316:	68e0      	ldr	r0, [r4, #12]
    a318:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    a31c:	2800      	cmp	r0, #0
    a31e:	bf08      	it	eq
    a320:	bd70      	popeq	{r4, r5, r6, pc}
    a322:	2100      	movs	r1, #0
    a324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a328:	20ff      	movs	r0, #255	; 0xff
    a32a:	f000 bcc7 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a32e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a332:	2100      	movs	r1, #0
    a334:	2016      	movs	r0, #22
    a336:	f000 bcc1 	b.w	acbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a33a:	0000      	movs	r0, r0
    a33c:	b570      	push	{r4, r5, r6, lr}
    a33e:	b084      	sub	sp, #16
    a340:	4605      	mov	r5, r0
    a342:	4668      	mov	r0, sp
    a344:	f7fa fb08 	bl	4958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a348:	b318      	cbz	r0, a392 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    a34a:	2222      	movs	r2, #34	; 0x22
    a34c:	2100      	movs	r1, #0
    a34e:	9800      	ldr	r0, [sp, #0]
    a350:	f004 fb6a 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a354:	2103      	movs	r1, #3
    a356:	9800      	ldr	r0, [sp, #0]
    a358:	f006 f8c9 	bl	104ee <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a35c:	9800      	ldr	r0, [sp, #0]
    a35e:	7801      	ldrb	r1, [r0, #0]
    a360:	f021 0110 	bic.w	r1, r1, #16
    a364:	7001      	strb	r1, [r0, #0]
    a366:	4629      	mov	r1, r5
    a368:	f7fc f9a8 	bl	66bc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a36c:	2200      	movs	r2, #0
    a36e:	4c63      	ldr	r4, [pc, #396]	; (a4fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x66c>)
    a370:	f644 162f 	movw	r6, #18735	; 0x492f
    a374:	2d0e      	cmp	r5, #14
    a376:	d06e      	beq.n	a456 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c6>
    a378:	dc10      	bgt.n	a39c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50c>
    a37a:	f1a5 0002 	sub.w	r0, r5, #2
    a37e:	280c      	cmp	r0, #12
    a380:	d21e      	bcs.n	a3c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    a382:	e8df f000 	tbb	[pc, r0]
    a386:	1d22      	.short	0x1d22
    a388:	22b0b048 	.word	0x22b0b048
    a38c:	b01d551d 	.word	0xb01d551d
    a390:	3b27      	.short	0x3b27
    a392:	f640 1164 	movw	r1, #2404	; 0x964
    a396:	2031      	movs	r0, #49	; 0x31
    a398:	f7f9 fbf4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a39c:	2d15      	cmp	r5, #21
    a39e:	d05b      	beq.n	a458 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c8>
    a3a0:	dc08      	bgt.n	a3b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x524>
    a3a2:	2d11      	cmp	r5, #17
    a3a4:	d021      	beq.n	a3ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55a>
    a3a6:	2d12      	cmp	r5, #18
    a3a8:	bf18      	it	ne
    a3aa:	2d13      	cmpne	r5, #19
    a3ac:	d03f      	beq.n	a42e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x59e>
    a3ae:	2d14      	cmp	r5, #20
    a3b0:	d052      	beq.n	a458 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c8>
    a3b2:	e005      	b.n	a3c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    a3b4:	2d16      	cmp	r5, #22
    a3b6:	d025      	beq.n	a404 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x574>
    a3b8:	2d17      	cmp	r5, #23
    a3ba:	d066      	beq.n	a48a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5fa>
    a3bc:	2dff      	cmp	r5, #255	; 0xff
    a3be:	d076      	beq.n	a4ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61e>
    a3c0:	f640 11d6 	movw	r1, #2518	; 0x9d6
    a3c4:	2031      	movs	r0, #49	; 0x31
    a3c6:	f7f9 fbdd 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3ca:	68e1      	ldr	r1, [r4, #12]
    a3cc:	9800      	ldr	r0, [sp, #0]
    a3ce:	f891 10f6 	ldrb.w	r1, [r1, #246]	; 0xf6
    a3d2:	e015      	b.n	a400 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x570>
    a3d4:	9800      	ldr	r0, [sp, #0]
    a3d6:	210b      	movs	r1, #11
    a3d8:	7101      	strb	r1, [r0, #4]
    a3da:	2159      	movs	r1, #89	; 0x59
    a3dc:	7141      	strb	r1, [r0, #5]
    a3de:	7182      	strb	r2, [r0, #6]
    a3e0:	2137      	movs	r1, #55	; 0x37
    a3e2:	71c1      	strb	r1, [r0, #7]
    a3e4:	2111      	movs	r1, #17
    a3e6:	7201      	strb	r1, [r0, #8]
    a3e8:	e07d      	b.n	a4e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a3ea:	2103      	movs	r1, #3
    a3ec:	9800      	ldr	r0, [sp, #0]
    a3ee:	f006 f85a 	bl	104a6 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a3f2:	2106      	movs	r1, #6
    a3f4:	9800      	ldr	r0, [sp, #0]
    a3f6:	f006 f858 	bl	104aa <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a3fa:	e074      	b.n	a4e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a3fc:	9800      	ldr	r0, [sp, #0]
    a3fe:	2106      	movs	r1, #6
    a400:	7101      	strb	r1, [r0, #4]
    a402:	e070      	b.n	a4e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a404:	68e1      	ldr	r1, [r4, #12]
    a406:	9800      	ldr	r0, [sp, #0]
    a408:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    a40c:	7102      	strb	r2, [r0, #4]
    a40e:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    a412:	7141      	strb	r1, [r0, #5]
    a414:	e067      	b.n	a4e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a416:	68e0      	ldr	r0, [r4, #12]
    a418:	f500 7192 	add.w	r1, r0, #292	; 0x124
    a41c:	9800      	ldr	r0, [sp, #0]
    a41e:	f006 f857 	bl	104d0 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    a422:	68e0      	ldr	r0, [r4, #12]
    a424:	f100 01ec 	add.w	r1, r0, #236	; 0xec
    a428:	9800      	ldr	r0, [sp, #0]
    a42a:	f006 f84e 	bl	104ca <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    a42e:	e05a      	b.n	a4e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a430:	9202      	str	r2, [sp, #8]
    a432:	9203      	str	r2, [sp, #12]
    a434:	f002 fcf2 	bl	ce1c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a438:	68e1      	ldr	r1, [r4, #12]
    a43a:	4030      	ands	r0, r6
    a43c:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a440:	4001      	ands	r1, r0
    a442:	f88d 1008 	strb.w	r1, [sp, #8]
    a446:	0a00      	lsrs	r0, r0, #8
    a448:	f88d 0009 	strb.w	r0, [sp, #9]
    a44c:	a902      	add	r1, sp, #8
    a44e:	9800      	ldr	r0, [sp, #0]
    a450:	f006 f848 	bl	104e4 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    a454:	e047      	b.n	a4e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a456:	e02b      	b.n	a4b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x620>
    a458:	68e0      	ldr	r0, [r4, #12]
    a45a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a45e:	9800      	ldr	r0, [sp, #0]
    a460:	f006 f84d 	bl	104fe <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a464:	68e0      	ldr	r0, [r4, #12]
    a466:	f8b0 10f8 	ldrh.w	r1, [r0, #248]	; 0xf8
    a46a:	9800      	ldr	r0, [sp, #0]
    a46c:	f006 f84b 	bl	10506 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a470:	68e0      	ldr	r0, [r4, #12]
    a472:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    a476:	9800      	ldr	r0, [sp, #0]
    a478:	f006 f849 	bl	1050e <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a47c:	68e0      	ldr	r0, [r4, #12]
    a47e:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
    a482:	9800      	ldr	r0, [sp, #0]
    a484:	f006 f847 	bl	10516 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a488:	e02d      	b.n	a4e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a48a:	68e0      	ldr	r0, [r4, #12]
    a48c:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a490:	2901      	cmp	r1, #1
    a492:	9900      	ldr	r1, [sp, #0]
    a494:	bf14      	ite	ne
    a496:	f890 2062 	ldrbne.w	r2, [r0, #98]	; 0x62
    a49a:	f890 21c0 	ldrbeq.w	r2, [r0, #448]	; 0x1c0
    a49e:	710a      	strb	r2, [r1, #4]
    a4a0:	bf14      	ite	ne
    a4a2:	f890 0063 	ldrbne.w	r0, [r0, #99]	; 0x63
    a4a6:	f890 01c1 	ldrbeq.w	r0, [r0, #449]	; 0x1c1
    a4aa:	7148      	strb	r0, [r1, #5]
    a4ac:	e01b      	b.n	a4e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a4ae:	e012      	b.n	a4d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x646>
    a4b0:	9202      	str	r2, [sp, #8]
    a4b2:	9203      	str	r2, [sp, #12]
    a4b4:	f002 fcb2 	bl	ce1c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a4b8:	68e1      	ldr	r1, [r4, #12]
    a4ba:	4030      	ands	r0, r6
    a4bc:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a4c0:	4001      	ands	r1, r0
    a4c2:	f88d 1008 	strb.w	r1, [sp, #8]
    a4c6:	0a00      	lsrs	r0, r0, #8
    a4c8:	f88d 0009 	strb.w	r0, [sp, #9]
    a4cc:	a902      	add	r1, sp, #8
    a4ce:	9800      	ldr	r0, [sp, #0]
    a4d0:	f006 f803 	bl	104da <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a4d4:	e007      	b.n	a4e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a4d6:	68e0      	ldr	r0, [r4, #12]
    a4d8:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    a4dc:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    a4e0:	9800      	ldr	r0, [sp, #0]
    a4e2:	f005 ffe4 	bl	104ae <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    a4e6:	f7fa fa0f 	bl	4908 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a4ea:	2800      	cmp	r0, #0
    a4ec:	bf1c      	itt	ne
    a4ee:	b004      	addne	sp, #16
    a4f0:	bd70      	popne	{r4, r5, r6, pc}
    a4f2:	f640 11da 	movw	r1, #2522	; 0x9da
    a4f6:	2031      	movs	r0, #49	; 0x31
    a4f8:	f7f9 fb44 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4fc:	20000140 	.word	0x20000140
    a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a504:	4cff      	ldr	r4, [pc, #1020]	; (a904 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa74>)
    a506:	4682      	mov	sl, r0
    a508:	b087      	sub	sp, #28
    a50a:	68e0      	ldr	r0, [r4, #12]
    a50c:	460d      	mov	r5, r1
    a50e:	8800      	ldrh	r0, [r0, #0]
    a510:	f7f9 ff06 	bl	4320 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    a514:	9005      	str	r0, [sp, #20]
    a516:	b178      	cbz	r0, a538 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a8>
    a518:	78e0      	ldrb	r0, [r4, #3]
    a51a:	4328      	orrs	r0, r5
    a51c:	70e0      	strb	r0, [r4, #3]
    a51e:	88e0      	ldrh	r0, [r4, #6]
    a520:	f04f 0500 	mov.w	r5, #0
    a524:	f410 7f80 	tst.w	r0, #256	; 0x100
    a528:	68e0      	ldr	r0, [r4, #12]
    a52a:	bf1c      	itt	ne
    a52c:	f8a0 50a6 	strhne.w	r5, [r0, #166]	; 0xa6
    a530:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    a534:	d005      	beq.n	a542 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6b2>
    a536:	e009      	b.n	a54c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6bc>
    a538:	f640 516c 	movw	r1, #3436	; 0xd6c
    a53c:	2031      	movs	r0, #49	; 0x31
    a53e:	f7f9 fb21 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a542:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    a546:	1c49      	adds	r1, r1, #1
    a548:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    a54c:	68e0      	ldr	r0, [r4, #12]
    a54e:	2701      	movs	r7, #1
    a550:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a554:	b939      	cbnz	r1, a566 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d6>
    a556:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a55a:	2301      	movs	r3, #1
    a55c:	2106      	movs	r1, #6
    a55e:	3078      	adds	r0, #120	; 0x78
    a560:	f005 fc9e 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a564:	b340      	cbz	r0, a5b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    a566:	88e0      	ldrh	r0, [r4, #6]
    a568:	f410 6f00 	tst.w	r0, #2048	; 0x800
    a56c:	d007      	beq.n	a57e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6ee>
    a56e:	68e0      	ldr	r0, [r4, #12]
    a570:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a574:	2900      	cmp	r1, #0
    a576:	bf18      	it	ne
    a578:	f8c0 5098 	strne.w	r5, [r0, #152]	; 0x98
    a57c:	d11c      	bne.n	a5b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    a57e:	68e0      	ldr	r0, [r4, #12]
    a580:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    a584:	1c49      	adds	r1, r1, #1
    a586:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    a58a:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    a58e:	428a      	cmp	r2, r1
    a590:	bf2c      	ite	cs
    a592:	1a53      	subcs	r3, r2, r1
    a594:	2300      	movcc	r3, #0
    a596:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    a59a:	f10c 0c05 	add.w	ip, ip, #5
    a59e:	4563      	cmp	r3, ip
    a5a0:	bf98      	it	ls
    a5a2:	f880 70a4 	strbls.w	r7, [r0, #164]	; 0xa4
    a5a6:	4291      	cmp	r1, r2
    a5a8:	d306      	bcc.n	a5b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    a5aa:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    a5ae:	f880 720a 	strb.w	r7, [r0, #522]	; 0x20a
    a5b2:	7960      	ldrb	r0, [r4, #5]
    a5b4:	f7f9 f8da 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a5b8:	88e0      	ldrh	r0, [r4, #6]
    a5ba:	f04f 0602 	mov.w	r6, #2
    a5be:	f410 7f40 	tst.w	r0, #768	; 0x300
    a5c2:	d011      	beq.n	a5e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    a5c4:	68e0      	ldr	r0, [r4, #12]
    a5c6:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a5ca:	b111      	cbz	r1, a5d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x742>
    a5cc:	2903      	cmp	r1, #3
    a5ce:	d006      	beq.n	a5de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x74e>
    a5d0:	e00a      	b.n	a5e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    a5d2:	f880 7088 	strb.w	r7, [r0, #136]	; 0x88
    a5d6:	2101      	movs	r1, #1
    a5d8:	f7fe fb46 	bl	8c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a5dc:	e004      	b.n	a5e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    a5de:	f880 6088 	strb.w	r6, [r0, #136]	; 0x88
    a5e2:	2101      	movs	r1, #1
    a5e4:	f7fe fb40 	bl	8c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a5e8:	68e0      	ldr	r0, [r4, #12]
    a5ea:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a5ee:	2901      	cmp	r1, #1
    a5f0:	d105      	bne.n	a5fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x76e>
    a5f2:	88e1      	ldrh	r1, [r4, #6]
    a5f4:	f411 6f80 	tst.w	r1, #1024	; 0x400
    a5f8:	bf18      	it	ne
    a5fa:	f880 6088 	strbne.w	r6, [r0, #136]	; 0x88
    a5fe:	f04f 0808 	mov.w	r8, #8
    a602:	f1ba 0f00 	cmp.w	sl, #0
    a606:	f040 8295 	bne.w	ab34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    a60a:	88e1      	ldrh	r1, [r4, #6]
    a60c:	f011 0f40 	tst.w	r1, #64	; 0x40
    a610:	bf18      	it	ne
    a612:	f8a0 512c 	strhne.w	r5, [r0, #300]	; 0x12c
    a616:	d104      	bne.n	a622 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x792>
    a618:	f8b0 212c 	ldrh.w	r2, [r0, #300]	; 0x12c
    a61c:	1c52      	adds	r2, r2, #1
    a61e:	f8a0 212c 	strh.w	r2, [r0, #300]	; 0x12c
    a622:	78e2      	ldrb	r2, [r4, #3]
    a624:	2a00      	cmp	r2, #0
    a626:	d178      	bne.n	a71a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x88a>
    a628:	f011 0f08 	tst.w	r1, #8
    a62c:	f04f 0b20 	mov.w	fp, #32
    a630:	d045      	beq.n	a6be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x82e>
    a632:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    a636:	29fe      	cmp	r1, #254	; 0xfe
    a638:	d00d      	beq.n	a656 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7c6>
    a63a:	21fe      	movs	r1, #254	; 0xfe
    a63c:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    a640:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a644:	2919      	cmp	r1, #25
    a646:	d00b      	beq.n	a660 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7d0>
    a648:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    a64c:	291f      	cmp	r1, #31
    a64e:	d019      	beq.n	a684 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7f4>
    a650:	2927      	cmp	r1, #39	; 0x27
    a652:	d026      	beq.n	a6a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x812>
    a654:	e02b      	b.n	a6ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81e>
    a656:	f240 7144 	movw	r1, #1860	; 0x744
    a65a:	2031      	movs	r0, #49	; 0x31
    a65c:	f7f9 fa92 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a660:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
    a664:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    a668:	1e49      	subs	r1, r1, #1
    a66a:	b249      	sxtb	r1, r1
    a66c:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    a670:	2900      	cmp	r1, #0
    a672:	bfa8      	it	ge
    a674:	f880 5085 	strbge.w	r5, [r0, #133]	; 0x85
    a678:	dae6      	bge.n	a648 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    a67a:	f44f 71c8 	mov.w	r1, #400	; 0x190
    a67e:	2031      	movs	r0, #49	; 0x31
    a680:	f7f9 fa80 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a684:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a688:	f005 fc76 	bl	ff78 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a68c:	2800      	cmp	r0, #0
    a68e:	bf1d      	ittte	ne
    a690:	2026      	movne	r0, #38	; 0x26
    a692:	68e1      	ldrne	r1, [r4, #12]
    a694:	f881 0084 	strbne.w	r0, [r1, #132]	; 0x84
    a698:	68e0      	ldreq	r0, [r4, #12]
    a69a:	bf08      	it	eq
    a69c:	f880 b084 	strbeq.w	fp, [r0, #132]	; 0x84
    a6a0:	e005      	b.n	a6ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81e>
    a6a2:	f880 719d 	strb.w	r7, [r0, #413]	; 0x19d
    a6a6:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    a6aa:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    a6ae:	68e0      	ldr	r0, [r4, #12]
    a6b0:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a6b4:	2908      	cmp	r1, #8
    a6b6:	bf04      	itt	eq
    a6b8:	7026      	strbeq	r6, [r4, #0]
    a6ba:	f880 60f4 	strbeq.w	r6, [r0, #244]	; 0xf4
    a6be:	2000      	movs	r0, #0
    a6c0:	79a1      	ldrb	r1, [r4, #6]
    a6c2:	f011 0f01 	tst.w	r1, #1
    a6c6:	d060      	beq.n	a78a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fa>
    a6c8:	6960      	ldr	r0, [r4, #20]
    a6ca:	2301      	movs	r3, #1
    a6cc:	2105      	movs	r1, #5
    a6ce:	f890 9003 	ldrb.w	r9, [r0, #3]
    a6d2:	68e0      	ldr	r0, [r4, #12]
    a6d4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a6d8:	3078      	adds	r0, #120	; 0x78
    a6da:	f005 fbe1 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6de:	b160      	cbz	r0, a6fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x86a>
    a6e0:	f1a9 0002 	sub.w	r0, r9, #2
    a6e4:	280a      	cmp	r0, #10
    a6e6:	d206      	bcs.n	a6f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x866>
    a6e8:	e8df f000 	tbb	[pc, r0]
    a6ec:	05050707 	.word	0x05050707
    a6f0:	05050707 	.word	0x05050707
    a6f4:	0707      	.short	0x0707
    a6f6:	4646      	mov	r6, r8
    a6f8:	e048      	b.n	a78c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    a6fa:	6960      	ldr	r0, [r4, #20]
    a6fc:	f7fb ffb0 	bl	6660 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    a700:	b160      	cbz	r0, a71c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x88c>
    a702:	6960      	ldr	r0, [r4, #20]
    a704:	f890 9003 	ldrb.w	r9, [r0, #3]
    a708:	f1b9 0f00 	cmp.w	r9, #0
    a70c:	bf1c      	itt	ne
    a70e:	f1b9 0f01 	cmpne.w	r9, #1
    a712:	f1b9 0f16 	cmpne.w	r9, #22
    a716:	d005      	beq.n	a724 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x894>
    a718:	e01a      	b.n	a750 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    a71a:	e069      	b.n	a7f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    a71c:	f000 fc8e 	bl	b03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    a720:	4606      	mov	r6, r0
    a722:	e033      	b.n	a78c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    a724:	68e0      	ldr	r0, [r4, #12]
    a726:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    a72a:	f005 fc25 	bl	ff78 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a72e:	b178      	cbz	r0, a750 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    a730:	68e1      	ldr	r1, [r4, #12]
    a732:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    a736:	281f      	cmp	r0, #31
    a738:	d00a      	beq.n	a750 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    a73a:	2820      	cmp	r0, #32
    a73c:	bf04      	itt	eq
    a73e:	2026      	moveq	r0, #38	; 0x26
    a740:	f881 0084 	strbeq.w	r0, [r1, #132]	; 0x84
    a744:	d004      	beq.n	a750 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    a746:	f1b9 0f16 	cmp.w	r9, #22
    a74a:	bf08      	it	eq
    a74c:	465e      	moveq	r6, fp
    a74e:	e01d      	b.n	a78c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    a750:	f1b9 0f19 	cmp.w	r9, #25
    a754:	d205      	bcs.n	a762 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8d2>
    a756:	486c      	ldr	r0, [pc, #432]	; (a908 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa78>)
    a758:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
    a75c:	b108      	cbz	r0, a762 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8d2>
    a75e:	4780      	blx	r0
    a760:	e00b      	b.n	a77a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ea>
    a762:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    a766:	d106      	bne.n	a776 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e6>
    a768:	69a0      	ldr	r0, [r4, #24]
    a76a:	b120      	cbz	r0, a776 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e6>
    a76c:	68e0      	ldr	r0, [r4, #12]
    a76e:	f880 719e 	strb.w	r7, [r0, #414]	; 0x19e
    a772:	2000      	movs	r0, #0
    a774:	e001      	b.n	a77a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ea>
    a776:	f000 fc61 	bl	b03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    a77a:	68e1      	ldr	r1, [r4, #12]
    a77c:	e9d1 2334 	ldrd	r2, r3, [r1, #208]	; 0xd0
    a780:	1c52      	adds	r2, r2, #1
    a782:	f143 0300 	adc.w	r3, r3, #0
    a786:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    a78a:	4606      	mov	r6, r0
    a78c:	70e6      	strb	r6, [r4, #3]
    a78e:	bb7e      	cbnz	r6, a7f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    a790:	88e0      	ldrh	r0, [r4, #6]
    a792:	f010 0f04 	tst.w	r0, #4
    a796:	d005      	beq.n	a7a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x914>
    a798:	68e1      	ldr	r1, [r4, #12]
    a79a:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    a79e:	2907      	cmp	r1, #7
    a7a0:	bf08      	it	eq
    a7a2:	7027      	strbeq	r7, [r4, #0]
    a7a4:	f010 0f02 	tst.w	r0, #2
    a7a8:	d016      	beq.n	a7d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x948>
    a7aa:	6920      	ldr	r0, [r4, #16]
    a7ac:	78c1      	ldrb	r1, [r0, #3]
    a7ae:	2919      	cmp	r1, #25
    a7b0:	d205      	bcs.n	a7be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x92e>
    a7b2:	4856      	ldr	r0, [pc, #344]	; (a90c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa7c>)
    a7b4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    a7b8:	b108      	cbz	r0, a7be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x92e>
    a7ba:	4780      	blx	r0
    a7bc:	e00c      	b.n	a7d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x948>
    a7be:	29ff      	cmp	r1, #255	; 0xff
    a7c0:	d004      	beq.n	a7cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x93c>
    a7c2:	f240 713a 	movw	r1, #1850	; 0x73a
    a7c6:	2031      	movs	r0, #49	; 0x31
    a7c8:	f7f9 f9dc 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7cc:	68e0      	ldr	r0, [r4, #12]
    a7ce:	2127      	movs	r1, #39	; 0x27
    a7d0:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    a7d4:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    a7d8:	79a0      	ldrb	r0, [r4, #6]
    a7da:	f010 0f10 	tst.w	r0, #16
    a7de:	d007      	beq.n	a7f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    a7e0:	68e0      	ldr	r0, [r4, #12]
    a7e2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a7e6:	290b      	cmp	r1, #11
    a7e8:	bf04      	itt	eq
    a7ea:	210c      	moveq	r1, #12
    a7ec:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    a7f0:	7920      	ldrb	r0, [r4, #4]
    a7f2:	f010 0f08 	tst.w	r0, #8
    a7f6:	d011      	beq.n	a81c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    a7f8:	68e0      	ldr	r0, [r4, #12]
    a7fa:	2301      	movs	r3, #1
    a7fc:	2105      	movs	r1, #5
    a7fe:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a802:	3078      	adds	r0, #120	; 0x78
    a804:	f005 fb4c 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a808:	b128      	cbz	r0, a816 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x986>
    a80a:	f884 8003 	strb.w	r8, [r4, #3]
    a80e:	68e0      	ldr	r0, [r4, #12]
    a810:	f880 51d4 	strb.w	r5, [r0, #468]	; 0x1d4
    a814:	e002      	b.n	a81c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    a816:	2000      	movs	r0, #0
    a818:	f7fa fac6 	bl	4da8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    a81c:	69a0      	ldr	r0, [r4, #24]
    a81e:	b3e8      	cbz	r0, a89c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa0c>
    a820:	9500      	str	r5, [sp, #0]
    a822:	9501      	str	r5, [sp, #4]
    a824:	9502      	str	r5, [sp, #8]
    a826:	9503      	str	r5, [sp, #12]
    a828:	9504      	str	r5, [sp, #16]
    a82a:	68e0      	ldr	r0, [r4, #12]
    a82c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    a830:	f007 faf7 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a834:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a838:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    a83c:	fbb0 f6f1 	udiv	r6, r0, r1
    a840:	68e0      	ldr	r0, [r4, #12]
    a842:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    a846:	f007 fade 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a84a:	4430      	add	r0, r6
    a84c:	f8ad 0006 	strh.w	r0, [sp, #6]
    a850:	68e0      	ldr	r0, [r4, #12]
    a852:	8801      	ldrh	r1, [r0, #0]
    a854:	f8ad 1000 	strh.w	r1, [sp]
    a858:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    a85c:	f8ad 1004 	strh.w	r1, [sp, #4]
    a860:	6840      	ldr	r0, [r0, #4]
    a862:	f005 faf6 	bl	fe52 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    a866:	f8ad 0002 	strh.w	r0, [sp, #2]
    a86a:	68e0      	ldr	r0, [r4, #12]
    a86c:	f890 019e 	ldrb.w	r0, [r0, #414]	; 0x19e
    a870:	b130      	cbz	r0, a880 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    a872:	6960      	ldr	r0, [r4, #20]
    a874:	1cc1      	adds	r1, r0, #3
    a876:	9103      	str	r1, [sp, #12]
    a878:	f005 fdca 	bl	10410 <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>
    a87c:	f88d 0010 	strb.w	r0, [sp, #16]
    a880:	68e0      	ldr	r0, [r4, #12]
    a882:	f890 019d 	ldrb.w	r0, [r0, #413]	; 0x19d
    a886:	f88d 0008 	strb.w	r0, [sp, #8]
    a88a:	69a1      	ldr	r1, [r4, #24]
    a88c:	4668      	mov	r0, sp
    a88e:	4788      	blx	r1
    a890:	68e0      	ldr	r0, [r4, #12]
    a892:	f880 519e 	strb.w	r5, [r0, #414]	; 0x19e
    a896:	f880 519d 	strb.w	r5, [r0, #413]	; 0x19d
    a89a:	e000      	b.n	a89e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa0e>
    a89c:	e021      	b.n	a8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a89e:	9903      	ldr	r1, [sp, #12]
    a8a0:	b1f9      	cbz	r1, a8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8a2:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    a8a6:	b9e1      	cbnz	r1, a8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8a8:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    a8ac:	2927      	cmp	r1, #39	; 0x27
    a8ae:	d018      	beq.n	a8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8b0:	f89d 1010 	ldrb.w	r1, [sp, #16]
    a8b4:	9a03      	ldr	r2, [sp, #12]
    a8b6:	b1a1      	cbz	r1, a8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8b8:	7813      	ldrb	r3, [r2, #0]
    a8ba:	2bff      	cmp	r3, #255	; 0xff
    a8bc:	d006      	beq.n	a8cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa3c>
    a8be:	2b07      	cmp	r3, #7
    a8c0:	bf02      	ittt	eq
    a8c2:	2902      	cmpeq	r1, #2
    a8c4:	7851      	ldrbeq	r1, [r2, #1]
    a8c6:	29ff      	cmpeq	r1, #255	; 0xff
    a8c8:	d002      	beq.n	a8d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa40>
    a8ca:	e00a      	b.n	a8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8cc:	291b      	cmp	r1, #27
    a8ce:	d808      	bhi.n	a8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    a8d0:	f880 719c 	strb.w	r7, [r0, #412]	; 0x19c
    a8d4:	9903      	ldr	r1, [sp, #12]
    a8d6:	f8c0 11a0 	str.w	r1, [r0, #416]	; 0x1a0
    a8da:	f89d 1010 	ldrb.w	r1, [sp, #16]
    a8de:	f880 119f 	strb.w	r1, [r0, #415]	; 0x19f
    a8e2:	f7ff fb01 	bl	9ee8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    a8e6:	f7fa f8ff 	bl	4ae8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    a8ea:	b138      	cbz	r0, a8fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6c>
    a8ec:	68e0      	ldr	r0, [r4, #12]
    a8ee:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    a8f2:	2900      	cmp	r1, #0
    a8f4:	bf08      	it	eq
    a8f6:	f8a0 5108 	strheq.w	r5, [r0, #264]	; 0x108
    a8fa:	d00c      	beq.n	a916 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa86>
    a8fc:	68e0      	ldr	r0, [r4, #12]
    a8fe:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    a902:	e005      	b.n	a910 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa80>
    a904:	20000140 	.word	0x20000140
    a908:	20000160 	.word	0x20000160
    a90c:	200001c4 	.word	0x200001c4
    a910:	1c49      	adds	r1, r1, #1
    a912:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    a916:	f7fa f8e1 	bl	4adc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    a91a:	b140      	cbz	r0, a92e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa9e>
    a91c:	68e1      	ldr	r1, [r4, #12]
    a91e:	f891 0118 	ldrb.w	r0, [r1, #280]	; 0x118
    a922:	2802      	cmp	r0, #2
    a924:	bf9c      	itt	ls
    a926:	1c40      	addls	r0, r0, #1
    a928:	f881 0118 	strbls.w	r0, [r1, #280]	; 0x118
    a92c:	d804      	bhi.n	a938 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaa8>
    a92e:	68e0      	ldr	r0, [r4, #12]
    a930:	f890 0118 	ldrb.w	r0, [r0, #280]	; 0x118
    a934:	2802      	cmp	r0, #2
    a936:	d906      	bls.n	a946 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xab6>
    a938:	68e0      	ldr	r0, [r4, #12]
    a93a:	f8a0 5108 	strh.w	r5, [r0, #264]	; 0x108
    a93e:	f8a0 510a 	strh.w	r5, [r0, #266]	; 0x10a
    a942:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
    a946:	68e0      	ldr	r0, [r4, #12]
    a948:	2301      	movs	r3, #1
    a94a:	2100      	movs	r1, #0
    a94c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a950:	3078      	adds	r0, #120	; 0x78
    a952:	f005 faa5 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a956:	b920      	cbnz	r0, a962 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad2>
    a958:	68e0      	ldr	r0, [r4, #12]
    a95a:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a95e:	280c      	cmp	r0, #12
    a960:	d168      	bne.n	aa34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a962:	68e0      	ldr	r0, [r4, #12]
    a964:	2301      	movs	r3, #1
    a966:	2100      	movs	r1, #0
    a968:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a96c:	3078      	adds	r0, #120	; 0x78
    a96e:	f005 fa97 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a972:	b3e0      	cbz	r0, a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    a974:	68e0      	ldr	r0, [r4, #12]
    a976:	2301      	movs	r3, #1
    a978:	2100      	movs	r1, #0
    a97a:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a97e:	3078      	adds	r0, #120	; 0x78
    a980:	f005 fa8e 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a984:	b398      	cbz	r0, a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    a986:	68e0      	ldr	r0, [r4, #12]
    a988:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a98c:	2902      	cmp	r1, #2
    a98e:	bf04      	itt	eq
    a990:	f890 0118 	ldrbeq.w	r0, [r0, #280]	; 0x118
    a994:	2800      	cmpeq	r0, #0
    a996:	d14d      	bne.n	aa34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a998:	9805      	ldr	r0, [sp, #20]
    a99a:	f004 fda5 	bl	f4e8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    a99e:	b330      	cbz	r0, a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    a9a0:	68e1      	ldr	r1, [r4, #12]
    a9a2:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
    a9a6:	28fe      	cmp	r0, #254	; 0xfe
    a9a8:	d144      	bne.n	aa34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a9aa:	f8b1 0102 	ldrh.w	r0, [r1, #258]	; 0x102
    a9ae:	2801      	cmp	r0, #1
    a9b0:	d940      	bls.n	aa34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a9b2:	f881 710d 	strb.w	r7, [r1, #269]	; 0x10d
    a9b6:	f8b1 00a8 	ldrh.w	r0, [r1, #168]	; 0xa8
    a9ba:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    a9be:	1e83      	subs	r3, r0, #2
    a9c0:	429a      	cmp	r2, r3
    a9c2:	bfaf      	iteee	ge
    a9c4:	2001      	movge	r0, #1
    a9c6:	1a80      	sublt	r0, r0, r2
    a9c8:	1e40      	sublt	r0, r0, #1
    a9ca:	b280      	uxthlt	r0, r0
    a9cc:	f8b1 2108 	ldrh.w	r2, [r1, #264]	; 0x108
    a9d0:	8923      	ldrh	r3, [r4, #8]
    a9d2:	429a      	cmp	r2, r3
    a9d4:	bf2f      	iteee	cs
    a9d6:	2201      	movcs	r2, #1
    a9d8:	1a9a      	subcc	r2, r3, r2
    a9da:	1c52      	addcc	r2, r2, #1
    a9dc:	b292      	uxthcc	r2, r2
    a9de:	4290      	cmp	r0, r2
    a9e0:	bf88      	it	hi
    a9e2:	4610      	movhi	r0, r2
    a9e4:	2801      	cmp	r0, #1
    a9e6:	bf08      	it	eq
    a9e8:	f881 510d 	strbeq.w	r5, [r1, #269]	; 0x10d
    a9ec:	e000      	b.n	a9f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb60>
    a9ee:	e021      	b.n	aa34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    a9f0:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
    a9f4:	b96a      	cbnz	r2, aa12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    a9f6:	6eca      	ldr	r2, [r1, #108]	; 0x6c
    a9f8:	b15a      	cbz	r2, aa12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    a9fa:	f8b1 20a2 	ldrh.w	r2, [r1, #162]	; 0xa2
    a9fe:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    aa02:	1ad2      	subs	r2, r2, r3
    aa04:	b212      	sxth	r2, r2
    aa06:	2a00      	cmp	r2, #0
    aa08:	dd03      	ble.n	aa12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    aa0a:	4282      	cmp	r2, r0
    aa0c:	bfd8      	it	le
    aa0e:	4610      	movle	r0, r2
    aa10:	b280      	uxth	r0, r0
    aa12:	f891 2181 	ldrb.w	r2, [r1, #385]	; 0x181
    aa16:	b18a      	cbz	r2, aa3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
    aa18:	f8b1 210a 	ldrh.w	r2, [r1, #266]	; 0x10a
    aa1c:	f8b1 1182 	ldrh.w	r1, [r1, #386]	; 0x182
    aa20:	428a      	cmp	r2, r1
    aa22:	bf2f      	iteee	cs
    aa24:	2101      	movcs	r1, #1
    aa26:	1a89      	subcc	r1, r1, r2
    aa28:	1c49      	addcc	r1, r1, #1
    aa2a:	b289      	uxthcc	r1, r1
    aa2c:	4288      	cmp	r0, r1
    aa2e:	bf88      	it	hi
    aa30:	4608      	movhi	r0, r1
    aa32:	e003      	b.n	aa3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
    aa34:	68e1      	ldr	r1, [r4, #12]
    aa36:	2001      	movs	r0, #1
    aa38:	f881 510d 	strb.w	r5, [r1, #269]	; 0x10d
    aa3c:	78a1      	ldrb	r1, [r4, #2]
    aa3e:	2900      	cmp	r1, #0
    aa40:	bf18      	it	ne
    aa42:	2801      	cmpne	r0, #1
    aa44:	bf9c      	itt	ls
    aa46:	68e1      	ldrls	r1, [r4, #12]
    aa48:	f881 5110 	strbls.w	r5, [r1, #272]	; 0x110
    aa4c:	d903      	bls.n	aa56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbc6>
    aa4e:	68e0      	ldr	r0, [r4, #12]
    aa50:	f880 7110 	strb.w	r7, [r0, #272]	; 0x110
    aa54:	2001      	movs	r0, #1
    aa56:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    aa5a:	f8bc 1078 	ldrh.w	r1, [ip, #120]	; 0x78
    aa5e:	4408      	add	r0, r1
    aa60:	b280      	uxth	r0, r0
    aa62:	f8ac 0104 	strh.w	r0, [ip, #260]	; 0x104
    aa66:	f89c 2088 	ldrb.w	r2, [ip, #136]	; 0x88
    aa6a:	2a00      	cmp	r2, #0
    aa6c:	bf18      	it	ne
    aa6e:	2a01      	cmpne	r2, #1
    aa70:	d009      	beq.n	aa86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf6>
    aa72:	2a02      	cmp	r2, #2
    aa74:	bf18      	it	ne
    aa76:	2a03      	cmpne	r2, #3
    aa78:	d008      	beq.n	aa8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbfc>
    aa7a:	f640 2158 	movw	r1, #2648	; 0xa58
    aa7e:	f04f 0031 	mov.w	r0, #49	; 0x31
    aa82:	f7f9 f87f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa86:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    aa8a:	e053      	b.n	ab34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    aa8c:	f89c 2087 	ldrb.w	r2, [ip, #135]	; 0x87
    aa90:	2a08      	cmp	r2, #8
    aa92:	d022      	beq.n	aada <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc4a>
    aa94:	f8bc 00a6 	ldrh.w	r0, [ip, #166]	; 0xa6
    aa98:	f8bc 10a8 	ldrh.w	r1, [ip, #168]	; 0xa8
    aa9c:	2600      	movs	r6, #0
    aa9e:	1c82      	adds	r2, r0, #2
    aaa0:	4291      	cmp	r1, r2
    aaa2:	d306      	bcc.n	aab2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc22>
    aaa4:	1a08      	subs	r0, r1, r0
    aaa6:	1e80      	subs	r0, r0, #2
    aaa8:	0406      	lsls	r6, r0, #16
    aaaa:	0c36      	lsrs	r6, r6, #16
    aaac:	bf1c      	itt	ne
    aaae:	1e70      	subne	r0, r6, #1
    aab0:	b286      	uxthne	r6, r0
    aab2:	f89c 00a4 	ldrb.w	r0, [ip, #164]	; 0xa4
    aab6:	b158      	cbz	r0, aad0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc40>
    aab8:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    aabc:	2301      	movs	r3, #1
    aabe:	2109      	movs	r1, #9
    aac0:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    aac4:	f005 f9ec 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aac8:	2800      	cmp	r0, #0
    aaca:	bf08      	it	eq
    aacc:	2600      	moveq	r6, #0
    aace:	d02b      	beq.n	ab28 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc98>
    aad0:	68e0      	ldr	r0, [r4, #12]
    aad2:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    aad6:	b999      	cbnz	r1, ab00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc70>
    aad8:	e00a      	b.n	aaf0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc60>
    aada:	f8bc 20a6 	ldrh.w	r2, [ip, #166]	; 0xa6
    aade:	2a03      	cmp	r2, #3
    aae0:	d3d1      	bcc.n	aa86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf6>
    aae2:	f8bc 00a8 	ldrh.w	r0, [ip, #168]	; 0xa8
    aae6:	4408      	add	r0, r1
    aae8:	1c40      	adds	r0, r0, #1
    aaea:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    aaee:	e021      	b.n	ab34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    aaf0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aaf4:	2301      	movs	r3, #1
    aaf6:	2106      	movs	r1, #6
    aaf8:	3078      	adds	r0, #120	; 0x78
    aafa:	f005 f9d1 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aafe:	b178      	cbz	r0, ab20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc90>
    ab00:	68e1      	ldr	r1, [r4, #12]
    ab02:	2000      	movs	r0, #0
    ab04:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
    ab08:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    ab0c:	1c8b      	adds	r3, r1, #2
    ab0e:	429a      	cmp	r2, r3
    ab10:	d303      	bcc.n	ab1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc8a>
    ab12:	1a50      	subs	r0, r2, r1
    ab14:	1e80      	subs	r0, r0, #2
    ab16:	bf18      	it	ne
    ab18:	1e40      	subne	r0, r0, #1
    ab1a:	42b0      	cmp	r0, r6
    ab1c:	bf38      	it	cc
    ab1e:	b286      	uxthcc	r6, r0
    ab20:	2e00      	cmp	r6, #0
    ab22:	bf1c      	itt	ne
    ab24:	1e70      	subne	r0, r6, #1
    ab26:	b286      	uxthne	r6, r0
    ab28:	68e0      	ldr	r0, [r4, #12]
    ab2a:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
    ab2e:	4431      	add	r1, r6
    ab30:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    ab34:	79a0      	ldrb	r0, [r4, #6]
    ab36:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ab3a:	2800      	cmp	r0, #0
    ab3c:	68e0      	ldr	r0, [r4, #12]
    ab3e:	bf18      	it	ne
    ab40:	f8a0 511a 	strhne.w	r5, [r0, #282]	; 0x11a
    ab44:	d106      	bne.n	ab54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcc4>
    ab46:	f8b0 111a 	ldrh.w	r1, [r0, #282]	; 0x11a
    ab4a:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    ab4e:	4411      	add	r1, r2
    ab50:	f8a0 111a 	strh.w	r1, [r0, #282]	; 0x11a
    ab54:	68e0      	ldr	r0, [r4, #12]
    ab56:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    ab5a:	b939      	cbnz	r1, ab6c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcdc>
    ab5c:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    ab60:	2301      	movs	r3, #1
    ab62:	4619      	mov	r1, r3
    ab64:	3078      	adds	r0, #120	; 0x78
    ab66:	f005 f99b 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab6a:	b138      	cbz	r0, ab7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcec>
    ab6c:	68e0      	ldr	r0, [r4, #12]
    ab6e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    ab72:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    ab76:	4411      	add	r1, r2
    ab78:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    ab7c:	68e0      	ldr	r0, [r4, #12]
    ab7e:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    ab82:	b132      	cbz	r2, ab92 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd02>
    ab84:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    ab88:	f8b0 3106 	ldrh.w	r3, [r0, #262]	; 0x106
    ab8c:	4419      	add	r1, r3
    ab8e:	f8a0 10ac 	strh.w	r1, [r0, #172]	; 0xac
    ab92:	f990 30b4 	ldrsb.w	r3, [r0, #180]	; 0xb4
    ab96:	2b00      	cmp	r3, #0
    ab98:	dd06      	ble.n	aba8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd18>
    ab9a:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    ab9e:	f8b0 c106 	ldrh.w	ip, [r0, #262]	; 0x106
    aba2:	4461      	add	r1, ip
    aba4:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    aba8:	f04f 0c3d 	mov.w	ip, #61	; 0x3d
    abac:	f1ba 0f00 	cmp.w	sl, #0
    abb0:	bf18      	it	ne
    abb2:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    abb6:	d14c      	bne.n	ac52 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc2>
    abb8:	7821      	ldrb	r1, [r4, #0]
    abba:	2902      	cmp	r1, #2
    abbc:	d011      	beq.n	abe2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd52>
    abbe:	2901      	cmp	r1, #1
    abc0:	bf08      	it	eq
    abc2:	f890 118a 	ldrbeq.w	r1, [r0, #394]	; 0x18a
    abc6:	d042      	beq.n	ac4e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbe>
    abc8:	78e1      	ldrb	r1, [r4, #3]
    abca:	b339      	cbz	r1, ac1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd8c>
    abcc:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    abd0:	f011 0f14 	tst.w	r1, #20
    abd4:	bf18      	it	ne
    abd6:	211e      	movne	r1, #30
    abd8:	d009      	beq.n	abee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd5e>
    abda:	bf00      	nop
    abdc:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    abe0:	e052      	b.n	ac88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    abe2:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
    abe6:	2906      	cmp	r1, #6
    abe8:	bf18      	it	ne
    abea:	2116      	movne	r1, #22
    abec:	e02f      	b.n	ac4e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbe>
    abee:	f011 0f08 	tst.w	r1, #8
    abf2:	bf18      	it	ne
    abf4:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    abf8:	d146      	bne.n	ac88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    abfa:	f011 0f20 	tst.w	r1, #32
    abfe:	bf18      	it	ne
    ac00:	2123      	movne	r1, #35	; 0x23
    ac02:	d1eb      	bne.n	abdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4c>
    ac04:	f011 0f03 	tst.w	r1, #3
    ac08:	bf1c      	itt	ne
    ac0a:	212a      	movne	r1, #42	; 0x2a
    ac0c:	f880 1095 	strbne.w	r1, [r0, #149]	; 0x95
    ac10:	d13a      	bne.n	ac88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    ac12:	f640 41ab 	movw	r1, #3243	; 0xcab
    ac16:	2031      	movs	r0, #49	; 0x31
    ac18:	f7f8 ffb4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac1c:	b12a      	cbz	r2, ac2a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd9a>
    ac1e:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    ac22:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    ac26:	4291      	cmp	r1, r2
    ac28:	d210      	bcs.n	ac4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbc>
    ac2a:	2b00      	cmp	r3, #0
    ac2c:	dd05      	ble.n	ac3a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdaa>
    ac2e:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    ac32:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    ac36:	4291      	cmp	r1, r2
    ac38:	d208      	bcs.n	ac4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbc>
    ac3a:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    ac3e:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    ac42:	428a      	cmp	r2, r1
    ac44:	d308      	bcc.n	ac58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc8>
    ac46:	f890 2188 	ldrb.w	r2, [r0, #392]	; 0x188
    ac4a:	b12a      	cbz	r2, ac58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc8>
    ac4c:	2122      	movs	r1, #34	; 0x22
    ac4e:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    ac52:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    ac56:	e017      	b.n	ac88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    ac58:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ac5c:	b13a      	cbz	r2, ac6e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdde>
    ac5e:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    ac62:	428a      	cmp	r2, r1
    ac64:	bf28      	it	cs
    ac66:	f880 8095 	strbcs.w	r8, [r0, #149]	; 0x95
    ac6a:	d2f2      	bcs.n	ac52 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc2>
    ac6c:	e009      	b.n	ac82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf2>
    ac6e:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    ac72:	2906      	cmp	r1, #6
    ac74:	d305      	bcc.n	ac82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf2>
    ac76:	213e      	movs	r1, #62	; 0x3e
    ac78:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    ac7c:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    ac80:	e002      	b.n	ac88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    ac82:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    ac86:	b171      	cbz	r1, aca6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe16>
    ac88:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    ac8c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    ac90:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    ac94:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    ac98:	2900      	cmp	r1, #0
    ac9a:	bf14      	ite	ne
    ac9c:	2102      	movne	r1, #2
    ac9e:	2103      	moveq	r1, #3
    aca0:	f7fd ffe2 	bl	8c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    aca4:	e002      	b.n	acac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe1c>
    aca6:	2100      	movs	r1, #0
    aca8:	f7fd ffde 	bl	8c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    acac:	68e0      	ldr	r0, [r4, #12]
    acae:	f880 510e 	strb.w	r5, [r0, #270]	; 0x10e
    acb2:	b007      	add	sp, #28
    acb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acb8:	f7f9 be10 	b.w	48dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    acbc:	4a0c      	ldr	r2, [pc, #48]	; (acf0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe60>)
    acbe:	b510      	push	{r4, lr}
    acc0:	68d2      	ldr	r2, [r2, #12]
    acc2:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    acc6:	2bfe      	cmp	r3, #254	; 0xfe
    acc8:	d004      	beq.n	acd4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe44>
    acca:	f640 11ed 	movw	r1, #2541	; 0x9ed
    acce:	2031      	movs	r0, #49	; 0x31
    acd0:	f7f8 ff58 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acd4:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    acd8:	2000      	movs	r0, #0
    acda:	2900      	cmp	r1, #0
    acdc:	bf1c      	itt	ne
    acde:	f8a2 00b2 	strhne.w	r0, [r2, #178]	; 0xb2
    ace2:	bd10      	popne	{r4, pc}
    ace4:	f8a2 00ac 	strh.w	r0, [r2, #172]	; 0xac
    ace8:	2001      	movs	r0, #1
    acea:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    acee:	bd10      	pop	{r4, pc}
    acf0:	20000140 	.word	0x20000140
    acf4:	b570      	push	{r4, r5, r6, lr}
    acf6:	4a2b      	ldr	r2, [pc, #172]	; (ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf14>)
    acf8:	4603      	mov	r3, r0
    acfa:	88d0      	ldrh	r0, [r2, #6]
    acfc:	4318      	orrs	r0, r3
    acfe:	80d0      	strh	r0, [r2, #6]
    ad00:	4610      	mov	r0, r2
    ad02:	2b40      	cmp	r3, #64	; 0x40
    ad04:	68c0      	ldr	r0, [r0, #12]
    ad06:	d011      	beq.n	ad2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe9c>
    ad08:	f013 0f02 	tst.w	r3, #2
    ad0c:	f04f 0400 	mov.w	r4, #0
    ad10:	f04f 0c01 	mov.w	ip, #1
    ad14:	f003 0501 	and.w	r5, r3, #1
    ad18:	d00d      	beq.n	ad36 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xea6>
    ad1a:	2d00      	cmp	r5, #0
    ad1c:	bf08      	it	eq
    ad1e:	6111      	streq	r1, [r2, #16]
    ad20:	d026      	beq.n	ad70 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xee0>
    ad22:	f640 41fe 	movw	r1, #3326	; 0xcfe
    ad26:	2031      	movs	r0, #49	; 0x31
    ad28:	f7f8 ff2c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ad30:	2104      	movs	r1, #4
    ad32:	f7fd bf99 	b.w	8c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ad36:	b1b5      	cbz	r5, ad66 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    ad38:	6151      	str	r1, [r2, #20]
    ad3a:	78c9      	ldrb	r1, [r1, #3]
    ad3c:	2906      	cmp	r1, #6
    ad3e:	d009      	beq.n	ad54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xec4>
    ad40:	290b      	cmp	r1, #11
    ad42:	bf01      	itttt	eq
    ad44:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    ad48:	2911      	cmpeq	r1, #17
    ad4a:	f880 4089 	strbeq.w	r4, [r0, #137]	; 0x89
    ad4e:	f880 c0b6 	strbeq.w	ip, [r0, #182]	; 0xb6
    ad52:	e008      	b.n	ad66 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    ad54:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ad58:	2917      	cmp	r1, #23
    ad5a:	d104      	bne.n	ad66 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    ad5c:	2100      	movs	r1, #0
    ad5e:	e9c0 1132 	strd	r1, r1, [r0, #200]	; 0xc8
    ad62:	f880 c089 	strb.w	ip, [r0, #137]	; 0x89
    ad66:	f013 0f02 	tst.w	r3, #2
    ad6a:	bf18      	it	ne
    ad6c:	6911      	ldrne	r1, [r2, #16]
    ad6e:	d013      	beq.n	ad98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    ad70:	78c9      	ldrb	r1, [r1, #3]
    ad72:	2905      	cmp	r1, #5
    ad74:	d007      	beq.n	ad86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef6>
    ad76:	290b      	cmp	r1, #11
    ad78:	bf02      	ittt	eq
    ad7a:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    ad7e:	2910      	cmpeq	r1, #16
    ad80:	f880 408a 	strbeq.w	r4, [r0, #138]	; 0x8a
    ad84:	e008      	b.n	ad98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    ad86:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ad8a:	2915      	cmp	r1, #21
    ad8c:	d104      	bne.n	ad98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    ad8e:	2100      	movs	r1, #0
    ad90:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    ad94:	f880 c08a 	strb.w	ip, [r0, #138]	; 0x8a
    ad98:	f013 0f20 	tst.w	r3, #32
    ad9c:	bf1c      	itt	ne
    ad9e:	2008      	movne	r0, #8
    ada0:	7110      	strbne	r0, [r2, #4]
    ada2:	bd70      	pop	{r4, r5, r6, pc}
    ada4:	20000140 	.word	0x20000140
    ada8:	4a15      	ldr	r2, [pc, #84]	; (ae00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf70>)
    adaa:	b510      	push	{r4, lr}
    adac:	68d1      	ldr	r1, [r2, #12]
    adae:	880b      	ldrh	r3, [r1, #0]
    adb0:	f8a1 3216 	strh.w	r3, [r1, #534]	; 0x216
    adb4:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    adb8:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    adbc:	2801      	cmp	r0, #1
    adbe:	bf18      	it	ne
    adc0:	2802      	cmpne	r0, #2
    adc2:	d005      	beq.n	add0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf40>
    adc4:	f240 218f 	movw	r1, #655	; 0x28f
    adc8:	f04f 0006 	mov.w	r0, #6
    adcc:	f7f8 feda 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    add0:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    add4:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    add8:	2801      	cmp	r0, #1
    adda:	bf18      	it	ne
    addc:	2802      	cmpne	r0, #2
    adde:	d1f1      	bne.n	adc4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf34>
    ade0:	f881 0219 	strb.w	r0, [r1, #537]	; 0x219
    ade4:	f04f 0001 	mov.w	r0, #1
    ade8:	f881 0212 	strb.w	r0, [r1, #530]	; 0x212
    adec:	f04f 0000 	mov.w	r0, #0
    adf0:	f881 01be 	strb.w	r0, [r1, #446]	; 0x1be
    adf4:	7950      	ldrb	r0, [r2, #5]
    adf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    adfa:	f7f8 bcb7 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    adfe:	0000      	.short	0x0000
    ae00:	20000140 	.word	0x20000140
    ae04:	b510      	push	{r4, lr}
    ae06:	4c17      	ldr	r4, [pc, #92]	; (ae64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd4>)
    ae08:	2301      	movs	r3, #1
    ae0a:	2100      	movs	r1, #0
    ae0c:	68e0      	ldr	r0, [r4, #12]
    ae0e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae12:	3078      	adds	r0, #120	; 0x78
    ae14:	f005 f844 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae18:	2800      	cmp	r0, #0
    ae1a:	bf04      	itt	eq
    ae1c:	2001      	moveq	r0, #1
    ae1e:	bd10      	popeq	{r4, pc}
    ae20:	6960      	ldr	r0, [r4, #20]
    ae22:	f005 fad1 	bl	103c8 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    ae26:	68e1      	ldr	r1, [r4, #12]
    ae28:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    ae2c:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    ae30:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    ae34:	1a80      	subs	r0, r0, r2
    ae36:	b200      	sxth	r0, r0
    ae38:	2201      	movs	r2, #1
    ae3a:	4283      	cmp	r3, r0
    ae3c:	bfa8      	it	ge
    ae3e:	2800      	cmpge	r0, #0
    ae40:	dd09      	ble.n	ae56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfc6>
    ae42:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    ae46:	6960      	ldr	r0, [r4, #20]
    ae48:	f005 fab9 	bl	103be <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    ae4c:	68e1      	ldr	r1, [r4, #12]
    ae4e:	200b      	movs	r0, #11
    ae50:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ae54:	e004      	b.n	ae60 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd0>
    ae56:	2028      	movs	r0, #40	; 0x28
    ae58:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    ae5c:	f881 2094 	strb.w	r2, [r1, #148]	; 0x94
    ae60:	2000      	movs	r0, #0
    ae62:	bd10      	pop	{r4, pc}
    ae64:	20000140 	.word	0x20000140
    ae68:	b570      	push	{r4, r5, r6, lr}
    ae6a:	4c2d      	ldr	r4, [pc, #180]	; (af20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1090>)
    ae6c:	2301      	movs	r3, #1
    ae6e:	2100      	movs	r1, #0
    ae70:	68e0      	ldr	r0, [r4, #12]
    ae72:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae76:	3078      	adds	r0, #120	; 0x78
    ae78:	f005 f812 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae7c:	2800      	cmp	r0, #0
    ae7e:	bf04      	itt	eq
    ae80:	2001      	moveq	r0, #1
    ae82:	bd70      	popeq	{r4, r5, r6, pc}
    ae84:	68e0      	ldr	r0, [r4, #12]
    ae86:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ae8a:	6960      	ldr	r0, [r4, #20]
    ae8c:	f005 fa6c 	bl	10368 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    ae90:	2800      	cmp	r0, #0
    ae92:	d039      	beq.n	af08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1078>
    ae94:	6960      	ldr	r0, [r4, #20]
    ae96:	68e1      	ldr	r1, [r4, #12]
    ae98:	f647 7cfe 	movw	ip, #32766	; 0x7ffe
    ae9c:	f8b0 200d 	ldrh.w	r2, [r0, #13]
    aea0:	f8a1 21a4 	strh.w	r2, [r1, #420]	; 0x1a4
    aea4:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    aea8:	1ad2      	subs	r2, r2, r3
    aeaa:	b212      	sxth	r2, r2
    aeac:	2301      	movs	r3, #1
    aeae:	4594      	cmp	ip, r2
    aeb0:	bfa8      	it	ge
    aeb2:	2a00      	cmpge	r2, #0
    aeb4:	dd2c      	ble.n	af10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
    aeb6:	f005 fa8a 	bl	103ce <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    aeba:	f004 ffbe 	bl	fe3a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    aebe:	4605      	mov	r5, r0
    aec0:	68e0      	ldr	r0, [r4, #12]
    aec2:	4629      	mov	r1, r5
    aec4:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    aec8:	6960      	ldr	r0, [r4, #20]
    aeca:	7900      	ldrb	r0, [r0, #4]
    aecc:	f005 fa03 	bl	102d6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    aed0:	68e1      	ldr	r1, [r4, #12]
    aed2:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    aed6:	6960      	ldr	r0, [r4, #20]
    aed8:	4629      	mov	r1, r5
    aeda:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    aede:	f005 f9f1 	bl	102c4 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    aee2:	68e1      	ldr	r1, [r4, #12]
    aee4:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    aee8:	6960      	ldr	r0, [r4, #20]
    aeea:	f005 fa73 	bl	103d4 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    aeee:	68e1      	ldr	r1, [r4, #12]
    aef0:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    aef4:	6960      	ldr	r0, [r4, #20]
    aef6:	f005 fa70 	bl	103da <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    aefa:	68e1      	ldr	r1, [r4, #12]
    aefc:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    af00:	200d      	movs	r0, #13
    af02:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af06:	e008      	b.n	af1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x108a>
    af08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    af0c:	f000 b896 	b.w	b03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    af10:	2028      	movs	r0, #40	; 0x28
    af12:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    af16:	f881 3094 	strb.w	r3, [r1, #148]	; 0x94
    af1a:	2000      	movs	r0, #0
    af1c:	bd70      	pop	{r4, r5, r6, pc}
    af1e:	0000      	.short	0x0000
    af20:	20000140 	.word	0x20000140
    af24:	b510      	push	{r4, lr}
    af26:	4c29      	ldr	r4, [pc, #164]	; (afcc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x113c>)
    af28:	2301      	movs	r3, #1
    af2a:	2100      	movs	r1, #0
    af2c:	68e0      	ldr	r0, [r4, #12]
    af2e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af32:	3078      	adds	r0, #120	; 0x78
    af34:	f004 ffb4 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af38:	b970      	cbnz	r0, af58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c8>
    af3a:	68e0      	ldr	r0, [r4, #12]
    af3c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af40:	2a12      	cmp	r2, #18
    af42:	d009      	beq.n	af58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c8>
    af44:	2301      	movs	r3, #1
    af46:	2105      	movs	r1, #5
    af48:	3078      	adds	r0, #120	; 0x78
    af4a:	f004 ffa9 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af4e:	2800      	cmp	r0, #0
    af50:	bf0c      	ite	eq
    af52:	2001      	moveq	r0, #1
    af54:	2008      	movne	r0, #8
    af56:	bd10      	pop	{r4, pc}
    af58:	68e0      	ldr	r0, [r4, #12]
    af5a:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    af5e:	b939      	cbnz	r1, af70 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e0>
    af60:	2100      	movs	r1, #0
    af62:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    af66:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    af6a:	1c49      	adds	r1, r1, #1
    af6c:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    af70:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    af74:	6960      	ldr	r0, [r4, #20]
    af76:	f005 fa3f 	bl	103f8 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    af7a:	68e0      	ldr	r0, [r4, #12]
    af7c:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    af80:	6960      	ldr	r0, [r4, #20]
    af82:	f005 fa30 	bl	103e6 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    af86:	68e0      	ldr	r0, [r4, #12]
    af88:	f890 11dc 	ldrb.w	r1, [r0, #476]	; 0x1dc
    af8c:	b121      	cbz	r1, af98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1108>
    af8e:	f44f 7127 	mov.w	r1, #668	; 0x29c
    af92:	2031      	movs	r0, #49	; 0x31
    af94:	f7f8 fdf6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af98:	8801      	ldrh	r1, [r0, #0]
    af9a:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    af9e:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    afa2:	6960      	ldr	r0, [r4, #20]
    afa4:	f005 fa23 	bl	103ee <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    afa8:	68e0      	ldr	r0, [r4, #12]
    afaa:	f500 71f4 	add.w	r1, r0, #488	; 0x1e8
    afae:	6960      	ldr	r0, [r4, #20]
    afb0:	f005 fa16 	bl	103e0 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    afb4:	68e0      	ldr	r0, [r4, #12]
    afb6:	2101      	movs	r1, #1
    afb8:	f880 11dc 	strb.w	r1, [r0, #476]	; 0x1dc
    afbc:	2114      	movs	r1, #20
    afbe:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    afc2:	7960      	ldrb	r0, [r4, #5]
    afc4:	f7f8 fbd2 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    afc8:	2000      	movs	r0, #0
    afca:	bd10      	pop	{r4, pc}
    afcc:	20000140 	.word	0x20000140
    afd0:	b510      	push	{r4, lr}
    afd2:	4c19      	ldr	r4, [pc, #100]	; (b038 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11a8>)
    afd4:	b082      	sub	sp, #8
    afd6:	68e0      	ldr	r0, [r4, #12]
    afd8:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    afdc:	f010 0f01 	tst.w	r0, #1
    afe0:	bf1e      	ittt	ne
    afe2:	2001      	movne	r0, #1
    afe4:	b002      	addne	sp, #8
    afe6:	bd10      	popne	{r4, pc}
    afe8:	4669      	mov	r1, sp
    afea:	6960      	ldr	r0, [r4, #20]
    afec:	f005 fa0b 	bl	10406 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    aff0:	f001 ff14 	bl	ce1c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    aff4:	f644 112f 	movw	r1, #18735	; 0x492f
    aff8:	4001      	ands	r1, r0
    affa:	f89d 0000 	ldrb.w	r0, [sp]
    affe:	ea00 0201 	and.w	r2, r0, r1
    b002:	68e0      	ldr	r0, [r4, #12]
    b004:	f880 20be 	strb.w	r2, [r0, #190]	; 0xbe
    b008:	f89d 2001 	ldrb.w	r2, [sp, #1]
    b00c:	ea02 2111 	and.w	r1, r2, r1, lsr #8
    b010:	f880 10bf 	strb.w	r1, [r0, #191]	; 0xbf
    b014:	2100      	movs	r1, #0
    b016:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b01a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b01e:	1c49      	adds	r1, r1, #1
    b020:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b024:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b028:	f041 0101 	orr.w	r1, r1, #1
    b02c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b030:	b002      	add	sp, #8
    b032:	2000      	movs	r0, #0
    b034:	bd10      	pop	{r4, pc}
    b036:	0000      	.short	0x0000
    b038:	20000140 	.word	0x20000140
    b03c:	4a0d      	ldr	r2, [pc, #52]	; (b074 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11e4>)
    b03e:	68d0      	ldr	r0, [r2, #12]
    b040:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b044:	f011 0f08 	tst.w	r1, #8
    b048:	bf1c      	itt	ne
    b04a:	2001      	movne	r0, #1
    b04c:	4770      	bxne	lr
    b04e:	f041 0108 	orr.w	r1, r1, #8
    b052:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b056:	6951      	ldr	r1, [r2, #20]
    b058:	78c9      	ldrb	r1, [r1, #3]
    b05a:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    b05e:	2100      	movs	r1, #0
    b060:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b064:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b068:	1c49      	adds	r1, r1, #1
    b06a:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b06e:	2000      	movs	r0, #0
    b070:	4770      	bx	lr
    b072:	0000      	.short	0x0000
    b074:	20000140 	.word	0x20000140
    b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b07a:	4c34      	ldr	r4, [pc, #208]	; (b14c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>)
    b07c:	68e0      	ldr	r0, [r4, #12]
    b07e:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    b082:	f010 0f30 	tst.w	r0, #48	; 0x30
    b086:	bf1c      	itt	ne
    b088:	2001      	movne	r0, #1
    b08a:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    b08c:	6960      	ldr	r0, [r4, #20]
    b08e:	f005 f9d7 	bl	10440 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b092:	2800      	cmp	r0, #0
    b094:	d030      	beq.n	b0f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1268>
    b096:	6960      	ldr	r0, [r4, #20]
    b098:	f005 f9c4 	bl	10424 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b09c:	4605      	mov	r5, r0
    b09e:	6960      	ldr	r0, [r4, #20]
    b0a0:	f005 f9c4 	bl	1042c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b0a4:	4606      	mov	r6, r0
    b0a6:	6960      	ldr	r0, [r4, #20]
    b0a8:	f005 f9ba 	bl	10420 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b0ac:	4607      	mov	r7, r0
    b0ae:	6960      	ldr	r0, [r4, #20]
    b0b0:	f005 f9ba 	bl	10428 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b0b4:	4601      	mov	r1, r0
    b0b6:	9500      	str	r5, [sp, #0]
    b0b8:	68e0      	ldr	r0, [r4, #12]
    b0ba:	4633      	mov	r3, r6
    b0bc:	463a      	mov	r2, r7
    b0be:	3028      	adds	r0, #40	; 0x28
    b0c0:	f005 fca2 	bl	10a08 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b0c4:	79a0      	ldrb	r0, [r4, #6]
    b0c6:	f010 0f02 	tst.w	r0, #2
    b0ca:	d003      	beq.n	b0d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1244>
    b0cc:	6920      	ldr	r0, [r4, #16]
    b0ce:	78c0      	ldrb	r0, [r0, #3]
    b0d0:	2814      	cmp	r0, #20
    b0d2:	d015      	beq.n	b100 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1270>
    b0d4:	68e1      	ldr	r1, [r4, #12]
    b0d6:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    b0da:	281c      	cmp	r0, #28
    b0dc:	d010      	beq.n	b100 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1270>
    b0de:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b0e2:	2801      	cmp	r0, #1
    b0e4:	d010      	beq.n	b108 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1278>
    b0e6:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    b0ea:	2800      	cmp	r0, #0
    b0ec:	bf04      	itt	eq
    b0ee:	f891 01b4 	ldrbeq.w	r0, [r1, #436]	; 0x1b4
    b0f2:	2800      	cmpeq	r0, #0
    b0f4:	d010      	beq.n	b118 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1288>
    b0f6:	e007      	b.n	b108 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1278>
    b0f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b0fc:	f7ff bf9e 	b.w	b03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b100:	68e1      	ldr	r1, [r4, #12]
    b102:	2001      	movs	r0, #1
    b104:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    b108:	68e0      	ldr	r0, [r4, #12]
    b10a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b10e:	f041 0110 	orr.w	r1, r1, #16
    b112:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b116:	e00e      	b.n	b136 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12a6>
    b118:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    b11c:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    b120:	f040 0020 	orr.w	r0, r0, #32
    b124:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    b128:	f831 0b28 	ldrh.w	r0, [r1], #40
    b12c:	f005 fc74 	bl	10a18 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    b130:	7960      	ldrb	r0, [r4, #5]
    b132:	f7f8 fb1b 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b136:	68e0      	ldr	r0, [r4, #12]
    b138:	2100      	movs	r1, #0
    b13a:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b13e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b142:	1c49      	adds	r1, r1, #1
    b144:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b148:	2000      	movs	r0, #0
    b14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b14c:	20000140 	.word	0x20000140
    b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b152:	4c22      	ldr	r4, [pc, #136]	; (b1dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x134c>)
    b154:	2301      	movs	r3, #1
    b156:	210a      	movs	r1, #10
    b158:	68e0      	ldr	r0, [r4, #12]
    b15a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b15e:	3078      	adds	r0, #120	; 0x78
    b160:	f004 fe9e 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b164:	2800      	cmp	r0, #0
    b166:	bf04      	itt	eq
    b168:	2001      	moveq	r0, #1
    b16a:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    b16c:	6960      	ldr	r0, [r4, #20]
    b16e:	f005 f967 	bl	10440 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b172:	b1c8      	cbz	r0, b1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1318>
    b174:	6960      	ldr	r0, [r4, #20]
    b176:	f005 f955 	bl	10424 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b17a:	4605      	mov	r5, r0
    b17c:	6960      	ldr	r0, [r4, #20]
    b17e:	f005 f955 	bl	1042c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b182:	4606      	mov	r6, r0
    b184:	6960      	ldr	r0, [r4, #20]
    b186:	f005 f94b 	bl	10420 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b18a:	4607      	mov	r7, r0
    b18c:	6960      	ldr	r0, [r4, #20]
    b18e:	f005 f94b 	bl	10428 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b192:	4601      	mov	r1, r0
    b194:	9500      	str	r5, [sp, #0]
    b196:	68e0      	ldr	r0, [r4, #12]
    b198:	4633      	mov	r3, r6
    b19a:	463a      	mov	r2, r7
    b19c:	3028      	adds	r0, #40	; 0x28
    b19e:	f005 fc33 	bl	10a08 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b1a2:	68e0      	ldr	r0, [r4, #12]
    b1a4:	f005 fb75 	bl	10892 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    b1a8:	68e1      	ldr	r1, [r4, #12]
    b1aa:	2000      	movs	r0, #0
    b1ac:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b1b0:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b1b4:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b1b8:	2801      	cmp	r0, #1
    b1ba:	bf04      	itt	eq
    b1bc:	2002      	moveq	r0, #2
    b1be:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    b1c2:	d008      	beq.n	b1d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1346>
    b1c4:	8808      	ldrh	r0, [r1, #0]
    b1c6:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    b1ca:	3128      	adds	r1, #40	; 0x28
    b1cc:	f005 fae4 	bl	10798 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    b1d0:	7960      	ldrb	r0, [r4, #5]
    b1d2:	f7f8 facb 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b1d6:	2000      	movs	r0, #0
    b1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1da:	0000      	.short	0x0000
    b1dc:	20000140 	.word	0x20000140
    b1e0:	480b      	ldr	r0, [pc, #44]	; (b210 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1380>)
    b1e2:	68c0      	ldr	r0, [r0, #12]
    b1e4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b1e8:	f011 0f04 	tst.w	r1, #4
    b1ec:	bf1c      	itt	ne
    b1ee:	2001      	movne	r0, #1
    b1f0:	4770      	bxne	lr
    b1f2:	2200      	movs	r2, #0
    b1f4:	f8a0 20b2 	strh.w	r2, [r0, #178]	; 0xb2
    b1f8:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    b1fc:	f041 0104 	orr.w	r1, r1, #4
    b200:	1c52      	adds	r2, r2, #1
    b202:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    b206:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b20a:	2000      	movs	r0, #0
    b20c:	4770      	bx	lr
    b20e:	0000      	.short	0x0000
    b210:	20000140 	.word	0x20000140
    b214:	b510      	push	{r4, lr}
    b216:	4c0a      	ldr	r4, [pc, #40]	; (b240 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13b0>)
    b218:	2301      	movs	r3, #1
    b21a:	2109      	movs	r1, #9
    b21c:	68e0      	ldr	r0, [r4, #12]
    b21e:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b222:	3078      	adds	r0, #120	; 0x78
    b224:	f004 fe3c 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b228:	2800      	cmp	r0, #0
    b22a:	bf08      	it	eq
    b22c:	bd10      	popeq	{r4, pc}
    b22e:	2000      	movs	r0, #0
    b230:	68e1      	ldr	r1, [r4, #12]
    b232:	f881 00a4 	strb.w	r0, [r1, #164]	; 0xa4
    b236:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b23a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b23e:	bd10      	pop	{r4, pc}
    b240:	20000140 	.word	0x20000140
    b244:	b510      	push	{r4, lr}
    b246:	4c12      	ldr	r4, [pc, #72]	; (b290 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1400>)
    b248:	2301      	movs	r3, #1
    b24a:	2100      	movs	r1, #0
    b24c:	68e0      	ldr	r0, [r4, #12]
    b24e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b252:	3078      	adds	r0, #120	; 0x78
    b254:	f004 fe24 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b258:	b168      	cbz	r0, b276 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13e6>
    b25a:	68e0      	ldr	r0, [r4, #12]
    b25c:	2100      	movs	r1, #0
    b25e:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b262:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b266:	1c49      	adds	r1, r1, #1
    b268:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b26c:	2110      	movs	r1, #16
    b26e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b272:	2000      	movs	r0, #0
    b274:	bd10      	pop	{r4, pc}
    b276:	68e0      	ldr	r0, [r4, #12]
    b278:	2301      	movs	r3, #1
    b27a:	2105      	movs	r1, #5
    b27c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b280:	3078      	adds	r0, #120	; 0x78
    b282:	f004 fe0d 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b286:	2800      	cmp	r0, #0
    b288:	bf14      	ite	ne
    b28a:	2008      	movne	r0, #8
    b28c:	2001      	moveq	r0, #1
    b28e:	bd10      	pop	{r4, pc}
    b290:	20000140 	.word	0x20000140
    b294:	4806      	ldr	r0, [pc, #24]	; (b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1420>)
    b296:	68c0      	ldr	r0, [r0, #12]
    b298:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b29c:	2911      	cmp	r1, #17
    b29e:	bf1c      	itt	ne
    b2a0:	2002      	movne	r0, #2
    b2a2:	4770      	bxne	lr
    b2a4:	2112      	movs	r1, #18
    b2a6:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b2aa:	2000      	movs	r0, #0
    b2ac:	4770      	bx	lr
    b2ae:	0000      	.short	0x0000
    b2b0:	20000140 	.word	0x20000140
    b2b4:	b570      	push	{r4, r5, r6, lr}
    b2b6:	4c36      	ldr	r4, [pc, #216]	; (b390 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1500>)
    b2b8:	2301      	movs	r3, #1
    b2ba:	210b      	movs	r1, #11
    b2bc:	68e0      	ldr	r0, [r4, #12]
    b2be:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b2c2:	3078      	adds	r0, #120	; 0x78
    b2c4:	f004 fdec 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2c8:	bb58      	cbnz	r0, b322 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1492>
    b2ca:	68e0      	ldr	r0, [r4, #12]
    b2cc:	2301      	movs	r3, #1
    b2ce:	2100      	movs	r1, #0
    b2d0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b2d4:	3078      	adds	r0, #120	; 0x78
    b2d6:	f004 fde3 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2da:	2800      	cmp	r0, #0
    b2dc:	bf04      	itt	eq
    b2de:	2001      	moveq	r0, #1
    b2e0:	bd70      	popeq	{r4, r5, r6, pc}
    b2e2:	68e0      	ldr	r0, [r4, #12]
    b2e4:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    b2e8:	2824      	cmp	r0, #36	; 0x24
    b2ea:	d01a      	beq.n	b322 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1492>
    b2ec:	6960      	ldr	r0, [r4, #20]
    b2ee:	f005 f8c2 	bl	10476 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    b2f2:	b1c0      	cbz	r0, b326 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1496>
    b2f4:	68e0      	ldr	r0, [r4, #12]
    b2f6:	2500      	movs	r5, #0
    b2f8:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b2fc:	f041 0104 	orr.w	r1, r1, #4
    b300:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b304:	6961      	ldr	r1, [r4, #20]
    b306:	794a      	ldrb	r2, [r1, #5]
    b308:	f002 0207 	and.w	r2, r2, #7
    b30c:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    b310:	7909      	ldrb	r1, [r1, #4]
    b312:	f001 0107 	and.w	r1, r1, #7
    b316:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    b31a:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    b31e:	b133      	cbz	r3, b32e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x149e>
    b320:	e029      	b.n	b376 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b322:	2020      	movs	r0, #32
    b324:	bd70      	pop	{r4, r5, r6, pc}
    b326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b32a:	f7ff be87 	b.w	b03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b32e:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    b332:	2b01      	cmp	r3, #1
    b334:	d01f      	beq.n	b376 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b336:	f890 6067 	ldrb.w	r6, [r0, #103]	; 0x67
    b33a:	f100 0366 	add.w	r3, r0, #102	; 0x66
    b33e:	f04f 0c01 	mov.w	ip, #1
    b342:	428e      	cmp	r6, r1
    b344:	bf01      	itttt	eq
    b346:	7819      	ldrbeq	r1, [r3, #0]
    b348:	4291      	cmpeq	r1, r2
    b34a:	2102      	moveq	r1, #2
    b34c:	f880 11be 	strbeq.w	r1, [r0, #446]	; 0x1be
    b350:	d011      	beq.n	b376 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b352:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
    b356:	f880 c20c 	strb.w	ip, [r0, #524]	; 0x20c
    b35a:	8802      	ldrh	r2, [r0, #0]
    b35c:	f8a0 220e 	strh.w	r2, [r0, #526]	; 0x20e
    b360:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    b364:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    b368:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    b36c:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    b370:	7960      	ldrb	r0, [r4, #5]
    b372:	f7f8 f9fb 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b376:	68e0      	ldr	r0, [r4, #12]
    b378:	2121      	movs	r1, #33	; 0x21
    b37a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b37e:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    b382:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b386:	1c49      	adds	r1, r1, #1
    b388:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b38c:	2000      	movs	r0, #0
    b38e:	bd70      	pop	{r4, r5, r6, pc}
    b390:	20000140 	.word	0x20000140
    b394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b398:	4c82      	ldr	r4, [pc, #520]	; (b5a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1714>)
    b39a:	68e0      	ldr	r0, [r4, #12]
    b39c:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b3a0:	2920      	cmp	r1, #32
    b3a2:	bf0c      	ite	eq
    b3a4:	2501      	moveq	r5, #1
    b3a6:	2500      	movne	r5, #0
    b3a8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b3ac:	2922      	cmp	r1, #34	; 0x22
    b3ae:	bf08      	it	eq
    b3b0:	f100 0685 	addeq.w	r6, r0, #133	; 0x85
    b3b4:	d006      	beq.n	b3c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1534>
    b3b6:	2d00      	cmp	r5, #0
    b3b8:	bf12      	itee	ne
    b3ba:	f100 0684 	addne.w	r6, r0, #132	; 0x84
    b3be:	2002      	moveq	r0, #2
    b3c0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3c4:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b3c8:	f041 0104 	orr.w	r1, r1, #4
    b3cc:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b3d0:	6960      	ldr	r0, [r4, #20]
    b3d2:	f7fb f955 	bl	6680 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    b3d6:	f04f 0a01 	mov.w	sl, #1
    b3da:	f04f 0800 	mov.w	r8, #0
    b3de:	2800      	cmp	r0, #0
    b3e0:	d052      	beq.n	b488 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b3e2:	6967      	ldr	r7, [r4, #20]
    b3e4:	4638      	mov	r0, r7
    b3e6:	f005 f819 	bl	1041c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    b3ea:	4681      	mov	r9, r0
    b3ec:	4638      	mov	r0, r7
    b3ee:	f005 f821 	bl	10434 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    b3f2:	4607      	mov	r7, r0
    b3f4:	f004 fe08 	bl	10008 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b3f8:	b1e8      	cbz	r0, b436 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b3fa:	68e2      	ldr	r2, [r4, #12]
    b3fc:	f892 1066 	ldrb.w	r1, [r2, #102]	; 0x66
    b400:	4281      	cmp	r1, r0
    b402:	d018      	beq.n	b436 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b404:	f892 31be 	ldrb.w	r3, [r2, #446]	; 0x1be
    b408:	2b01      	cmp	r3, #1
    b40a:	d028      	beq.n	b45e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15ce>
    b40c:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
    b410:	423b      	tst	r3, r7
    b412:	d039      	beq.n	b488 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b414:	2d00      	cmp	r5, #0
    b416:	bf04      	itt	eq
    b418:	f892 205f 	ldrbeq.w	r2, [r2, #95]	; 0x5f
    b41c:	423a      	tsteq	r2, r7
    b41e:	d10a      	bne.n	b436 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b420:	b311      	cbz	r1, b468 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15d8>
    b422:	2904      	cmp	r1, #4
    b424:	bf18      	it	ne
    b426:	2804      	cmpne	r0, #4
    b428:	d023      	beq.n	b472 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e2>
    b42a:	2908      	cmp	r1, #8
    b42c:	bf18      	it	ne
    b42e:	2808      	cmpne	r0, #8
    b430:	d022      	beq.n	b478 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e8>
    b432:	4281      	cmp	r1, r0
    b434:	d828      	bhi.n	b488 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b436:	4648      	mov	r0, r9
    b438:	f004 fde6 	bl	10008 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b43c:	0001      	movs	r1, r0
    b43e:	d040      	beq.n	b4c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b440:	68e0      	ldr	r0, [r4, #12]
    b442:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    b446:	428a      	cmp	r2, r1
    b448:	d03b      	beq.n	b4c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b44a:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b44e:	2901      	cmp	r1, #1
    b450:	d015      	beq.n	b47e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15ee>
    b452:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    b456:	ea10 0f09 	tst.w	r0, r9
    b45a:	d015      	beq.n	b488 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b45c:	e031      	b.n	b4c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b45e:	f892 31c0 	ldrb.w	r3, [r2, #448]	; 0x1c0
    b462:	423b      	tst	r3, r7
    b464:	d1d6      	bne.n	b414 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1584>
    b466:	e00f      	b.n	b488 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b468:	f240 1181 	movw	r1, #385	; 0x181
    b46c:	2006      	movs	r0, #6
    b46e:	f7f8 fb89 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b472:	4281      	cmp	r1, r0
    b474:	d308      	bcc.n	b488 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b476:	e7de      	b.n	b436 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b478:	4281      	cmp	r1, r0
    b47a:	d305      	bcc.n	b488 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b47c:	e7db      	b.n	b436 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b47e:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    b482:	ea10 0f09 	tst.w	r0, r9
    b486:	d11c      	bne.n	b4c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b488:	68e0      	ldr	r0, [r4, #12]
    b48a:	2700      	movs	r7, #0
    b48c:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b490:	2901      	cmp	r1, #1
    b492:	bf0a      	itet	eq
    b494:	201e      	moveq	r0, #30
    b496:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    b49a:	f7ff fc85 	bleq	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b49e:	b38d      	cbz	r5, b504 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1674>
    b4a0:	6960      	ldr	r0, [r4, #20]
    b4a2:	78c1      	ldrb	r1, [r0, #3]
    b4a4:	68e0      	ldr	r0, [r4, #12]
    b4a6:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    b4aa:	fa0a f101 	lsl.w	r1, sl, r1
    b4ae:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
    b4b2:	d028      	beq.n	b506 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1676>
    b4b4:	210a      	movs	r1, #10
    b4b6:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    b4ba:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    b4be:	b338      	cbz	r0, b510 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1680>
    b4c0:	e039      	b.n	b536 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16a6>
    b4c2:	466a      	mov	r2, sp
    b4c4:	6961      	ldr	r1, [r4, #20]
    b4c6:	68e0      	ldr	r0, [r4, #12]
    b4c8:	f004 fe81 	bl	101ce <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    b4cc:	b3b0      	cbz	r0, b53c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ac>
    b4ce:	6960      	ldr	r0, [r4, #20]
    b4d0:	f004 ffae 	bl	10430 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    b4d4:	68e1      	ldr	r1, [r4, #12]
    b4d6:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    b4da:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    b4de:	1a80      	subs	r0, r0, r2
    b4e0:	b200      	sxth	r0, r0
    b4e2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    b4e6:	4282      	cmp	r2, r0
    b4e8:	bfa8      	it	ge
    b4ea:	2800      	cmpge	r0, #0
    b4ec:	dd3d      	ble.n	b56a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16da>
    b4ee:	f89d 0000 	ldrb.w	r0, [sp]
    b4f2:	f881 01a6 	strb.w	r0, [r1, #422]	; 0x1a6
    b4f6:	f89d 0001 	ldrb.w	r0, [sp, #1]
    b4fa:	f881 01a7 	strb.w	r0, [r1, #423]	; 0x1a7
    b4fe:	2024      	movs	r0, #36	; 0x24
    b500:	7030      	strb	r0, [r6, #0]
    b502:	e037      	b.n	b574 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16e4>
    b504:	e009      	b.n	b51a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x168a>
    b506:	f240 31c7 	movw	r1, #967	; 0x3c7
    b50a:	2031      	movs	r0, #49	; 0x31
    b50c:	f7f8 fb3a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b510:	f240 31cf 	movw	r1, #975	; 0x3cf
    b514:	2031      	movs	r0, #49	; 0x31
    b516:	f7f8 fb35 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b51a:	f886 8000 	strb.w	r8, [r6]
    b51e:	68e1      	ldr	r1, [r4, #12]
    b520:	f891 00b4 	ldrb.w	r0, [r1, #180]	; 0xb4
    b524:	1e40      	subs	r0, r0, #1
    b526:	b240      	sxtb	r0, r0
    b528:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    b52c:	2800      	cmp	r0, #0
    b52e:	db31      	blt.n	b594 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1704>
    b530:	f7ff fd84 	bl	b03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b534:	4607      	mov	r7, r0
    b536:	4638      	mov	r0, r7
    b538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b53c:	e7ff      	b.n	b53e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ae>
    b53e:	68e0      	ldr	r0, [r4, #12]
    b540:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b544:	2901      	cmp	r1, #1
    b546:	bf18      	it	ne
    b548:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    b54c:	d007      	beq.n	b55e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ce>
    b54e:	68e0      	ldr	r0, [r4, #12]
    b550:	f100 0185 	add.w	r1, r0, #133	; 0x85
    b554:	428e      	cmp	r6, r1
    b556:	bf08      	it	eq
    b558:	f880 8085 	strbeq.w	r8, [r0, #133]	; 0x85
    b55c:	e00a      	b.n	b574 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16e4>
    b55e:	2000      	movs	r0, #0
    b560:	f7ff fc22 	bl	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b564:	f886 8000 	strb.w	r8, [r6]
    b568:	e7f1      	b.n	b54e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16be>
    b56a:	2028      	movs	r0, #40	; 0x28
    b56c:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    b570:	f881 a094 	strb.w	sl, [r1, #148]	; 0x94
    b574:	68e0      	ldr	r0, [r4, #12]
    b576:	f100 0185 	add.w	r1, r0, #133	; 0x85
    b57a:	428e      	cmp	r6, r1
    b57c:	bf18      	it	ne
    b57e:	f880 80b0 	strbne.w	r8, [r0, #176]	; 0xb0
    b582:	d10c      	bne.n	b59e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x170e>
    b584:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b588:	1e49      	subs	r1, r1, #1
    b58a:	b249      	sxtb	r1, r1
    b58c:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b590:	2900      	cmp	r1, #0
    b592:	da04      	bge.n	b59e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x170e>
    b594:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b598:	2031      	movs	r0, #49	; 0x31
    b59a:	f7f8 faf3 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b59e:	2000      	movs	r0, #0
    b5a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5a4:	20000140 	.word	0x20000140
    b5a8:	b510      	push	{r4, lr}
    b5aa:	4c18      	ldr	r4, [pc, #96]	; (b60c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x177c>)
    b5ac:	68e0      	ldr	r0, [r4, #12]
    b5ae:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b5b2:	f041 0104 	orr.w	r1, r1, #4
    b5b6:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b5ba:	6960      	ldr	r0, [r4, #20]
    b5bc:	f004 ff6f 	bl	1049e <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    b5c0:	2816      	cmp	r0, #22
    b5c2:	d10a      	bne.n	b5da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174a>
    b5c4:	6960      	ldr	r0, [r4, #20]
    b5c6:	f004 ff6c 	bl	104a2 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    b5ca:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b5ce:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    b5d2:	2920      	cmp	r1, #32
    b5d4:	d003      	beq.n	b5de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174e>
    b5d6:	2926      	cmp	r1, #38	; 0x26
    b5d8:	d004      	beq.n	b5e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1754>
    b5da:	2000      	movs	r0, #0
    b5dc:	bd10      	pop	{r4, pc}
    b5de:	f7ff fbe3 	bl	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b5e2:	e00c      	b.n	b5fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x176e>
    b5e4:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    b5e8:	2301      	movs	r3, #1
    b5ea:	210b      	movs	r1, #11
    b5ec:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b5f0:	f004 fc56 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b5f4:	2800      	cmp	r0, #0
    b5f6:	bf04      	itt	eq
    b5f8:	202a      	moveq	r0, #42	; 0x2a
    b5fa:	f7ff fbd5 	bleq	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b5fe:	2000      	movs	r0, #0
    b600:	68e1      	ldr	r1, [r4, #12]
    b602:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b606:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b60a:	bd10      	pop	{r4, pc}
    b60c:	20000140 	.word	0x20000140
    b610:	b510      	push	{r4, lr}
    b612:	4c12      	ldr	r4, [pc, #72]	; (b65c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17cc>)
    b614:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b618:	6960      	ldr	r0, [r4, #20]
    b61a:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    b61e:	7900      	ldrb	r0, [r0, #4]
    b620:	2920      	cmp	r1, #32
    b622:	d017      	beq.n	b654 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c4>
    b624:	2926      	cmp	r1, #38	; 0x26
    b626:	bf1c      	itt	ne
    b628:	2000      	movne	r0, #0
    b62a:	bd10      	popne	{r4, pc}
    b62c:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    b630:	2301      	movs	r3, #1
    b632:	210b      	movs	r1, #11
    b634:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b638:	f004 fc32 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b63c:	2800      	cmp	r0, #0
    b63e:	bf04      	itt	eq
    b640:	202a      	moveq	r0, #42	; 0x2a
    b642:	f7ff fbb1 	bleq	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b646:	2000      	movs	r0, #0
    b648:	68e1      	ldr	r1, [r4, #12]
    b64a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b64e:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b652:	bd10      	pop	{r4, pc}
    b654:	f7ff fba8 	bl	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b658:	e7f5      	b.n	b646 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17b6>
    b65a:	0000      	.short	0x0000
    b65c:	20000140 	.word	0x20000140
    b660:	480d      	ldr	r0, [pc, #52]	; (b698 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1808>)
    b662:	b510      	push	{r4, lr}
    b664:	68c0      	ldr	r0, [r0, #12]
    b666:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b66a:	2917      	cmp	r1, #23
    b66c:	bf1c      	itt	ne
    b66e:	2002      	movne	r0, #2
    b670:	bd10      	popne	{r4, pc}
    b672:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b676:	1e49      	subs	r1, r1, #1
    b678:	b249      	sxtb	r1, r1
    b67a:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b67e:	2900      	cmp	r1, #0
    b680:	da04      	bge.n	b68c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17fc>
    b682:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b686:	2031      	movs	r0, #49	; 0x31
    b688:	f7f8 fa7c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b68c:	211b      	movs	r1, #27
    b68e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b692:	2000      	movs	r0, #0
    b694:	bd10      	pop	{r4, pc}
    b696:	0000      	.short	0x0000
    b698:	20000140 	.word	0x20000140
    b69c:	b510      	push	{r4, lr}
    b69e:	4c0c      	ldr	r4, [pc, #48]	; (b6d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1840>)
    b6a0:	2301      	movs	r3, #1
    b6a2:	4619      	mov	r1, r3
    b6a4:	68e0      	ldr	r0, [r4, #12]
    b6a6:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    b6aa:	3078      	adds	r0, #120	; 0x78
    b6ac:	f004 fbf8 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b6b0:	2800      	cmp	r0, #0
    b6b2:	bf1c      	itt	ne
    b6b4:	2000      	movne	r0, #0
    b6b6:	bd10      	popne	{r4, pc}
    b6b8:	6960      	ldr	r0, [r4, #20]
    b6ba:	f004 febd 	bl	10438 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    b6be:	68e1      	ldr	r1, [r4, #12]
    b6c0:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    b6c4:	2007      	movs	r0, #7
    b6c6:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    b6ca:	2000      	movs	r0, #0
    b6cc:	bd10      	pop	{r4, pc}
    b6ce:	0000      	.short	0x0000
    b6d0:	20000140 	.word	0x20000140
    b6d4:	b570      	push	{r4, r5, r6, lr}
    b6d6:	4c4c      	ldr	r4, [pc, #304]	; (b808 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1978>)
    b6d8:	2600      	movs	r6, #0
    b6da:	4621      	mov	r1, r4
    b6dc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b6e0:	6949      	ldr	r1, [r1, #20]
    b6e2:	2001      	movs	r0, #1
    b6e4:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    b6e8:	7909      	ldrb	r1, [r1, #4]
    b6ea:	4635      	mov	r5, r6
    b6ec:	2a0e      	cmp	r2, #14
    b6ee:	bf08      	it	eq
    b6f0:	2912      	cmpeq	r1, #18
    b6f2:	d01d      	beq.n	b730 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18a0>
    b6f4:	2a1c      	cmp	r2, #28
    b6f6:	bf08      	it	eq
    b6f8:	2914      	cmpeq	r1, #20
    b6fa:	d029      	beq.n	b750 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18c0>
    b6fc:	2a04      	cmp	r2, #4
    b6fe:	bf08      	it	eq
    b700:	290e      	cmpeq	r1, #14
    b702:	d043      	beq.n	b78c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18fc>
    b704:	2a20      	cmp	r2, #32
    b706:	bf08      	it	eq
    b708:	2916      	cmpeq	r1, #22
    b70a:	d050      	beq.n	b7ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x191e>
    b70c:	2a26      	cmp	r2, #38	; 0x26
    b70e:	bf08      	it	eq
    b710:	2916      	cmpeq	r1, #22
    b712:	d04c      	beq.n	b7ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x191e>
    b714:	2917      	cmp	r1, #23
    b716:	bf04      	itt	eq
    b718:	f89c 2085 	ldrbeq.w	r2, [ip, #133]	; 0x85
    b71c:	2a22      	cmpeq	r2, #34	; 0x22
    b71e:	d059      	beq.n	b7d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1944>
    b720:	69a2      	ldr	r2, [r4, #24]
    b722:	2a00      	cmp	r2, #0
    b724:	d054      	beq.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b726:	29ff      	cmp	r1, #255	; 0xff
    b728:	bf08      	it	eq
    b72a:	f88c 019e 	strbeq.w	r0, [ip, #414]	; 0x19e
    b72e:	e04f      	b.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b730:	2301      	movs	r3, #1
    b732:	2109      	movs	r1, #9
    b734:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b738:	f004 fbb2 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b73c:	2800      	cmp	r0, #0
    b73e:	d047      	beq.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b740:	68e0      	ldr	r0, [r4, #12]
    b742:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    b746:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    b74a:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    b74e:	e03f      	b.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b750:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    b754:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    b758:	f89c 10be 	ldrb.w	r1, [ip, #190]	; 0xbe
    b75c:	f021 0120 	bic.w	r1, r1, #32
    b760:	f88c 10be 	strb.w	r1, [ip, #190]	; 0xbe
    b764:	f89c 005c 	ldrb.w	r0, [ip, #92]	; 0x5c
    b768:	2801      	cmp	r0, #1
    b76a:	bf04      	itt	eq
    b76c:	2002      	moveq	r0, #2
    b76e:	f88c 005c 	strbeq.w	r0, [ip, #92]	; 0x5c
    b772:	d02d      	beq.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b774:	f8bc 0000 	ldrh.w	r0, [ip]
    b778:	f50c 72f5 	add.w	r2, ip, #490	; 0x1ea
    b77c:	f10c 0128 	add.w	r1, ip, #40	; 0x28
    b780:	f005 f80a 	bl	10798 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    b784:	7960      	ldrb	r0, [r4, #5]
    b786:	f7f7 fff1 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b78a:	e021      	b.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b78c:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    b790:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    b794:	f8bc 1000 	ldrh.w	r1, [ip]
    b798:	f8ac 121e 	strh.w	r1, [ip, #542]	; 0x21e
    b79c:	211a      	movs	r1, #26
    b79e:	f88c 121c 	strb.w	r1, [ip, #540]	; 0x21c
    b7a2:	f88c 021a 	strb.w	r0, [ip, #538]	; 0x21a
    b7a6:	7960      	ldrb	r0, [r4, #5]
    b7a8:	f7f7 ffe0 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b7ac:	e010      	b.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b7ae:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    b7b2:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    b7b6:	f89c 0085 	ldrb.w	r0, [ip, #133]	; 0x85
    b7ba:	2821      	cmp	r0, #33	; 0x21
    b7bc:	d008      	beq.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b7be:	f89c 00bf 	ldrb.w	r0, [ip, #191]	; 0xbf
    b7c2:	f020 0009 	bic.w	r0, r0, #9
    b7c6:	f88c 00bf 	strb.w	r0, [ip, #191]	; 0xbf
    b7ca:	201a      	movs	r0, #26
    b7cc:	f7ff faec 	bl	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b7d0:	4630      	mov	r0, r6
    b7d2:	bd70      	pop	{r4, r5, r6, pc}
    b7d4:	f88c 5085 	strb.w	r5, [ip, #133]	; 0x85
    b7d8:	f89c 00b4 	ldrb.w	r0, [ip, #180]	; 0xb4
    b7dc:	1e40      	subs	r0, r0, #1
    b7de:	b240      	sxtb	r0, r0
    b7e0:	f88c 00b4 	strb.w	r0, [ip, #180]	; 0xb4
    b7e4:	2800      	cmp	r0, #0
    b7e6:	da04      	bge.n	b7f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1962>
    b7e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b7ec:	2031      	movs	r0, #49	; 0x31
    b7ee:	f7f8 f9c9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7f2:	f89c 01be 	ldrb.w	r0, [ip, #446]	; 0x1be
    b7f6:	2801      	cmp	r0, #1
    b7f8:	bf04      	itt	eq
    b7fa:	2000      	moveq	r0, #0
    b7fc:	f7ff fad4 	bleq	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b800:	68e0      	ldr	r0, [r4, #12]
    b802:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    b806:	e7e3      	b.n	b7d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    b808:	20000140 	.word	0x20000140
    b80c:	b570      	push	{r4, r5, r6, lr}
    b80e:	4c33      	ldr	r4, [pc, #204]	; (b8dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a4c>)
    b810:	68e0      	ldr	r0, [r4, #12]
    b812:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b816:	f011 0f02 	tst.w	r1, #2
    b81a:	d00a      	beq.n	b832 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19a2>
    b81c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b820:	2301      	movs	r3, #1
    b822:	2108      	movs	r1, #8
    b824:	3078      	adds	r0, #120	; 0x78
    b826:	f004 fb3b 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b82a:	2800      	cmp	r0, #0
    b82c:	bf04      	itt	eq
    b82e:	2001      	moveq	r0, #1
    b830:	bd70      	popeq	{r4, r5, r6, pc}
    b832:	68e0      	ldr	r0, [r4, #12]
    b834:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    b838:	f010 0f02 	tst.w	r0, #2
    b83c:	d114      	bne.n	b868 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d8>
    b83e:	6960      	ldr	r0, [r4, #20]
    b840:	f004 fdfc 	bl	1043c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    b844:	68e1      	ldr	r1, [r4, #12]
    b846:	f881 00b9 	strb.w	r0, [r1, #185]	; 0xb9
    b84a:	6960      	ldr	r0, [r4, #20]
    b84c:	f8b0 2005 	ldrh.w	r2, [r0, #5]
    b850:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    b854:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    b858:	f8a1 00bc 	strh.w	r0, [r1, #188]	; 0xbc
    b85c:	f891 00b8 	ldrb.w	r0, [r1, #184]	; 0xb8
    b860:	f040 0002 	orr.w	r0, r0, #2
    b864:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    b868:	68e0      	ldr	r0, [r4, #12]
    b86a:	f04f 0500 	mov.w	r5, #0
    b86e:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    b872:	f011 0f01 	tst.w	r1, #1
    b876:	d114      	bne.n	b8a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a12>
    b878:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b87c:	f011 0f02 	tst.w	r1, #2
    b880:	d004      	beq.n	b88c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19fc>
    b882:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    b886:	2031      	movs	r0, #49	; 0x31
    b888:	f7f8 f97c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b88c:	f041 0102 	orr.w	r1, r1, #2
    b890:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b894:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    b898:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b89c:	1c49      	adds	r1, r1, #1
    b89e:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b8a2:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b8a6:	2906      	cmp	r1, #6
    b8a8:	d106      	bne.n	b8b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a28>
    b8aa:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    b8ae:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    b8b2:	7960      	ldrb	r0, [r4, #5]
    b8b4:	f7f7 ff5a 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b8b8:	68e0      	ldr	r0, [r4, #12]
    b8ba:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    b8be:	b159      	cbz	r1, b8d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a48>
    b8c0:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    b8c4:	7960      	ldrb	r0, [r4, #5]
    b8c6:	f7f7 ff51 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b8ca:	68e0      	ldr	r0, [r4, #12]
    b8cc:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b8d0:	2900      	cmp	r1, #0
    b8d2:	bf08      	it	eq
    b8d4:	f880 50b0 	strbeq.w	r5, [r0, #176]	; 0xb0
    b8d8:	2000      	movs	r0, #0
    b8da:	bd70      	pop	{r4, r5, r6, pc}
    b8dc:	20000140 	.word	0x20000140
    b8e0:	4809      	ldr	r0, [pc, #36]	; (b908 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a78>)
    b8e2:	b510      	push	{r4, lr}
    b8e4:	68c0      	ldr	r0, [r0, #12]
    b8e6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b8ea:	2914      	cmp	r1, #20
    b8ec:	d004      	beq.n	b8f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a68>
    b8ee:	f240 6187 	movw	r1, #1671	; 0x687
    b8f2:	2031      	movs	r0, #49	; 0x31
    b8f4:	f7f8 f946 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8f8:	2101      	movs	r1, #1
    b8fa:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    b8fe:	2115      	movs	r1, #21
    b900:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b904:	bd10      	pop	{r4, pc}
    b906:	0000      	.short	0x0000
    b908:	20000140 	.word	0x20000140
    b90c:	480f      	ldr	r0, [pc, #60]	; (b94c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1abc>)
    b90e:	b510      	push	{r4, lr}
    b910:	68c0      	ldr	r0, [r0, #12]
    b912:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b916:	f011 0f01 	tst.w	r1, #1
    b91a:	d011      	beq.n	b940 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ab0>
    b91c:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    b920:	1e52      	subs	r2, r2, #1
    b922:	b252      	sxtb	r2, r2
    b924:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    b928:	2a00      	cmp	r2, #0
    b92a:	bfa2      	ittt	ge
    b92c:	f021 0101 	bicge.w	r1, r1, #1
    b930:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    b934:	bd10      	popge	{r4, pc}
    b936:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b93a:	2031      	movs	r0, #49	; 0x31
    b93c:	f7f8 f922 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b940:	f44f 61ce 	mov.w	r1, #1648	; 0x670
    b944:	2031      	movs	r0, #49	; 0x31
    b946:	f7f8 f91d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b94a:	0000      	.short	0x0000
    b94c:	20000140 	.word	0x20000140
    b950:	b510      	push	{r4, lr}
    b952:	4c0a      	ldr	r4, [pc, #40]	; (b97c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aec>)
    b954:	2301      	movs	r3, #1
    b956:	2100      	movs	r1, #0
    b958:	68e0      	ldr	r0, [r4, #12]
    b95a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b95e:	3078      	adds	r0, #120	; 0x78
    b960:	f004 fa9e 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b964:	b120      	cbz	r0, b970 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ae0>
    b966:	68e1      	ldr	r1, [r4, #12]
    b968:	201c      	movs	r0, #28
    b96a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b96e:	bd10      	pop	{r4, pc}
    b970:	f240 61f5 	movw	r1, #1781	; 0x6f5
    b974:	2031      	movs	r0, #49	; 0x31
    b976:	f7f8 f905 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b97a:	0000      	.short	0x0000
    b97c:	20000140 	.word	0x20000140
    b980:	480f      	ldr	r0, [pc, #60]	; (b9c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b30>)
    b982:	b510      	push	{r4, lr}
    b984:	68c0      	ldr	r0, [r0, #12]
    b986:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b98a:	f001 0230 	and.w	r2, r1, #48	; 0x30
    b98e:	2a10      	cmp	r2, #16
    b990:	d004      	beq.n	b99c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0c>
    b992:	f240 61fc 	movw	r1, #1788	; 0x6fc
    b996:	2031      	movs	r0, #49	; 0x31
    b998:	f7f8 f8f4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b99c:	f021 0110 	bic.w	r1, r1, #16
    b9a0:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b9a4:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b9a8:	1e49      	subs	r1, r1, #1
    b9aa:	b249      	sxtb	r1, r1
    b9ac:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b9b0:	2900      	cmp	r1, #0
    b9b2:	bfa8      	it	ge
    b9b4:	bd10      	popge	{r4, pc}
    b9b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b9ba:	2031      	movs	r0, #49	; 0x31
    b9bc:	f7f8 f8e2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9c0:	20000140 	.word	0x20000140
    b9c4:	b510      	push	{r4, lr}
    b9c6:	4c0a      	ldr	r4, [pc, #40]	; (b9f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b60>)
    b9c8:	2301      	movs	r3, #1
    b9ca:	2100      	movs	r1, #0
    b9cc:	68e0      	ldr	r0, [r4, #12]
    b9ce:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b9d2:	3078      	adds	r0, #120	; 0x78
    b9d4:	f004 fa64 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b9d8:	b120      	cbz	r0, b9e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b54>
    b9da:	68e1      	ldr	r1, [r4, #12]
    b9dc:	200e      	movs	r0, #14
    b9de:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b9e2:	bd10      	pop	{r4, pc}
    b9e4:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    b9e8:	2031      	movs	r0, #49	; 0x31
    b9ea:	f7f8 f8cb 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9ee:	0000      	.short	0x0000
    b9f0:	20000140 	.word	0x20000140
    b9f4:	480b      	ldr	r0, [pc, #44]	; (ba24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b94>)
    b9f6:	68c0      	ldr	r0, [r0, #12]
    b9f8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b9fc:	f021 0104 	bic.w	r1, r1, #4
    ba00:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ba04:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    ba08:	1e49      	subs	r1, r1, #1
    ba0a:	b249      	sxtb	r1, r1
    ba0c:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    ba10:	2900      	cmp	r1, #0
    ba12:	bfa8      	it	ge
    ba14:	4770      	bxge	lr
    ba16:	b510      	push	{r4, lr}
    ba18:	f44f 71c8 	mov.w	r1, #400	; 0x190
    ba1c:	2031      	movs	r0, #49	; 0x31
    ba1e:	f7f8 f8b1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba22:	0000      	.short	0x0000
    ba24:	20000140 	.word	0x20000140
    ba28:	4809      	ldr	r0, [pc, #36]	; (ba50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bc0>)
    ba2a:	b510      	push	{r4, lr}
    ba2c:	68c0      	ldr	r0, [r0, #12]
    ba2e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ba32:	2910      	cmp	r1, #16
    ba34:	d004      	beq.n	ba40 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bb0>
    ba36:	f240 617f 	movw	r1, #1663	; 0x67f
    ba3a:	2031      	movs	r0, #49	; 0x31
    ba3c:	f7f8 f8a2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba40:	2101      	movs	r1, #1
    ba42:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    ba46:	2111      	movs	r1, #17
    ba48:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ba4c:	bd10      	pop	{r4, pc}
    ba4e:	0000      	.short	0x0000
    ba50:	20000140 	.word	0x20000140
    ba54:	b510      	push	{r4, lr}
    ba56:	4c0a      	ldr	r4, [pc, #40]	; (ba80 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bf0>)
    ba58:	2301      	movs	r3, #1
    ba5a:	2100      	movs	r1, #0
    ba5c:	68e0      	ldr	r0, [r4, #12]
    ba5e:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    ba62:	3078      	adds	r0, #120	; 0x78
    ba64:	f004 fa1c 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ba68:	b120      	cbz	r0, ba74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1be4>
    ba6a:	68e1      	ldr	r1, [r4, #12]
    ba6c:	201f      	movs	r0, #31
    ba6e:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    ba72:	bd10      	pop	{r4, pc}
    ba74:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    ba78:	2031      	movs	r0, #49	; 0x31
    ba7a:	f7f8 f883 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba7e:	0000      	.short	0x0000
    ba80:	20000140 	.word	0x20000140
    ba84:	4808      	ldr	r0, [pc, #32]	; (baa8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c18>)
    ba86:	b510      	push	{r4, lr}
    ba88:	68c0      	ldr	r0, [r0, #12]
    ba8a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ba8e:	2921      	cmp	r1, #33	; 0x21
    ba90:	bf11      	iteee	ne
    ba92:	2900      	cmpne	r1, #0
    ba94:	2122      	moveq	r1, #34	; 0x22
    ba96:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    ba9a:	bd10      	popeq	{r4, pc}
    ba9c:	f240 710f 	movw	r1, #1807	; 0x70f
    baa0:	f04f 0031 	mov.w	r0, #49	; 0x31
    baa4:	f7f8 f86e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    baa8:	20000140 	.word	0x20000140
    baac:	4807      	ldr	r0, [pc, #28]	; (bacc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c3c>)
    baae:	b510      	push	{r4, lr}
    bab0:	68c0      	ldr	r0, [r0, #12]
    bab2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bab6:	2915      	cmp	r1, #21
    bab8:	bf02      	ittt	eq
    baba:	2119      	moveq	r1, #25
    babc:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bac0:	bd10      	popeq	{r4, pc}
    bac2:	f240 6194 	movw	r1, #1684	; 0x694
    bac6:	2031      	movs	r0, #49	; 0x31
    bac8:	f7f8 f85c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bacc:	20000140 	.word	0x20000140
    bad0:	4807      	ldr	r0, [pc, #28]	; (baf0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c60>)
    bad2:	b510      	push	{r4, lr}
    bad4:	68c0      	ldr	r0, [r0, #12]
    bad6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bada:	2915      	cmp	r1, #21
    badc:	bf02      	ittt	eq
    bade:	2117      	moveq	r1, #23
    bae0:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bae4:	bd10      	popeq	{r4, pc}
    bae6:	f240 618e 	movw	r1, #1678	; 0x68e
    baea:	2031      	movs	r0, #49	; 0x31
    baec:	f7f8 f84a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    baf0:	20000140 	.word	0x20000140
    baf4:	b570      	push	{r4, r5, r6, lr}
    baf6:	4d1c      	ldr	r5, [pc, #112]	; (bb68 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cd8>)
    baf8:	68e8      	ldr	r0, [r5, #12]
    bafa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bafe:	291b      	cmp	r1, #27
    bb00:	d004      	beq.n	bb0c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c7c>
    bb02:	f240 61ae 	movw	r1, #1710	; 0x6ae
    bb06:	2031      	movs	r0, #49	; 0x31
    bb08:	f7f8 f83c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb0c:	2400      	movs	r4, #0
    bb0e:	f880 40b5 	strb.w	r4, [r0, #181]	; 0xb5
    bb12:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    bb16:	b121      	cbz	r1, bb22 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c92>
    bb18:	f240 61b2 	movw	r1, #1714	; 0x6b2
    bb1c:	2031      	movs	r0, #49	; 0x31
    bb1e:	f7f8 f831 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb22:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    bb26:	b141      	cbz	r1, bb3a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1caa>
    bb28:	f880 40b6 	strb.w	r4, [r0, #182]	; 0xb6
    bb2c:	8801      	ldrh	r1, [r0, #0]
    bb2e:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    bb32:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    bb36:	210e      	movs	r1, #14
    bb38:	e008      	b.n	bb4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    bb3a:	8801      	ldrh	r1, [r0, #0]
    bb3c:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    bb40:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    bb44:	2101      	movs	r1, #1
    bb46:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    bb4a:	210d      	movs	r1, #13
    bb4c:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    bb50:	8800      	ldrh	r0, [r0, #0]
    bb52:	f7f8 fbcf 	bl	42f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    bb56:	f003 ff08 	bl	f96a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    bb5a:	7968      	ldrb	r0, [r5, #5]
    bb5c:	f7f7 fe06 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bb60:	68e8      	ldr	r0, [r5, #12]
    bb62:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    bb66:	bd70      	pop	{r4, r5, r6, pc}
    bb68:	20000140 	.word	0x20000140
    bb6c:	b510      	push	{r4, lr}
    bb6e:	4c08      	ldr	r4, [pc, #32]	; (bb90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d00>)
    bb70:	2301      	movs	r3, #1
    bb72:	4619      	mov	r1, r3
    bb74:	68e0      	ldr	r0, [r4, #12]
    bb76:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    bb7a:	3078      	adds	r0, #120	; 0x78
    bb7c:	f004 f990 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bb80:	2800      	cmp	r0, #0
    bb82:	bf18      	it	ne
    bb84:	bd10      	popne	{r4, pc}
    bb86:	2008      	movs	r0, #8
    bb88:	68e1      	ldr	r1, [r4, #12]
    bb8a:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    bb8e:	bd10      	pop	{r4, pc}
    bb90:	20000140 	.word	0x20000140
    bb94:	481b      	ldr	r0, [pc, #108]	; (bc04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d74>)
    bb96:	b510      	push	{r4, lr}
    bb98:	6901      	ldr	r1, [r0, #16]
    bb9a:	68c0      	ldr	r0, [r0, #12]
    bb9c:	2200      	movs	r2, #0
    bb9e:	7909      	ldrb	r1, [r1, #4]
    bba0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    bba4:	2b0a      	cmp	r3, #10
    bba6:	bf01      	itttt	eq
    bba8:	f890 30f2 	ldrbeq.w	r3, [r0, #242]	; 0xf2
    bbac:	428b      	cmpeq	r3, r1
    bbae:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    bbb2:	f880 20b0 	strbeq.w	r2, [r0, #176]	; 0xb0
    bbb6:	bf08      	it	eq
    bbb8:	bd10      	popeq	{r4, pc}
    bbba:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    bbbe:	f013 0f08 	tst.w	r3, #8
    bbc2:	d012      	beq.n	bbea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d5a>
    bbc4:	f023 0108 	bic.w	r1, r3, #8
    bbc8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    bbcc:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bbd0:	f1a1 0101 	sub.w	r1, r1, #1
    bbd4:	b249      	sxtb	r1, r1
    bbd6:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bbda:	2900      	cmp	r1, #0
    bbdc:	bfa8      	it	ge
    bbde:	bd10      	popge	{r4, pc}
    bbe0:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bbe4:	2031      	movs	r0, #49	; 0x31
    bbe6:	f7f7 ffcd 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbea:	29ff      	cmp	r1, #255	; 0xff
    bbec:	d004      	beq.n	bbf8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d68>
    bbee:	f240 616a 	movw	r1, #1642	; 0x66a
    bbf2:	2031      	movs	r0, #49	; 0x31
    bbf4:	f7f7 ffc6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbf8:	2127      	movs	r1, #39	; 0x27
    bbfa:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    bbfe:	f880 219c 	strb.w	r2, [r0, #412]	; 0x19c
    bc02:	bd10      	pop	{r4, pc}
    bc04:	20000140 	.word	0x20000140
    bc08:	b510      	push	{r4, lr}
    bc0a:	4c1b      	ldr	r4, [pc, #108]	; (bc78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1de8>)
    bc0c:	68e0      	ldr	r0, [r4, #12]
    bc0e:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    bc12:	f011 0f02 	tst.w	r1, #2
    bc16:	d01d      	beq.n	bc54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dc4>
    bc18:	2100      	movs	r1, #0
    bc1a:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    bc1e:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    bc22:	68e0      	ldr	r0, [r4, #12]
    bc24:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bc28:	f011 0f02 	tst.w	r1, #2
    bc2c:	bf08      	it	eq
    bc2e:	bd10      	popeq	{r4, pc}
    bc30:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    bc34:	1e52      	subs	r2, r2, #1
    bc36:	b252      	sxtb	r2, r2
    bc38:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    bc3c:	2a00      	cmp	r2, #0
    bc3e:	bfa2      	ittt	ge
    bc40:	f021 0102 	bicge.w	r1, r1, #2
    bc44:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    bc48:	bd10      	popge	{r4, pc}
    bc4a:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bc4e:	2031      	movs	r0, #49	; 0x31
    bc50:	f7f7 ff98 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc54:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bc58:	2301      	movs	r3, #1
    bc5a:	2100      	movs	r1, #0
    bc5c:	3078      	adds	r0, #120	; 0x78
    bc5e:	f004 f91f 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bc62:	b120      	cbz	r0, bc6e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dde>
    bc64:	68e1      	ldr	r1, [r4, #12]
    bc66:	2006      	movs	r0, #6
    bc68:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bc6c:	e7d9      	b.n	bc22 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d92>
    bc6e:	f240 61d4 	movw	r1, #1748	; 0x6d4
    bc72:	2031      	movs	r0, #49	; 0x31
    bc74:	f7f7 ff86 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc78:	20000140 	.word	0x20000140

0000bc7c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    bc7c:	4804      	ldr	r0, [pc, #16]	; (bc90 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x14>)
    bc7e:	6840      	ldr	r0, [r0, #4]
    bc80:	7801      	ldrb	r1, [r0, #0]
    bc82:	2900      	cmp	r1, #0
    bc84:	bf14      	ite	ne
    bc86:	8880      	ldrhne	r0, [r0, #4]
    bc88:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    bc8c:	4770      	bx	lr
    bc8e:	0000      	.short	0x0000
    bc90:	20000228 	.word	0x20000228

0000bc94 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>:
    bc94:	4902      	ldr	r1, [pc, #8]	; (bca0 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY+0xc>)
    bc96:	6849      	ldr	r1, [r1, #4]
    bc98:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    bc9c:	4770      	bx	lr
    bc9e:	0000      	.short	0x0000
    bca0:	20000228 	.word	0x20000228

0000bca4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    bca4:	4802      	ldr	r0, [pc, #8]	; (bcb0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    bca6:	6840      	ldr	r0, [r0, #4]
    bca8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    bcac:	4770      	bx	lr
    bcae:	0000      	.short	0x0000
    bcb0:	20000228 	.word	0x20000228

0000bcb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    bcb4:	480c      	ldr	r0, [pc, #48]	; (bce8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    bcb6:	6841      	ldr	r1, [r0, #4]
    bcb8:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    bcbc:	2803      	cmp	r0, #3
    bcbe:	d004      	beq.n	bcca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    bcc0:	2801      	cmp	r0, #1
    bcc2:	bf18      	it	ne
    bcc4:	2802      	cmpne	r0, #2
    bcc6:	d007      	beq.n	bcd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    bcc8:	e004      	b.n	bcd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    bcca:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    bcce:	2801      	cmp	r0, #1
    bcd0:	bf08      	it	eq
    bcd2:	4770      	bxeq	lr
    bcd4:	2000      	movs	r0, #0
    bcd6:	4770      	bx	lr
    bcd8:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    bcdc:	2801      	cmp	r0, #1
    bcde:	bf14      	ite	ne
    bce0:	2803      	cmpne	r0, #3
    bce2:	2001      	moveq	r0, #1
    bce4:	d1f6      	bne.n	bcd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    bce6:	4770      	bx	lr
    bce8:	20000228 	.word	0x20000228

0000bcec <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>:
    bcec:	4806      	ldr	r0, [pc, #24]	; (bd08 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA+0x1c>)
    bcee:	7800      	ldrb	r0, [r0, #0]
    bcf0:	2800      	cmp	r0, #0
    bcf2:	bf1c      	itt	ne
    bcf4:	2000      	movne	r0, #0
    bcf6:	4770      	bxne	lr
    bcf8:	b510      	push	{r4, lr}
    bcfa:	2000      	movs	r0, #0
    bcfc:	f003 ff67 	bl	fbce <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    bd00:	f080 0001 	eor.w	r0, r0, #1
    bd04:	bd10      	pop	{r4, pc}
    bd06:	0000      	.short	0x0000
    bd08:	200015cc 	.word	0x200015cc

0000bd0c <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA>:
    bd0c:	4901      	ldr	r1, [pc, #4]	; (bd14 <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA+0x8>)
    bd0e:	6048      	str	r0, [r1, #4]
    bd10:	4770      	bx	lr
    bd12:	0000      	.short	0x0000
    bd14:	200015b0 	.word	0x200015b0

0000bd18 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    bd18:	4901      	ldr	r1, [pc, #4]	; (bd20 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    bd1a:	7048      	strb	r0, [r1, #1]
    bd1c:	4770      	bx	lr
    bd1e:	0000      	.short	0x0000
    bd20:	200015b0 	.word	0x200015b0

0000bd24 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    bd24:	4905      	ldr	r1, [pc, #20]	; (bd3c <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x18>)
    bd26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bd2a:	fbb1 f1f2 	udiv	r1, r1, r2
    bd2e:	b510      	push	{r4, lr}
    bd30:	f201 11df 	addw	r1, r1, #479	; 0x1df
    bd34:	f004 fe5d 	bl	109f2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    bd38:	b280      	uxth	r0, r0
    bd3a:	bd10      	pop	{r4, pc}
    bd3c:	00012105 	.word	0x00012105

0000bd40 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    bd40:	4801      	ldr	r0, [pc, #4]	; (bd48 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    bd42:	7800      	ldrb	r0, [r0, #0]
    bd44:	4770      	bx	lr
    bd46:	0000      	.short	0x0000
    bd48:	200015cc 	.word	0x200015cc

0000bd4c <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>:
    bd4c:	4a01      	ldr	r2, [pc, #4]	; (bd54 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ+0x8>)
    bd4e:	e9c2 0105 	strd	r0, r1, [r2, #20]
    bd52:	4770      	bx	lr
    bd54:	20000238 	.word	0x20000238

0000bd58 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    bd58:	4806      	ldr	r0, [pc, #24]	; (bd74 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    bd5a:	4905      	ldr	r1, [pc, #20]	; (bd70 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    bd5c:	6501      	str	r1, [r0, #80]	; 0x50
    bd5e:	4906      	ldr	r1, [pc, #24]	; (bd78 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    bd60:	6541      	str	r1, [r0, #84]	; 0x54
    bd62:	4807      	ldr	r0, [pc, #28]	; (bd80 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    bd64:	4905      	ldr	r1, [pc, #20]	; (bd7c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    bd66:	6501      	str	r1, [r0, #80]	; 0x50
    bd68:	4906      	ldr	r1, [pc, #24]	; (bd84 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    bd6a:	6541      	str	r1, [r0, #84]	; 0x54
    bd6c:	4770      	bx	lr
    bd6e:	0000      	.short	0x0000
    bd70:	0000be8d 	.word	0x0000be8d
    bd74:	20000254 	.word	0x20000254
    bd78:	0000bf4d 	.word	0x0000bf4d
    bd7c:	0000c191 	.word	0x0000c191
    bd80:	200002b8 	.word	0x200002b8
    bd84:	0000c1c1 	.word	0x0000c1c1

0000bd88 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    bd88:	4806      	ldr	r0, [pc, #24]	; (bda4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    bd8a:	4905      	ldr	r1, [pc, #20]	; (bda0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    bd8c:	6581      	str	r1, [r0, #88]	; 0x58
    bd8e:	4906      	ldr	r1, [pc, #24]	; (bda8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    bd90:	65c1      	str	r1, [r0, #92]	; 0x5c
    bd92:	4807      	ldr	r0, [pc, #28]	; (bdb0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    bd94:	4905      	ldr	r1, [pc, #20]	; (bdac <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    bd96:	6581      	str	r1, [r0, #88]	; 0x58
    bd98:	4906      	ldr	r1, [pc, #24]	; (bdb4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    bd9a:	6601      	str	r1, [r0, #96]	; 0x60
    bd9c:	4770      	bx	lr
    bd9e:	0000      	.short	0x0000
    bda0:	0000bfdd 	.word	0x0000bfdd
    bda4:	20000254 	.word	0x20000254
    bda8:	0000c0f1 	.word	0x0000c0f1
    bdac:	0000c1f1 	.word	0x0000c1f1
    bdb0:	200002b8 	.word	0x200002b8
    bdb4:	0000c221 	.word	0x0000c221
    bdb8:	4a15      	ldr	r2, [pc, #84]	; (be10 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x88>)
    bdba:	b510      	push	{r4, lr}
    bdbc:	6891      	ldr	r1, [r2, #8]
    bdbe:	880b      	ldrh	r3, [r1, #0]
    bdc0:	f8a1 3178 	strh.w	r3, [r1, #376]	; 0x178
    bdc4:	f881 0176 	strb.w	r0, [r1, #374]	; 0x176
    bdc8:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    bdcc:	2801      	cmp	r0, #1
    bdce:	bf18      	it	ne
    bdd0:	2802      	cmpne	r0, #2
    bdd2:	d005      	beq.n	bde0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x58>
    bdd4:	f240 218f 	movw	r1, #655	; 0x28f
    bdd8:	f04f 0006 	mov.w	r0, #6
    bddc:	f7f7 fed2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bde0:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    bde4:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    bde8:	2801      	cmp	r0, #1
    bdea:	bf18      	it	ne
    bdec:	2802      	cmpne	r0, #2
    bdee:	d1f1      	bne.n	bdd4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4c>
    bdf0:	f881 017b 	strb.w	r0, [r1, #379]	; 0x17b
    bdf4:	f04f 0001 	mov.w	r0, #1
    bdf8:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    bdfc:	f04f 0000 	mov.w	r0, #0
    be00:	f881 0142 	strb.w	r0, [r1, #322]	; 0x142
    be04:	78d0      	ldrb	r0, [r2, #3]
    be06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    be0a:	f7f7 bcaf 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    be0e:	0000      	.short	0x0000
    be10:	20000238 	.word	0x20000238
    be14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be18:	4c1b      	ldr	r4, [pc, #108]	; (be88 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x100>)
    be1a:	2600      	movs	r6, #0
    be1c:	2703      	movs	r7, #3
    be1e:	f8d4 c008 	ldr.w	ip, [r4, #8]
    be22:	2501      	movs	r5, #1
    be24:	b1a0      	cbz	r0, be50 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xc8>
    be26:	6920      	ldr	r0, [r4, #16]
    be28:	78c0      	ldrb	r0, [r0, #3]
    be2a:	f88c 00f2 	strb.w	r0, [ip, #242]	; 0xf2
    be2e:	fa05 f000 	lsl.w	r0, r5, r0
    be32:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    be36:	d006      	beq.n	be46 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xbe>
    be38:	f88c 7084 	strb.w	r7, [ip, #132]	; 0x84
    be3c:	f8ac 60ac 	strh.w	r6, [ip, #172]	; 0xac
    be40:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    be44:	e01c      	b.n	be80 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xf8>
    be46:	f240 5159 	movw	r1, #1369	; 0x559
    be4a:	2036      	movs	r0, #54	; 0x36
    be4c:	f7f7 fe9a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be50:	2300      	movs	r3, #0
    be52:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    be56:	4619      	mov	r1, r3
    be58:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    be5c:	f004 f820 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    be60:	2800      	cmp	r0, #0
    be62:	bf04      	itt	eq
    be64:	2001      	moveq	r0, #1
    be66:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    be6a:	6920      	ldr	r0, [r4, #16]
    be6c:	78c1      	ldrb	r1, [r0, #3]
    be6e:	68a0      	ldr	r0, [r4, #8]
    be70:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    be74:	f880 7085 	strb.w	r7, [r0, #133]	; 0x85
    be78:	f8a0 60b2 	strh.w	r6, [r0, #178]	; 0xb2
    be7c:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    be80:	2000      	movs	r0, #0
    be82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be86:	0000      	.short	0x0000
    be88:	20000238 	.word	0x20000238
    be8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be8e:	4c2e      	ldr	r4, [pc, #184]	; (bf48 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c0>)
    be90:	2300      	movs	r3, #0
    be92:	4619      	mov	r1, r3
    be94:	68a0      	ldr	r0, [r4, #8]
    be96:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    be9a:	3078      	adds	r0, #120	; 0x78
    be9c:	f004 f800 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bea0:	2800      	cmp	r0, #0
    bea2:	bf04      	itt	eq
    bea4:	2001      	moveq	r0, #1
    bea6:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    bea8:	6920      	ldr	r0, [r4, #16]
    beaa:	f004 fac9 	bl	10440 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    beae:	2800      	cmp	r0, #0
    beb0:	d02f      	beq.n	bf12 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18a>
    beb2:	6920      	ldr	r0, [r4, #16]
    beb4:	f004 fab6 	bl	10424 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    beb8:	4605      	mov	r5, r0
    beba:	6920      	ldr	r0, [r4, #16]
    bebc:	f004 fab6 	bl	1042c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    bec0:	4606      	mov	r6, r0
    bec2:	6920      	ldr	r0, [r4, #16]
    bec4:	f004 faac 	bl	10420 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    bec8:	4607      	mov	r7, r0
    beca:	6920      	ldr	r0, [r4, #16]
    becc:	f004 faac 	bl	10428 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    bed0:	4601      	mov	r1, r0
    bed2:	9500      	str	r5, [sp, #0]
    bed4:	68a0      	ldr	r0, [r4, #8]
    bed6:	4633      	mov	r3, r6
    bed8:	463a      	mov	r2, r7
    beda:	3028      	adds	r0, #40	; 0x28
    bedc:	f004 fd94 	bl	10a08 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    bee0:	68a1      	ldr	r1, [r4, #8]
    bee2:	2501      	movs	r5, #1
    bee4:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    bee8:	281c      	cmp	r0, #28
    beea:	bf16      	itet	ne
    beec:	f891 005c 	ldrbne.w	r0, [r1, #92]	; 0x5c
    bef0:	f881 505c 	strbeq.w	r5, [r1, #92]	; 0x5c
    bef4:	2801      	cmpne	r0, #1
    bef6:	d007      	beq.n	bf08 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x180>
    bef8:	f891 0139 	ldrb.w	r0, [r1, #313]	; 0x139
    befc:	2800      	cmp	r0, #0
    befe:	bf04      	itt	eq
    bf00:	f891 0138 	ldrbeq.w	r0, [r1, #312]	; 0x138
    bf04:	2800      	cmpeq	r0, #0
    bf06:	d00a      	beq.n	bf1e <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x196>
    bf08:	f04f 001e 	mov.w	r0, #30
    bf0c:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    bf10:	e011      	b.n	bf36 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1ae>
    bf12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bf16:	f04f 0000 	mov.w	r0, #0
    bf1a:	f7ff bf7b 	b.w	be14 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    bf1e:	201d      	movs	r0, #29
    bf20:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    bf24:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    bf28:	f831 0b28 	ldrh.w	r0, [r1], #40
    bf2c:	f004 fd74 	bl	10a18 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    bf30:	78e0      	ldrb	r0, [r4, #3]
    bf32:	f7f7 fc1b 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bf36:	68a0      	ldr	r0, [r4, #8]
    bf38:	2100      	movs	r1, #0
    bf3a:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    bf3e:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    bf42:	4608      	mov	r0, r1
    bf44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf46:	0000      	.short	0x0000
    bf48:	20000238 	.word	0x20000238
    bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf4e:	4c22      	ldr	r4, [pc, #136]	; (bfd8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x250>)
    bf50:	2300      	movs	r3, #0
    bf52:	210a      	movs	r1, #10
    bf54:	68a0      	ldr	r0, [r4, #8]
    bf56:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bf5a:	3078      	adds	r0, #120	; 0x78
    bf5c:	f003 ffa0 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bf60:	2800      	cmp	r0, #0
    bf62:	bf04      	itt	eq
    bf64:	2001      	moveq	r0, #1
    bf66:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    bf68:	6920      	ldr	r0, [r4, #16]
    bf6a:	f004 fa69 	bl	10440 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    bf6e:	b1c8      	cbz	r0, bfa4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x21c>
    bf70:	6920      	ldr	r0, [r4, #16]
    bf72:	f004 fa57 	bl	10424 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    bf76:	4605      	mov	r5, r0
    bf78:	6920      	ldr	r0, [r4, #16]
    bf7a:	f004 fa57 	bl	1042c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    bf7e:	4606      	mov	r6, r0
    bf80:	6920      	ldr	r0, [r4, #16]
    bf82:	f004 fa4d 	bl	10420 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    bf86:	4607      	mov	r7, r0
    bf88:	6920      	ldr	r0, [r4, #16]
    bf8a:	f004 fa4d 	bl	10428 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    bf8e:	4601      	mov	r1, r0
    bf90:	9500      	str	r5, [sp, #0]
    bf92:	68a0      	ldr	r0, [r4, #8]
    bf94:	4633      	mov	r3, r6
    bf96:	463a      	mov	r2, r7
    bf98:	3028      	adds	r0, #40	; 0x28
    bf9a:	f004 fd35 	bl	10a08 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    bf9e:	68a0      	ldr	r0, [r4, #8]
    bfa0:	f004 fc77 	bl	10892 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    bfa4:	68a1      	ldr	r1, [r4, #8]
    bfa6:	2000      	movs	r0, #0
    bfa8:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    bfac:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bfb0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    bfb4:	2801      	cmp	r0, #1
    bfb6:	bf04      	itt	eq
    bfb8:	2002      	moveq	r0, #2
    bfba:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    bfbe:	d008      	beq.n	bfd2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24a>
    bfc0:	8808      	ldrh	r0, [r1, #0]
    bfc2:	f501 72aa 	add.w	r2, r1, #340	; 0x154
    bfc6:	3128      	adds	r1, #40	; 0x28
    bfc8:	f004 fbe6 	bl	10798 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    bfcc:	78e0      	ldrb	r0, [r4, #3]
    bfce:	f7f7 fbcd 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bfd2:	2000      	movs	r0, #0
    bfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfd6:	0000      	.short	0x0000
    bfd8:	20000238 	.word	0x20000238
    bfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfde:	4c43      	ldr	r4, [pc, #268]	; (c0ec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x364>)
    bfe0:	2500      	movs	r5, #0
    bfe2:	b087      	sub	sp, #28
    bfe4:	68a0      	ldr	r0, [r4, #8]
    bfe6:	462b      	mov	r3, r5
    bfe8:	4629      	mov	r1, r5
    bfea:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    bfee:	3078      	adds	r0, #120	; 0x78
    bff0:	f003 ff56 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bff4:	2800      	cmp	r0, #0
    bff6:	bf02      	ittt	eq
    bff8:	2001      	moveq	r0, #1
    bffa:	b007      	addeq	sp, #28
    bffc:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    bffe:	68a0      	ldr	r0, [r4, #8]
    c000:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c004:	2823      	cmp	r0, #35	; 0x23
    c006:	bf11      	iteee	ne
    c008:	2824      	cmpne	r0, #36	; 0x24
    c00a:	2020      	moveq	r0, #32
    c00c:	b007      	addeq	sp, #28
    c00e:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    c010:	4668      	mov	r0, sp
    c012:	f7f8 fc8d 	bl	4930 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    c016:	2800      	cmp	r0, #0
    c018:	bf08      	it	eq
    c01a:	2100      	moveq	r1, #0
    c01c:	d004      	beq.n	c028 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2a0>
    c01e:	9800      	ldr	r0, [sp, #0]
    c020:	a901      	add	r1, sp, #4
    c022:	78c0      	ldrb	r0, [r0, #3]
    c024:	f88d 0004 	strb.w	r0, [sp, #4]
    c028:	68a0      	ldr	r0, [r4, #8]
    c02a:	ab04      	add	r3, sp, #16
    c02c:	2216      	movs	r2, #22
    c02e:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c032:	f004 f80b 	bl	1004c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    c036:	2700      	movs	r7, #0
    c038:	2601      	movs	r6, #1
    c03a:	b188      	cbz	r0, c060 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2d8>
    c03c:	68a0      	ldr	r0, [r4, #8]
    c03e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    c042:	2116      	movs	r1, #22
    c044:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    c048:	f880 1121 	strb.w	r1, [r0, #289]	; 0x121
    c04c:	2119      	movs	r1, #25
    c04e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c052:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c056:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c05a:	b007      	add	sp, #28
    c05c:	2000      	movs	r0, #0
    c05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c060:	6920      	ldr	r0, [r4, #16]
    c062:	f004 fa08 	bl	10476 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    c066:	b178      	cbz	r0, c088 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x300>
    c068:	6922      	ldr	r2, [r4, #16]
    c06a:	68a1      	ldr	r1, [r4, #8]
    c06c:	7910      	ldrb	r0, [r2, #4]
    c06e:	f000 0007 	and.w	r0, r0, #7
    c072:	f881 005e 	strb.w	r0, [r1, #94]	; 0x5e
    c076:	7952      	ldrb	r2, [r2, #5]
    c078:	f002 0307 	and.w	r3, r2, #7
    c07c:	f881 305f 	strb.w	r3, [r1, #95]	; 0x5f
    c080:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    c084:	b12a      	cbz	r2, c092 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30a>
    c086:	e026      	b.n	c0d6 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c088:	2000      	movs	r0, #0
    c08a:	f7ff fec3 	bl	be14 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c08e:	4605      	mov	r5, r0
    c090:	e029      	b.n	c0e6 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x35e>
    c092:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    c096:	2a01      	cmp	r2, #1
    c098:	d01d      	beq.n	c0d6 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c09a:	f891 c067 	ldrb.w	ip, [r1, #103]	; 0x67
    c09e:	f101 0266 	add.w	r2, r1, #102	; 0x66
    c0a2:	4584      	cmp	ip, r0
    c0a4:	bf01      	itttt	eq
    c0a6:	7810      	ldrbeq	r0, [r2, #0]
    c0a8:	4298      	cmpeq	r0, r3
    c0aa:	2002      	moveq	r0, #2
    c0ac:	f881 0142 	strbeq.w	r0, [r1, #322]	; 0x142
    c0b0:	d011      	beq.n	c0d6 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c0b2:	880a      	ldrh	r2, [r1, #0]
    c0b4:	f8a1 2170 	strh.w	r2, [r1, #368]	; 0x170
    c0b8:	f891 205e 	ldrb.w	r2, [r1, #94]	; 0x5e
    c0bc:	f501 70a6 	add.w	r0, r1, #332	; 0x14c
    c0c0:	f881 2172 	strb.w	r2, [r1, #370]	; 0x172
    c0c4:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    c0c8:	f880 1027 	strb.w	r1, [r0, #39]	; 0x27
    c0cc:	f880 6022 	strb.w	r6, [r0, #34]	; 0x22
    c0d0:	78e0      	ldrb	r0, [r4, #3]
    c0d2:	f7f7 fb4b 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c0d6:	68a0      	ldr	r0, [r4, #8]
    c0d8:	2121      	movs	r1, #33	; 0x21
    c0da:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c0de:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c0e2:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c0e6:	b007      	add	sp, #28
    c0e8:	4628      	mov	r0, r5
    c0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0ec:	20000238 	.word	0x20000238
    c0f0:	b538      	push	{r3, r4, r5, lr}
    c0f2:	4c26      	ldr	r4, [pc, #152]	; (c18c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x404>)
    c0f4:	68a0      	ldr	r0, [r4, #8]
    c0f6:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c0fa:	281f      	cmp	r0, #31
    c0fc:	bf1c      	itt	ne
    c0fe:	2001      	movne	r0, #1
    c100:	bd38      	popne	{r3, r4, r5, pc}
    c102:	6920      	ldr	r0, [r4, #16]
    c104:	f004 f9c1 	bl	1048a <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    c108:	2800      	cmp	r0, #0
    c10a:	d036      	beq.n	c17a <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x3f2>
    c10c:	6920      	ldr	r0, [r4, #16]
    c10e:	68a2      	ldr	r2, [r4, #8]
    c110:	7901      	ldrb	r1, [r0, #4]
    c112:	7940      	ldrb	r0, [r0, #5]
    c114:	f001 0107 	and.w	r1, r1, #7
    c118:	f361 0507 	bfi	r5, r1, #0, #8
    c11c:	4629      	mov	r1, r5
    c11e:	f000 0007 	and.w	r0, r0, #7
    c122:	f360 210f 	bfi	r1, r0, #8, #8
    c126:	2001      	movs	r0, #1
    c128:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    c12c:	2500      	movs	r5, #0
    c12e:	f8a2 50ac 	strh.w	r5, [r2, #172]	; 0xac
    c132:	2023      	movs	r0, #35	; 0x23
    c134:	f882 0084 	strb.w	r0, [r2, #132]	; 0x84
    c138:	f8d2 0144 	ldr.w	r0, [r2, #324]	; 0x144
    c13c:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
    c140:	f8ad 2000 	strh.w	r2, [sp]
    c144:	f003 ff9e 	bl	10084 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    c148:	f89d 2000 	ldrb.w	r2, [sp]
    c14c:	b2c1      	uxtb	r1, r0
    c14e:	428a      	cmp	r2, r1
    c150:	bf07      	ittee	eq
    c152:	68a1      	ldreq	r1, [r4, #8]
    c154:	f881 5126 	strbeq.w	r5, [r1, #294]	; 0x126
    c158:	68a2      	ldrne	r2, [r4, #8]
    c15a:	f882 1126 	strbne.w	r1, [r2, #294]	; 0x126
    c15e:	f89d 1001 	ldrb.w	r1, [sp, #1]
    c162:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c166:	4281      	cmp	r1, r0
    c168:	bf19      	ittee	ne
    c16a:	68a1      	ldrne	r1, [r4, #8]
    c16c:	f881 0127 	strbne.w	r0, [r1, #295]	; 0x127
    c170:	68a0      	ldreq	r0, [r4, #8]
    c172:	f880 5127 	strbeq.w	r5, [r0, #295]	; 0x127
    c176:	2000      	movs	r0, #0
    c178:	bd38      	pop	{r3, r4, r5, pc}
    c17a:	2001      	movs	r0, #1
    c17c:	f7ff fe4a 	bl	be14 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c180:	4604      	mov	r4, r0
    c182:	201e      	movs	r0, #30
    c184:	f7ff fe18 	bl	bdb8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c188:	4620      	mov	r0, r4
    c18a:	bd38      	pop	{r3, r4, r5, pc}
    c18c:	20000238 	.word	0x20000238
    c190:	b510      	push	{r4, lr}
    c192:	4c0a      	ldr	r4, [pc, #40]	; (c1bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x434>)
    c194:	2300      	movs	r3, #0
    c196:	4619      	mov	r1, r3
    c198:	68a0      	ldr	r0, [r4, #8]
    c19a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c19e:	3078      	adds	r0, #120	; 0x78
    c1a0:	f003 fe7e 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c1a4:	b120      	cbz	r0, c1b0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x428>
    c1a6:	68a1      	ldr	r1, [r4, #8]
    c1a8:	201c      	movs	r0, #28
    c1aa:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c1ae:	bd10      	pop	{r4, pc}
    c1b0:	f240 6162 	movw	r1, #1634	; 0x662
    c1b4:	2036      	movs	r0, #54	; 0x36
    c1b6:	f7f7 fce5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1ba:	0000      	.short	0x0000
    c1bc:	20000238 	.word	0x20000238
    c1c0:	b510      	push	{r4, lr}
    c1c2:	4c0a      	ldr	r4, [pc, #40]	; (c1ec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x464>)
    c1c4:	2300      	movs	r3, #0
    c1c6:	4619      	mov	r1, r3
    c1c8:	68a0      	ldr	r0, [r4, #8]
    c1ca:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c1ce:	3078      	adds	r0, #120	; 0x78
    c1d0:	f003 fe66 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c1d4:	b120      	cbz	r0, c1e0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x458>
    c1d6:	68a1      	ldr	r1, [r4, #8]
    c1d8:	2000      	movs	r0, #0
    c1da:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    c1de:	bd10      	pop	{r4, pc}
    c1e0:	f240 6169 	movw	r1, #1641	; 0x669
    c1e4:	2036      	movs	r0, #54	; 0x36
    c1e6:	f7f7 fccd 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1ea:	0000      	.short	0x0000
    c1ec:	20000238 	.word	0x20000238
    c1f0:	b510      	push	{r4, lr}
    c1f2:	4c0a      	ldr	r4, [pc, #40]	; (c21c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x494>)
    c1f4:	2300      	movs	r3, #0
    c1f6:	4619      	mov	r1, r3
    c1f8:	68a0      	ldr	r0, [r4, #8]
    c1fa:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c1fe:	3078      	adds	r0, #120	; 0x78
    c200:	f003 fe4e 	bl	fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c204:	b120      	cbz	r0, c210 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x488>
    c206:	68a1      	ldr	r1, [r4, #8]
    c208:	201f      	movs	r0, #31
    c20a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c20e:	bd10      	pop	{r4, pc}
    c210:	f240 6172 	movw	r1, #1650	; 0x672
    c214:	2036      	movs	r0, #54	; 0x36
    c216:	f7f7 fcb5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c21a:	0000      	.short	0x0000
    c21c:	20000238 	.word	0x20000238
    c220:	b570      	push	{r4, r5, r6, lr}
    c222:	4c1f      	ldr	r4, [pc, #124]	; (c2a0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x518>)
    c224:	68a0      	ldr	r0, [r4, #8]
    c226:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    c22a:	2900      	cmp	r1, #0
    c22c:	bf05      	ittet	eq
    c22e:	f890 1127 	ldrbeq.w	r1, [r0, #295]	; 0x127
    c232:	2900      	cmpeq	r1, #0
    c234:	2100      	movne	r1, #0
    c236:	2101      	moveq	r1, #1
    c238:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    c23c:	f04f 0224 	mov.w	r2, #36	; 0x24
    c240:	f04f 0500 	mov.w	r5, #0
    c244:	2b21      	cmp	r3, #33	; 0x21
    c246:	d008      	beq.n	c25a <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4d2>
    c248:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    c24c:	2b23      	cmp	r3, #35	; 0x23
    c24e:	d019      	beq.n	c284 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4fc>
    c250:	f240 619e 	movw	r1, #1694	; 0x69e
    c254:	2036      	movs	r0, #54	; 0x36
    c256:	f7f7 fc95 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c25a:	2900      	cmp	r1, #0
    c25c:	bf08      	it	eq
    c25e:	f880 2085 	strbeq.w	r2, [r0, #133]	; 0x85
    c262:	d00b      	beq.n	c27c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4f4>
    c264:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    c268:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    c26c:	2801      	cmp	r0, #1
    c26e:	bf04      	itt	eq
    c270:	2000      	moveq	r0, #0
    c272:	f7ff fda1 	bleq	bdb8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c276:	68a0      	ldr	r0, [r4, #8]
    c278:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
    c27c:	68a0      	ldr	r0, [r4, #8]
    c27e:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c282:	bd70      	pop	{r4, r5, r6, pc}
    c284:	2900      	cmp	r1, #0
    c286:	bf08      	it	eq
    c288:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    c28c:	d004      	beq.n	c298 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x510>
    c28e:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    c292:	2000      	movs	r0, #0
    c294:	f7ff fd90 	bl	bdb8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c298:	68a0      	ldr	r0, [r4, #8]
    c29a:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    c29e:	bd70      	pop	{r4, r5, r6, pc}
    c2a0:	20000238 	.word	0x20000238

0000c2a4 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    c2a4:	b510      	push	{r4, lr}
    c2a6:	4905      	ldr	r1, [pc, #20]	; (c2bc <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>)
    c2a8:	4604      	mov	r4, r0
    c2aa:	2001      	movs	r0, #1
    c2ac:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c2b0:	f7fb f8f8 	bl	74a4 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    c2b4:	7020      	strb	r0, [r4, #0]
    c2b6:	2000      	movs	r0, #0
    c2b8:	bd10      	pop	{r4, pc}
    c2ba:	0000      	.short	0x0000
    c2bc:	200011a4 	.word	0x200011a4

0000c2c0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    c2c0:	4904      	ldr	r1, [pc, #16]	; (c2d4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x14>)
    c2c2:	f8b1 2242 	ldrh.w	r2, [r1, #578]	; 0x242
    c2c6:	8002      	strh	r2, [r0, #0]
    c2c8:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
    c2cc:	7081      	strb	r1, [r0, #2]
    c2ce:	2000      	movs	r0, #0
    c2d0:	4770      	bx	lr
    c2d2:	0000      	.short	0x0000
    c2d4:	200011a4 	.word	0x200011a4

0000c2d8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    c2d8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c2dc:	460d      	mov	r5, r1
    c2de:	4606      	mov	r6, r0
    c2e0:	f000 fd9c 	bl	ce1c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c2e4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    c2e8:	b1e0      	cbz	r0, c324 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    c2ea:	8830      	ldrh	r0, [r6, #0]
    c2ec:	4669      	mov	r1, sp
    c2ee:	f003 fd8c 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c2f2:	2800      	cmp	r0, #0
    c2f4:	d114      	bne.n	c320 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    c2f6:	f8dd 4004 	ldr.w	r4, [sp, #4]
    c2fa:	2700      	movs	r7, #0
    c2fc:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    c300:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    c304:	f005 fa7e 	bl	11804 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    c308:	70a8      	strb	r0, [r5, #2]
    c30a:	7860      	ldrb	r0, [r4, #1]
    c30c:	f005 fa7a 	bl	11804 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    c310:	70e8      	strb	r0, [r5, #3]
    c312:	78a0      	ldrb	r0, [r4, #2]
    c314:	3c66      	subs	r4, #102	; 0x66
    c316:	2800      	cmp	r0, #0
    c318:	d1f0      	bne.n	c2fc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    c31a:	8830      	ldrh	r0, [r6, #0]
    c31c:	8028      	strh	r0, [r5, #0]
    c31e:	2000      	movs	r0, #0
    c320:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c324:	2001      	movs	r0, #1
    c326:	e7fb      	b.n	c320 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

0000c328 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    c328:	b51c      	push	{r2, r3, r4, lr}
    c32a:	8800      	ldrh	r0, [r0, #0]
    c32c:	4669      	mov	r1, sp
    c32e:	f003 fd6c 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c332:	2800      	cmp	r0, #0
    c334:	d10f      	bne.n	c356 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    c336:	f89d 0000 	ldrb.w	r0, [sp]
    c33a:	2401      	movs	r4, #1
    c33c:	b160      	cbz	r0, c358 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    c33e:	4811      	ldr	r0, [pc, #68]	; (c384 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x5c>)
    c340:	7800      	ldrb	r0, [r0, #0]
    c342:	b1e8      	cbz	r0, c380 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x58>
    c344:	9801      	ldr	r0, [sp, #4]
    c346:	f005 fbdb 	bl	11b00 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x366>
    c34a:	b190      	cbz	r0, c372 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c34c:	9801      	ldr	r0, [sp, #4]
    c34e:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
    c352:	b180      	cbz	r0, c376 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4e>
    c354:	203a      	movs	r0, #58	; 0x3a
    c356:	bd1c      	pop	{r2, r3, r4, pc}
    c358:	9801      	ldr	r0, [sp, #4]
    c35a:	f005 fbc5 	bl	11ae8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
    c35e:	b140      	cbz	r0, c372 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c360:	9801      	ldr	r0, [sp, #4]
    c362:	f890 0149 	ldrb.w	r0, [r0, #329]	; 0x149
    c366:	2800      	cmp	r0, #0
    c368:	d1f4      	bne.n	c354 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    c36a:	9801      	ldr	r0, [sp, #4]
    c36c:	f880 4149 	strb.w	r4, [r0, #329]	; 0x149
    c370:	e004      	b.n	c37c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x54>
    c372:	2002      	movs	r0, #2
    c374:	bd1c      	pop	{r2, r3, r4, pc}
    c376:	9801      	ldr	r0, [sp, #4]
    c378:	f880 41c5 	strb.w	r4, [r0, #453]	; 0x1c5
    c37c:	2000      	movs	r0, #0
    c37e:	bd1c      	pop	{r2, r3, r4, pc}
    c380:	2011      	movs	r0, #17
    c382:	bd1c      	pop	{r2, r3, r4, pc}
    c384:	2000031c 	.word	0x2000031c

0000c388 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    c388:	b510      	push	{r4, lr}
    c38a:	4604      	mov	r4, r0
    c38c:	f005 fb9f 	bl	11ace <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    c390:	b130      	cbz	r0, c3a0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    c392:	4804      	ldr	r0, [pc, #16]	; (c3a4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    c394:	8941      	ldrh	r1, [r0, #10]
    c396:	8021      	strh	r1, [r4, #0]
    c398:	8980      	ldrh	r0, [r0, #12]
    c39a:	8060      	strh	r0, [r4, #2]
    c39c:	2000      	movs	r0, #0
    c39e:	bd10      	pop	{r4, pc}
    c3a0:	2001      	movs	r0, #1
    c3a2:	bd10      	pop	{r4, pc}
    c3a4:	2000166a 	.word	0x2000166a

0000c3a8 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    c3a8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    c3aa:	4915      	ldr	r1, [pc, #84]	; (c400 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>)
    c3ac:	4605      	mov	r5, r0
    c3ae:	2001      	movs	r0, #1
    c3b0:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c3b4:	4813      	ldr	r0, [pc, #76]	; (c404 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x5c>)
    c3b6:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
    c3ba:	6020      	str	r0, [r4, #0]
    c3bc:	301f      	adds	r0, #31
    c3be:	60a0      	str	r0, [r4, #8]
    c3c0:	f000 fc38 	bl	cc34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    c3c4:	f894 0020 	ldrb.w	r0, [r4, #32]
    c3c8:	7829      	ldrb	r1, [r5, #0]
    c3ca:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    c3ce:	221f      	movs	r2, #31
    c3d0:	1c68      	adds	r0, r5, #1
    c3d2:	f005 fa27 	bl	11824 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8a>
    c3d6:	b120      	cbz	r0, c3e2 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x3a>
    c3d8:	f241 31f1 	movw	r1, #5105	; 0x13f1
    c3dc:	2039      	movs	r0, #57	; 0x39
    c3de:	f7f7 fbd1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3e2:	f894 0020 	ldrb.w	r0, [r4, #32]
    c3e6:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    c3ea:	9001      	str	r0, [sp, #4]
    c3ec:	7828      	ldrb	r0, [r5, #0]
    c3ee:	f8ad 0002 	strh.w	r0, [sp, #2]
    c3f2:	2000      	movs	r0, #0
    c3f4:	f88d 0000 	strb.w	r0, [sp]
    c3f8:	4668      	mov	r0, sp
    c3fa:	f000 f923 	bl	c644 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    c3fe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    c400:	200011a4 	.word	0x200011a4
    c404:	2000169e 	.word	0x2000169e

0000c408 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    c408:	b51c      	push	{r2, r3, r4, lr}
    c40a:	4a0d      	ldr	r2, [pc, #52]	; (c440 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x38>)
    c40c:	2101      	movs	r1, #1
    c40e:	2400      	movs	r4, #0
    c410:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c414:	7800      	ldrb	r0, [r0, #0]
    c416:	f88d 0000 	strb.w	r0, [sp]
    c41a:	f88d 1001 	strb.w	r1, [sp, #1]
    c41e:	f88d 4002 	strb.w	r4, [sp, #2]
    c422:	f7fb f81f 	bl	7464 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    c426:	b118      	cbz	r0, c430 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x28>
    c428:	2080      	movs	r0, #128	; 0x80
    c42a:	f8ad 0003 	strh.w	r0, [sp, #3]
    c42e:	e001      	b.n	c434 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2c>
    c430:	f8ad 4003 	strh.w	r4, [sp, #3]
    c434:	f88d 4005 	strb.w	r4, [sp, #5]
    c438:	4668      	mov	r0, sp
    c43a:	f000 fb1b 	bl	ca74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    c43e:	bd1c      	pop	{r2, r3, r4, pc}
    c440:	200011a4 	.word	0x200011a4

0000c444 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    c444:	b510      	push	{r4, lr}
    c446:	4a39      	ldr	r2, [pc, #228]	; (c52c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe8>)
    c448:	b08a      	sub	sp, #40	; 0x28
    c44a:	2101      	movs	r1, #1
    c44c:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c450:	8841      	ldrh	r1, [r0, #2]
    c452:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    c456:	d902      	bls.n	c45e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    c458:	2012      	movs	r0, #18
    c45a:	b00a      	add	sp, #40	; 0x28
    c45c:	bd10      	pop	{r4, pc}
    c45e:	2400      	movs	r4, #0
    c460:	f88d 4004 	strb.w	r4, [sp, #4]
    c464:	7902      	ldrb	r2, [r0, #4]
    c466:	9400      	str	r4, [sp, #0]
    c468:	f89d 1000 	ldrb.w	r1, [sp]
    c46c:	2a05      	cmp	r2, #5
    c46e:	f041 0110 	orr.w	r1, r1, #16
    c472:	f88d 1000 	strb.w	r1, [sp]
    c476:	d253      	bcs.n	c520 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xdc>
    c478:	e8df f002 	tbb	[pc, r2]
    c47c:	11050803 	.word	0x11050803
    c480:	000b      	.short	0x000b
    c482:	f041 0101 	orr.w	r1, r1, #1
    c486:	f041 0102 	orr.w	r1, r1, #2
    c48a:	e006      	b.n	c49a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    c48c:	f041 0109 	orr.w	r1, r1, #9
    c490:	e001      	b.n	c496 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    c492:	f041 0101 	orr.w	r1, r1, #1
    c496:	f041 0104 	orr.w	r1, r1, #4
    c49a:	f88d 1000 	strb.w	r1, [sp]
    c49e:	f8bd 1000 	ldrh.w	r1, [sp]
    c4a2:	9100      	str	r1, [sp, #0]
    c4a4:	f8bd 1000 	ldrh.w	r1, [sp]
    c4a8:	f8ad 1005 	strh.w	r1, [sp, #5]
    c4ac:	8802      	ldrh	r2, [r0, #0]
    c4ae:	f8dd 1006 	ldr.w	r1, [sp, #6]
    c4b2:	f362 211f 	bfi	r1, r2, #8, #24
    c4b6:	f8cd 1006 	str.w	r1, [sp, #6]
    c4ba:	8842      	ldrh	r2, [r0, #2]
    c4bc:	f8dd 1009 	ldr.w	r1, [sp, #9]
    c4c0:	f362 211f 	bfi	r1, r2, #8, #24
    c4c4:	f8cd 1009 	str.w	r1, [sp, #9]
    c4c8:	7b41      	ldrb	r1, [r0, #13]
    c4ca:	f88d 100d 	strb.w	r1, [sp, #13]
    c4ce:	7941      	ldrb	r1, [r0, #5]
    c4d0:	f88d 100e 	strb.w	r1, [sp, #14]
    c4d4:	7981      	ldrb	r1, [r0, #6]
    c4d6:	f88d 100f 	strb.w	r1, [sp, #15]
    c4da:	f8d0 1007 	ldr.w	r1, [r0, #7]
    c4de:	9104      	str	r1, [sp, #16]
    c4e0:	f8b0 100b 	ldrh.w	r1, [r0, #11]
    c4e4:	f8ad 1014 	strh.w	r1, [sp, #20]
    c4e8:	7b80      	ldrb	r0, [r0, #14]
    c4ea:	f88d 0016 	strb.w	r0, [sp, #22]
    c4ee:	207f      	movs	r0, #127	; 0x7f
    c4f0:	f88d 0017 	strb.w	r0, [sp, #23]
    c4f4:	2001      	movs	r0, #1
    c4f6:	f88d 0018 	strb.w	r0, [sp, #24]
    c4fa:	f88d 4019 	strb.w	r4, [sp, #25]
    c4fe:	f88d 001a 	strb.w	r0, [sp, #26]
    c502:	f88d 401b 	strb.w	r4, [sp, #27]
    c506:	f7fb f815 	bl	7534 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    c50a:	f88d 001c 	strb.w	r0, [sp, #28]
    c50e:	f88d 401d 	strb.w	r4, [sp, #29]
    c512:	f88d 401e 	strb.w	r4, [sp, #30]
    c516:	a908      	add	r1, sp, #32
    c518:	a801      	add	r0, sp, #4
    c51a:	f004 ffb0 	bl	1147e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    c51e:	e79c      	b.n	c45a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    c520:	f241 0147 	movw	r1, #4167	; 0x1047
    c524:	2039      	movs	r0, #57	; 0x39
    c526:	f7f7 fb2d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c52a:	0000      	.short	0x0000
    c52c:	200011a4 	.word	0x200011a4

0000c530 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    c530:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c532:	4604      	mov	r4, r0
    c534:	f000 fc72 	bl	ce1c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c538:	f3c0 2000 	ubfx	r0, r0, #8, #1
    c53c:	b318      	cbz	r0, c586 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    c53e:	2000      	movs	r0, #0
    c540:	f88d 0004 	strb.w	r0, [sp, #4]
    c544:	f88d 0008 	strb.w	r0, [sp, #8]
    c548:	a802      	add	r0, sp, #8
    c54a:	9000      	str	r0, [sp, #0]
    c54c:	78a2      	ldrb	r2, [r4, #2]
    c54e:	7861      	ldrb	r1, [r4, #1]
    c550:	7820      	ldrb	r0, [r4, #0]
    c552:	ab01      	add	r3, sp, #4
    c554:	f005 fb82 	bl	11c5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4c2>
    c558:	2800      	cmp	r0, #0
    c55a:	d113      	bne.n	c584 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    c55c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c560:	f005 fa2e 	bl	119c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
    c564:	b188      	cbz	r0, c58a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5a>
    c566:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c56a:	f005 fa29 	bl	119c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
    c56e:	b160      	cbz	r0, c58a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5a>
    c570:	4807      	ldr	r0, [pc, #28]	; (c590 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x60>)
    c572:	f89d 1004 	ldrb.w	r1, [sp, #4]
    c576:	f880 1252 	strb.w	r1, [r0, #594]	; 0x252
    c57a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    c57e:	f880 1253 	strb.w	r1, [r0, #595]	; 0x253
    c582:	2000      	movs	r0, #0
    c584:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c586:	2001      	movs	r0, #1
    c588:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c58a:	2011      	movs	r0, #17
    c58c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c58e:	0000      	.short	0x0000
    c590:	200011a4 	.word	0x200011a4

0000c594 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    c594:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    c596:	4916      	ldr	r1, [pc, #88]	; (c5f0 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x5c>)
    c598:	4605      	mov	r5, r0
    c59a:	2001      	movs	r0, #1
    c59c:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c5a0:	4814      	ldr	r0, [pc, #80]	; (c5f4 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x60>)
    c5a2:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
    c5a6:	6120      	str	r0, [r4, #16]
    c5a8:	301f      	adds	r0, #31
    c5aa:	61a0      	str	r0, [r4, #24]
    c5ac:	f000 fb52 	bl	cc54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    c5b0:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c5b4:	7829      	ldrb	r1, [r5, #0]
    c5b6:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    c5ba:	221f      	movs	r2, #31
    c5bc:	1c68      	adds	r0, r5, #1
    c5be:	3310      	adds	r3, #16
    c5c0:	f005 f930 	bl	11824 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8a>
    c5c4:	b120      	cbz	r0, c5d0 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x3c>
    c5c6:	f241 2174 	movw	r1, #4724	; 0x1274
    c5ca:	2039      	movs	r0, #57	; 0x39
    c5cc:	f7f7 fada 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5d0:	2000      	movs	r0, #0
    c5d2:	f88d 0000 	strb.w	r0, [sp]
    c5d6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c5da:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    c5de:	6900      	ldr	r0, [r0, #16]
    c5e0:	9001      	str	r0, [sp, #4]
    c5e2:	7828      	ldrb	r0, [r5, #0]
    c5e4:	f8ad 0002 	strh.w	r0, [sp, #2]
    c5e8:	4668      	mov	r0, sp
    c5ea:	f000 f857 	bl	c69c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    c5ee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    c5f0:	200011a4 	.word	0x200011a4
    c5f4:	200016dc 	.word	0x200016dc

0000c5f8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    c5f8:	7801      	ldrb	r1, [r0, #0]
    c5fa:	b181      	cbz	r1, c61e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c5fc:	7841      	ldrb	r1, [r0, #1]
    c5fe:	b171      	cbz	r1, c61e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c600:	8841      	ldrh	r1, [r0, #2]
    c602:	291b      	cmp	r1, #27
    c604:	d30b      	bcc.n	c61e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c606:	8881      	ldrh	r1, [r0, #4]
    c608:	291b      	cmp	r1, #27
    c60a:	d308      	bcc.n	c61e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c60c:	4905      	ldr	r1, [pc, #20]	; (c624 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x2c>)
    c60e:	6802      	ldr	r2, [r0, #0]
    c610:	f8c1 2240 	str.w	r2, [r1, #576]	; 0x240
    c614:	8880      	ldrh	r0, [r0, #4]
    c616:	f8a1 0244 	strh.w	r0, [r1, #580]	; 0x244
    c61a:	2000      	movs	r0, #0
    c61c:	4770      	bx	lr
    c61e:	2012      	movs	r0, #18
    c620:	4770      	bx	lr
    c622:	0000      	.short	0x0000
    c624:	200011a4 	.word	0x200011a4

0000c628 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    c628:	6800      	ldr	r0, [r0, #0]
    c62a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    c62e:	d304      	bcc.n	c63a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    c630:	4903      	ldr	r1, [pc, #12]	; (c640 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    c632:	f8c1 0248 	str.w	r0, [r1, #584]	; 0x248
    c636:	2000      	movs	r0, #0
    c638:	4770      	bx	lr
    c63a:	2012      	movs	r0, #18
    c63c:	4770      	bx	lr
    c63e:	0000      	.short	0x0000
    c640:	200011a4 	.word	0x200011a4

0000c644 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    c644:	b570      	push	{r4, r5, r6, lr}
    c646:	4d14      	ldr	r5, [pc, #80]	; (c698 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>)
    c648:	4604      	mov	r4, r0
    c64a:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c64e:	b920      	cbnz	r0, c65a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    c650:	8860      	ldrh	r0, [r4, #2]
    c652:	b110      	cbz	r0, c65a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    c654:	f7fa feda 	bl	740c <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
    c658:	b198      	cbz	r0, c682 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x3e>
    c65a:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    c65e:	8861      	ldrh	r1, [r4, #2]
    c660:	7820      	ldrb	r0, [r4, #0]
    c662:	f005 f8f4 	bl	1184e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb4>
    c666:	2800      	cmp	r0, #0
    c668:	d10c      	bne.n	c684 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x40>
    c66a:	f7fa fcd9 	bl	7020 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    c66e:	4601      	mov	r1, r0
    c670:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c674:	2800      	cmp	r0, #0
    c676:	8860      	ldrh	r0, [r4, #2]
    c678:	d005      	beq.n	c686 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    c67a:	4288      	cmp	r0, r1
    c67c:	d907      	bls.n	c68e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    c67e:	4608      	mov	r0, r1
    c680:	e005      	b.n	c68e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    c682:	2012      	movs	r0, #18
    c684:	bd70      	pop	{r4, r5, r6, pc}
    c686:	4288      	cmp	r0, r1
    c688:	d901      	bls.n	c68e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    c68a:	2007      	movs	r0, #7
    c68c:	bd70      	pop	{r4, r5, r6, pc}
    c68e:	6861      	ldr	r1, [r4, #4]
    c690:	f7fa ff62 	bl	7558 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    c694:	2000      	movs	r0, #0
    c696:	bd70      	pop	{r4, r5, r6, pc}
    c698:	200011a4 	.word	0x200011a4

0000c69c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    c69c:	b570      	push	{r4, r5, r6, lr}
    c69e:	4d11      	ldr	r5, [pc, #68]	; (c6e4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x48>)
    c6a0:	4604      	mov	r4, r0
    c6a2:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c6a6:	b920      	cbnz	r0, c6b2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    c6a8:	8860      	ldrh	r0, [r4, #2]
    c6aa:	b110      	cbz	r0, c6b2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    c6ac:	f7fa feea 	bl	7484 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    c6b0:	b178      	cbz	r0, c6d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x36>
    c6b2:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    c6b6:	8861      	ldrh	r1, [r4, #2]
    c6b8:	7820      	ldrb	r0, [r4, #0]
    c6ba:	f005 f8c8 	bl	1184e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb4>
    c6be:	2800      	cmp	r0, #0
    c6c0:	d108      	bne.n	c6d4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x38>
    c6c2:	8866      	ldrh	r6, [r4, #2]
    c6c4:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c6c8:	b130      	cbz	r0, c6d8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    c6ca:	f7fa fedb 	bl	7484 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    c6ce:	b110      	cbz	r0, c6d6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3a>
    c6d0:	e002      	b.n	c6d8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    c6d2:	2012      	movs	r0, #18
    c6d4:	bd70      	pop	{r4, r5, r6, pc}
    c6d6:	2600      	movs	r6, #0
    c6d8:	4630      	mov	r0, r6
    c6da:	6861      	ldr	r1, [r4, #4]
    c6dc:	f7fa ff4a 	bl	7574 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    c6e0:	2000      	movs	r0, #0
    c6e2:	bd70      	pop	{r4, r5, r6, pc}
    c6e4:	200011a4 	.word	0x200011a4

0000c6e8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    c6e8:	b510      	push	{r4, lr}
    c6ea:	4604      	mov	r4, r0
    c6ec:	7800      	ldrb	r0, [r0, #0]
    c6ee:	07c0      	lsls	r0, r0, #31
    c6f0:	d004      	beq.n	c6fc <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    c6f2:	f001 f8a1 	bl	d838 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>
    c6f6:	b108      	cbz	r0, c6fc <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    c6f8:	200c      	movs	r0, #12
    c6fa:	bd10      	pop	{r4, pc}
    c6fc:	7820      	ldrb	r0, [r4, #0]
    c6fe:	4903      	ldr	r1, [pc, #12]	; (c70c <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x24>)
    c700:	f000 0001 	and.w	r0, r0, #1
    c704:	7388      	strb	r0, [r1, #14]
    c706:	2000      	movs	r0, #0
    c708:	bd10      	pop	{r4, pc}
    c70a:	0000      	.short	0x0000
    c70c:	2000166a 	.word	0x2000166a

0000c710 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    c710:	4a03      	ldr	r2, [pc, #12]	; (c720 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    c712:	e9d2 1200 	ldrd	r1, r2, [r2]
    c716:	6001      	str	r1, [r0, #0]
    c718:	6042      	str	r2, [r0, #4]
    c71a:	2000      	movs	r0, #0
    c71c:	4770      	bx	lr
    c71e:	0000      	.short	0x0000
    c720:	0000ccac 	.word	0x0000ccac

0000c724 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    c724:	b510      	push	{r4, lr}
    c726:	2005      	movs	r0, #5
    c728:	f000 fb66 	bl	cdf8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    c72c:	f7ff fb14 	bl	bd58 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    c730:	f7fd f954 	bl	99dc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    c734:	4902      	ldr	r1, [pc, #8]	; (c740 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x1c>)
    c736:	4801      	ldr	r0, [pc, #4]	; (c73c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    c738:	6048      	str	r0, [r1, #4]
    c73a:	bd10      	pop	{r4, pc}
    c73c:	0000c8a5 	.word	0x0000c8a5
    c740:	2000031c 	.word	0x2000031c

0000c744 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    c744:	4901      	ldr	r1, [pc, #4]	; (c74c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    c746:	7048      	strb	r0, [r1, #1]
    c748:	f000 b802 	b.w	c750 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    c74c:	2000031c 	.word	0x2000031c

0000c750 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    c750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c754:	f7f8 f988 	bl	4a68 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    c758:	f7f9 f8d2 	bl	5900 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    c75c:	4c22      	ldr	r4, [pc, #136]	; (c7e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>)
    c75e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    c762:	2500      	movs	r5, #0
    c764:	f8a4 724e 	strh.w	r7, [r4, #590]	; 0x24e
    c768:	f8a4 7250 	strh.w	r7, [r4, #592]	; 0x250
    c76c:	f884 5258 	strb.w	r5, [r4, #600]	; 0x258
    c770:	f8a4 525a 	strh.w	r5, [r4, #602]	; 0x25a
    c774:	f884 523e 	strb.w	r5, [r4, #574]	; 0x23e
    c778:	f204 243e 	addw	r4, r4, #574	; 0x23e
    c77c:	f000 fa5a 	bl	cc34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    c780:	f000 fa68 	bl	cc54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    c784:	a019      	add	r0, pc, #100	; (adr r0, c7ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>)
    c786:	7665      	strb	r5, [r4, #25]
    c788:	4e1a      	ldr	r6, [pc, #104]	; (c7f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>)
    c78a:	6801      	ldr	r1, [r0, #0]
    c78c:	7900      	ldrb	r0, [r0, #4]
    c78e:	f1a6 023e 	sub.w	r2, r6, #62	; 0x3e
    c792:	7035      	strb	r5, [r6, #0]
    c794:	f842 1f3f 	str.w	r1, [r2, #63]!
    c798:	1c71      	adds	r1, r6, #1
    c79a:	7110      	strb	r0, [r2, #4]
    c79c:	4630      	mov	r0, r6
    c79e:	f7ff fad5 	bl	bd4c <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>
    c7a2:	201b      	movs	r0, #27
    c7a4:	80f0      	strh	r0, [r6, #6]
    c7a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
    c7aa:	8131      	strh	r1, [r6, #8]
    c7ac:	8170      	strh	r0, [r6, #10]
    c7ae:	81b1      	strh	r1, [r6, #12]
    c7b0:	7525      	strb	r5, [r4, #20]
    c7b2:	7565      	strb	r5, [r4, #21]
    c7b4:	73f5      	strb	r5, [r6, #15]
    c7b6:	2103      	movs	r1, #3
    c7b8:	70a1      	strb	r1, [r4, #2]
    c7ba:	70e1      	strb	r1, [r4, #3]
    c7bc:	80a0      	strh	r0, [r4, #4]
    c7be:	80e0      	strh	r0, [r4, #6]
    c7c0:	f640 60a6 	movw	r0, #3750	; 0xea6
    c7c4:	f8c4 000a 	str.w	r0, [r4, #10]
    c7c8:	f1a6 003e 	sub.w	r0, r6, #62	; 0x3e
    c7cc:	73b5      	strb	r5, [r6, #14]
    c7ce:	7005      	strb	r5, [r0, #0]
    c7d0:	8047      	strh	r7, [r0, #2]
    c7d2:	4809      	ldr	r0, [pc, #36]	; (c7f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>)
    c7d4:	7005      	strb	r5, [r0, #0]
    c7d6:	f1a6 000e 	sub.w	r0, r6, #14
    c7da:	7005      	strb	r5, [r0, #0]
    c7dc:	8047      	strh	r7, [r0, #2]
    c7de:	7625      	strb	r5, [r4, #24]
    c7e0:	73a5      	strb	r5, [r4, #14]
    c7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7e6:	0000      	.short	0x0000
    c7e8:	200011a4 	.word	0x200011a4
    c7ec:	ffffffff 	.word	0xffffffff
    c7f0:	0000001f 	.word	0x0000001f
    c7f4:	2000166a 	.word	0x2000166a
    c7f8:	20000324 	.word	0x20000324

0000c7fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    c7fc:	b570      	push	{r4, r5, r6, lr}
    c7fe:	b150      	cbz	r0, c816 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a>
    c800:	4d16      	ldr	r5, [pc, #88]	; (c85c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x60>)
    c802:	2400      	movs	r4, #0
    c804:	7829      	ldrb	r1, [r5, #0]
    c806:	b159      	cbz	r1, c820 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    c808:	7044      	strb	r4, [r0, #1]
    c80a:	2103      	movs	r1, #3
    c80c:	7001      	strb	r1, [r0, #0]
    c80e:	2101      	movs	r1, #1
    c810:	7101      	strb	r1, [r0, #4]
    c812:	702c      	strb	r4, [r5, #0]
    c814:	e01c      	b.n	c850 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    c816:	f241 6190 	movw	r1, #5776	; 0x1690
    c81a:	2039      	movs	r0, #57	; 0x39
    c81c:	f7f7 f9b2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c820:	78ab      	ldrb	r3, [r5, #2]
    c822:	2105      	movs	r1, #5
    c824:	f44f 728e 	mov.w	r2, #284	; 0x11c
    c828:	b13b      	cbz	r3, c83a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    c82a:	7044      	strb	r4, [r0, #1]
    c82c:	f800 1b04 	strb.w	r1, [r0], #4
    c830:	1d29      	adds	r1, r5, #4
    c832:	f7f7 f81d 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c836:	70ac      	strb	r4, [r5, #2]
    c838:	e00a      	b.n	c850 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    c83a:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c83e:	b14b      	cbz	r3, c854 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    c840:	7044      	strb	r4, [r0, #1]
    c842:	f800 1b04 	strb.w	r1, [r0], #4
    c846:	4906      	ldr	r1, [pc, #24]	; (c860 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>)
    c848:	f7f7 f812 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c84c:	f885 4120 	strb.w	r4, [r5, #288]	; 0x120
    c850:	2001      	movs	r0, #1
    c852:	bd70      	pop	{r4, r5, r6, pc}
    c854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c858:	f7f9 bf44 	b.w	66e4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    c85c:	200011a4 	.word	0x200011a4
    c860:	200012c6 	.word	0x200012c6
    c864:	b570      	push	{r4, r5, r6, lr}
    c866:	4604      	mov	r4, r0
    c868:	480d      	ldr	r0, [pc, #52]	; (c8a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    c86a:	f890 5257 	ldrb.w	r5, [r0, #599]	; 0x257
    c86e:	f7fc f8fb 	bl	8a68 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    c872:	b148      	cbz	r0, c888 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    c874:	b11d      	cbz	r5, c87e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x82>
    c876:	f7fa fe05 	bl	7484 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    c87a:	b110      	cbz	r0, c882 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x86>
    c87c:	e00b      	b.n	c896 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    c87e:	b154      	cbz	r4, c896 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    c880:	e002      	b.n	c888 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    c882:	f7fa fddd 	bl	7440 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    c886:	b930      	cbnz	r0, c896 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    c888:	f005 f946 	bl	11b18 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    c88c:	b128      	cbz	r0, c89a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    c88e:	f7ff fa09 	bl	bca4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    c892:	2801      	cmp	r0, #1
    c894:	d001      	beq.n	c89a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    c896:	2000      	movs	r0, #0
    c898:	bd70      	pop	{r4, r5, r6, pc}
    c89a:	2001      	movs	r0, #1
    c89c:	bd70      	pop	{r4, r5, r6, pc}
    c89e:	0000      	.short	0x0000
    c8a0:	200011a4 	.word	0x200011a4
    c8a4:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8a8:	4692      	mov	sl, r2
    c8aa:	460f      	mov	r7, r1
    c8ac:	4681      	mov	r9, r0
    c8ae:	f005 f90e 	bl	11ace <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    c8b2:	2800      	cmp	r0, #0
    c8b4:	d063      	beq.n	c97e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    c8b6:	4933      	ldr	r1, [pc, #204]	; (c984 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    c8b8:	f8b9 2050 	ldrh.w	r2, [r9, #80]	; 0x50
    c8bc:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e
    c8c0:	88c8      	ldrh	r0, [r1, #6]
    c8c2:	4290      	cmp	r0, r2
    c8c4:	d300      	bcc.n	c8c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    c8c6:	4610      	mov	r0, r2
    c8c8:	4680      	mov	r8, r0
    c8ca:	8948      	ldrh	r0, [r1, #10]
    c8cc:	42b0      	cmp	r0, r6
    c8ce:	d200      	bcs.n	c8d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
    c8d0:	4606      	mov	r6, r0
    c8d2:	890c      	ldrh	r4, [r1, #8]
    c8d4:	f640 0048 	movw	r0, #2120	; 0x848
    c8d8:	4284      	cmp	r4, r0
    c8da:	d300      	bcc.n	c8de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    c8dc:	4604      	mov	r4, r0
    c8de:	898d      	ldrh	r5, [r1, #12]
    c8e0:	4285      	cmp	r5, r0
    c8e2:	d300      	bcc.n	c8e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    c8e4:	4605      	mov	r5, r0
    c8e6:	4284      	cmp	r4, r0
    c8e8:	d300      	bcc.n	c8ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    c8ea:	4604      	mov	r4, r0
    c8ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
    c8f0:	2e1b      	cmp	r6, #27
    c8f2:	d001      	beq.n	c8f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    c8f4:	428d      	cmp	r5, r1
    c8f6:	d104      	bne.n	c902 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x106>
    c8f8:	f1b8 0f1b 	cmp.w	r8, #27
    c8fc:	d03f      	beq.n	c97e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    c8fe:	428c      	cmp	r4, r1
    c900:	d03d      	beq.n	c97e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    c902:	466a      	mov	r2, sp
    c904:	4651      	mov	r1, sl
    c906:	4648      	mov	r0, r9
    c908:	f005 f87d 	bl	11a06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
    c90c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    c910:	4641      	mov	r1, r8
    c912:	4540      	cmp	r0, r8
    c914:	d900      	bls.n	c918 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11c>
    c916:	4608      	mov	r0, r1
    c918:	80f8      	strh	r0, [r7, #6]
    c91a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    c91e:	42a1      	cmp	r1, r4
    c920:	d800      	bhi.n	c924 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    c922:	460c      	mov	r4, r1
    c924:	813c      	strh	r4, [r7, #8]
    c926:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    c92a:	42b1      	cmp	r1, r6
    c92c:	d800      	bhi.n	c930 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    c92e:	460e      	mov	r6, r1
    c930:	807e      	strh	r6, [r7, #2]
    c932:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c936:	42a9      	cmp	r1, r5
    c938:	d900      	bls.n	c93c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>
    c93a:	4629      	mov	r1, r5
    c93c:	80b9      	strh	r1, [r7, #4]
    c93e:	2201      	movs	r2, #1
    c940:	703a      	strb	r2, [r7, #0]
    c942:	381b      	subs	r0, #27
    c944:	28e0      	cmp	r0, #224	; 0xe0
    c946:	d902      	bls.n	c94e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    c948:	f640 4138 	movw	r1, #3128	; 0xc38
    c94c:	e014      	b.n	c978 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    c94e:	3e1b      	subs	r6, #27
    c950:	2ee0      	cmp	r6, #224	; 0xe0
    c952:	d902      	bls.n	c95a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    c954:	f640 413a 	movw	r1, #3130	; 0xc3a
    c958:	e00e      	b.n	c978 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    c95a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    c95e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    c962:	4284      	cmp	r4, r0
    c964:	d902      	bls.n	c96c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    c966:	f640 413c 	movw	r1, #3132	; 0xc3c
    c96a:	e005      	b.n	c978 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    c96c:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    c970:	4281      	cmp	r1, r0
    c972:	d904      	bls.n	c97e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    c974:	f640 413e 	movw	r1, #3134	; 0xc3e
    c978:	2039      	movs	r0, #57	; 0x39
    c97a:	f7f7 f903 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c97e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c982:	0000      	.short	0x0000
    c984:	2000166a 	.word	0x2000166a
    c988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c98c:	461d      	mov	r5, r3
    c98e:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    c992:	f1a1 0c06 	sub.w	ip, r1, #6
    c996:	f640 437a 	movw	r3, #3194	; 0xc7a
    c99a:	9e08      	ldr	r6, [sp, #32]
    c99c:	459c      	cmp	ip, r3
    c99e:	d805      	bhi.n	c9ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>
    c9a0:	f1a2 0c06 	sub.w	ip, r2, #6
    c9a4:	459c      	cmp	ip, r3
    c9a6:	d801      	bhi.n	c9ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>
    c9a8:	2301      	movs	r3, #1
    c9aa:	e000      	b.n	c9ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    c9ac:	2300      	movs	r3, #0
    c9ae:	b120      	cbz	r0, c9ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1be>
    c9b0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    c9b4:	b168      	cbz	r0, c9d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d6>
    c9b6:	b96b      	cbnz	r3, c9d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d8>
    c9b8:	e002      	b.n	c9c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    c9ba:	4815      	ldr	r0, [pc, #84]	; (ca10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>)
    c9bc:	7b80      	ldrb	r0, [r0, #14]
    c9be:	e7f9      	b.n	c9b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    c9c0:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    c9c4:	2806      	cmp	r0, #6
    c9c6:	d821      	bhi.n	ca0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9c8:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    c9cc:	2806      	cmp	r0, #6
    c9ce:	d901      	bls.n	c9d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d8>
    c9d0:	e01c      	b.n	ca0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9d2:	b1db      	cbz	r3, ca0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9d4:	4291      	cmp	r1, r2
    c9d6:	d819      	bhi.n	ca0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9d8:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    c9dc:	d216      	bcs.n	ca0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9de:	f1a4 000a 	sub.w	r0, r4, #10
    c9e2:	f640 4176 	movw	r1, #3190	; 0xc76
    c9e6:	4288      	cmp	r0, r1
    c9e8:	d810      	bhi.n	ca0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    c9ea:	4610      	mov	r0, r2
    c9ec:	f003 fa25 	bl	fe3a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    c9f0:	1c6d      	adds	r5, r5, #1
    c9f2:	4368      	muls	r0, r5
    c9f4:	f240 2171 	movw	r1, #625	; 0x271
    c9f8:	0040      	lsls	r0, r0, #1
    c9fa:	434c      	muls	r4, r1
    c9fc:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    ca00:	d204      	bcs.n	ca0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ca02:	42b7      	cmp	r7, r6
    ca04:	d802      	bhi.n	ca0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ca06:	2001      	movs	r0, #1
    ca08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca0c:	2000      	movs	r0, #0
    ca0e:	e7fb      	b.n	ca08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x20c>
    ca10:	2000166a 	.word	0x2000166a
    ca14:	b530      	push	{r4, r5, lr}
    ca16:	b087      	sub	sp, #28
    ca18:	4605      	mov	r5, r0
    ca1a:	2000      	movs	r0, #0
    ca1c:	9005      	str	r0, [sp, #20]
    ca1e:	9001      	str	r0, [sp, #4]
    ca20:	9002      	str	r0, [sp, #8]
    ca22:	8808      	ldrh	r0, [r1, #0]
    ca24:	f8ad 0004 	strh.w	r0, [sp, #4]
    ca28:	4811      	ldr	r0, [pc, #68]	; (ca70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x274>)
    ca2a:	460c      	mov	r4, r1
    ca2c:	ab03      	add	r3, sp, #12
    ca2e:	f890 1252 	ldrb.w	r1, [r0, #594]	; 0x252
    ca32:	f88d 1006 	strb.w	r1, [sp, #6]
    ca36:	f890 0253 	ldrb.w	r0, [r0, #595]	; 0x253
    ca3a:	f88d 0007 	strb.w	r0, [sp, #7]
    ca3e:	a804      	add	r0, sp, #16
    ca40:	9000      	str	r0, [sp, #0]
    ca42:	aa01      	add	r2, sp, #4
    ca44:	4621      	mov	r1, r4
    ca46:	4628      	mov	r0, r5
    ca48:	f005 f821 	bl	11a8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f4>
    ca4c:	0005      	movs	r5, r0
    ca4e:	d10c      	bne.n	ca6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26e>
    ca50:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ca54:	f88d 0014 	strb.w	r0, [sp, #20]
    ca58:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ca5c:	f88d 0015 	strb.w	r0, [sp, #21]
    ca60:	a905      	add	r1, sp, #20
    ca62:	4620      	mov	r0, r4
    ca64:	f003 facc 	bl	10000 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ca68:	4628      	mov	r0, r5
    ca6a:	b007      	add	sp, #28
    ca6c:	bd30      	pop	{r4, r5, pc}
    ca6e:	0000      	.short	0x0000
    ca70:	200011a4 	.word	0x200011a4

0000ca74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    ca74:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ca78:	4604      	mov	r4, r0
    ca7a:	7840      	ldrb	r0, [r0, #1]
    ca7c:	2542      	movs	r5, #66	; 0x42
    ca7e:	2801      	cmp	r0, #1
    ca80:	d808      	bhi.n	ca94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    ca82:	78a0      	ldrb	r0, [r4, #2]
    ca84:	f7fa fd14 	bl	74b0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ca88:	b120      	cbz	r0, ca94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    ca8a:	7820      	ldrb	r0, [r4, #0]
    ca8c:	2512      	movs	r5, #18
    ca8e:	2801      	cmp	r0, #1
    ca90:	d003      	beq.n	ca9a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    ca92:	b1a0      	cbz	r0, cabe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4a>
    ca94:	4628      	mov	r0, r5
    ca96:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ca9a:	f7fa fce3 	bl	7464 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ca9e:	b128      	cbz	r0, caac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    caa0:	f8b4 0003 	ldrh.w	r0, [r4, #3]
    caa4:	2800      	cmp	r0, #0
    caa6:	d0f5      	beq.n	ca94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    caa8:	2880      	cmp	r0, #128	; 0x80
    caaa:	d8f3      	bhi.n	ca94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    caac:	7860      	ldrb	r0, [r4, #1]
    caae:	2800      	cmp	r0, #0
    cab0:	d0f0      	beq.n	ca94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cab2:	f7fa fc99 	bl	73e8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    cab6:	b148      	cbz	r0, cacc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cab8:	7820      	ldrb	r0, [r4, #0]
    caba:	2801      	cmp	r0, #1
    cabc:	d008      	beq.n	cad0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    cabe:	f7fb ffcd 	bl	8a5c <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    cac2:	4604      	mov	r4, r0
    cac4:	f7fb ffa4 	bl	8a10 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    cac8:	2800      	cmp	r0, #0
    caca:	d079      	beq.n	cbc0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
    cacc:	200c      	movs	r0, #12
    cace:	e7e2      	b.n	ca96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cad0:	4d55      	ldr	r5, [pc, #340]	; (cc28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b4>)
    cad2:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cad6:	f7fa f9ad 	bl	6e34 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    cada:	b910      	cbnz	r0, cae2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x6e>
    cadc:	f7fa fca8 	bl	7430 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    cae0:	b3f0      	cbz	r0, cb60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    cae2:	f7fb ffc1 	bl	8a68 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    cae6:	2800      	cmp	r0, #0
    cae8:	d1f0      	bne.n	cacc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    caea:	f7fa fa8d 	bl	7008 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    caee:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    caf2:	39ff      	subs	r1, #255	; 0xff
    caf4:	d1ea      	bne.n	cacc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    caf6:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cafa:	f7fa f9c5 	bl	6e88 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    cafe:	f8b4 6003 	ldrh.w	r6, [r4, #3]
    cb02:	f242 7010 	movw	r0, #10000	; 0x2710
    cb06:	4346      	muls	r6, r0
    cb08:	7960      	ldrb	r0, [r4, #5]
    cb0a:	f7fa fb73 	bl	71f4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    cb0e:	f7fa fc97 	bl	7440 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    cb12:	b138      	cbz	r0, cb24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb0>
    cb14:	f7fa fca6 	bl	7464 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    cb18:	4f44      	ldr	r7, [pc, #272]	; (cc2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    cb1a:	b170      	cbz	r0, cb3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    cb1c:	f7fa fcaa 	bl	7474 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    cb20:	b148      	cbz	r0, cb36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    cb22:	e00a      	b.n	cb3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    cb24:	4631      	mov	r1, r6
    cb26:	2000      	movs	r0, #0
    cb28:	f7fb feda 	bl	88e0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    cb2c:	2800      	cmp	r0, #0
    cb2e:	d0b2      	beq.n	ca96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cb30:	f241 313c 	movw	r1, #4924	; 0x133c
    cb34:	e073      	b.n	cc1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cb36:	7bb8      	ldrb	r0, [r7, #14]
    cb38:	b190      	cbz	r0, cb60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    cb3a:	2200      	movs	r2, #0
    cb3c:	2101      	movs	r1, #1
    cb3e:	a801      	add	r0, sp, #4
    cb40:	f7f7 f99e 	bl	3e80 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>
    cb44:	0004      	movs	r4, r0
    cb46:	d03c      	beq.n	cbc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    cb48:	2100      	movs	r1, #0
    cb4a:	f7f9 fbbb 	bl	62c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    cb4e:	4620      	mov	r0, r4
    cb50:	f7fa fcfc 	bl	754c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    cb54:	f004 ffbb 	bl	11ace <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    cb58:	b148      	cbz	r0, cb6e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    cb5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    cb5e:	e000      	b.n	cb62 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xee>
    cb60:	e016      	b.n	cb90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11c>
    cb62:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    cb66:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    cb6a:	84c1      	strh	r1, [r0, #38]	; 0x26
    cb6c:	8502      	strh	r2, [r0, #40]	; 0x28
    cb6e:	7bb8      	ldrb	r0, [r7, #14]
    cb70:	b100      	cbz	r0, cb74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>
    cb72:	2001      	movs	r0, #1
    cb74:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
    cb78:	f8d5 0248 	ldr.w	r0, [r5, #584]	; 0x248
    cb7c:	62a0      	str	r0, [r4, #40]	; 0x28
    cb7e:	4620      	mov	r0, r4
    cb80:	f004 f81c 	bl	10bbc <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>
    cb84:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    cb88:	b120      	cbz	r0, cb94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x120>
    cb8a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    cb8e:	e003      	b.n	cb98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x124>
    cb90:	2012      	movs	r0, #18
    cb92:	e780      	b.n	ca96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cb94:	f641 574c 	movw	r7, #7500	; 0x1d4c
    cb98:	f7fa fc6c 	bl	7474 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    cb9c:	b908      	cbnz	r0, cba2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    cb9e:	f7fa fccf 	bl	7540 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    cba2:	4621      	mov	r1, r4
    cba4:	2001      	movs	r0, #1
    cba6:	6067      	str	r7, [r4, #4]
    cba8:	f7ff ff34 	bl	ca14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x218>
    cbac:	b158      	cbz	r0, cbc6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x152>
    cbae:	2101      	movs	r1, #1
    cbb0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    cbb4:	f7f7 fa12 	bl	3fdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    cbb8:	b118      	cbz	r0, cbc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    cbba:	f241 318a 	movw	r1, #5002	; 0x138a
    cbbe:	e02e      	b.n	cc1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cbc0:	e022      	b.n	cc08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>
    cbc2:	2009      	movs	r0, #9
    cbc4:	e767      	b.n	ca96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cbc6:	f895 0241 	ldrb.w	r0, [r5, #577]	; 0x241
    cbca:	9000      	str	r0, [sp, #0]
    cbcc:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
    cbd0:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    cbd4:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    cbd8:	8820      	ldrh	r0, [r4, #0]
    cbda:	f7f7 fac5 	bl	4168 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    cbde:	b110      	cbz	r0, cbe6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x172>
    cbe0:	f241 3195 	movw	r1, #5013	; 0x1395
    cbe4:	e01b      	b.n	cc1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cbe6:	4631      	mov	r1, r6
    cbe8:	4620      	mov	r0, r4
    cbea:	f7fb fe79 	bl	88e0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    cbee:	b110      	cbz	r0, cbf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x182>
    cbf0:	f241 3197 	movw	r1, #5015	; 0x1397
    cbf4:	e013      	b.n	cc1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cbf6:	480e      	ldr	r0, [pc, #56]	; (cc30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    cbf8:	6843      	ldr	r3, [r0, #4]
    cbfa:	b19b      	cbz	r3, cc24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cbfc:	2200      	movs	r2, #0
    cbfe:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    cc02:	4620      	mov	r0, r4
    cc04:	4798      	blx	r3
    cc06:	e00d      	b.n	cc24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cc08:	b164      	cbz	r4, cc24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cc0a:	8820      	ldrh	r0, [r4, #0]
    cc0c:	f7f7 fe40 	bl	4890 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    cc10:	8820      	ldrh	r0, [r4, #0]
    cc12:	2101      	movs	r1, #1
    cc14:	f7f7 f9e2 	bl	3fdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    cc18:	b120      	cbz	r0, cc24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cc1a:	f241 31af 	movw	r1, #5039	; 0x13af
    cc1e:	2039      	movs	r0, #57	; 0x39
    cc20:	f7f6 ffb0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc24:	2000      	movs	r0, #0
    cc26:	e736      	b.n	ca96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cc28:	200011a4 	.word	0x200011a4
    cc2c:	2000166a 	.word	0x2000166a
    cc30:	2000031c 	.word	0x2000031c
    cc34:	4806      	ldr	r0, [pc, #24]	; (cc50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>)
    cc36:	2100      	movs	r1, #0
    cc38:	f890 2020 	ldrb.w	r2, [r0, #32]
    cc3c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    cc40:	8091      	strh	r1, [r2, #4]
    cc42:	f810 1f20 	ldrb.w	r1, [r0, #32]!
    cc46:	1c49      	adds	r1, r1, #1
    cc48:	f001 0101 	and.w	r1, r1, #1
    cc4c:	7001      	strb	r1, [r0, #0]
    cc4e:	4770      	bx	lr
    cc50:	2000167c 	.word	0x2000167c
    cc54:	4806      	ldr	r0, [pc, #24]	; (cc70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>)
    cc56:	2100      	movs	r1, #0
    cc58:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    cc5c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    cc60:	8291      	strh	r1, [r2, #20]
    cc62:	f810 1f21 	ldrb.w	r1, [r0, #33]!
    cc66:	1c49      	adds	r1, r1, #1
    cc68:	f001 0101 	and.w	r1, r1, #1
    cc6c:	7001      	strb	r1, [r0, #0]
    cc6e:	4770      	bx	lr
    cc70:	2000167c 	.word	0x2000167c
    cc74:	b510      	push	{r4, lr}
    cc76:	4604      	mov	r4, r0
    cc78:	88c1      	ldrh	r1, [r0, #6]
    cc7a:	8880      	ldrh	r0, [r0, #4]
    cc7c:	f004 feb5 	bl	119ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
    cc80:	2800      	cmp	r0, #0
    cc82:	d10f      	bne.n	cca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    cc84:	8861      	ldrh	r1, [r4, #2]
    cc86:	8820      	ldrh	r0, [r4, #0]
    cc88:	f004 feaf 	bl	119ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
    cc8c:	2800      	cmp	r0, #0
    cc8e:	d109      	bne.n	cca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    cc90:	4805      	ldr	r0, [pc, #20]	; (cca8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>)
    cc92:	88a1      	ldrh	r1, [r4, #4]
    cc94:	8141      	strh	r1, [r0, #10]
    cc96:	8821      	ldrh	r1, [r4, #0]
    cc98:	80c1      	strh	r1, [r0, #6]
    cc9a:	88e1      	ldrh	r1, [r4, #6]
    cc9c:	8181      	strh	r1, [r0, #12]
    cc9e:	8861      	ldrh	r1, [r4, #2]
    cca0:	8101      	strh	r1, [r0, #8]
    cca2:	2000      	movs	r0, #0
    cca4:	bd10      	pop	{r4, pc}
    cca6:	0000      	.short	0x0000
    cca8:	2000166a 	.word	0x2000166a
    ccac:	0b11370b 	.word	0x0b11370b
    ccb0:	11370059 	.word	0x11370059

0000ccb4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    ccb4:	b510      	push	{r4, lr}
    ccb6:	4a06      	ldr	r2, [pc, #24]	; (ccd0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    ccb8:	4604      	mov	r4, r0
    ccba:	7010      	strb	r0, [r2, #0]
    ccbc:	6051      	str	r1, [r2, #4]
    ccbe:	6890      	ldr	r0, [r2, #8]
    ccc0:	f005 f86f 	bl	11da2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    ccc4:	4620      	mov	r0, r4
    ccc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ccca:	f7ff bd3b 	b.w	c744 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    ccce:	0000      	.short	0x0000
    ccd0:	2000032c 	.word	0x2000032c

0000ccd4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    ccd4:	b510      	push	{r4, lr}
    ccd6:	4c07      	ldr	r4, [pc, #28]	; (ccf4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    ccd8:	68e0      	ldr	r0, [r4, #12]
    ccda:	f005 f862 	bl	11da2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    ccde:	6920      	ldr	r0, [r4, #16]
    cce0:	f005 f85f 	bl	11da2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    cce4:	f7f7 fec0 	bl	4a68 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    cce8:	f7f8 fe0a 	bl	5900 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ccec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ccf0:	f7ff bd2e 	b.w	c750 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    ccf4:	2000032c 	.word	0x2000032c

0000ccf8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    ccf8:	b500      	push	{lr}
    ccfa:	4905      	ldr	r1, [pc, #20]	; (cd10 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    ccfc:	4805      	ldr	r0, [pc, #20]	; (cd14 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ccfe:	f005 f804 	bl	11d0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cd02:	4804      	ldr	r0, [pc, #16]	; (cd14 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    cd04:	4904      	ldr	r1, [pc, #16]	; (cd18 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    cd06:	1d00      	adds	r0, r0, #4
    cd08:	f85d eb04 	ldr.w	lr, [sp], #4
    cd0c:	f004 bffd 	b.w	11d0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cd10:	20000340 	.word	0x20000340
    cd14:	20000334 	.word	0x20000334
    cd18:	20000348 	.word	0x20000348

0000cd1c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    cd1c:	b500      	push	{lr}
    cd1e:	4908      	ldr	r1, [pc, #32]	; (cd40 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    cd20:	4808      	ldr	r0, [pc, #32]	; (cd44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    cd22:	f004 fff2 	bl	11d0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cd26:	4807      	ldr	r0, [pc, #28]	; (cd44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    cd28:	4907      	ldr	r1, [pc, #28]	; (cd48 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    cd2a:	1d00      	adds	r0, r0, #4
    cd2c:	f004 ffed 	bl	11d0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cd30:	4804      	ldr	r0, [pc, #16]	; (cd44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    cd32:	4906      	ldr	r1, [pc, #24]	; (cd4c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    cd34:	3008      	adds	r0, #8
    cd36:	f85d eb04 	ldr.w	lr, [sp], #4
    cd3a:	f004 bfe6 	b.w	11d0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cd3e:	0000      	.short	0x0000
    cd40:	20000378 	.word	0x20000378
    cd44:	20000334 	.word	0x20000334
    cd48:	20000380 	.word	0x20000380
    cd4c:	20000370 	.word	0x20000370

0000cd50 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    cd50:	4801      	ldr	r0, [pc, #4]	; (cd58 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    cd52:	7840      	ldrb	r0, [r0, #1]
    cd54:	4770      	bx	lr
    cd56:	0000      	.short	0x0000
    cd58:	2000032c 	.word	0x2000032c
    cd5c:	4807      	ldr	r0, [pc, #28]	; (cd7c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    cd5e:	b510      	push	{r4, lr}
    cd60:	7800      	ldrb	r0, [r0, #0]
    cd62:	f7fb fe89 	bl	8a78 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    cd66:	4806      	ldr	r0, [pc, #24]	; (cd80 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    cd68:	f7fa fb00 	bl	736c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    cd6c:	4906      	ldr	r1, [pc, #24]	; (cd88 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    cd6e:	4805      	ldr	r0, [pc, #20]	; (cd84 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    cd70:	6008      	str	r0, [r1, #0]
    cd72:	4907      	ldr	r1, [pc, #28]	; (cd90 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x40>)
    cd74:	4805      	ldr	r0, [pc, #20]	; (cd8c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    cd76:	6008      	str	r0, [r1, #0]
    cd78:	bd10      	pop	{r4, pc}
    cd7a:	0000      	.short	0x0000
    cd7c:	2000032c 	.word	0x2000032c
    cd80:	20001c0c 	.word	0x20001c0c
    cd84:	00007055 	.word	0x00007055
    cd88:	20000350 	.word	0x20000350
    cd8c:	0000682d 	.word	0x0000682d
    cd90:	20000354 	.word	0x20000354
    cd94:	b510      	push	{r4, lr}
    cd96:	f7f7 fdfb 	bl	4990 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    cd9a:	4806      	ldr	r0, [pc, #24]	; (cdb4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x64>)
    cd9c:	4904      	ldr	r1, [pc, #16]	; (cdb0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x60>)
    cd9e:	7800      	ldrb	r0, [r0, #0]
    cda0:	f7f7 fece 	bl	4b40 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    cda4:	f004 ffd1 	bl	11d4a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x40>
    cda8:	4904      	ldr	r1, [pc, #16]	; (cdbc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x6c>)
    cdaa:	4803      	ldr	r0, [pc, #12]	; (cdb8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x68>)
    cdac:	6008      	str	r0, [r1, #0]
    cdae:	bd10      	pop	{r4, pc}
    cdb0:	20001c0c 	.word	0x20001c0c
    cdb4:	2000032c 	.word	0x2000032c
    cdb8:	00004af5 	.word	0x00004af5
    cdbc:	2000036c 	.word	0x2000036c
    cdc0:	b510      	push	{r4, lr}
    cdc2:	4c08      	ldr	r4, [pc, #32]	; (cde4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    cdc4:	2001      	movs	r0, #1
    cdc6:	7060      	strb	r0, [r4, #1]
    cdc8:	f7fa fbf6 	bl	75b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    cdcc:	7820      	ldrb	r0, [r4, #0]
    cdce:	f7fc fe1d 	bl	9a0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    cdd2:	f7ff ffdf 	bl	cd94 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>
    cdd6:	4905      	ldr	r1, [pc, #20]	; (cdec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    cdd8:	4803      	ldr	r0, [pc, #12]	; (cde8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    cdda:	6008      	str	r0, [r1, #0]
    cddc:	4905      	ldr	r1, [pc, #20]	; (cdf4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    cdde:	4804      	ldr	r0, [pc, #16]	; (cdf0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    cde0:	6008      	str	r0, [r1, #0]
    cde2:	bd10      	pop	{r4, pc}
    cde4:	2000032c 	.word	0x2000032c
    cde8:	00010ce9 	.word	0x00010ce9
    cdec:	20000368 	.word	0x20000368
    cdf0:	0000688d 	.word	0x0000688d
    cdf4:	2000035c 	.word	0x2000035c

0000cdf8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    cdf8:	4a07      	ldr	r2, [pc, #28]	; (ce18 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x20>)
    cdfa:	b510      	push	{r4, lr}
    cdfc:	6811      	ldr	r1, [r2, #0]
    cdfe:	fa21 f300 	lsr.w	r3, r1, r0
    ce02:	07db      	lsls	r3, r3, #31
    ce04:	d003      	beq.n	ce0e <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x16>
    ce06:	211f      	movs	r1, #31
    ce08:	2002      	movs	r0, #2
    ce0a:	f7f6 febb 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce0e:	2301      	movs	r3, #1
    ce10:	4083      	lsls	r3, r0
    ce12:	430b      	orrs	r3, r1
    ce14:	6013      	str	r3, [r2, #0]
    ce16:	bd10      	pop	{r4, pc}
    ce18:	20000388 	.word	0x20000388

0000ce1c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    ce1c:	4801      	ldr	r0, [pc, #4]	; (ce24 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    ce1e:	6800      	ldr	r0, [r0, #0]
    ce20:	4770      	bx	lr
    ce22:	0000      	.short	0x0000
    ce24:	20000388 	.word	0x20000388

0000ce28 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>:
    ce28:	00c1      	lsls	r1, r0, #3
    ce2a:	4802      	ldr	r0, [pc, #8]	; (ce34 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI+0xc>)
    ce2c:	6800      	ldr	r0, [r0, #0]
    ce2e:	40c8      	lsrs	r0, r1
    ce30:	b2c0      	uxtb	r0, r0
    ce32:	4770      	bx	lr
    ce34:	20000388 	.word	0x20000388

0000ce38 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    ce38:	4803      	ldr	r0, [pc, #12]	; (ce48 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    ce3a:	8800      	ldrh	r0, [r0, #0]
    ce3c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ce40:	0040      	lsls	r0, r0, #1
    ce42:	1c40      	adds	r0, r0, #1
    ce44:	4770      	bx	lr
    ce46:	0000      	.short	0x0000
    ce48:	20000388 	.word	0x20000388

0000ce4c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    ce4c:	b570      	push	{r4, r5, r6, lr}
    ce4e:	4605      	mov	r5, r0
    ce50:	4616      	mov	r6, r2
    ce52:	460c      	mov	r4, r1
    ce54:	2002      	movs	r0, #2
    ce56:	f000 f9b9 	bl	d1cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ce5a:	4905      	ldr	r1, [pc, #20]	; (ce70 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    ce5c:	2001      	movs	r0, #1
    ce5e:	7008      	strb	r0, [r1, #0]
    ce60:	4904      	ldr	r1, [pc, #16]	; (ce74 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    ce62:	1ef0      	subs	r0, r6, #3
    ce64:	6008      	str	r0, [r1, #0]
    ce66:	4804      	ldr	r0, [pc, #16]	; (ce78 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ce68:	6005      	str	r5, [r0, #0]
    ce6a:	1f00      	subs	r0, r0, #4
    ce6c:	6004      	str	r4, [r0, #0]
    ce6e:	bd70      	pop	{r4, r5, r6, pc}
    ce70:	200003bf 	.word	0x200003bf
    ce74:	4000f510 	.word	0x4000f510
    ce78:	4000f508 	.word	0x4000f508

0000ce7c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    ce7c:	4811      	ldr	r0, [pc, #68]	; (cec4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    ce7e:	7801      	ldrb	r1, [r0, #0]
    ce80:	b1d9      	cbz	r1, ceba <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3e>
    ce82:	4a11      	ldr	r2, [pc, #68]	; (cec8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    ce84:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    ce88:	6011      	str	r1, [r2, #0]
    ce8a:	4910      	ldr	r1, [pc, #64]	; (cecc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    ce8c:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    ce90:	2200      	movs	r2, #0
    ce92:	2b00      	cmp	r3, #0
    ce94:	bf1c      	itt	ne
    ce96:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    ce9a:	2b00      	cmpne	r3, #0
    ce9c:	d002      	beq.n	cea4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    ce9e:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    cea2:	b119      	cbz	r1, ceac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x30>
    cea4:	7042      	strb	r2, [r0, #1]
    cea6:	f04f 0110 	mov.w	r1, #16
    ceaa:	e004      	b.n	ceb6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    ceac:	f04f 0101 	mov.w	r1, #1
    ceb0:	7041      	strb	r1, [r0, #1]
    ceb2:	4907      	ldr	r1, [pc, #28]	; (ced0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x54>)
    ceb4:	6809      	ldr	r1, [r1, #0]
    ceb6:	7081      	strb	r1, [r0, #2]
    ceb8:	7002      	strb	r2, [r0, #0]
    ceba:	f04f 0000 	mov.w	r0, #0
    cebe:	f000 b985 	b.w	d1cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    cec2:	0000      	.short	0x0000
    cec4:	200003bf 	.word	0x200003bf
    cec8:	4001f508 	.word	0x4001f508
    cecc:	4000f000 	.word	0x4000f000
    ced0:	4000f400 	.word	0x4000f400

0000ced4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    ced4:	b510      	push	{r4, lr}
    ced6:	2002      	movs	r0, #2
    ced8:	f000 f978 	bl	d1cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    cedc:	4907      	ldr	r1, [pc, #28]	; (cefc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    cede:	2001      	movs	r0, #1
    cee0:	7008      	strb	r0, [r1, #0]
    cee2:	4907      	ldr	r1, [pc, #28]	; (cf00 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    cee4:	2000      	movs	r0, #0
    cee6:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ceea:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    ceee:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    cef2:	4904      	ldr	r1, [pc, #16]	; (cf04 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    cef4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    cef8:	6008      	str	r0, [r1, #0]
    cefa:	bd10      	pop	{r4, pc}
    cefc:	200003bf 	.word	0x200003bf
    cf00:	4000f000 	.word	0x4000f000
    cf04:	4001f504 	.word	0x4001f504

0000cf08 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    cf08:	4803      	ldr	r0, [pc, #12]	; (cf18 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    cf0a:	2100      	movs	r1, #0
    cf0c:	7001      	strb	r1, [r0, #0]
    cf0e:	7041      	strb	r1, [r0, #1]
    cf10:	2110      	movs	r1, #16
    cf12:	7081      	strb	r1, [r0, #2]
    cf14:	4770      	bx	lr
    cf16:	0000      	.short	0x0000
    cf18:	200003bf 	.word	0x200003bf

0000cf1c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    cf1c:	480c      	ldr	r0, [pc, #48]	; (cf50 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    cf1e:	7801      	ldrb	r1, [r0, #0]
    cf20:	2900      	cmp	r1, #0
    cf22:	bf04      	itt	eq
    cf24:	7880      	ldrbeq	r0, [r0, #2]
    cf26:	4770      	bxeq	lr
    cf28:	480a      	ldr	r0, [pc, #40]	; (cf54 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    cf2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    cf2e:	2900      	cmp	r1, #0
    cf30:	bf1c      	itt	ne
    cf32:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    cf36:	2900      	cmpne	r1, #0
    cf38:	d002      	beq.n	cf40 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    cf3a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    cf3e:	b110      	cbz	r0, cf46 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    cf40:	f04f 0010 	mov.w	r0, #16
    cf44:	4770      	bx	lr
    cf46:	4804      	ldr	r0, [pc, #16]	; (cf58 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    cf48:	6800      	ldr	r0, [r0, #0]
    cf4a:	b2c0      	uxtb	r0, r0
    cf4c:	4770      	bx	lr
    cf4e:	0000      	.short	0x0000
    cf50:	200003bf 	.word	0x200003bf
    cf54:	4000f000 	.word	0x4000f000
    cf58:	4000f400 	.word	0x4000f400

0000cf5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    cf5c:	480e      	ldr	r0, [pc, #56]	; (cf98 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3c>)
    cf5e:	7801      	ldrb	r1, [r0, #0]
    cf60:	2900      	cmp	r1, #0
    cf62:	bf04      	itt	eq
    cf64:	7840      	ldrbeq	r0, [r0, #1]
    cf66:	4770      	bxeq	lr
    cf68:	480c      	ldr	r0, [pc, #48]	; (cf9c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x40>)
    cf6a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    cf6e:	2900      	cmp	r1, #0
    cf70:	bf04      	itt	eq
    cf72:	2002      	moveq	r0, #2
    cf74:	4770      	bxeq	lr
    cf76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    cf7a:	2900      	cmp	r1, #0
    cf7c:	bf1c      	itt	ne
    cf7e:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    cf82:	2900      	cmpne	r1, #0
    cf84:	d005      	beq.n	cf92 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x36>
    cf86:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    cf8a:	2800      	cmp	r0, #0
    cf8c:	bf04      	itt	eq
    cf8e:	2001      	moveq	r0, #1
    cf90:	4770      	bxeq	lr
    cf92:	2000      	movs	r0, #0
    cf94:	4770      	bx	lr
    cf96:	0000      	.short	0x0000
    cf98:	200003bf 	.word	0x200003bf
    cf9c:	4000f000 	.word	0x4000f000

0000cfa0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    cfa0:	4813      	ldr	r0, [pc, #76]	; (cff0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x50>)
    cfa2:	b510      	push	{r4, lr}
    cfa4:	7802      	ldrb	r2, [r0, #0]
    cfa6:	4b13      	ldr	r3, [pc, #76]	; (cff4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x54>)
    cfa8:	7840      	ldrb	r0, [r0, #1]
    cfaa:	21c8      	movs	r1, #200	; 0xc8
    cfac:	1e49      	subs	r1, r1, #1
    cfae:	b2c9      	uxtb	r1, r1
    cfb0:	b182      	cbz	r2, cfd4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x34>
    cfb2:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    cfb6:	f1bc 0f00 	cmp.w	ip, #0
    cfba:	d011      	beq.n	cfe0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    cfbc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    cfc0:	2800      	cmp	r0, #0
    cfc2:	bf1c      	itt	ne
    cfc4:	f8d3 0104 	ldrne.w	r0, [r3, #260]	; 0x104
    cfc8:	2800      	cmpne	r0, #0
    cfca:	d007      	beq.n	cfdc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    cfcc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    cfd0:	b160      	cbz	r0, cfec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    cfd2:	e003      	b.n	cfdc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    cfd4:	2802      	cmp	r0, #2
    cfd6:	d003      	beq.n	cfe0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    cfd8:	2801      	cmp	r0, #1
    cfda:	d007      	beq.n	cfec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    cfdc:	2000      	movs	r0, #0
    cfde:	bd10      	pop	{r4, pc}
    cfe0:	2900      	cmp	r1, #0
    cfe2:	d1e3      	bne.n	cfac <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    cfe4:	218e      	movs	r1, #142	; 0x8e
    cfe6:	203b      	movs	r0, #59	; 0x3b
    cfe8:	f7f6 fdcc 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfec:	2001      	movs	r0, #1
    cfee:	bd10      	pop	{r4, pc}
    cff0:	200003bf 	.word	0x200003bf
    cff4:	4000f000 	.word	0x4000f000

0000cff8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    cff8:	b570      	push	{r4, r5, r6, lr}
    cffa:	4606      	mov	r6, r0
    cffc:	4614      	mov	r4, r2
    cffe:	460d      	mov	r5, r1
    d000:	2001      	movs	r0, #1
    d002:	f000 f8e3 	bl	d1cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d006:	4803      	ldr	r0, [pc, #12]	; (d014 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    d008:	6006      	str	r6, [r0, #0]
    d00a:	1d00      	adds	r0, r0, #4
    d00c:	6004      	str	r4, [r0, #0]
    d00e:	1d00      	adds	r0, r0, #4
    d010:	6005      	str	r5, [r0, #0]
    d012:	bd70      	pop	{r4, r5, r6, pc}
    d014:	4000f508 	.word	0x4000f508

0000d018 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    d018:	480a      	ldr	r0, [pc, #40]	; (d044 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    d01a:	7801      	ldrb	r1, [r0, #0]
    d01c:	b179      	cbz	r1, d03e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x26>
    d01e:	4a0a      	ldr	r2, [pc, #40]	; (d048 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    d020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    d024:	6011      	str	r1, [r2, #0]
    d026:	4909      	ldr	r1, [pc, #36]	; (d04c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    d028:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    d02c:	2100      	movs	r1, #0
    d02e:	2a00      	cmp	r2, #0
    d030:	bf08      	it	eq
    d032:	7041      	strbeq	r1, [r0, #1]
    d034:	d002      	beq.n	d03c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    d036:	4a06      	ldr	r2, [pc, #24]	; (d050 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    d038:	6812      	ldr	r2, [r2, #0]
    d03a:	7042      	strb	r2, [r0, #1]
    d03c:	7001      	strb	r1, [r0, #0]
    d03e:	2000      	movs	r0, #0
    d040:	f000 b8c4 	b.w	d1cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d044:	200003c2 	.word	0x200003c2
    d048:	4001f508 	.word	0x4001f508
    d04c:	4000f000 	.word	0x4000f000
    d050:	4000f400 	.word	0x4000f400

0000d054 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    d054:	b570      	push	{r4, r5, r6, lr}
    d056:	4604      	mov	r4, r0
    d058:	4817      	ldr	r0, [pc, #92]	; (d0b8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    d05a:	460e      	mov	r6, r1
    d05c:	2501      	movs	r5, #1
    d05e:	7005      	strb	r5, [r0, #0]
    d060:	4916      	ldr	r1, [pc, #88]	; (d0bc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    d062:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    d066:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    d06a:	6008      	str	r0, [r1, #0]
    d06c:	f001 fc8c 	bl	e988 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d070:	b928      	cbnz	r0, d07e <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2a>
    d072:	4813      	ldr	r0, [pc, #76]	; (d0c0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    d074:	6801      	ldr	r1, [r0, #0]
    d076:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    d07a:	4331      	orrs	r1, r6
    d07c:	6001      	str	r1, [r0, #0]
    d07e:	4911      	ldr	r1, [pc, #68]	; (d0c4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x70>)
    d080:	2000      	movs	r0, #0
    d082:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    d086:	4b10      	ldr	r3, [pc, #64]	; (d0c8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x74>)
    d088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    d08c:	601a      	str	r2, [r3, #0]
    d08e:	2c00      	cmp	r4, #0
    d090:	bf02      	ittt	eq
    d092:	f8c1 5200 	streq.w	r5, [r1, #512]	; 0x200
    d096:	600d      	streq	r5, [r1, #0]
    d098:	bd70      	popeq	{r4, r5, r6, pc}
    d09a:	2c01      	cmp	r4, #1
    d09c:	d003      	beq.n	d0a6 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    d09e:	2174      	movs	r1, #116	; 0x74
    d0a0:	203c      	movs	r0, #60	; 0x3c
    d0a2:	f7f6 fd6f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0a6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    d0aa:	600d      	str	r5, [r1, #0]
    d0ac:	4907      	ldr	r1, [pc, #28]	; (d0cc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x78>)
    d0ae:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    d0b2:	6008      	str	r0, [r1, #0]
    d0b4:	bd70      	pop	{r4, r5, r6, pc}
    d0b6:	0000      	.short	0x0000
    d0b8:	200003c2 	.word	0x200003c2
    d0bc:	4000f504 	.word	0x4000f504
    d0c0:	4000f518 	.word	0x4000f518
    d0c4:	4000f000 	.word	0x4000f000
    d0c8:	4001f508 	.word	0x4001f508
    d0cc:	4001f504 	.word	0x4001f504

0000d0d0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    d0d0:	4802      	ldr	r0, [pc, #8]	; (d0dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    d0d2:	2100      	movs	r1, #0
    d0d4:	7001      	strb	r1, [r0, #0]
    d0d6:	7041      	strb	r1, [r0, #1]
    d0d8:	4770      	bx	lr
    d0da:	0000      	.short	0x0000
    d0dc:	200003c2 	.word	0x200003c2

0000d0e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    d0e0:	4807      	ldr	r0, [pc, #28]	; (d100 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    d0e2:	7801      	ldrb	r1, [r0, #0]
    d0e4:	2900      	cmp	r1, #0
    d0e6:	bf04      	itt	eq
    d0e8:	7840      	ldrbeq	r0, [r0, #1]
    d0ea:	4770      	bxeq	lr
    d0ec:	4805      	ldr	r0, [pc, #20]	; (d104 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    d0ee:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    d0f2:	2800      	cmp	r0, #0
    d0f4:	bf08      	it	eq
    d0f6:	4770      	bxeq	lr
    d0f8:	4803      	ldr	r0, [pc, #12]	; (d108 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x28>)
    d0fa:	6800      	ldr	r0, [r0, #0]
    d0fc:	b2c0      	uxtb	r0, r0
    d0fe:	4770      	bx	lr
    d100:	200003c2 	.word	0x200003c2
    d104:	4000f000 	.word	0x4000f000
    d108:	4000f400 	.word	0x4000f400

0000d10c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    d10c:	4901      	ldr	r1, [pc, #4]	; (d114 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    d10e:	2001      	movs	r0, #1
    d110:	6088      	str	r0, [r1, #8]
    d112:	4770      	bx	lr
    d114:	4000f000 	.word	0x4000f000

0000d118 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    d118:	2800      	cmp	r0, #0
    d11a:	bf08      	it	eq
    d11c:	4770      	bxeq	lr
    d11e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d122:	481b      	ldr	r0, [pc, #108]	; (d190 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>)
    d124:	7800      	ldrb	r0, [r0, #0]
    d126:	b1e0      	cbz	r0, d162 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4a>
    d128:	4c1a      	ldr	r4, [pc, #104]	; (d194 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    d12a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d12e:	2800      	cmp	r0, #0
    d130:	bf18      	it	ne
    d132:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d136:	f04f 0902 	mov.w	r9, #2
    d13a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    d13e:	4f16      	ldr	r7, [pc, #88]	; (d198 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    d140:	6838      	ldr	r0, [r7, #0]
    d142:	f3c0 1800 	ubfx	r8, r0, #4, #1
    d146:	6838      	ldr	r0, [r7, #0]
    d148:	f040 0010 	orr.w	r0, r0, #16
    d14c:	6038      	str	r0, [r7, #0]
    d14e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d152:	2800      	cmp	r0, #0
    d154:	bf04      	itt	eq
    d156:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
    d15a:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
    d15e:	d10c      	bne.n	d17a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    d160:	e003      	b.n	d16a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d162:	21d3      	movs	r1, #211	; 0xd3
    d164:	203c      	movs	r0, #60	; 0x3c
    d166:	f7f6 fd0d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d16a:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
    d16e:	f7f6 fb4f 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    d172:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d176:	2800      	cmp	r0, #0
    d178:	d0f7      	beq.n	d16a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d17a:	f1b8 0f00 	cmp.w	r8, #0
    d17e:	d103      	bne.n	d188 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    d180:	6838      	ldr	r0, [r7, #0]
    d182:	f020 0010 	bic.w	r0, r0, #16
    d186:	6038      	str	r0, [r7, #0]
    d188:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    d18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d190:	200003c2 	.word	0x200003c2
    d194:	4000f000 	.word	0x4000f000
    d198:	e000ed10 	.word	0xe000ed10

0000d19c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    d19c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    d1a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    d1a4:	2000      	movs	r0, #0
    d1a6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    d1aa:	f3bf 8f4f 	dsb	sy
    d1ae:	f3bf 8f6f 	isb	sy
    d1b2:	4904      	ldr	r1, [pc, #16]	; (d1c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x28>)
    d1b4:	6008      	str	r0, [r1, #0]
    d1b6:	6008      	str	r0, [r1, #0]
    d1b8:	4903      	ldr	r1, [pc, #12]	; (d1c8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    d1ba:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    d1be:	6008      	str	r0, [r1, #0]
    d1c0:	4770      	bx	lr
    d1c2:	0000      	.short	0x0000
    d1c4:	4000f500 	.word	0x4000f500
    d1c8:	4001f508 	.word	0x4001f508

0000d1cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    d1cc:	4912      	ldr	r1, [pc, #72]	; (d218 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    d1ce:	b510      	push	{r4, lr}
    d1d0:	2200      	movs	r2, #0
    d1d2:	600a      	str	r2, [r1, #0]
    d1d4:	600a      	str	r2, [r1, #0]
    d1d6:	4b11      	ldr	r3, [pc, #68]	; (d21c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    d1d8:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
    d1dc:	601a      	str	r2, [r3, #0]
    d1de:	2800      	cmp	r0, #0
    d1e0:	bf08      	it	eq
    d1e2:	bd10      	popeq	{r4, pc}
    d1e4:	4a0e      	ldr	r2, [pc, #56]	; (d220 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    d1e6:	4b0f      	ldr	r3, [pc, #60]	; (d224 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    d1e8:	f8df c03c 	ldr.w	ip, [pc, #60]	; d228 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x5c>
    d1ec:	2801      	cmp	r0, #1
    d1ee:	d005      	beq.n	d1fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    d1f0:	2802      	cmp	r0, #2
    d1f2:	d008      	beq.n	d206 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    d1f4:	217d      	movs	r1, #125	; 0x7d
    d1f6:	203d      	movs	r0, #61	; 0x3d
    d1f8:	f7f6 fcc4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1fc:	2002      	movs	r0, #2
    d1fe:	6008      	str	r0, [r1, #0]
    d200:	601a      	str	r2, [r3, #0]
    d202:	0600      	lsls	r0, r0, #24
    d204:	e004      	b.n	d210 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    d206:	2003      	movs	r0, #3
    d208:	6008      	str	r0, [r1, #0]
    d20a:	601a      	str	r2, [r3, #0]
    d20c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d210:	f8cc 0000 	str.w	r0, [ip]
    d214:	bd10      	pop	{r4, pc}
    d216:	0000      	.short	0x0000
    d218:	4000f500 	.word	0x4000f500
    d21c:	4001f508 	.word	0x4001f508
    d220:	20001d0e 	.word	0x20001d0e
    d224:	4000f514 	.word	0x4000f514
    d228:	4001f504 	.word	0x4001f504

0000d22c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    d22c:	4805      	ldr	r0, [pc, #20]	; (d244 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    d22e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d232:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    d236:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d23a:	4903      	ldr	r1, [pc, #12]	; (d248 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    d23c:	2000      	movs	r0, #0
    d23e:	6008      	str	r0, [r1, #0]
    d240:	4770      	bx	lr
    d242:	0000      	.short	0x0000
    d244:	40001000 	.word	0x40001000
    d248:	40001560 	.word	0x40001560

0000d24c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    d24c:	4904      	ldr	r1, [pc, #16]	; (d260 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    d24e:	6008      	str	r0, [r1, #0]
    d250:	4804      	ldr	r0, [pc, #16]	; (d264 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    d252:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d256:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    d25a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d25e:	4770      	bx	lr
    d260:	40001560 	.word	0x40001560
    d264:	40001000 	.word	0x40001000

0000d268 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>:
    d268:	00c2      	lsls	r2, r0, #3
    d26a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d26e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    d272:	4b07      	ldr	r3, [pc, #28]	; (d290 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x28>)
    d274:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    d278:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    d27c:	2101      	movs	r1, #1
    d27e:	fa01 f000 	lsl.w	r0, r1, r0
    d282:	4904      	ldr	r1, [pc, #16]	; (d294 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x2c>)
    d284:	6008      	str	r0, [r1, #0]
    d286:	4904      	ldr	r1, [pc, #16]	; (d298 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x30>)
    d288:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    d28a:	4310      	orrs	r0, r2
    d28c:	6388      	str	r0, [r1, #56]	; 0x38
    d28e:	4770      	bx	lr
    d290:	40001104 	.word	0x40001104
    d294:	4001f504 	.word	0x4001f504
    d298:	200018b0 	.word	0x200018b0

0000d29c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    d29c:	4801      	ldr	r0, [pc, #4]	; (d2a4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    d29e:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    d2a2:	4770      	bx	lr
    d2a4:	200018b0 	.word	0x200018b0

0000d2a8 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    d2a8:	4a01      	ldr	r2, [pc, #4]	; (d2b0 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    d2aa:	7051      	strb	r1, [r2, #1]
    d2ac:	7010      	strb	r0, [r2, #0]
    d2ae:	4770      	bx	lr
    d2b0:	200018b0 	.word	0x200018b0

0000d2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    d2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d2b8:	f7f6 fb1a 	bl	38f0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    d2bc:	f7f6 fb7c 	bl	39b8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    d2c0:	4b30      	ldr	r3, [pc, #192]	; (d384 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd0>)
    d2c2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    d2c6:	2610      	movs	r6, #16
    d2c8:	f3c1 1500 	ubfx	r5, r1, #4, #1
    d2cc:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
    d2d0:	2102      	movs	r1, #2
    d2d2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    d2d6:	4a2c      	ldr	r2, [pc, #176]	; (d388 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd4>)
    d2d8:	4f2d      	ldr	r7, [pc, #180]	; (d390 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xdc>)
    d2da:	f04f 0c00 	mov.w	ip, #0
    d2de:	f882 c03c 	strb.w	ip, [r2, #60]	; 0x3c
    d2e2:	492a      	ldr	r1, [pc, #168]	; (d38c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd8>)
    d2e4:	6039      	str	r1, [r7, #0]
    d2e6:	7ad1      	ldrb	r1, [r2, #11]
    d2e8:	2401      	movs	r4, #1
    d2ea:	2901      	cmp	r1, #1
    d2ec:	d002      	beq.n	d2f4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x40>
    d2ee:	2902      	cmp	r1, #2
    d2f0:	d003      	beq.n	d2fa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    d2f2:	e017      	b.n	d324 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d2f4:	7e11      	ldrb	r1, [r2, #24]
    d2f6:	b911      	cbnz	r1, d2fe <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4a>
    d2f8:	e014      	b.n	d324 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d2fa:	7e51      	ldrb	r1, [r2, #25]
    d2fc:	b191      	cbz	r1, d324 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d2fe:	7f91      	ldrb	r1, [r2, #30]
    d300:	f892 801f 	ldrb.w	r8, [r2, #31]
    d304:	fa04 f101 	lsl.w	r1, r4, r1
    d308:	fa04 f808 	lsl.w	r8, r4, r8
    d30c:	ea41 0108 	orr.w	r1, r1, r8
    d310:	6039      	str	r1, [r7, #0]
    d312:	f892 1020 	ldrb.w	r1, [r2, #32]
    d316:	0089      	lsls	r1, r1, #2
    d318:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    d31c:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    d320:	f8c1 c510 	str.w	ip, [r1, #1296]	; 0x510
    d324:	491b      	ldr	r1, [pc, #108]	; (d394 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xe0>)
    d326:	6809      	ldr	r1, [r1, #0]
    d328:	b1a9      	cbz	r1, d356 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xa2>
    d32a:	21ff      	movs	r1, #255	; 0xff
    d32c:	f88d 1000 	strb.w	r1, [sp]
    d330:	f8c3 c110 	str.w	ip, [r3, #272]	; 0x110
    d334:	611c      	str	r4, [r3, #16]
    d336:	e004      	b.n	d342 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8e>
    d338:	f89d 1000 	ldrb.w	r1, [sp]
    d33c:	1e49      	subs	r1, r1, #1
    d33e:	f88d 1000 	strb.w	r1, [sp]
    d342:	f89d 1000 	ldrb.w	r1, [sp]
    d346:	b119      	cbz	r1, d350 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>
    d348:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    d34c:	2900      	cmp	r1, #0
    d34e:	d0f3      	beq.n	d338 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    d350:	f89d 1000 	ldrb.w	r1, [sp]
    d354:	b189      	cbz	r1, d37a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xc6>
    d356:	f8c3 c110 	str.w	ip, [r3, #272]	; 0x110
    d35a:	f882 c009 	strb.w	ip, [r2, #9]
    d35e:	f882 c00a 	strb.w	ip, [r2, #10]
    d362:	f882 c00b 	strb.w	ip, [r2, #11]
    d366:	7314      	strb	r4, [r2, #12]
    d368:	2d00      	cmp	r5, #0
    d36a:	bf18      	it	ne
    d36c:	f8c3 6304 	strne.w	r6, [r3, #772]	; 0x304
    d370:	2800      	cmp	r0, #0
    d372:	bf18      	it	ne
    d374:	611c      	strne	r4, [r3, #16]
    d376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d37a:	f240 6183 	movw	r1, #1667	; 0x683
    d37e:	203e      	movs	r0, #62	; 0x3e
    d380:	f7f6 fc00 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d384:	40001000 	.word	0x40001000
    d388:	200018b0 	.word	0x200018b0
    d38c:	040e0000 	.word	0x040e0000
    d390:	4001f508 	.word	0x4001f508
    d394:	40001550 	.word	0x40001550

0000d398 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d39c:	f8df a290 	ldr.w	sl, [pc, #656]	; d630 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>
    d3a0:	4607      	mov	r7, r0
    d3a2:	b087      	sub	sp, #28
    d3a4:	48a1      	ldr	r0, [pc, #644]	; (d62c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    d3a6:	460d      	mov	r5, r1
    d3a8:	f8ca 0000 	str.w	r0, [sl]
    d3ac:	4ca1      	ldr	r4, [pc, #644]	; (d634 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x29c>)
    d3ae:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    d3b2:	f040 0002 	orr.w	r0, r0, #2
    d3b6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    d3ba:	4608      	mov	r0, r1
    d3bc:	f001 f9a4 	bl	e708 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    d3c0:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    d3c4:	2925      	cmp	r1, #37	; 0x25
    d3c6:	bf08      	it	eq
    d3c8:	2002      	moveq	r0, #2
    d3ca:	d00f      	beq.n	d3ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d3cc:	2926      	cmp	r1, #38	; 0x26
    d3ce:	bf08      	it	eq
    d3d0:	201a      	moveq	r0, #26
    d3d2:	d00b      	beq.n	d3ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d3d4:	2927      	cmp	r1, #39	; 0x27
    d3d6:	bf08      	it	eq
    d3d8:	2050      	moveq	r0, #80	; 0x50
    d3da:	d007      	beq.n	d3ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d3dc:	290a      	cmp	r1, #10
    d3de:	4608      	mov	r0, r1
    d3e0:	bf94      	ite	ls
    d3e2:	2204      	movls	r2, #4
    d3e4:	2206      	movhi	r2, #6
    d3e6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d3ea:	b2c0      	uxtb	r0, r0
    d3ec:	4a92      	ldr	r2, [pc, #584]	; (d638 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a0>)
    d3ee:	6010      	str	r0, [r2, #0]
    d3f0:	4892      	ldr	r0, [pc, #584]	; (d63c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a4>)
    d3f2:	6001      	str	r1, [r0, #0]
    d3f4:	4e92      	ldr	r6, [pc, #584]	; (d640 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a8>)
    d3f6:	f04f 0800 	mov.w	r8, #0
    d3fa:	f04f 0b01 	mov.w	fp, #1
    d3fe:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    d402:	b117      	cbz	r7, d40a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x72>
    d404:	2f01      	cmp	r7, #1
    d406:	d04d      	beq.n	d4a4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x10c>
    d408:	e094      	b.n	d534 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d40a:	2d01      	cmp	r5, #1
    d40c:	bf08      	it	eq
    d40e:	2000      	moveq	r0, #0
    d410:	d00b      	beq.n	d42a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d412:	2d02      	cmp	r5, #2
    d414:	bf08      	it	eq
    d416:	2001      	moveq	r0, #1
    d418:	d007      	beq.n	d42a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d41a:	2d04      	cmp	r5, #4
    d41c:	bf08      	it	eq
    d41e:	2003      	moveq	r0, #3
    d420:	d003      	beq.n	d42a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d422:	2d08      	cmp	r5, #8
    d424:	bf08      	it	eq
    d426:	2002      	moveq	r0, #2
    d428:	d150      	bne.n	d4cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x134>
    d42a:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d42e:	ab05      	add	r3, sp, #20
    d430:	f7f2 ffd0 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d434:	2800      	cmp	r0, #0
    d436:	d154      	bne.n	d4e2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    d438:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d43c:	f001 f95e 	bl	e6fc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d440:	7a60      	ldrb	r0, [r4, #9]
    d442:	2801      	cmp	r0, #1
    d444:	d105      	bne.n	d452 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xba>
    d446:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d44a:	f040 0008 	orr.w	r0, r0, #8
    d44e:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d452:	f001 fab5 	bl	e9c0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d456:	b178      	cbz	r0, d478 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>
    d458:	497a      	ldr	r1, [pc, #488]	; (d644 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2ac>)
    d45a:	680a      	ldr	r2, [r1, #0]
    d45c:	0648      	lsls	r0, r1, #25
    d45e:	2d02      	cmp	r5, #2
    d460:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    d464:	bf0c      	ite	eq
    d466:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    d46a:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    d46e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    d472:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    d476:	6008      	str	r0, [r1, #0]
    d478:	f884 b00b 	strb.w	fp, [r4, #11]
    d47c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d47e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    d482:	63a0      	str	r0, [r4, #56]	; 0x38
    d484:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d488:	f8ca 0000 	str.w	r0, [sl]
    d48c:	2d02      	cmp	r5, #2
    d48e:	bf0c      	ite	eq
    d490:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    d494:	f640 0034 	movwne	r0, #2100	; 0x834
    d498:	f649 71ec 	movw	r1, #40940	; 0x9fec
    d49c:	4408      	add	r0, r1
    d49e:	fbb0 f8f9 	udiv	r8, r0, r9
    d4a2:	e047      	b.n	d534 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d4a4:	7aa0      	ldrb	r0, [r4, #10]
    d4a6:	2801      	cmp	r0, #1
    d4a8:	d124      	bne.n	d4f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    d4aa:	7b60      	ldrb	r0, [r4, #13]
    d4ac:	2801      	cmp	r0, #1
    d4ae:	bf08      	it	eq
    d4b0:	2000      	moveq	r0, #0
    d4b2:	d010      	beq.n	d4d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d4b4:	2802      	cmp	r0, #2
    d4b6:	bf08      	it	eq
    d4b8:	2001      	moveq	r0, #1
    d4ba:	d00c      	beq.n	d4d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d4bc:	2804      	cmp	r0, #4
    d4be:	bf08      	it	eq
    d4c0:	2003      	moveq	r0, #3
    d4c2:	d008      	beq.n	d4d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d4c4:	2808      	cmp	r0, #8
    d4c6:	bf08      	it	eq
    d4c8:	2002      	moveq	r0, #2
    d4ca:	d004      	beq.n	d4d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d4cc:	f240 31f3 	movw	r1, #1011	; 0x3f3
    d4d0:	2006      	movs	r0, #6
    d4d2:	f7f6 fb57 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4d6:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d4da:	ab05      	add	r3, sp, #20
    d4dc:	f7f2 ff7a 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d4e0:	b120      	cbz	r0, d4ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    d4e2:	f240 31d5 	movw	r1, #981	; 0x3d5
    d4e6:	203e      	movs	r0, #62	; 0x3e
    d4e8:	f7f6 fb4c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4ec:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d4f0:	f001 f904 	bl	e6fc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d4f4:	7a60      	ldrb	r0, [r4, #9]
    d4f6:	2801      	cmp	r0, #1
    d4f8:	d105      	bne.n	d506 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    d4fa:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d4fe:	f040 0004 	orr.w	r0, r0, #4
    d502:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d506:	2002      	movs	r0, #2
    d508:	72e0      	strb	r0, [r4, #11]
    d50a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d50c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    d510:	63a0      	str	r0, [r4, #56]	; 0x38
    d512:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    d516:	f8ca 0000 	str.w	r0, [sl]
    d51a:	f04f 0829 	mov.w	r8, #41	; 0x29
    d51e:	f001 fa4f 	bl	e9c0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d522:	b938      	cbnz	r0, d534 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d524:	f001 fa3c 	bl	e9a0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    d528:	b920      	cbnz	r0, d534 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d52a:	4847      	ldr	r0, [pc, #284]	; (d648 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b0>)
    d52c:	6801      	ldr	r1, [r0, #0]
    d52e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    d532:	6001      	str	r1, [r0, #0]
    d534:	7a60      	ldrb	r0, [r4, #9]
    d536:	2800      	cmp	r0, #0
    d538:	bf04      	itt	eq
    d53a:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    d53e:	f040 0002 	orreq.w	r0, r0, #2
    d542:	d006      	beq.n	d552 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1ba>
    d544:	2801      	cmp	r0, #1
    d546:	bf04      	itt	eq
    d548:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    d54c:	f040 0004 	orreq.w	r0, r0, #4
    d550:	d101      	bne.n	d556 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1be>
    d552:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    d556:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    d55a:	f010 0f01 	tst.w	r0, #1
    d55e:	d027      	beq.n	d5b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    d560:	f010 0f02 	tst.w	r0, #2
    d564:	d018      	beq.n	d598 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x200>
    d566:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d56a:	f040 0001 	orr.w	r0, r0, #1
    d56e:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d572:	4836      	ldr	r0, [pc, #216]	; (d64c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b4>)
    d574:	6801      	ldr	r1, [r0, #0]
    d576:	290b      	cmp	r1, #11
    d578:	bf1c      	itt	ne
    d57a:	6801      	ldrne	r1, [r0, #0]
    d57c:	290a      	cmpne	r1, #10
    d57e:	d005      	beq.n	d58c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1f4>
    d580:	6801      	ldr	r1, [r0, #0]
    d582:	2903      	cmp	r1, #3
    d584:	bf1c      	itt	ne
    d586:	6800      	ldrne	r0, [r0, #0]
    d588:	2802      	cmpne	r0, #2
    d58a:	d111      	bne.n	d5b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    d58c:	f240 414c 	movw	r1, #1100	; 0x44c
    d590:	f04f 003e 	mov.w	r0, #62	; 0x3e
    d594:	f7f6 faf6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d598:	f010 0f04 	tst.w	r0, #4
    d59c:	d008      	beq.n	d5b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    d59e:	492d      	ldr	r1, [pc, #180]	; (d654 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2bc>)
    d5a0:	482b      	ldr	r0, [pc, #172]	; (d650 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b8>)
    d5a2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    d5a6:	482c      	ldr	r0, [pc, #176]	; (d658 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c0>)
    d5a8:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    d5ac:	2801      	cmp	r0, #1
    d5ae:	d031      	beq.n	d614 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x27c>
    d5b0:	f001 f8d2 	bl	e758 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    d5b4:	6800      	ldr	r0, [r0, #0]
    d5b6:	2801      	cmp	r0, #1
    d5b8:	d031      	beq.n	d61e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x286>
    d5ba:	2f01      	cmp	r7, #1
    d5bc:	bf08      	it	eq
    d5be:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    d5c2:	d008      	beq.n	d5d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x23e>
    d5c4:	2d02      	cmp	r5, #2
    d5c6:	bf0c      	ite	eq
    d5c8:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    d5cc:	f640 0034 	movwne	r0, #2100	; 0x834
    d5d0:	f24a 0150 	movw	r1, #41040	; 0xa050
    d5d4:	4408      	add	r0, r1
    d5d6:	fbb0 f0f9 	udiv	r0, r0, r9
    d5da:	4920      	ldr	r1, [pc, #128]	; (d65c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c4>)
    d5dc:	6809      	ldr	r1, [r1, #0]
    d5de:	4a20      	ldr	r2, [pc, #128]	; (d660 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c8>)
    d5e0:	2f01      	cmp	r7, #1
    d5e2:	f102 0314 	add.w	r3, r2, #20
    d5e6:	e893 1038 	ldmia.w	r3, {r3, r4, r5, ip}
    d5ea:	e88d 1038 	stmia.w	sp, {r3, r4, r5, ip}
    d5ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
    d5f0:	9204      	str	r2, [sp, #16]
    d5f2:	bf14      	ite	ne
    d5f4:	2201      	movne	r2, #1
    d5f6:	2200      	moveq	r2, #0
    d5f8:	f88d 2001 	strb.w	r2, [sp, #1]
    d5fc:	e9cd 1003 	strd	r1, r0, [sp, #12]
    d600:	4668      	mov	r0, sp
    d602:	f7f6 f9c3 	bl	398c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    d606:	2000      	movs	r0, #0
    d608:	f000 ffe4 	bl	e5d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    d60c:	b007      	add	sp, #28
    d60e:	4640      	mov	r0, r8
    d610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d614:	f240 4153 	movw	r1, #1107	; 0x453
    d618:	203e      	movs	r0, #62	; 0x3e
    d61a:	f7f6 fab3 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d61e:	f7ff fe49 	bl	d2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    d622:	b007      	add	sp, #28
    d624:	2000      	movs	r0, #0
    d626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d62a:	0000      	.short	0x0000
    d62c:	04040000 	.word	0x04040000
    d630:	4001f504 	.word	0x4001f504
    d634:	200018b0 	.word	0x200018b0
    d638:	40001508 	.word	0x40001508
    d63c:	40001554 	.word	0x40001554
    d640:	40001000 	.word	0x40001000
    d644:	40001588 	.word	0x40001588
    d648:	40001568 	.word	0x40001568
    d64c:	40001550 	.word	0x40001550
    d650:	40001008 	.word	0x40001008
    d654:	4001f098 	.word	0x4001f098
    d658:	40008000 	.word	0x40008000
    d65c:	40008540 	.word	0x40008540
    d660:	0000e6ac 	.word	0x0000e6ac

0000d664 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    d664:	b410      	push	{r4}
    d666:	e890 101c 	ldmia.w	r0, {r2, r3, r4, ip}
    d66a:	4903      	ldr	r1, [pc, #12]	; (d678 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x14>)
    d66c:	e881 101c 	stmia.w	r1, {r2, r3, r4, ip}
    d670:	6900      	ldr	r0, [r0, #16]
    d672:	6108      	str	r0, [r1, #16]
    d674:	bc10      	pop	{r4}
    d676:	4770      	bx	lr
    d678:	2000189c 	.word	0x2000189c

0000d67c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    d67c:	4914      	ldr	r1, [pc, #80]	; (d6d0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x54>)
    d67e:	b510      	push	{r4, lr}
    d680:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    d682:	4282      	cmp	r2, r0
    d684:	d304      	bcc.n	d690 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
    d686:	f240 61ec 	movw	r1, #1772	; 0x6ec
    d68a:	203e      	movs	r0, #62	; 0x3e
    d68c:	f7f6 fa7a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d690:	2201      	movs	r2, #1
    d692:	f8df c040 	ldr.w	ip, [pc, #64]	; d6d4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x58>
    d696:	740a      	strb	r2, [r1, #16]
    d698:	6148      	str	r0, [r1, #20]
    d69a:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
    d69e:	4b0e      	ldr	r3, [pc, #56]	; (d6d8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
    d6a0:	681c      	ldr	r4, [r3, #0]
    d6a2:	1d64      	adds	r4, r4, #5
    d6a4:	4284      	cmp	r4, r0
    d6a6:	d306      	bcc.n	d6b6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3a>
    d6a8:	480c      	ldr	r0, [pc, #48]	; (d6dc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>)
    d6aa:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    d6ae:	2900      	cmp	r1, #0
    d6b0:	bf08      	it	eq
    d6b2:	6102      	streq	r2, [r0, #16]
    d6b4:	bd10      	pop	{r4, pc}
    d6b6:	2200      	movs	r2, #0
    d6b8:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
    d6bc:	6018      	str	r0, [r3, #0]
    d6be:	6b88      	ldr	r0, [r1, #56]	; 0x38
    d6c0:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    d6c4:	6388      	str	r0, [r1, #56]	; 0x38
    d6c6:	4906      	ldr	r1, [pc, #24]	; (d6e0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
    d6c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    d6cc:	6008      	str	r0, [r1, #0]
    d6ce:	bd10      	pop	{r4, pc}
    d6d0:	200018b0 	.word	0x200018b0
    d6d4:	40008000 	.word	0x40008000
    d6d8:	40008544 	.word	0x40008544
    d6dc:	40001000 	.word	0x40001000
    d6e0:	4001f504 	.word	0x4001f504

0000d6e4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    d6e4:	b510      	push	{r4, lr}
    d6e6:	4c19      	ldr	r4, [pc, #100]	; (d74c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x68>)
    d6e8:	4603      	mov	r3, r0
    d6ea:	2002      	movs	r0, #2
    d6ec:	4918      	ldr	r1, [pc, #96]	; (d750 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x6c>)
    d6ee:	7420      	strb	r0, [r4, #16]
    d6f0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    d6f4:	680a      	ldr	r2, [r1, #0]
    d6f6:	f002 020f 	and.w	r2, r2, #15
    d6fa:	2a03      	cmp	r2, #3
    d6fc:	bf08      	it	eq
    d6fe:	2201      	moveq	r2, #1
    d700:	d00b      	beq.n	d71a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x36>
    d702:	6809      	ldr	r1, [r1, #0]
    d704:	f001 010f 	and.w	r1, r1, #15
    d708:	2904      	cmp	r1, #4
    d70a:	bf08      	it	eq
    d70c:	2202      	moveq	r2, #2
    d70e:	d004      	beq.n	d71a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x36>
    d710:	f240 11d7 	movw	r1, #471	; 0x1d7
    d714:	203e      	movs	r0, #62	; 0x3e
    d716:	f7f6 fa35 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d71a:	490c      	ldr	r1, [pc, #48]	; (d74c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x68>)
    d71c:	f894 c031 	ldrb.w	ip, [r4, #49]	; 0x31
    d720:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
    d724:	f1bc 0f01 	cmp.w	ip, #1
    d728:	d00c      	beq.n	d744 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x60>
    d72a:	f004 fb8a 	bl	11e42 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    d72e:	4909      	ldr	r1, [pc, #36]	; (d754 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x70>)
    d730:	6160      	str	r0, [r4, #20]
    d732:	2000      	movs	r0, #0
    d734:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    d738:	6961      	ldr	r1, [r4, #20]
    d73a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d73c:	4408      	add	r0, r1
    d73e:	4906      	ldr	r1, [pc, #24]	; (d758 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x74>)
    d740:	6008      	str	r0, [r1, #0]
    d742:	bd10      	pop	{r4, pc}
    d744:	f004 fb99 	bl	11e7a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    d748:	e7f1      	b.n	d72e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4a>
    d74a:	0000      	.short	0x0000
    d74c:	200018b0 	.word	0x200018b0
    d750:	40001510 	.word	0x40001510
    d754:	40008000 	.word	0x40008000
    d758:	40008544 	.word	0x40008544

0000d75c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    d75c:	4803      	ldr	r0, [pc, #12]	; (d76c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x10>)
    d75e:	6801      	ldr	r1, [r0, #0]
    d760:	f021 0101 	bic.w	r1, r1, #1
    d764:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    d768:	6001      	str	r1, [r0, #0]
    d76a:	4770      	bx	lr
    d76c:	40001774 	.word	0x40001774

0000d770 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
    d770:	b510      	push	{r4, lr}
    d772:	2896      	cmp	r0, #150	; 0x96
    d774:	bf9e      	ittt	ls
    d776:	4904      	ldrls	r1, [pc, #16]	; (d788 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
    d778:	f881 0023 	strbls.w	r0, [r1, #35]	; 0x23
    d77c:	bd10      	popls	{r4, pc}
    d77e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    d782:	203e      	movs	r0, #62	; 0x3e
    d784:	f7f6 f9fe 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d788:	200018b0 	.word	0x200018b0

0000d78c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    d78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d790:	4822      	ldr	r0, [pc, #136]	; (d81c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x90>)
    d792:	2400      	movs	r4, #0
    d794:	2101      	movs	r1, #1
    d796:	6144      	str	r4, [r0, #20]
    d798:	6184      	str	r4, [r0, #24]
    d79a:	61c4      	str	r4, [r0, #28]
    d79c:	6204      	str	r4, [r0, #32]
    d79e:	6244      	str	r4, [r0, #36]	; 0x24
    d7a0:	6284      	str	r4, [r0, #40]	; 0x28
    d7a2:	62c4      	str	r4, [r0, #44]	; 0x2c
    d7a4:	6304      	str	r4, [r0, #48]	; 0x30
    d7a6:	6344      	str	r4, [r0, #52]	; 0x34
    d7a8:	6384      	str	r4, [r0, #56]	; 0x38
    d7aa:	63c4      	str	r4, [r0, #60]	; 0x3c
    d7ac:	6404      	str	r4, [r0, #64]	; 0x40
    d7ae:	6444      	str	r4, [r0, #68]	; 0x44
    d7b0:	6484      	str	r4, [r0, #72]	; 0x48
    d7b2:	64c4      	str	r4, [r0, #76]	; 0x4c
    d7b4:	6504      	str	r4, [r0, #80]	; 0x50
    d7b6:	3014      	adds	r0, #20
    d7b8:	7244      	strb	r4, [r0, #9]
    d7ba:	7284      	strb	r4, [r0, #10]
    d7bc:	72c4      	strb	r4, [r0, #11]
    d7be:	7301      	strb	r1, [r0, #12]
    d7c0:	f001 f8c4 	bl	e94c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d7c4:	4f16      	ldr	r7, [pc, #88]	; (d820 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x94>)
    d7c6:	4d17      	ldr	r5, [pc, #92]	; (d824 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x98>)
    d7c8:	4e17      	ldr	r6, [pc, #92]	; (d828 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x9c>)
    d7ca:	b928      	cbnz	r0, d7d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4c>
    d7cc:	f001 f8c8 	bl	e960 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    d7d0:	b910      	cbnz	r0, d7d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4c>
    d7d2:	f001 f8cf 	bl	e974 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    d7d6:	b140      	cbz	r0, d7ea <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5e>
    d7d8:	2224      	movs	r2, #36	; 0x24
    d7da:	21ff      	movs	r1, #255	; 0xff
    d7dc:	4638      	mov	r0, r7
    d7de:	f001 f923 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7e2:	602c      	str	r4, [r5, #0]
    d7e4:	6034      	str	r4, [r6, #0]
    d7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7ea:	f001 f903 	bl	e9f4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    d7ee:	b910      	cbnz	r0, d7f6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6a>
    d7f0:	f001 f8f6 	bl	e9e0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    d7f4:	b140      	cbz	r0, d808 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x7c>
    d7f6:	2240      	movs	r2, #64	; 0x40
    d7f8:	21ff      	movs	r1, #255	; 0xff
    d7fa:	4638      	mov	r0, r7
    d7fc:	f001 f914 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d800:	602c      	str	r4, [r5, #0]
    d802:	6034      	str	r4, [r6, #0]
    d804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d808:	2238      	movs	r2, #56	; 0x38
    d80a:	21ff      	movs	r1, #255	; 0xff
    d80c:	4638      	mov	r0, r7
    d80e:	f001 f90b 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d812:	602c      	str	r4, [r5, #0]
    d814:	6034      	str	r4, [r6, #0]
    d816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d81a:	0000      	.short	0x0000
    d81c:	2000189c 	.word	0x2000189c
    d820:	40000e00 	.word	0x40000e00
    d824:	40000e08 	.word	0x40000e08
    d828:	40000e10 	.word	0x40000e10

0000d82c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    d82c:	4901      	ldr	r1, [pc, #4]	; (d834 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    d82e:	7008      	strb	r0, [r1, #0]
    d830:	4770      	bx	lr
    d832:	0000      	.short	0x0000
    d834:	2000038c 	.word	0x2000038c

0000d838 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>:
    d838:	4803      	ldr	r0, [pc, #12]	; (d848 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI+0x10>)
    d83a:	7e01      	ldrb	r1, [r0, #24]
    d83c:	2900      	cmp	r1, #0
    d83e:	bf06      	itte	eq
    d840:	7e40      	ldrbeq	r0, [r0, #25]
    d842:	2800      	cmpeq	r0, #0
    d844:	2001      	movne	r0, #1
    d846:	4770      	bx	lr
    d848:	200018b0 	.word	0x200018b0

0000d84c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    d84c:	4801      	ldr	r0, [pc, #4]	; (d854 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    d84e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    d850:	4770      	bx	lr
    d852:	0000      	.short	0x0000
    d854:	200018b0 	.word	0x200018b0

0000d858 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    d858:	4801      	ldr	r0, [pc, #4]	; (d860 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    d85a:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    d85e:	4770      	bx	lr
    d860:	200018b0 	.word	0x200018b0

0000d864 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    d864:	4915      	ldr	r1, [pc, #84]	; (d8bc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    d866:	b510      	push	{r4, lr}
    d868:	6b88      	ldr	r0, [r1, #56]	; 0x38
    d86a:	4a15      	ldr	r2, [pc, #84]	; (d8c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    d86c:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    d870:	6010      	str	r0, [r2, #0]
    d872:	2000      	movs	r0, #0
    d874:	6388      	str	r0, [r1, #56]	; 0x38
    d876:	7408      	strb	r0, [r1, #16]
    d878:	62c8      	str	r0, [r1, #44]	; 0x2c
    d87a:	6288      	str	r0, [r1, #40]	; 0x28
    d87c:	4911      	ldr	r1, [pc, #68]	; (d8c4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    d87e:	6008      	str	r0, [r1, #0]
    d880:	1d09      	adds	r1, r1, #4
    d882:	6008      	str	r0, [r1, #0]
    d884:	1d09      	adds	r1, r1, #4
    d886:	6008      	str	r0, [r1, #0]
    d888:	1d09      	adds	r1, r1, #4
    d88a:	6008      	str	r0, [r1, #0]
    d88c:	490e      	ldr	r1, [pc, #56]	; (d8c8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    d88e:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    d892:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    d896:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    d89a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    d89e:	f7ff fd09 	bl	d2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    d8a2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d8a6:	2002      	movs	r0, #2
    d8a8:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    d8ac:	f3bf 8f4f 	dsb	sy
    d8b0:	f3bf 8f6f 	isb	sy
    d8b4:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    d8b8:	bd10      	pop	{r4, pc}
    d8ba:	0000      	.short	0x0000
    d8bc:	200018b0 	.word	0x200018b0
    d8c0:	4001f508 	.word	0x4001f508
    d8c4:	40008540 	.word	0x40008540
    d8c8:	40008000 	.word	0x40008000

0000d8cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8d0:	2601      	movs	r6, #1
    d8d2:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    d8d6:	2402      	movs	r4, #2
    d8d8:	f04f 0800 	mov.w	r8, #0
    d8dc:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
    d8e0:	f3bf 8f4f 	dsb	sy
    d8e4:	f3bf 8f6f 	isb	sy
    d8e8:	4833      	ldr	r0, [pc, #204]	; (d9b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    d8ea:	f8c0 8000 	str.w	r8, [r0]
    d8ee:	6006      	str	r6, [r0, #0]
    d8f0:	f001 f856 	bl	e9a0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    d8f4:	4f31      	ldr	r7, [pc, #196]	; (d9bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    d8f6:	b118      	cbz	r0, d900 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    d8f8:	6838      	ldr	r0, [r7, #0]
    d8fa:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    d8fe:	6038      	str	r0, [r7, #0]
    d900:	f001 f842 	bl	e988 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d904:	b138      	cbz	r0, d916 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    d906:	6838      	ldr	r0, [r7, #0]
    d908:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    d90c:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    d910:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    d914:	6038      	str	r0, [r7, #0]
    d916:	f001 f853 	bl	e9c0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d91a:	b130      	cbz	r0, d92a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x5e>
    d91c:	4828      	ldr	r0, [pc, #160]	; (d9c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    d91e:	6801      	ldr	r1, [r0, #0]
    d920:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    d924:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    d928:	6001      	str	r1, [r0, #0]
    d92a:	4927      	ldr	r1, [pc, #156]	; (d9c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    d92c:	4825      	ldr	r0, [pc, #148]	; (d9c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    d92e:	6008      	str	r0, [r1, #0]
    d930:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    d934:	6e00      	ldr	r0, [r0, #96]	; 0x60
    d936:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d93a:	d004      	beq.n	d946 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7a>
    d93c:	4923      	ldr	r1, [pc, #140]	; (d9cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    d93e:	680a      	ldr	r2, [r1, #0]
    d940:	f360 4217 	bfi	r2, r0, #16, #8
    d944:	600a      	str	r2, [r1, #0]
    d946:	4922      	ldr	r1, [pc, #136]	; (d9d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    d948:	f240 605b 	movw	r0, #1627	; 0x65b
    d94c:	6008      	str	r0, [r1, #0]
    d94e:	1f09      	subs	r1, r1, #4
    d950:	f240 1003 	movw	r0, #259	; 0x103
    d954:	6008      	str	r0, [r1, #0]
    d956:	1f08      	subs	r0, r1, #4
    d958:	6006      	str	r6, [r0, #0]
    d95a:	491e      	ldr	r1, [pc, #120]	; (d9d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    d95c:	2003      	movs	r0, #3
    d95e:	6008      	str	r0, [r1, #0]
    d960:	491d      	ldr	r1, [pc, #116]	; (d9d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    d962:	f240 1001 	movw	r0, #257	; 0x101
    d966:	6008      	str	r0, [r1, #0]
    d968:	491c      	ldr	r1, [pc, #112]	; (d9dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    d96a:	f8c1 4200 	str.w	r4, [r1, #512]	; 0x200
    d96e:	4a1d      	ldr	r2, [pc, #116]	; (d9e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
    d970:	481b      	ldr	r0, [pc, #108]	; (d9e0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    d972:	6010      	str	r0, [r2, #0]
    d974:	481d      	ldr	r0, [pc, #116]	; (d9ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
    d976:	4a1c      	ldr	r2, [pc, #112]	; (d9e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
    d978:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    d97c:	4a1c      	ldr	r2, [pc, #112]	; (d9f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
    d97e:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    d982:	481c      	ldr	r0, [pc, #112]	; (d9f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
    d984:	f8a0 8044 	strh.w	r8, [r0, #68]	; 0x44
    d988:	3014      	adds	r0, #20
    d98a:	2296      	movs	r2, #150	; 0x96
    d98c:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
    d990:	f880 803c 	strb.w	r8, [r0, #60]	; 0x3c
    d994:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
    d998:	f8c5 4280 	str.w	r4, [r5, #640]	; 0x280
    d99c:	2010      	movs	r0, #16
    d99e:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
    d9a2:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    d9a6:	4814      	ldr	r0, [pc, #80]	; (d9f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
    d9a8:	6840      	ldr	r0, [r0, #4]
    d9aa:	2800      	cmp	r0, #0
    d9ac:	bf08      	it	eq
    d9ae:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d9b6:	4700      	bx	r0
    d9b8:	40001ffc 	.word	0x40001ffc
    d9bc:	4000173c 	.word	0x4000173c
    d9c0:	40001740 	.word	0x40001740
    d9c4:	8900002c 	.word	0x8900002c
    d9c8:	40001778 	.word	0x40001778
    d9cc:	4000158c 	.word	0x4000158c
    d9d0:	40001538 	.word	0x40001538
    d9d4:	40001510 	.word	0x40001510
    d9d8:	40001650 	.word	0x40001650
    d9dc:	40001000 	.word	0x40001000
    d9e0:	040e0000 	.word	0x040e0000
    d9e4:	4001f508 	.word	0x4001f508
    d9e8:	4000110c 	.word	0x4000110c
    d9ec:	4001f090 	.word	0x4001f090
    d9f0:	40008040 	.word	0x40008040
    d9f4:	2000189c 	.word	0x2000189c
    d9f8:	2000038c 	.word	0x2000038c

0000d9fc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    d9fc:	4901      	ldr	r1, [pc, #4]	; (da04 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    d9fe:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
    da02:	4770      	bx	lr
    da04:	200018b0 	.word	0x200018b0

0000da08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    da08:	491e      	ldr	r1, [pc, #120]	; (da84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    da0a:	b510      	push	{r4, lr}
    da0c:	6008      	str	r0, [r1, #0]
    da0e:	491e      	ldr	r1, [pc, #120]	; (da88 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    da10:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
    da14:	f040 0001 	orr.w	r0, r0, #1
    da18:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
    da1c:	f010 0f01 	tst.w	r0, #1
    da20:	bf08      	it	eq
    da22:	bd10      	popeq	{r4, pc}
    da24:	f010 0f02 	tst.w	r0, #2
    da28:	d019      	beq.n	da5e <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x56>
    da2a:	4818      	ldr	r0, [pc, #96]	; (da8c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    da2c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    da30:	f041 0101 	orr.w	r1, r1, #1
    da34:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    da38:	4815      	ldr	r0, [pc, #84]	; (da90 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    da3a:	6801      	ldr	r1, [r0, #0]
    da3c:	290b      	cmp	r1, #11
    da3e:	bf1c      	itt	ne
    da40:	6801      	ldrne	r1, [r0, #0]
    da42:	290a      	cmpne	r1, #10
    da44:	d005      	beq.n	da52 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x4a>
    da46:	6801      	ldr	r1, [r0, #0]
    da48:	2903      	cmp	r1, #3
    da4a:	bf1e      	ittt	ne
    da4c:	6800      	ldrne	r0, [r0, #0]
    da4e:	2802      	cmpne	r0, #2
    da50:	bd10      	popne	{r4, pc}
    da52:	f240 414c 	movw	r1, #1100	; 0x44c
    da56:	f04f 003e 	mov.w	r0, #62	; 0x3e
    da5a:	f7f6 f893 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da5e:	f010 0f04 	tst.w	r0, #4
    da62:	bf08      	it	eq
    da64:	bd10      	popeq	{r4, pc}
    da66:	480b      	ldr	r0, [pc, #44]	; (da94 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    da68:	490b      	ldr	r1, [pc, #44]	; (da98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x90>)
    da6a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    da6e:	480b      	ldr	r0, [pc, #44]	; (da9c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x94>)
    da70:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    da74:	2801      	cmp	r0, #1
    da76:	bf18      	it	ne
    da78:	bd10      	popne	{r4, pc}
    da7a:	f240 4153 	movw	r1, #1107	; 0x453
    da7e:	203e      	movs	r0, #62	; 0x3e
    da80:	f7f6 f880 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da84:	40001504 	.word	0x40001504
    da88:	200018b0 	.word	0x200018b0
    da8c:	40001000 	.word	0x40001000
    da90:	40001550 	.word	0x40001550
    da94:	40001008 	.word	0x40001008
    da98:	4001f098 	.word	0x4001f098
    da9c:	40008000 	.word	0x40008000

0000daa0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    daa4:	f8df 9298 	ldr.w	r9, [pc, #664]	; dd40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a0>
    daa8:	4607      	mov	r7, r0
    daaa:	b087      	sub	sp, #28
    daac:	48a3      	ldr	r0, [pc, #652]	; (dd3c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x29c>)
    daae:	460d      	mov	r5, r1
    dab0:	4616      	mov	r6, r2
    dab2:	f8c9 0000 	str.w	r0, [r9]
    dab6:	4ca3      	ldr	r4, [pc, #652]	; (dd44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a4>)
    dab8:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    dabc:	42b0      	cmp	r0, r6
    dabe:	bf1c      	itt	ne
    dac0:	4610      	movne	r0, r2
    dac2:	f000 fe21 	blne	e708 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    dac6:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    daca:	2925      	cmp	r1, #37	; 0x25
    dacc:	bf08      	it	eq
    dace:	2002      	moveq	r0, #2
    dad0:	d00f      	beq.n	daf2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    dad2:	2926      	cmp	r1, #38	; 0x26
    dad4:	bf08      	it	eq
    dad6:	201a      	moveq	r0, #26
    dad8:	d00b      	beq.n	daf2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    dada:	2927      	cmp	r1, #39	; 0x27
    dadc:	bf08      	it	eq
    dade:	2050      	moveq	r0, #80	; 0x50
    dae0:	d007      	beq.n	daf2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    dae2:	290a      	cmp	r1, #10
    dae4:	4608      	mov	r0, r1
    dae6:	bf94      	ite	ls
    dae8:	2204      	movls	r2, #4
    daea:	2206      	movhi	r2, #6
    daec:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    daf0:	b2c0      	uxtb	r0, r0
    daf2:	4a95      	ldr	r2, [pc, #596]	; (dd48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a8>)
    daf4:	6010      	str	r0, [r2, #0]
    daf6:	4895      	ldr	r0, [pc, #596]	; (dd4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2ac>)
    daf8:	6001      	str	r1, [r0, #0]
    dafa:	f8df b254 	ldr.w	fp, [pc, #596]	; dd50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b0>
    dafe:	f8df 8254 	ldr.w	r8, [pc, #596]	; dd54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b4>
    db02:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    db06:	b137      	cbz	r7, db16 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x76>
    db08:	2f01      	cmp	r7, #1
    db0a:	d06d      	beq.n	dbe8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x148>
    db0c:	f240 6103 	movw	r1, #1539	; 0x603
    db10:	203e      	movs	r0, #62	; 0x3e
    db12:	f7f6 f837 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db16:	2e01      	cmp	r6, #1
    db18:	bf08      	it	eq
    db1a:	2000      	moveq	r0, #0
    db1c:	d00b      	beq.n	db36 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    db1e:	2e02      	cmp	r6, #2
    db20:	bf08      	it	eq
    db22:	2001      	moveq	r0, #1
    db24:	d007      	beq.n	db36 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    db26:	2e04      	cmp	r6, #4
    db28:	bf08      	it	eq
    db2a:	2003      	moveq	r0, #3
    db2c:	d003      	beq.n	db36 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    db2e:	2e08      	cmp	r6, #8
    db30:	bf08      	it	eq
    db32:	2002      	moveq	r0, #2
    db34:	d16c      	bne.n	dc10 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x170>
    db36:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    db3a:	ab05      	add	r3, sp, #20
    db3c:	f7f2 fc4a 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    db40:	2800      	cmp	r0, #0
    db42:	d170      	bne.n	dc26 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x186>
    db44:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    db48:	f000 fdd8 	bl	e6fc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    db4c:	f000 ff38 	bl	e9c0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    db50:	b178      	cbz	r0, db72 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    db52:	4a81      	ldr	r2, [pc, #516]	; (dd58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b8>)
    db54:	6811      	ldr	r1, [r2, #0]
    db56:	0650      	lsls	r0, r2, #25
    db58:	2e02      	cmp	r6, #2
    db5a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    db5e:	bf0c      	ite	eq
    db60:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    db64:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    db68:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    db6c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    db70:	6010      	str	r0, [r2, #0]
    db72:	2e02      	cmp	r6, #2
    db74:	bf0c      	ite	eq
    db76:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    db7a:	f640 0034 	movwne	r0, #2100	; 0x834
    db7e:	f649 51f8 	movw	r1, #40440	; 0x9df8
    db82:	4401      	add	r1, r0
    db84:	7a60      	ldrb	r0, [r4, #9]
    db86:	2801      	cmp	r0, #1
    db88:	d004      	beq.n	db94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>
    db8a:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    db8e:	fbb1 f1fa 	udiv	r1, r1, sl
    db92:	1a6d      	subs	r5, r5, r1
    db94:	2800      	cmp	r0, #0
    db96:	bf04      	itt	eq
    db98:	4658      	moveq	r0, fp
    db9a:	f8c8 b514 	streq.w	fp, [r8, #1300]	; 0x514
    db9e:	2001      	movs	r0, #1
    dba0:	72e0      	strb	r0, [r4, #11]
    dba2:	486e      	ldr	r0, [pc, #440]	; (dd5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2bc>)
    dba4:	6005      	str	r5, [r0, #0]
    dba6:	486e      	ldr	r0, [pc, #440]	; (dd60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c0>)
    dba8:	f8c8 0510 	str.w	r0, [r8, #1296]	; 0x510
    dbac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    dbae:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    dbb2:	63a0      	str	r0, [r4, #56]	; 0x38
    dbb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    dbb8:	f8c9 0000 	str.w	r0, [r9]
    dbbc:	2010      	movs	r0, #16
    dbbe:	f8cb 0304 	str.w	r0, [fp, #772]	; 0x304
    dbc2:	03c0      	lsls	r0, r0, #15
    dbc4:	f8c9 0000 	str.w	r0, [r9]
    dbc8:	7a60      	ldrb	r0, [r4, #9]
    dbca:	2800      	cmp	r0, #0
    dbcc:	bf04      	itt	eq
    dbce:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    dbd2:	f040 0002 	orreq.w	r0, r0, #2
    dbd6:	d049      	beq.n	dc6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    dbd8:	2801      	cmp	r0, #1
    dbda:	bf04      	itt	eq
    dbdc:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    dbe0:	f040 0004 	orreq.w	r0, r0, #4
    dbe4:	d042      	beq.n	dc6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    dbe6:	e043      	b.n	dc70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1d0>
    dbe8:	7aa0      	ldrb	r0, [r4, #10]
    dbea:	2801      	cmp	r0, #1
    dbec:	d124      	bne.n	dc38 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x198>
    dbee:	7b60      	ldrb	r0, [r4, #13]
    dbf0:	2801      	cmp	r0, #1
    dbf2:	bf08      	it	eq
    dbf4:	2000      	moveq	r0, #0
    dbf6:	d010      	beq.n	dc1a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    dbf8:	2802      	cmp	r0, #2
    dbfa:	bf08      	it	eq
    dbfc:	2001      	moveq	r0, #1
    dbfe:	d00c      	beq.n	dc1a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    dc00:	2804      	cmp	r0, #4
    dc02:	bf08      	it	eq
    dc04:	2003      	moveq	r0, #3
    dc06:	d008      	beq.n	dc1a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    dc08:	2808      	cmp	r0, #8
    dc0a:	bf08      	it	eq
    dc0c:	2002      	moveq	r0, #2
    dc0e:	d004      	beq.n	dc1a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    dc10:	f240 31f3 	movw	r1, #1011	; 0x3f3
    dc14:	2006      	movs	r0, #6
    dc16:	f7f5 ffb5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc1a:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    dc1e:	ab05      	add	r3, sp, #20
    dc20:	f7f2 fbd8 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    dc24:	b120      	cbz	r0, dc30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x190>
    dc26:	f240 31d5 	movw	r1, #981	; 0x3d5
    dc2a:	203e      	movs	r0, #62	; 0x3e
    dc2c:	f7f5 ffaa 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc30:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    dc34:	f000 fd62 	bl	e6fc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    dc38:	f000 fec2 	bl	e9c0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    dc3c:	b938      	cbnz	r0, dc4e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ae>
    dc3e:	f000 feaf 	bl	e9a0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    dc42:	b920      	cbnz	r0, dc4e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ae>
    dc44:	4847      	ldr	r0, [pc, #284]	; (dd64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c4>)
    dc46:	6801      	ldr	r1, [r0, #0]
    dc48:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    dc4c:	6001      	str	r1, [r0, #0]
    dc4e:	7a61      	ldrb	r1, [r4, #9]
    dc50:	2901      	cmp	r1, #1
    dc52:	d004      	beq.n	dc5e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1be>
    dc54:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    dc58:	fbb0 f0fa 	udiv	r0, r0, sl
    dc5c:	1a2d      	subs	r5, r5, r0
    dc5e:	4842      	ldr	r0, [pc, #264]	; (dd68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c8>)
    dc60:	2900      	cmp	r1, #0
    dc62:	bf08      	it	eq
    dc64:	f8c8 0514 	streq.w	r0, [r8, #1300]	; 0x514
    dc68:	2002      	movs	r0, #2
    dc6a:	e799      	b.n	dba0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x100>
    dc6c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    dc70:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    dc74:	493d      	ldr	r1, [pc, #244]	; (dd6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2cc>)
    dc76:	f010 0f01 	tst.w	r0, #1
    dc7a:	d025      	beq.n	dcc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    dc7c:	f010 0f02 	tst.w	r0, #2
    dc80:	d018      	beq.n	dcb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x214>
    dc82:	f8db 0200 	ldr.w	r0, [fp, #512]	; 0x200
    dc86:	f040 0001 	orr.w	r0, r0, #1
    dc8a:	f8cb 0200 	str.w	r0, [fp, #512]	; 0x200
    dc8e:	4838      	ldr	r0, [pc, #224]	; (dd70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d0>)
    dc90:	6802      	ldr	r2, [r0, #0]
    dc92:	2a0b      	cmp	r2, #11
    dc94:	bf1c      	itt	ne
    dc96:	6802      	ldrne	r2, [r0, #0]
    dc98:	2a0a      	cmpne	r2, #10
    dc9a:	d005      	beq.n	dca8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x208>
    dc9c:	6802      	ldr	r2, [r0, #0]
    dc9e:	2a03      	cmp	r2, #3
    dca0:	bf1c      	itt	ne
    dca2:	6800      	ldrne	r0, [r0, #0]
    dca4:	2802      	cmpne	r0, #2
    dca6:	d10f      	bne.n	dcc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    dca8:	f240 414c 	movw	r1, #1100	; 0x44c
    dcac:	f04f 003e 	mov.w	r0, #62	; 0x3e
    dcb0:	f7f5 ff68 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcb4:	f010 0f04 	tst.w	r0, #4
    dcb8:	d006      	beq.n	dcc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    dcba:	482e      	ldr	r0, [pc, #184]	; (dd74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d4>)
    dcbc:	f8c8 0514 	str.w	r0, [r8, #1300]	; 0x514
    dcc0:	f8d1 0148 	ldr.w	r0, [r1, #328]	; 0x148
    dcc4:	2801      	cmp	r0, #1
    dcc6:	d00a      	beq.n	dcde <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x23e>
    dcc8:	2001      	movs	r0, #1
    dcca:	64c8      	str	r0, [r1, #76]	; 0x4c
    dccc:	482a      	ldr	r0, [pc, #168]	; (dd78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d8>)
    dcce:	6800      	ldr	r0, [r0, #0]
    dcd0:	42a8      	cmp	r0, r5
    dcd2:	d309      	bcc.n	dce8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x248>
    dcd4:	f240 6129 	movw	r1, #1577	; 0x629
    dcd8:	203e      	movs	r0, #62	; 0x3e
    dcda:	f7f5 ff53 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcde:	f240 4153 	movw	r1, #1107	; 0x453
    dce2:	203e      	movs	r0, #62	; 0x3e
    dce4:	f7f5 ff4e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dce8:	2f01      	cmp	r7, #1
    dcea:	bf08      	it	eq
    dcec:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    dcf0:	d008      	beq.n	dd04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>
    dcf2:	2e02      	cmp	r6, #2
    dcf4:	bf0c      	ite	eq
    dcf6:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    dcfa:	f640 0034 	movwne	r0, #2100	; 0x834
    dcfe:	f24a 0150 	movw	r1, #41040	; 0xa050
    dd02:	4408      	add	r0, r1
    dd04:	491d      	ldr	r1, [pc, #116]	; (dd7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2dc>)
    dd06:	fbb0 f0fa 	udiv	r0, r0, sl
    dd0a:	f101 0228 	add.w	r2, r1, #40	; 0x28
    dd0e:	2f01      	cmp	r7, #1
    dd10:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    dd14:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    dd18:	6b89      	ldr	r1, [r1, #56]	; 0x38
    dd1a:	9104      	str	r1, [sp, #16]
    dd1c:	bf14      	ite	ne
    dd1e:	2101      	movne	r1, #1
    dd20:	2100      	moveq	r1, #0
    dd22:	f88d 1001 	strb.w	r1, [sp, #1]
    dd26:	e9cd 5003 	strd	r5, r0, [sp, #12]
    dd2a:	4668      	mov	r0, sp
    dd2c:	f7f5 fe2e 	bl	398c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    dd30:	4628      	mov	r0, r5
    dd32:	f000 fc4f 	bl	e5d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    dd36:	b007      	add	sp, #28
    dd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd3c:	04040000 	.word	0x04040000
    dd40:	4001f504 	.word	0x4001f504
    dd44:	200018b0 	.word	0x200018b0
    dd48:	40001508 	.word	0x40001508
    dd4c:	40001554 	.word	0x40001554
    dd50:	40001000 	.word	0x40001000
    dd54:	4001f098 	.word	0x4001f098
    dd58:	40001588 	.word	0x40001588
    dd5c:	40008548 	.word	0x40008548
    dd60:	40008148 	.word	0x40008148
    dd64:	40001568 	.word	0x40001568
    dd68:	40001004 	.word	0x40001004
    dd6c:	40008000 	.word	0x40008000
    dd70:	40001550 	.word	0x40001550
    dd74:	40001008 	.word	0x40001008
    dd78:	4000854c 	.word	0x4000854c
    dd7c:	0000e6ac 	.word	0x0000e6ac

0000dd80 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>:
    dd80:	b508      	push	{r3, lr}
    dd82:	20ff      	movs	r0, #255	; 0xff
    dd84:	f88d 0000 	strb.w	r0, [sp]
    dd88:	480e      	ldr	r0, [pc, #56]	; (ddc4 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x44>)
    dd8a:	2100      	movs	r1, #0
    dd8c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    dd90:	2101      	movs	r1, #1
    dd92:	6101      	str	r1, [r0, #16]
    dd94:	e005      	b.n	dda2 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x22>
    dd96:	bf00      	nop
    dd98:	f89d 1000 	ldrb.w	r1, [sp]
    dd9c:	1e49      	subs	r1, r1, #1
    dd9e:	f88d 1000 	strb.w	r1, [sp]
    dda2:	f89d 1000 	ldrb.w	r1, [sp]
    dda6:	b119      	cbz	r1, ddb0 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x30>
    dda8:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    ddac:	2900      	cmp	r1, #0
    ddae:	d0f3      	beq.n	dd98 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x18>
    ddb0:	f89d 0000 	ldrb.w	r0, [sp]
    ddb4:	2800      	cmp	r0, #0
    ddb6:	bf18      	it	ne
    ddb8:	bd08      	popne	{r3, pc}
    ddba:	f240 6183 	movw	r1, #1667	; 0x683
    ddbe:	203e      	movs	r0, #62	; 0x3e
    ddc0:	f7f5 fee0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddc4:	40001000 	.word	0x40001000

0000ddc8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ddc8:	b530      	push	{r4, r5, lr}
    ddca:	b087      	sub	sp, #28
    ddcc:	460d      	mov	r5, r1
    ddce:	b16a      	cbz	r2, ddec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    ddd0:	4c4d      	ldr	r4, [pc, #308]	; (df08 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x140>)
    ddd2:	f012 0f01 	tst.w	r2, #1
    ddd6:	7260      	strb	r0, [r4, #9]
    ddd8:	7363      	strb	r3, [r4, #13]
    ddda:	bf18      	it	ne
    dddc:	2a01      	cmpne	r2, #1
    ddde:	d00a      	beq.n	ddf6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x2e>
    dde0:	f240 71fa 	movw	r1, #2042	; 0x7fa
    dde4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    dde8:	f7f5 fecc 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddec:	f240 71f3 	movw	r1, #2035	; 0x7f3
    ddf0:	203e      	movs	r0, #62	; 0x3e
    ddf2:	f7f5 fec7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddf6:	2d00      	cmp	r5, #0
    ddf8:	bf0c      	ite	eq
    ddfa:	2001      	moveq	r0, #1
    ddfc:	2002      	movne	r0, #2
    ddfe:	72a0      	strb	r0, [r4, #10]
    de00:	7322      	strb	r2, [r4, #12]
    de02:	2801      	cmp	r0, #1
    de04:	d006      	beq.n	de14 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4c>
    de06:	2802      	cmp	r0, #2
    de08:	d02d      	beq.n	de66 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    de0a:	f44f 6101 	mov.w	r1, #2064	; 0x810
    de0e:	203e      	movs	r0, #62	; 0x3e
    de10:	f7f5 feb8 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de14:	7ae0      	ldrb	r0, [r4, #11]
    de16:	2802      	cmp	r0, #2
    de18:	d125      	bne.n	de66 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    de1a:	2b01      	cmp	r3, #1
    de1c:	bf08      	it	eq
    de1e:	2000      	moveq	r0, #0
    de20:	d010      	beq.n	de44 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    de22:	2b02      	cmp	r3, #2
    de24:	bf08      	it	eq
    de26:	2001      	moveq	r0, #1
    de28:	d00c      	beq.n	de44 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    de2a:	2b04      	cmp	r3, #4
    de2c:	bf08      	it	eq
    de2e:	2003      	moveq	r0, #3
    de30:	d008      	beq.n	de44 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    de32:	2b08      	cmp	r3, #8
    de34:	bf08      	it	eq
    de36:	2002      	moveq	r0, #2
    de38:	d004      	beq.n	de44 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    de3a:	f240 31f3 	movw	r1, #1011	; 0x3f3
    de3e:	2006      	movs	r0, #6
    de40:	f7f5 fea0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de44:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    de48:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    de4c:	ab05      	add	r3, sp, #20
    de4e:	f7f2 fac1 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    de52:	b120      	cbz	r0, de5e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x96>
    de54:	f240 31d5 	movw	r1, #981	; 0x3d5
    de58:	203e      	movs	r0, #62	; 0x3e
    de5a:	f7f5 fe93 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de5e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    de62:	f000 fc4b 	bl	e6fc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    de66:	4829      	ldr	r0, [pc, #164]	; (df0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x144>)
    de68:	6801      	ldr	r1, [r0, #0]
    de6a:	f001 010f 	and.w	r1, r1, #15
    de6e:	2903      	cmp	r1, #3
    de70:	bf08      	it	eq
    de72:	2001      	moveq	r0, #1
    de74:	d00b      	beq.n	de8e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc6>
    de76:	6800      	ldr	r0, [r0, #0]
    de78:	f000 000f 	and.w	r0, r0, #15
    de7c:	2804      	cmp	r0, #4
    de7e:	bf08      	it	eq
    de80:	2002      	moveq	r0, #2
    de82:	d004      	beq.n	de8e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc6>
    de84:	f240 11d7 	movw	r1, #471	; 0x1d7
    de88:	203e      	movs	r0, #62	; 0x3e
    de8a:	f7f5 fe7b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de8e:	7ae2      	ldrb	r2, [r4, #11]
    de90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    de94:	2a02      	cmp	r2, #2
    de96:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    de9a:	d01f      	beq.n	dedc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x114>
    de9c:	2802      	cmp	r0, #2
    de9e:	bf0c      	ite	eq
    dea0:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    dea4:	f240 50dc 	movwne	r0, #1500	; 0x5dc
    dea8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    deac:	fbb0 f0f1 	udiv	r0, r0, r1
    deb0:	4410      	add	r0, r2
    deb2:	4917      	ldr	r1, [pc, #92]	; (df10 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x148>)
    deb4:	2d01      	cmp	r5, #1
    deb6:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    deba:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    debe:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    dec2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    dec4:	9104      	str	r1, [sp, #16]
    dec6:	bf14      	ite	ne
    dec8:	2101      	movne	r1, #1
    deca:	2100      	moveq	r1, #0
    decc:	f88d 1001 	strb.w	r1, [sp, #1]
    ded0:	9001      	str	r0, [sp, #4]
    ded2:	4668      	mov	r0, sp
    ded4:	f7f5 fd5a 	bl	398c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    ded8:	b007      	add	sp, #28
    deda:	bd30      	pop	{r4, r5, pc}
    dedc:	2801      	cmp	r0, #1
    dede:	bf08      	it	eq
    dee0:	f641 6014 	movweq	r0, #7700	; 0x1e14
    dee4:	d009      	beq.n	defa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x132>
    dee6:	2802      	cmp	r0, #2
    dee8:	bf08      	it	eq
    deea:	f241 1030 	movweq	r0, #4400	; 0x1130
    deee:	d004      	beq.n	defa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x132>
    def0:	f640 2193 	movw	r1, #2707	; 0xa93
    def4:	203e      	movs	r0, #62	; 0x3e
    def6:	f7f5 fe45 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    defa:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    defe:	fbb0 f0f1 	udiv	r0, r0, r1
    df02:	1a10      	subs	r0, r2, r0
    df04:	e7d5      	b.n	deb2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xea>
    df06:	0000      	.short	0x0000
    df08:	200018b0 	.word	0x200018b0
    df0c:	40001510 	.word	0x40001510
    df10:	0000e6ac 	.word	0x0000e6ac

0000df14 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
    df14:	4901      	ldr	r1, [pc, #4]	; (df1c <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
    df16:	7248      	strb	r0, [r1, #9]
    df18:	4770      	bx	lr
    df1a:	0000      	.short	0x0000
    df1c:	200018b0 	.word	0x200018b0

0000df20 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>:
    df20:	4804      	ldr	r0, [pc, #16]	; (df34 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA+0x14>)
    df22:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    df26:	f021 0110 	bic.w	r1, r1, #16
    df2a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    df2e:	2101      	movs	r1, #1
    df30:	6181      	str	r1, [r0, #24]
    df32:	4770      	bx	lr
    df34:	40001000 	.word	0x40001000

0000df38 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>:
    df38:	4805      	ldr	r0, [pc, #20]	; (df50 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ+0x18>)
    df3a:	2100      	movs	r1, #0
    df3c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    df40:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    df44:	f041 0110 	orr.w	r1, r1, #16
    df48:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    df4c:	4770      	bx	lr
    df4e:	0000      	.short	0x0000
    df50:	40001000 	.word	0x40001000

0000df54 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    df54:	490b      	ldr	r1, [pc, #44]	; (df84 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    df56:	b081      	sub	sp, #4
    df58:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    df5c:	2a01      	cmp	r2, #1
    df5e:	bf1e      	ittt	ne
    df60:	2000      	movne	r0, #0
    df62:	b001      	addne	sp, #4
    df64:	4770      	bxne	lr
    df66:	4a08      	ldr	r2, [pc, #32]	; (df88 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    df68:	6812      	ldr	r2, [r2, #0]
    df6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    df6e:	4252      	negs	r2, r2
    df70:	7002      	strb	r2, [r0, #0]
    df72:	2000      	movs	r0, #0
    df74:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    df78:	4804      	ldr	r0, [pc, #16]	; (df8c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x38>)
    df7a:	6800      	ldr	r0, [r0, #0]
    df7c:	9000      	str	r0, [sp, #0]
    df7e:	2001      	movs	r0, #1
    df80:	b001      	add	sp, #4
    df82:	4770      	bx	lr
    df84:	40001000 	.word	0x40001000
    df88:	40001548 	.word	0x40001548
    df8c:	4000111c 	.word	0x4000111c

0000df90 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    df90:	4a04      	ldr	r2, [pc, #16]	; (dfa4 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    df92:	6803      	ldr	r3, [r0, #0]
    df94:	f8c2 3016 	str.w	r3, [r2, #22]
    df98:	8880      	ldrh	r0, [r0, #4]
    df9a:	8350      	strh	r0, [r2, #26]
    df9c:	f102 0014 	add.w	r0, r2, #20
    dfa0:	7201      	strb	r1, [r0, #8]
    dfa2:	4770      	bx	lr
    dfa4:	2000189c 	.word	0x2000189c

0000dfa8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    dfa8:	4a03      	ldr	r2, [pc, #12]	; (dfb8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    dfaa:	78c1      	ldrb	r1, [r0, #3]
    dfac:	6011      	str	r1, [r2, #0]
    dfae:	6800      	ldr	r0, [r0, #0]
    dfb0:	4902      	ldr	r1, [pc, #8]	; (dfbc <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    dfb2:	0200      	lsls	r0, r0, #8
    dfb4:	6008      	str	r0, [r1, #0]
    dfb6:	4770      	bx	lr
    dfb8:	40001524 	.word	0x40001524
    dfbc:	4000151c 	.word	0x4000151c

0000dfc0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    dfc0:	6800      	ldr	r0, [r0, #0]
    dfc2:	4902      	ldr	r1, [pc, #8]	; (dfcc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    dfc4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dfc8:	6008      	str	r0, [r1, #0]
    dfca:	4770      	bx	lr
    dfcc:	4000153c 	.word	0x4000153c

0000dfd0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    dfd0:	b510      	push	{r4, lr}
    dfd2:	2200      	movs	r2, #0
    dfd4:	2901      	cmp	r1, #1
    dfd6:	d009      	beq.n	dfec <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    dfd8:	2902      	cmp	r1, #2
    dfda:	bf08      	it	eq
    dfdc:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    dfe0:	d004      	beq.n	dfec <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    dfe2:	f44f 7109 	mov.w	r1, #548	; 0x224
    dfe6:	203e      	movs	r0, #62	; 0x3e
    dfe8:	f7f5 fdcc 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfec:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    dff0:	4a0b      	ldr	r2, [pc, #44]	; (e020 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x50>)
    dff2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    dff6:	6011      	str	r1, [r2, #0]
    dff8:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    dffc:	1d11      	adds	r1, r2, #4
    dffe:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    e002:	6008      	str	r0, [r1, #0]
    e004:	4807      	ldr	r0, [pc, #28]	; (e024 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x54>)
    e006:	6801      	ldr	r1, [r0, #0]
    e008:	2903      	cmp	r1, #3
    e00a:	bf1e      	ittt	ne
    e00c:	6800      	ldrne	r0, [r0, #0]
    e00e:	280b      	cmpne	r0, #11
    e010:	bd10      	popne	{r4, pc}
    e012:	f240 213e 	movw	r1, #574	; 0x23e
    e016:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e01a:	f7f5 fdb3 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e01e:	0000      	.short	0x0000
    e020:	40001514 	.word	0x40001514
    e024:	40001550 	.word	0x40001550

0000e028 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    e028:	b510      	push	{r4, lr}
    e02a:	2200      	movs	r2, #0
    e02c:	2901      	cmp	r1, #1
    e02e:	d009      	beq.n	e044 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x1c>
    e030:	2902      	cmp	r1, #2
    e032:	bf08      	it	eq
    e034:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    e038:	d004      	beq.n	e044 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x1c>
    e03a:	f44f 7109 	mov.w	r1, #548	; 0x224
    e03e:	203e      	movs	r0, #62	; 0x3e
    e040:	f7f5 fda0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e044:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    e048:	4a05      	ldr	r2, [pc, #20]	; (e060 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x38>)
    e04a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e04e:	6011      	str	r1, [r2, #0]
    e050:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    e054:	1d11      	adds	r1, r2, #4
    e056:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    e05a:	6008      	str	r0, [r1, #0]
    e05c:	bd10      	pop	{r4, pc}
    e05e:	0000      	.short	0x0000
    e060:	40001514 	.word	0x40001514

0000e064 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    e064:	4901      	ldr	r1, [pc, #4]	; (e06c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    e066:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    e06a:	4770      	bx	lr
    e06c:	200018b0 	.word	0x200018b0

0000e070 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    e070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e074:	f8df 93f0 	ldr.w	r9, [pc, #1008]	; e468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    e078:	b083      	sub	sp, #12
    e07a:	2701      	movs	r7, #1
    e07c:	f8c9 704c 	str.w	r7, [r9, #76]	; 0x4c
    e080:	f8d9 b14c 	ldr.w	fp, [r9, #332]	; 0x14c
    e084:	48f9      	ldr	r0, [pc, #996]	; (e46c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>)
    e086:	f8d0 8000 	ldr.w	r8, [r0]
    e08a:	4af9      	ldr	r2, [pc, #996]	; (e470 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    e08c:	7811      	ldrb	r1, [r2, #0]
    e08e:	2904      	cmp	r1, #4
    e090:	d304      	bcc.n	e09c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    e092:	f640 1176 	movw	r1, #2422	; 0x976
    e096:	203e      	movs	r0, #62	; 0x3e
    e098:	f7f5 fd74 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e09c:	4df5      	ldr	r5, [pc, #980]	; (e474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    e09e:	4bf6      	ldr	r3, [pc, #984]	; (e478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e0a0:	f04f 0c00 	mov.w	ip, #0
    e0a4:	7ae8      	ldrb	r0, [r5, #11]
    e0a6:	2801      	cmp	r0, #1
    e0a8:	d002      	beq.n	e0b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40>
    e0aa:	2802      	cmp	r0, #2
    e0ac:	d003      	beq.n	e0b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    e0ae:	e015      	b.n	e0dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e0b0:	7e2c      	ldrb	r4, [r5, #24]
    e0b2:	b914      	cbnz	r4, e0ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a>
    e0b4:	e012      	b.n	e0dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e0b6:	7e6c      	ldrb	r4, [r5, #25]
    e0b8:	b184      	cbz	r4, e0dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e0ba:	7fac      	ldrb	r4, [r5, #30]
    e0bc:	7fee      	ldrb	r6, [r5, #31]
    e0be:	fa07 f404 	lsl.w	r4, r7, r4
    e0c2:	fa07 f606 	lsl.w	r6, r7, r6
    e0c6:	4334      	orrs	r4, r6
    e0c8:	601c      	str	r4, [r3, #0]
    e0ca:	f895 4020 	ldrb.w	r4, [r5, #32]
    e0ce:	00a4      	lsls	r4, r4, #2
    e0d0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    e0d4:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    e0d8:	f8c4 c510 	str.w	ip, [r4, #1296]	; 0x510
    e0dc:	4be6      	ldr	r3, [pc, #920]	; (e478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e0de:	6bac      	ldr	r4, [r5, #56]	; 0x38
    e0e0:	601c      	str	r4, [r3, #0]
    e0e2:	4ce6      	ldr	r4, [pc, #920]	; (e47c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e0e4:	2300      	movs	r3, #0
    e0e6:	63ab      	str	r3, [r5, #56]	; 0x38
    e0e8:	f8d4 c200 	ldr.w	ip, [r4, #512]	; 0x200
    e0ec:	f02c 0c0d 	bic.w	ip, ip, #13
    e0f0:	f8c4 c200 	str.w	ip, [r4, #512]	; 0x200
    e0f4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    e0f8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	bf08      	it	eq
    e100:	f8c9 7040 	streq.w	r7, [r9, #64]	; 0x40
    e104:	f04f 0a00 	mov.w	sl, #0
    e108:	7c2b      	ldrb	r3, [r5, #16]
    e10a:	b12b      	cbz	r3, e118 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa8>
    e10c:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
    e110:	2b01      	cmp	r3, #1
    e112:	bf08      	it	eq
    e114:	2601      	moveq	r6, #1
    e116:	d000      	beq.n	e11a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    e118:	2600      	movs	r6, #0
    e11a:	2801      	cmp	r0, #1
    e11c:	d00a      	beq.n	e134 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc4>
    e11e:	2802      	cmp	r0, #2
    e120:	d011      	beq.n	e146 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    e122:	bf00      	nop
    e124:	f01a 0f0b 	tst.w	sl, #11
    e128:	d01d      	beq.n	e166 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    e12a:	bf00      	nop
    e12c:	f011 0f01 	tst.w	r1, #1
    e130:	d022      	beq.n	e178 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    e132:	e043      	b.n	e1bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    e134:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    e138:	2801      	cmp	r0, #1
    e13a:	bf14      	ite	ne
    e13c:	f04f 0a00 	movne.w	sl, #0
    e140:	f04f 0a08 	moveq.w	sl, #8
    e144:	e7ee      	b.n	e124 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    e146:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    e14a:	2801      	cmp	r0, #1
    e14c:	bf14      	ite	ne
    e14e:	2000      	movne	r0, #0
    e150:	2002      	moveq	r0, #2
    e152:	4bcb      	ldr	r3, [pc, #812]	; (e480 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    e154:	681b      	ldr	r3, [r3, #0]
    e156:	2b01      	cmp	r3, #1
    e158:	bf14      	ite	ne
    e15a:	2304      	movne	r3, #4
    e15c:	2300      	moveq	r3, #0
    e15e:	4318      	orrs	r0, r3
    e160:	ea40 0a06 	orr.w	sl, r0, r6
    e164:	e7de      	b.n	e124 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    e166:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    e16a:	2801      	cmp	r0, #1
    e16c:	bf14      	ite	ne
    e16e:	2000      	movne	r0, #0
    e170:	2010      	moveq	r0, #16
    e172:	ea40 0a0a 	orr.w	sl, r0, sl
    e176:	e7d9      	b.n	e12c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xbc>
    e178:	48c2      	ldr	r0, [pc, #776]	; (e484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>)
    e17a:	6801      	ldr	r1, [r0, #0]
    e17c:	f011 0fff 	tst.w	r1, #255	; 0xff
    e180:	d003      	beq.n	e18a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11a>
    e182:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    e186:	2901      	cmp	r1, #1
    e188:	d000      	beq.n	e18c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11c>
    e18a:	2100      	movs	r1, #0
    e18c:	f885 1032 	strb.w	r1, [r5, #50]	; 0x32
    e190:	6800      	ldr	r0, [r0, #0]
    e192:	f010 0fff 	tst.w	r0, #255	; 0xff
    e196:	d003      	beq.n	e1a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    e198:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    e19c:	2801      	cmp	r0, #1
    e19e:	d000      	beq.n	e1a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x132>
    e1a0:	2000      	movs	r0, #0
    e1a2:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
    e1a6:	48b8      	ldr	r0, [pc, #736]	; (e488 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    e1a8:	6800      	ldr	r0, [r0, #0]
    e1aa:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    e1ae:	f7fe fed5 	bl	cf5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    e1b2:	2801      	cmp	r0, #1
    e1b4:	bf18      	it	ne
    e1b6:	2000      	movne	r0, #0
    e1b8:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    e1bc:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e1c0:	1e71      	subs	r1, r6, #1
    e1c2:	4308      	orrs	r0, r1
    e1c4:	bf18      	it	ne
    e1c6:	2001      	movne	r0, #1
    e1c8:	f88d 0000 	strb.w	r0, [sp]
    e1cc:	48ab      	ldr	r0, [pc, #684]	; (e47c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e1ce:	2600      	movs	r6, #0
    e1d0:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
    e1d4:	f8c0 610c 	str.w	r6, [r0, #268]	; 0x10c
    e1d8:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    e1dc:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
    e1e0:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
    e1e4:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
    e1e8:	48a8      	ldr	r0, [pc, #672]	; (e48c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    e1ea:	6800      	ldr	r0, [r0, #0]
    e1ec:	9001      	str	r0, [sp, #4]
    e1ee:	4668      	mov	r0, sp
    e1f0:	f7f5 fbbe 	bl	3970 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    e1f4:	2800      	cmp	r0, #0
    e1f6:	bf18      	it	ne
    e1f8:	2010      	movne	r0, #16
    e1fa:	ea40 040a 	orr.w	r4, r0, sl
    e1fe:	f8c9 6144 	str.w	r6, [r9, #324]	; 0x144
    e202:	f014 0f10 	tst.w	r4, #16
    e206:	d006      	beq.n	e216 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a6>
    e208:	f014 0f08 	tst.w	r4, #8
    e20c:	bf02      	ittt	eq
    e20e:	7ae8      	ldrbeq	r0, [r5, #11]
    e210:	2801      	cmpeq	r0, #1
    e212:	f044 0420 	orreq.w	r4, r4, #32
    e216:	489e      	ldr	r0, [pc, #632]	; (e490 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    e218:	6800      	ldr	r0, [r0, #0]
    e21a:	9001      	str	r0, [sp, #4]
    e21c:	489d      	ldr	r0, [pc, #628]	; (e494 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    e21e:	6800      	ldr	r0, [r0, #0]
    e220:	499d      	ldr	r1, [pc, #628]	; (e498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    e222:	62e8      	str	r0, [r5, #44]	; 0x2c
    e224:	680a      	ldr	r2, [r1, #0]
    e226:	f002 020f 	and.w	r2, r2, #15
    e22a:	2a03      	cmp	r2, #3
    e22c:	bf08      	it	eq
    e22e:	2101      	moveq	r1, #1
    e230:	d00b      	beq.n	e24a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    e232:	6809      	ldr	r1, [r1, #0]
    e234:	f001 010f 	and.w	r1, r1, #15
    e238:	2904      	cmp	r1, #4
    e23a:	bf08      	it	eq
    e23c:	2102      	moveq	r1, #2
    e23e:	d004      	beq.n	e24a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    e240:	f240 11d7 	movw	r1, #471	; 0x1d7
    e244:	203e      	movs	r0, #62	; 0x3e
    e246:	f7f5 fc9d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e24a:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    e24e:	7ae9      	ldrb	r1, [r5, #11]
    e250:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    e254:	62ae      	str	r6, [r5, #40]	; 0x28
    e256:	2902      	cmp	r1, #2
    e258:	d10c      	bne.n	e274 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x204>
    e25a:	7869      	ldrb	r1, [r5, #1]
    e25c:	b151      	cbz	r1, e274 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x204>
    e25e:	4a8f      	ldr	r2, [pc, #572]	; (e49c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e260:	6812      	ldr	r2, [r2, #0]
    e262:	7812      	ldrb	r2, [r2, #0]
    e264:	4011      	ands	r1, r2
    e266:	782a      	ldrb	r2, [r5, #0]
    e268:	ea32 0101 	bics.w	r1, r2, r1
    e26c:	bf08      	it	eq
    e26e:	f885 7024 	strbeq.w	r7, [r5, #36]	; 0x24
    e272:	d001      	beq.n	e278 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    e274:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
    e278:	f8df a224 	ldr.w	sl, [pc, #548]	; e4a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>
    e27c:	f014 0f02 	tst.w	r4, #2
    e280:	bf1c      	itt	ne
    e282:	f8da 1000 	ldrne.w	r1, [sl]
    e286:	62a9      	strne	r1, [r5, #40]	; 0x28
    e288:	f014 0f08 	tst.w	r4, #8
    e28c:	bf1c      	itt	ne
    e28e:	f8da 1000 	ldrne.w	r1, [sl]
    e292:	62a9      	strne	r1, [r5, #40]	; 0x28
    e294:	f8df 920c 	ldr.w	r9, [pc, #524]	; e4a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>
    e298:	f8d9 1010 	ldr.w	r1, [r9, #16]
    e29c:	4788      	blx	r1
    e29e:	4874      	ldr	r0, [pc, #464]	; (e470 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    e2a0:	7800      	ldrb	r0, [r0, #0]
    e2a2:	f010 0f01 	tst.w	r0, #1
    e2a6:	d11e      	bne.n	e2e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    e2a8:	487c      	ldr	r0, [pc, #496]	; (e49c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e2aa:	6801      	ldr	r1, [r0, #0]
    e2ac:	7809      	ldrb	r1, [r1, #0]
    e2ae:	f001 010f 	and.w	r1, r1, #15
    e2b2:	2907      	cmp	r1, #7
    e2b4:	bf28      	it	cs
    e2b6:	f885 6025 	strbcs.w	r6, [r5, #37]	; 0x25
    e2ba:	d214      	bcs.n	e2e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    e2bc:	4877      	ldr	r0, [pc, #476]	; (e49c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e2be:	6800      	ldr	r0, [r0, #0]
    e2c0:	2206      	movs	r2, #6
    e2c2:	f100 0109 	add.w	r1, r0, #9
    e2c6:	1ca8      	adds	r0, r5, #2
    e2c8:	f000 fb9e 	bl	ea08 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    e2cc:	b940      	cbnz	r0, e2e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x270>
    e2ce:	4873      	ldr	r0, [pc, #460]	; (e49c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e2d0:	7a29      	ldrb	r1, [r5, #8]
    e2d2:	6800      	ldr	r0, [r0, #0]
    e2d4:	7800      	ldrb	r0, [r0, #0]
    e2d6:	ebb1 1fd0 	cmp.w	r1, r0, lsr #7
    e2da:	bf08      	it	eq
    e2dc:	2001      	moveq	r0, #1
    e2de:	d000      	beq.n	e2e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x272>
    e2e0:	2000      	movs	r0, #0
    e2e2:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
    e2e6:	2000      	movs	r0, #0
    e2e8:	f8cd 8008 	str.w	r8, [sp, #8]
    e2ec:	9000      	str	r0, [sp, #0]
    e2ee:	7aa9      	ldrb	r1, [r5, #10]
    e2f0:	b149      	cbz	r1, e306 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x296>
    e2f2:	7b28      	ldrb	r0, [r5, #12]
    e2f4:	f010 0f02 	tst.w	r0, #2
    e2f8:	bf1c      	itt	ne
    e2fa:	f014 0f02 	tstne.w	r4, #2
    e2fe:	f014 0f04 	tstne.w	r4, #4
    e302:	d008      	beq.n	e316 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a6>
    e304:	e021      	b.n	e34a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e306:	495c      	ldr	r1, [pc, #368]	; (e478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e308:	4867      	ldr	r0, [pc, #412]	; (e4a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    e30a:	6008      	str	r0, [r1, #0]
    e30c:	726e      	strb	r6, [r5, #9]
    e30e:	72ae      	strb	r6, [r5, #10]
    e310:	72ee      	strb	r6, [r5, #11]
    e312:	732f      	strb	r7, [r5, #12]
    e314:	e068      	b.n	e3e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e316:	f010 0f10 	tst.w	r0, #16
    e31a:	bf1c      	itt	ne
    e31c:	f895 2033 	ldrbne.w	r2, [r5, #51]	; 0x33
    e320:	2a00      	cmpne	r2, #0
    e322:	d002      	beq.n	e32a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ba>
    e324:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    e328:	b17a      	cbz	r2, e34a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e32a:	f010 0f08 	tst.w	r0, #8
    e32e:	bf1c      	itt	ne
    e330:	f895 2024 	ldrbne.w	r2, [r5, #36]	; 0x24
    e334:	2a00      	cmpne	r2, #0
    e336:	d108      	bne.n	e34a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e338:	f010 0f04 	tst.w	r0, #4
    e33c:	d002      	beq.n	e344 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    e33e:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
    e342:	b110      	cbz	r0, e34a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e344:	f014 0f11 	tst.w	r4, #17
    e348:	d002      	beq.n	e350 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>
    e34a:	f7fe ffb3 	bl	d2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e34e:	e04b      	b.n	e3e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e350:	2901      	cmp	r1, #1
    e352:	bf14      	ite	ne
    e354:	f04f 0801 	movne.w	r8, #1
    e358:	f04f 0800 	moveq.w	r8, #0
    e35c:	7a68      	ldrb	r0, [r5, #9]
    e35e:	2801      	cmp	r0, #1
    e360:	bf18      	it	ne
    e362:	2000      	movne	r0, #0
    e364:	9001      	str	r0, [sp, #4]
    e366:	726e      	strb	r6, [r5, #9]
    e368:	72ae      	strb	r6, [r5, #10]
    e36a:	72ee      	strb	r6, [r5, #11]
    e36c:	732f      	strb	r7, [r5, #12]
    e36e:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    e372:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    e376:	2100      	movs	r1, #0
    e378:	b1d2      	cbz	r2, e3b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x340>
    e37a:	f1b8 0f00 	cmp.w	r8, #0
    e37e:	d01c      	beq.n	e3ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34a>
    e380:	f1b8 0f00 	cmp.w	r8, #0
    e384:	d007      	beq.n	e396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e386:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e38a:	2a01      	cmp	r2, #1
    e38c:	d023      	beq.n	e3d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x366>
    e38e:	f003 fd98 	bl	11ec2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    e392:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e394:	4401      	add	r1, r0
    e396:	9801      	ldr	r0, [sp, #4]
    e398:	b310      	cbz	r0, e3e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x370>
    e39a:	9802      	ldr	r0, [sp, #8]
    e39c:	303a      	adds	r0, #58	; 0x3a
    e39e:	4288      	cmp	r0, r1
    e3a0:	bf98      	it	ls
    e3a2:	726f      	strbls	r7, [r5, #9]
    e3a4:	d91c      	bls.n	e3e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x370>
    e3a6:	4835      	ldr	r0, [pc, #212]	; (e47c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e3a8:	6107      	str	r7, [r0, #16]
    e3aa:	2001      	movs	r0, #1
    e3ac:	9000      	str	r0, [sp, #0]
    e3ae:	e01b      	b.n	e3e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e3b0:	f240 6146 	movw	r1, #1606	; 0x646
    e3b4:	203e      	movs	r0, #62	; 0x3e
    e3b6:	f7f5 fbe5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3ba:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e3be:	2a01      	cmp	r2, #1
    e3c0:	d004      	beq.n	e3cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    e3c2:	f003 fd8c 	bl	11ede <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    e3c6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e3c8:	4401      	add	r1, r0
    e3ca:	e7e4      	b.n	e396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e3cc:	f003 fda1 	bl	11f12 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    e3d0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e3d2:	4401      	add	r1, r0
    e3d4:	e7df      	b.n	e396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e3d6:	f003 fd8d 	bl	11ef4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    e3da:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e3dc:	4401      	add	r1, r0
    e3de:	e7da      	b.n	e396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e3e0:	7b6a      	ldrb	r2, [r5, #13]
    e3e2:	4640      	mov	r0, r8
    e3e4:	f7ff fb5c 	bl	daa0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    e3e8:	f014 0f01 	tst.w	r4, #1
    e3ec:	d003      	beq.n	e3f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x386>
    e3ee:	f8d9 0000 	ldr.w	r0, [r9]
    e3f2:	4780      	blx	r0
    e3f4:	e06f      	b.n	e4d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
    e3f6:	f014 0f02 	tst.w	r4, #2
    e3fa:	d05b      	beq.n	e4b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>
    e3fc:	7e68      	ldrb	r0, [r5, #25]
    e3fe:	b110      	cbz	r0, e406 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x396>
    e400:	f1bb 0f00 	cmp.w	fp, #0
    e404:	d003      	beq.n	e40e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x39e>
    e406:	f014 0f04 	tst.w	r4, #4
    e40a:	d126      	bne.n	e45a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e40c:	e004      	b.n	e418 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a8>
    e40e:	f44f 611d 	mov.w	r1, #2512	; 0x9d0
    e412:	203e      	movs	r0, #62	; 0x3e
    e414:	f7f5 fbb6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e418:	f000 fad2 	bl	e9c0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e41c:	b9e8      	cbnz	r0, e45a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e41e:	f000 fabf 	bl	e9a0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    e422:	b9d0      	cbnz	r0, e45a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e424:	4821      	ldr	r0, [pc, #132]	; (e4ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    e426:	6800      	ldr	r0, [r0, #0]
    e428:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    e42c:	f3c0 6200 	ubfx	r2, r0, #24, #1
    e430:	f000 030f 	and.w	r3, r0, #15
    e434:	f3c0 1103 	ubfx	r1, r0, #4, #4
    e438:	f3c0 2003 	ubfx	r0, r0, #8, #4
    e43c:	b16a      	cbz	r2, e45a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e43e:	2b00      	cmp	r3, #0
    e440:	bf1c      	itt	ne
    e442:	2900      	cmpne	r1, #0
    e444:	2800      	cmpne	r0, #0
    e446:	d108      	bne.n	e45a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e448:	4819      	ldr	r0, [pc, #100]	; (e4b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    e44a:	6800      	ldr	r0, [r0, #0]
    e44c:	2800      	cmp	r0, #0
    e44e:	bf18      	it	ne
    e450:	f1bc 0f03 	cmpne.w	ip, #3
    e454:	bf38      	it	cc
    e456:	f044 0404 	orrcc.w	r4, r4, #4
    e45a:	ea27 0094 	bic.w	r0, r7, r4, lsr #2
    e45e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    e462:	9900      	ldr	r1, [sp, #0]
    e464:	e036      	b.n	e4d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>
    e466:	0000      	.short	0x0000
    e468:	40008000 	.word	0x40008000
    e46c:	4000854c 	.word	0x4000854c
    e470:	2000038c 	.word	0x2000038c
    e474:	200018b0 	.word	0x200018b0
    e478:	4001f508 	.word	0x4001f508
    e47c:	40001000 	.word	0x40001000
    e480:	40001400 	.word	0x40001400
    e484:	40001640 	.word	0x40001640
    e488:	40001410 	.word	0x40001410
    e48c:	40001118 	.word	0x40001118
    e490:	40008144 	.word	0x40008144
    e494:	40008540 	.word	0x40008540
    e498:	40001510 	.word	0x40001510
    e49c:	40001504 	.word	0x40001504
    e4a0:	40008544 	.word	0x40008544
    e4a4:	2000189c 	.word	0x2000189c
    e4a8:	04040000 	.word	0x04040000
    e4ac:	40001450 	.word	0x40001450
    e4b0:	40001454 	.word	0x40001454
    e4b4:	f014 0f28 	tst.w	r4, #40	; 0x28
    e4b8:	d00d      	beq.n	e4d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
    e4ba:	f014 0f20 	tst.w	r4, #32
    e4be:	d104      	bne.n	e4ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45a>
    e4c0:	7e28      	ldrb	r0, [r5, #24]
    e4c2:	b110      	cbz	r0, e4ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45a>
    e4c4:	f1bb 0f00 	cmp.w	fp, #0
    e4c8:	d00f      	beq.n	e4ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47a>
    e4ca:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e4ce:	ea27 1154 	bic.w	r1, r7, r4, lsr #5
    e4d2:	9800      	ldr	r0, [sp, #0]
    e4d4:	4790      	blx	r2
    e4d6:	f014 0f10 	tst.w	r4, #16
    e4da:	bf1c      	itt	ne
    e4dc:	f8d9 000c 	ldrne.w	r0, [r9, #12]
    e4e0:	4780      	blxne	r0
    e4e2:	7ae8      	ldrb	r0, [r5, #11]
    e4e4:	2802      	cmp	r0, #2
    e4e6:	d11d      	bne.n	e524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    e4e8:	e004      	b.n	e4f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x484>
    e4ea:	f44f 6120 	mov.w	r1, #2560	; 0xa00
    e4ee:	203e      	movs	r0, #62	; 0x3e
    e4f0:	f7f5 fb48 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4f4:	7c28      	ldrb	r0, [r5, #16]
    e4f6:	b1a8      	cbz	r0, e524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    e4f8:	2802      	cmp	r0, #2
    e4fa:	d006      	beq.n	e50a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x49a>
    e4fc:	2801      	cmp	r0, #1
    e4fe:	d025      	beq.n	e54c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4dc>
    e500:	f640 2124 	movw	r1, #2596	; 0xa24
    e504:	203e      	movs	r0, #62	; 0x3e
    e506:	f7f5 fb3d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e50a:	6969      	ldr	r1, [r5, #20]
    e50c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    e50e:	4408      	add	r0, r1
    e510:	f8ca 0000 	str.w	r0, [sl]
    e514:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    e516:	4913      	ldr	r1, [pc, #76]	; (e564 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4f4>)
    e518:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    e51c:	63a8      	str	r0, [r5, #56]	; 0x38
    e51e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    e522:	6008      	str	r0, [r1, #0]
    e524:	f014 0f10 	tst.w	r4, #16
    e528:	bf04      	itt	eq
    e52a:	b003      	addeq	sp, #12
    e52c:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e530:	480d      	ldr	r0, [pc, #52]	; (e568 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4f8>)
    e532:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    e536:	480d      	ldr	r0, [pc, #52]	; (e56c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4fc>)
    e538:	6800      	ldr	r0, [r0, #0]
    e53a:	9000      	str	r0, [sp, #0]
    e53c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e540:	2002      	movs	r0, #2
    e542:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    e546:	b003      	add	sp, #12
    e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e54c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e54e:	6968      	ldr	r0, [r5, #20]
    e550:	4288      	cmp	r0, r1
    e552:	bf88      	it	hi
    e554:	f8ca 0000 	strhi.w	r0, [sl]
    e558:	d8dc      	bhi.n	e514 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a4>
    e55a:	f640 2125 	movw	r1, #2597	; 0xa25
    e55e:	203e      	movs	r0, #62	; 0x3e
    e560:	f7f5 fb10 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e564:	4001f504 	.word	0x4001f504
    e568:	40001000 	.word	0x40001000
    e56c:	40001110 	.word	0x40001110

0000e570 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    e570:	0083      	lsls	r3, r0, #2
    e572:	b510      	push	{r4, lr}
    e574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e57c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    e580:	f8c3 c620 	str.w	ip, [r3, #1568]	; 0x620
    e584:	f891 c000 	ldrb.w	ip, [r1]
    e588:	f8d1 1001 	ldr.w	r1, [r1, #1]
    e58c:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    e590:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    e594:	f100 0108 	add.w	r1, r0, #8
    e598:	f04f 0c01 	mov.w	ip, #1
    e59c:	fa0c f301 	lsl.w	r3, ip, r1
    e5a0:	490b      	ldr	r1, [pc, #44]	; (e5d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x60>)
    e5a2:	2a00      	cmp	r2, #0
    e5a4:	bf04      	itt	eq
    e5a6:	680a      	ldreq	r2, [r1, #0]
    e5a8:	439a      	biceq	r2, r3
    e5aa:	d009      	beq.n	e5c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    e5ac:	2a01      	cmp	r2, #1
    e5ae:	bf04      	itt	eq
    e5b0:	680a      	ldreq	r2, [r1, #0]
    e5b2:	431a      	orreq	r2, r3
    e5b4:	d004      	beq.n	e5c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    e5b6:	f240 31a6 	movw	r1, #934	; 0x3a6
    e5ba:	203e      	movs	r0, #62	; 0x3e
    e5bc:	f7f5 fae2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5c0:	600a      	str	r2, [r1, #0]
    e5c2:	680a      	ldr	r2, [r1, #0]
    e5c4:	fa0c f000 	lsl.w	r0, ip, r0
    e5c8:	4310      	orrs	r0, r2
    e5ca:	6008      	str	r0, [r1, #0]
    e5cc:	bd10      	pop	{r4, pc}
    e5ce:	0000      	.short	0x0000
    e5d0:	40001640 	.word	0x40001640
    e5d4:	492e      	ldr	r1, [pc, #184]	; (e690 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x120>)
    e5d6:	7aca      	ldrb	r2, [r1, #11]
    e5d8:	2a01      	cmp	r2, #1
    e5da:	d04a      	beq.n	e672 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x102>
    e5dc:	2a02      	cmp	r2, #2
    e5de:	bf18      	it	ne
    e5e0:	4770      	bxne	lr
    e5e2:	7e4b      	ldrb	r3, [r1, #25]
    e5e4:	2b00      	cmp	r3, #0
    e5e6:	bf08      	it	eq
    e5e8:	4770      	bxeq	lr
    e5ea:	2a01      	cmp	r2, #1
    e5ec:	d045      	beq.n	e67a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    e5ee:	7ecb      	ldrb	r3, [r1, #27]
    e5f0:	7f4a      	ldrb	r2, [r1, #29]
    e5f2:	f113 0c00 	adds.w	ip, r3, #0
    e5f6:	bf18      	it	ne
    e5f8:	f04f 0c01 	movne.w	ip, #1
    e5fc:	2324      	movs	r3, #36	; 0x24
    e5fe:	4418      	add	r0, r3
    e600:	4b24      	ldr	r3, [pc, #144]	; (e694 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x124>)
    e602:	6018      	str	r0, [r3, #0]
    e604:	0210      	lsls	r0, r2, #8
    e606:	f08c 0201 	eor.w	r2, ip, #1
    e60a:	ea40 5002 	orr.w	r0, r0, r2, lsl #20
    e60e:	f040 1203 	orr.w	r2, r0, #196611	; 0x30003
    e612:	f891 0020 	ldrb.w	r0, [r1, #32]
    e616:	0083      	lsls	r3, r0, #2
    e618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e61c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    e620:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    e624:	4b1c      	ldr	r3, [pc, #112]	; (e698 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    e626:	7f8a      	ldrb	r2, [r1, #30]
    e628:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    e62c:	00d3      	lsls	r3, r2, #3
    e62e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e632:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    e636:	f8df c064 	ldr.w	ip, [pc, #100]	; e69c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    e63a:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    e63e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    e642:	7fc9      	ldrb	r1, [r1, #31]
    e644:	f8df c058 	ldr.w	ip, [pc, #88]	; e6a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x130>
    e648:	00cb      	lsls	r3, r1, #3
    e64a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e64e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    e652:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    e656:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    e65a:	2001      	movs	r0, #1
    e65c:	fa00 f202 	lsl.w	r2, r0, r2
    e660:	4088      	lsls	r0, r1
    e662:	4910      	ldr	r1, [pc, #64]	; (e6a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x134>)
    e664:	4310      	orrs	r0, r2
    e666:	6008      	str	r0, [r1, #0]
    e668:	490f      	ldr	r1, [pc, #60]	; (e6a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>)
    e66a:	2000      	movs	r0, #0
    e66c:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    e670:	4770      	bx	lr
    e672:	7e0b      	ldrb	r3, [r1, #24]
    e674:	2b00      	cmp	r3, #0
    e676:	d1b8      	bne.n	e5ea <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    e678:	4770      	bx	lr
    e67a:	7e8b      	ldrb	r3, [r1, #26]
    e67c:	7f0a      	ldrb	r2, [r1, #28]
    e67e:	2b00      	cmp	r3, #0
    e680:	bf14      	ite	ne
    e682:	f04f 0c01 	movne.w	ip, #1
    e686:	f04f 0c00 	moveq.w	ip, #0
    e68a:	2311      	movs	r3, #17
    e68c:	e7b7      	b.n	e5fe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x8e>
    e68e:	0000      	.short	0x0000
    e690:	200018b0 	.word	0x200018b0
    e694:	4000854c 	.word	0x4000854c
    e698:	40006000 	.word	0x40006000
    e69c:	4000814c 	.word	0x4000814c
    e6a0:	40001110 	.word	0x40001110
    e6a4:	4001f504 	.word	0x4001f504
    e6a8:	40008000 	.word	0x40008000
    e6ac:	00000002 	.word	0x00000002
	...
    e6c4:	40008000 	.word	0x40008000
	...
    e6d8:	40008000 	.word	0x40008000
    e6dc:	00000002 	.word	0x00000002
	...
    e6e8:	00000001 	.word	0x00000001
	...

0000e6fc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    e6fc:	4901      	ldr	r1, [pc, #4]	; (e704 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    e6fe:	b2c0      	uxtb	r0, r0
    e700:	6008      	str	r0, [r1, #0]
    e702:	4770      	bx	lr
    e704:	4000150c 	.word	0x4000150c

0000e708 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    e708:	b510      	push	{r4, lr}
    e70a:	4907      	ldr	r1, [pc, #28]	; (e728 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    e70c:	2801      	cmp	r0, #1
    e70e:	bf08      	it	eq
    e710:	2003      	moveq	r0, #3
    e712:	d007      	beq.n	e724 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1c>
    e714:	2802      	cmp	r0, #2
    e716:	bf08      	it	eq
    e718:	2004      	moveq	r0, #4
    e71a:	d003      	beq.n	e724 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1c>
    e71c:	2158      	movs	r1, #88	; 0x58
    e71e:	203f      	movs	r0, #63	; 0x3f
    e720:	f7f5 fa30 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e724:	6008      	str	r0, [r1, #0]
    e726:	bd10      	pop	{r4, pc}
    e728:	40001510 	.word	0x40001510

0000e72c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    e72c:	4770      	bx	lr
    e72e:	2100      	movs	r1, #0
    e730:	7081      	strb	r1, [r0, #2]
    e732:	7001      	strb	r1, [r0, #0]
    e734:	7041      	strb	r1, [r0, #1]
    e736:	4770      	bx	lr

0000e738 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    e738:	b570      	push	{r4, r5, r6, lr}
    e73a:	f7f1 fe65 	bl	408 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    e73e:	4605      	mov	r5, r0
    e740:	2400      	movs	r4, #0
    e742:	e006      	b.n	e752 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    e744:	4620      	mov	r0, r4
    e746:	f7f1 fe65 	bl	414 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    e74a:	f7ff fff0 	bl	e72e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    e74e:	1c64      	adds	r4, r4, #1
    e750:	b2e4      	uxtb	r4, r4
    e752:	42ac      	cmp	r4, r5
    e754:	d3f6      	bcc.n	e744 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    e756:	bd70      	pop	{r4, r5, r6, pc}

0000e758 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    e758:	2000      	movs	r0, #0
    e75a:	f7f4 bb9b 	b.w	2e94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000e75e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    e75e:	b510      	push	{r4, lr}
    e760:	f7f4 f890 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    e764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e768:	f000 b800 	b.w	e76c <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000e76c <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    e76c:	0a41      	lsrs	r1, r0, #9
    e76e:	f643 5209 	movw	r2, #15625	; 0x3d09
    e772:	4351      	muls	r1, r2
    e774:	f3c0 0008 	ubfx	r0, r0, #0, #9
    e778:	fb10 f002 	smulbb	r0, r0, r2
    e77c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    e780:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    e784:	4770      	bx	lr

0000e786 <MPSL_IRQ_RADIO_Handler>:
    e786:	f7f2 be9f 	b.w	14c8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    e78a:	2800      	cmp	r0, #0
    e78c:	db09      	blt.n	e7a2 <MPSL_IRQ_RADIO_Handler+0x1c>
    e78e:	f000 021f 	and.w	r2, r0, #31
    e792:	2101      	movs	r1, #1
    e794:	4091      	lsls	r1, r2
    e796:	0940      	lsrs	r0, r0, #5
    e798:	0080      	lsls	r0, r0, #2
    e79a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e79e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e7a2:	4770      	bx	lr
    e7a4:	2800      	cmp	r0, #0
    e7a6:	db0d      	blt.n	e7c4 <MPSL_IRQ_RADIO_Handler+0x3e>
    e7a8:	f000 021f 	and.w	r2, r0, #31
    e7ac:	2101      	movs	r1, #1
    e7ae:	4091      	lsls	r1, r2
    e7b0:	0940      	lsrs	r0, r0, #5
    e7b2:	0080      	lsls	r0, r0, #2
    e7b4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e7b8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e7bc:	f3bf 8f4f 	dsb	sy
    e7c0:	f3bf 8f6f 	isb	sy
    e7c4:	4770      	bx	lr

0000e7c6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    e7c6:	b570      	push	{r4, r5, r6, lr}
    e7c8:	4602      	mov	r2, r0
    e7ca:	2000      	movs	r0, #0
    e7cc:	2900      	cmp	r1, #0
    e7ce:	d01d      	beq.n	e80c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    e7d0:	fba2 0101 	umull	r0, r1, r2, r1
    e7d4:	0a40      	lsrs	r0, r0, #9
    e7d6:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    e7da:	0a49      	lsrs	r1, r1, #9
    e7dc:	1c40      	adds	r0, r0, #1
    e7de:	f141 0100 	adc.w	r1, r1, #0
    e7e2:	f240 72a1 	movw	r2, #1953	; 0x7a1
    e7e6:	1883      	adds	r3, r0, r2
    e7e8:	f141 0100 	adc.w	r1, r1, #0
    e7ec:	1c5b      	adds	r3, r3, #1
    e7ee:	f141 0400 	adc.w	r4, r1, #0
    e7f2:	2100      	movs	r1, #0
    e7f4:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    e7f8:	41a1      	sbcs	r1, r4
    e7fa:	d203      	bcs.n	e804 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    e7fc:	216c      	movs	r1, #108	; 0x6c
    e7fe:	206d      	movs	r0, #109	; 0x6d
    e800:	f7f4 fee4 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e804:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    e808:	fbb0 f0f2 	udiv	r0, r0, r2
    e80c:	bd70      	pop	{r4, r5, r6, pc}
    e80e:	5840      	ldr	r0, [r0, r1]
    e810:	2800      	cmp	r0, #0
    e812:	d000      	beq.n	e816 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    e814:	2001      	movs	r0, #1
    e816:	4770      	bx	lr
    e818:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    e81c:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    e820:	f002 0201 	and.w	r2, r2, #1
    e824:	03c0      	lsls	r0, r0, #15
    e826:	d503      	bpl.n	e830 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    e828:	428a      	cmp	r2, r1
    e82a:	d101      	bne.n	e830 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    e82c:	2001      	movs	r0, #1
    e82e:	4770      	bx	lr
    e830:	2000      	movs	r0, #0
    e832:	4770      	bx	lr

0000e834 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    e834:	b510      	push	{r4, lr}
    e836:	2101      	movs	r1, #1
    e838:	0788      	lsls	r0, r1, #30
    e83a:	f7f4 fe85 	bl	3548 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    e83e:	2800      	cmp	r0, #0
    e840:	d000      	beq.n	e844 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    e842:	2001      	movs	r0, #1
    e844:	bd10      	pop	{r4, pc}

0000e846 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    e846:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    e84a:	2101      	movs	r1, #1
    e84c:	6001      	str	r1, [r0, #0]
    e84e:	4770      	bx	lr

0000e850 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    e850:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    e854:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    e858:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    e85c:	f002 0203 	and.w	r2, r2, #3
    e860:	03c9      	lsls	r1, r1, #15
    e862:	d503      	bpl.n	e86c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    e864:	4282      	cmp	r2, r0
    e866:	d101      	bne.n	e86c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    e868:	2001      	movs	r0, #1
    e86a:	4770      	bx	lr
    e86c:	2000      	movs	r0, #0
    e86e:	4770      	bx	lr

0000e870 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    e870:	b510      	push	{r4, lr}
    e872:	2100      	movs	r1, #0
    e874:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    e878:	f7f4 fe66 	bl	3548 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    e87c:	2800      	cmp	r0, #0
    e87e:	d000      	beq.n	e882 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    e880:	2001      	movs	r0, #1
    e882:	bd10      	pop	{r4, pc}
    e884:	2800      	cmp	r0, #0
    e886:	db09      	blt.n	e89c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    e888:	f000 021f 	and.w	r2, r0, #31
    e88c:	2101      	movs	r1, #1
    e88e:	4091      	lsls	r1, r2
    e890:	0940      	lsrs	r0, r0, #5
    e892:	0080      	lsls	r0, r0, #2
    e894:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e898:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e89c:	4770      	bx	lr
    e89e:	2800      	cmp	r0, #0
    e8a0:	db0d      	blt.n	e8be <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    e8a2:	f000 021f 	and.w	r2, r0, #31
    e8a6:	2101      	movs	r1, #1
    e8a8:	4091      	lsls	r1, r2
    e8aa:	0940      	lsrs	r0, r0, #5
    e8ac:	0080      	lsls	r0, r0, #2
    e8ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e8b2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e8b6:	f3bf 8f4f 	dsb	sy
    e8ba:	f3bf 8f6f 	isb	sy
    e8be:	4770      	bx	lr
    e8c0:	00021000 	.word	0x00021000
    e8c4:	643300fa 	.word	0x643300fa
    e8c8:	efddbd95 	.word	0xefddbd95
    e8cc:	4fc80257 	.word	0x4fc80257
    e8d0:	5560481f 	.word	0x5560481f
    e8d4:	8787e478 	.word	0x8787e478
    e8d8:	dcb7      	.short	0xdcb7
    e8da:	2800      	cmp	r0, #0
    e8dc:	db09      	blt.n	e8f2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x82>
    e8de:	f000 021f 	and.w	r2, r0, #31
    e8e2:	2101      	movs	r1, #1
    e8e4:	4091      	lsls	r1, r2
    e8e6:	0940      	lsrs	r0, r0, #5
    e8e8:	0080      	lsls	r0, r0, #2
    e8ea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e8ee:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e8f2:	4770      	bx	lr

0000e8f4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    e8f4:	f3ef 8110 	mrs	r1, PRIMASK
    e8f8:	b672      	cpsid	i
    e8fa:	7802      	ldrb	r2, [r0, #0]
    e8fc:	2a01      	cmp	r2, #1
    e8fe:	d001      	beq.n	e904 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    e900:	2201      	movs	r2, #1
    e902:	e000      	b.n	e906 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    e904:	2200      	movs	r2, #0
    e906:	2301      	movs	r3, #1
    e908:	7003      	strb	r3, [r0, #0]
    e90a:	b901      	cbnz	r1, e90e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    e90c:	b662      	cpsie	i
    e90e:	b10a      	cbz	r2, e914 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    e910:	2000      	movs	r0, #0
    e912:	4770      	bx	lr
    e914:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e918:	4770      	bx	lr

0000e91a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    e91a:	2100      	movs	r1, #0
    e91c:	7001      	strb	r1, [r0, #0]
    e91e:	4608      	mov	r0, r1
    e920:	4770      	bx	lr

0000e922 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    e922:	f3ef 8110 	mrs	r1, PRIMASK
    e926:	b672      	cpsid	i
    e928:	2200      	movs	r2, #0
    e92a:	7002      	strb	r2, [r0, #0]
    e92c:	b901      	cbnz	r1, e930 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    e92e:	b662      	cpsie	i
    e930:	2000      	movs	r0, #0
    e932:	4770      	bx	lr

0000e934 <mpsl_low_priority_process>:
    e934:	f7f4 bf36 	b.w	37a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000e938 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    e938:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e93c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e940:	280f      	cmp	r0, #15
    e942:	d001      	beq.n	e948 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    e944:	2000      	movs	r0, #0
    e946:	4770      	bx	lr
    e948:	2001      	movs	r0, #1
    e94a:	4770      	bx	lr

0000e94c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    e94c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e950:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e954:	280a      	cmp	r0, #10
    e956:	d001      	beq.n	e95c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    e958:	2000      	movs	r0, #0
    e95a:	4770      	bx	lr
    e95c:	2001      	movs	r0, #1
    e95e:	4770      	bx	lr

0000e960 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    e960:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e964:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e968:	280e      	cmp	r0, #14
    e96a:	d001      	beq.n	e970 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    e96c:	2000      	movs	r0, #0
    e96e:	4770      	bx	lr
    e970:	2001      	movs	r0, #1
    e972:	4770      	bx	lr

0000e974 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    e974:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e978:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e97c:	2810      	cmp	r0, #16
    e97e:	d001      	beq.n	e984 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    e980:	2000      	movs	r0, #0
    e982:	4770      	bx	lr
    e984:	2001      	movs	r0, #1
    e986:	4770      	bx	lr

0000e988 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    e988:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e98c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e990:	2806      	cmp	r0, #6
    e992:	d003      	beq.n	e99c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    e994:	1c40      	adds	r0, r0, #1
    e996:	d001      	beq.n	e99c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    e998:	2000      	movs	r0, #0
    e99a:	4770      	bx	lr
    e99c:	2001      	movs	r0, #1
    e99e:	4770      	bx	lr

0000e9a0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    e9a0:	b500      	push	{lr}
    e9a2:	f7ff fff1 	bl	e988 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    e9a6:	b148      	cbz	r0, e9bc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    e9a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e9ac:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    e9b0:	2806      	cmp	r0, #6
    e9b2:	d303      	bcc.n	e9bc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    e9b4:	1c40      	adds	r0, r0, #1
    e9b6:	d001      	beq.n	e9bc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    e9b8:	2001      	movs	r0, #1
    e9ba:	bd00      	pop	{pc}
    e9bc:	2000      	movs	r0, #0
    e9be:	bd00      	pop	{pc}

0000e9c0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    e9c0:	b500      	push	{lr}
    e9c2:	f7ff ffe1 	bl	e988 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    e9c6:	b138      	cbz	r0, e9d8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    e9c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e9cc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    e9d0:	2806      	cmp	r0, #6
    e9d2:	d303      	bcc.n	e9dc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    e9d4:	1c40      	adds	r0, r0, #1
    e9d6:	d001      	beq.n	e9dc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    e9d8:	2000      	movs	r0, #0
    e9da:	bd00      	pop	{pc}
    e9dc:	2001      	movs	r0, #1
    e9de:	bd00      	pop	{pc}

0000e9e0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    e9e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e9e4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e9e8:	280d      	cmp	r0, #13
    e9ea:	d001      	beq.n	e9f0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    e9ec:	2000      	movs	r0, #0
    e9ee:	4770      	bx	lr
    e9f0:	2001      	movs	r0, #1
    e9f2:	4770      	bx	lr

0000e9f4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    e9f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e9f8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    e9fc:	2808      	cmp	r0, #8
    e9fe:	d001      	beq.n	ea04 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    ea00:	2000      	movs	r0, #0
    ea02:	4770      	bx	lr
    ea04:	2001      	movs	r0, #1
    ea06:	4770      	bx	lr

0000ea08 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    ea08:	b510      	push	{r4, lr}
    ea0a:	b91a      	cbnz	r2, ea14 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0xc>
    ea0c:	2000      	movs	r0, #0
    ea0e:	bd10      	pop	{r4, pc}
    ea10:	1c40      	adds	r0, r0, #1
    ea12:	1c49      	adds	r1, r1, #1
    ea14:	1e52      	subs	r2, r2, #1
    ea16:	d003      	beq.n	ea20 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x18>
    ea18:	7803      	ldrb	r3, [r0, #0]
    ea1a:	780c      	ldrb	r4, [r1, #0]
    ea1c:	42a3      	cmp	r3, r4
    ea1e:	d0f7      	beq.n	ea10 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    ea20:	7800      	ldrb	r0, [r0, #0]
    ea22:	7809      	ldrb	r1, [r1, #0]
    ea24:	1a40      	subs	r0, r0, r1
    ea26:	bd10      	pop	{r4, pc}

0000ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ea28:	b530      	push	{r4, r5, lr}
    ea2a:	4603      	mov	r3, r0
    ea2c:	b2cc      	uxtb	r4, r1
    ea2e:	e004      	b.n	ea3a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12>
    ea30:	2a00      	cmp	r2, #0
    ea32:	d014      	beq.n	ea5e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x36>
    ea34:	f803 4b01 	strb.w	r4, [r3], #1
    ea38:	1e52      	subs	r2, r2, #1
    ea3a:	079d      	lsls	r5, r3, #30
    ea3c:	d1f8      	bne.n	ea30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x8>
    ea3e:	b2c9      	uxtb	r1, r1
    ea40:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ea44:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ea48:	e001      	b.n	ea4e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x26>
    ea4a:	c302      	stmia	r3!, {r1}
    ea4c:	1f12      	subs	r2, r2, #4
    ea4e:	2a04      	cmp	r2, #4
    ea50:	d2fb      	bcs.n	ea4a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ea52:	e002      	b.n	ea5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x32>
    ea54:	f803 4b01 	strb.w	r4, [r3], #1
    ea58:	1e52      	subs	r2, r2, #1
    ea5a:	2a00      	cmp	r2, #0
    ea5c:	d1fa      	bne.n	ea54 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x2c>
    ea5e:	bd30      	pop	{r4, r5, pc}
    ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea62:	4604      	mov	r4, r0
    ea64:	f100 0003 	add.w	r0, r0, #3
    ea68:	f020 0003 	bic.w	r0, r0, #3
    ea6c:	9000      	str	r0, [sp, #0]
    ea6e:	460e      	mov	r6, r1
    ea70:	780b      	ldrb	r3, [r1, #0]
    ea72:	7849      	ldrb	r1, [r1, #1]
    ea74:	0015      	movs	r5, r2
    ea76:	d000      	beq.n	ea7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>
    ea78:	2000      	movs	r0, #0
    ea7a:	2200      	movs	r2, #0
    ea7c:	f7f5 fa44 	bl	3f08 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    ea80:	9900      	ldr	r1, [sp, #0]
    ea82:	462a      	mov	r2, r5
    ea84:	4408      	add	r0, r1
    ea86:	9000      	str	r0, [sp, #0]
    ea88:	4631      	mov	r1, r6
    ea8a:	4668      	mov	r0, sp
    ea8c:	f000 f807 	bl	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    ea90:	9800      	ldr	r0, [sp, #0]
    ea92:	1dc0      	adds	r0, r0, #7
    ea94:	f020 0007 	bic.w	r0, r0, #7
    ea98:	9000      	str	r0, [sp, #0]
    ea9a:	1b00      	subs	r0, r0, r4
    ea9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eaa2:	4606      	mov	r6, r0
    eaa4:	460c      	mov	r4, r1
    eaa6:	7808      	ldrb	r0, [r1, #0]
    eaa8:	7849      	ldrb	r1, [r1, #1]
    eaaa:	2700      	movs	r7, #0
    eaac:	4408      	add	r0, r1
    eaae:	4691      	mov	r9, r2
    eab0:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    eab4:	463d      	mov	r5, r7
    eab6:	e00e      	b.n	ead6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76>
    eab8:	7963      	ldrb	r3, [r4, #5]
    eaba:	2b03      	cmp	r3, #3
    eabc:	d200      	bcs.n	eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>
    eabe:	2303      	movs	r3, #3
    eac0:	7922      	ldrb	r2, [r4, #4]
    eac2:	2a03      	cmp	r2, #3
    eac4:	d200      	bcs.n	eac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>
    eac6:	2203      	movs	r2, #3
    eac8:	78e1      	ldrb	r1, [r4, #3]
    eaca:	78a0      	ldrb	r0, [r4, #2]
    eacc:	f001 f8b6 	bl	fc3c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    ead0:	1c6d      	adds	r5, r5, #1
    ead2:	4407      	add	r7, r0
    ead4:	b2ed      	uxtb	r5, r5
    ead6:	4545      	cmp	r5, r8
    ead8:	d3ee      	bcc.n	eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
    eada:	6830      	ldr	r0, [r6, #0]
    eadc:	1cc0      	adds	r0, r0, #3
    eade:	f020 0003 	bic.w	r0, r0, #3
    eae2:	6030      	str	r0, [r6, #0]
    eae4:	f1b9 0f00 	cmp.w	r9, #0
    eae8:	d000      	beq.n	eaec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>
    eaea:	2000      	movs	r0, #0
    eaec:	463a      	mov	r2, r7
    eaee:	4641      	mov	r1, r8
    eaf0:	f7f5 fbb8 	bl	4264 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    eaf4:	6831      	ldr	r1, [r6, #0]
    eaf6:	4408      	add	r0, r1
    eaf8:	6030      	str	r0, [r6, #0]
    eafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000eafe <sdc_RNG_IRQHandler>:
    eafe:	f7f5 bd93 	b.w	4628 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>

0000eb02 <sdc_support_adv>:
    eb02:	b510      	push	{r4, lr}
    eb04:	f7fe f8f8 	bl	ccf8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    eb08:	2000      	movs	r0, #0
    eb0a:	bd10      	pop	{r4, pc}

0000eb0c <sdc_support_dle>:
    eb0c:	b510      	push	{r4, lr}
    eb0e:	f7fd fe09 	bl	c724 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    eb12:	2000      	movs	r0, #0
    eb14:	bd10      	pop	{r4, pc}

0000eb16 <sdc_support_le_2m_phy>:
    eb16:	b510      	push	{r4, lr}
    eb18:	f002 fe35 	bl	11786 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    eb1c:	2000      	movs	r0, #0
    eb1e:	bd10      	pop	{r4, pc}

0000eb20 <sdc_support_slave>:
    eb20:	b510      	push	{r4, lr}
    eb22:	f7fe f8fb 	bl	cd1c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    eb26:	2000      	movs	r0, #0
    eb28:	bd10      	pop	{r4, pc}

0000eb2a <sdc_soc_ecb_block_encrypt>:
    eb2a:	b530      	push	{r4, r5, lr}
    eb2c:	460d      	mov	r5, r1
    eb2e:	b08d      	sub	sp, #52	; 0x34
    eb30:	4614      	mov	r4, r2
    eb32:	4601      	mov	r1, r0
    eb34:	2210      	movs	r2, #16
    eb36:	4668      	mov	r0, sp
    eb38:	f7f4 fe9a 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb3c:	2210      	movs	r2, #16
    eb3e:	4629      	mov	r1, r5
    eb40:	a804      	add	r0, sp, #16
    eb42:	f7f4 fe95 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb46:	4668      	mov	r0, sp
    eb48:	f7f5 fca8 	bl	449c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    eb4c:	b118      	cbz	r0, eb56 <sdc_soc_ecb_block_encrypt+0x2c>
    eb4e:	f06f 0015 	mvn.w	r0, #21
    eb52:	b00d      	add	sp, #52	; 0x34
    eb54:	bd30      	pop	{r4, r5, pc}
    eb56:	2210      	movs	r2, #16
    eb58:	4620      	mov	r0, r4
    eb5a:	a908      	add	r1, sp, #32
    eb5c:	f7f4 fe88 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb60:	2000      	movs	r0, #0
    eb62:	e7f6      	b.n	eb52 <sdc_soc_ecb_block_encrypt+0x28>

0000eb64 <sdc_soc_rand_vector_get>:
    eb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb68:	460c      	mov	r4, r1
    eb6a:	4605      	mov	r5, r0
    eb6c:	f001 f8e8 	bl	fd40 <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>
    eb70:	4607      	mov	r7, r0
    eb72:	e00c      	b.n	eb8e <sdc_soc_rand_vector_get+0x2a>
    eb74:	42bc      	cmp	r4, r7
    eb76:	d201      	bcs.n	eb7c <sdc_soc_rand_vector_get+0x18>
    eb78:	4620      	mov	r0, r4
    eb7a:	e000      	b.n	eb7e <sdc_soc_rand_vector_get+0x1a>
    eb7c:	4638      	mov	r0, r7
    eb7e:	b2c6      	uxtb	r6, r0
    eb80:	4631      	mov	r1, r6
    eb82:	4628      	mov	r0, r5
    eb84:	f7f5 fe14 	bl	47b0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    eb88:	1ba0      	subs	r0, r4, r6
    eb8a:	4435      	add	r5, r6
    eb8c:	b284      	uxth	r4, r0
    eb8e:	2c00      	cmp	r4, #0
    eb90:	d1f0      	bne.n	eb74 <sdc_soc_rand_vector_get+0x10>
    eb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eb96 <sdc_soc_rand_vector_poll>:
    eb96:	b570      	push	{r4, r5, r6, lr}
    eb98:	460c      	mov	r4, r1
    eb9a:	4605      	mov	r5, r0
    eb9c:	f7f5 fdfa 	bl	4794 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>
    eba0:	42a0      	cmp	r0, r4
    eba2:	d300      	bcc.n	eba6 <sdc_soc_rand_vector_poll+0x10>
    eba4:	4620      	mov	r0, r4
    eba6:	b2c4      	uxtb	r4, r0
    eba8:	4621      	mov	r1, r4
    ebaa:	4628      	mov	r0, r5
    ebac:	f7f5 fdf8 	bl	47a0 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    ebb0:	2800      	cmp	r0, #0
    ebb2:	d000      	beq.n	ebb6 <sdc_soc_rand_vector_poll+0x20>
    ebb4:	4620      	mov	r0, r4
    ebb6:	bd70      	pop	{r4, r5, r6, pc}

0000ebb8 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    ebb8:	2000      	movs	r0, #0
    ebba:	4770      	bx	lr

0000ebbc <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    ebbc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ebbe:	4604      	mov	r4, r0
    ebc0:	1d01      	adds	r1, r0, #4
    ebc2:	4668      	mov	r0, sp
    ebc4:	f7f7 ff36 	bl	6a34 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    ebc8:	2800      	cmp	r0, #0
    ebca:	d004      	beq.n	ebd6 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    ebcc:	4669      	mov	r1, sp
    ebce:	4620      	mov	r0, r4
    ebd0:	f000 f825 	bl	ec1e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    ebd4:	2001      	movs	r0, #1
    ebd6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ebd8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    ebd8:	b50e      	push	{r1, r2, r3, lr}
    ebda:	4601      	mov	r1, r0
    ebdc:	4668      	mov	r0, sp
    ebde:	f000 f804 	bl	ebea <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    ebe2:	4668      	mov	r0, sp
    ebe4:	f7f7 ffda 	bl	6b9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    ebe8:	bd0e      	pop	{r1, r2, r3, pc}

0000ebea <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    ebea:	880a      	ldrh	r2, [r1, #0]
    ebec:	f3c2 020b 	ubfx	r2, r2, #0, #12
    ebf0:	8002      	strh	r2, [r0, #0]
    ebf2:	884a      	ldrh	r2, [r1, #2]
    ebf4:	8042      	strh	r2, [r0, #2]
    ebf6:	784a      	ldrb	r2, [r1, #1]
    ebf8:	0993      	lsrs	r3, r2, #6
    ebfa:	2200      	movs	r2, #0
    ebfc:	7142      	strb	r2, [r0, #5]
    ebfe:	784b      	ldrb	r3, [r1, #1]
    ec00:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ec04:	b11b      	cbz	r3, ec0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ec06:	2b01      	cmp	r3, #1
    ec08:	d005      	beq.n	ec16 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    ec0a:	2b02      	cmp	r3, #2
    ec0c:	d005      	beq.n	ec1a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    ec0e:	7102      	strb	r2, [r0, #4]
    ec10:	1d09      	adds	r1, r1, #4
    ec12:	6081      	str	r1, [r0, #8]
    ec14:	4770      	bx	lr
    ec16:	2201      	movs	r2, #1
    ec18:	e7f9      	b.n	ec0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ec1a:	2202      	movs	r2, #2
    ec1c:	e7f7      	b.n	ec0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ec1e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ec1e:	b510      	push	{r4, lr}
    ec20:	460c      	mov	r4, r1
    ec22:	7809      	ldrb	r1, [r1, #0]
    ec24:	7001      	strb	r1, [r0, #0]
    ec26:	7841      	ldrb	r1, [r0, #1]
    ec28:	f021 010f 	bic.w	r1, r1, #15
    ec2c:	7041      	strb	r1, [r0, #1]
    ec2e:	8822      	ldrh	r2, [r4, #0]
    ec30:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ec34:	4311      	orrs	r1, r2
    ec36:	7041      	strb	r1, [r0, #1]
    ec38:	78a2      	ldrb	r2, [r4, #2]
    ec3a:	7082      	strb	r2, [r0, #2]
    ec3c:	8862      	ldrh	r2, [r4, #2]
    ec3e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    ec42:	0a12      	lsrs	r2, r2, #8
    ec44:	70c2      	strb	r2, [r0, #3]
    ec46:	7041      	strb	r1, [r0, #1]
    ec48:	7922      	ldrb	r2, [r4, #4]
    ec4a:	f002 0203 	and.w	r2, r2, #3
    ec4e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ec52:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    ec56:	7041      	strb	r1, [r0, #1]
    ec58:	7962      	ldrb	r2, [r4, #5]
    ec5a:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ec5e:	7041      	strb	r1, [r0, #1]
    ec60:	68a1      	ldr	r1, [r4, #8]
    ec62:	1d02      	adds	r2, r0, #4
    ec64:	4291      	cmp	r1, r2
    ec66:	d006      	beq.n	ec76 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    ec68:	8862      	ldrh	r2, [r4, #2]
    ec6a:	2afb      	cmp	r2, #251	; 0xfb
    ec6c:	d300      	bcc.n	ec70 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    ec6e:	22fb      	movs	r2, #251	; 0xfb
    ec70:	1d00      	adds	r0, r0, #4
    ec72:	f7f4 fdfd 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec76:	78a0      	ldrb	r0, [r4, #2]
    ec78:	1d00      	adds	r0, r0, #4
    ec7a:	b2c0      	uxtb	r0, r0
    ec7c:	bd10      	pop	{r4, pc}

0000ec7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ec7e:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ec82:	4604      	mov	r4, r0
    ec84:	f891 c000 	ldrb.w	ip, [r1]
    ec88:	2000      	movs	r0, #0
    ec8a:	260c      	movs	r6, #12
    ec8c:	223e      	movs	r2, #62	; 0x3e
    ec8e:	2512      	movs	r5, #18
    ec90:	23ff      	movs	r3, #255	; 0xff
    ec92:	f04f 0b14 	mov.w	fp, #20
    ec96:	f04f 0e13 	mov.w	lr, #19
    ec9a:	f04f 0a05 	mov.w	sl, #5
    ec9e:	f104 070d 	add.w	r7, r4, #13
    eca2:	f04f 0911 	mov.w	r9, #17
    eca6:	f1bc 0f20 	cmp.w	ip, #32
    ecaa:	d272      	bcs.n	ed92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    ecac:	e8df f00c 	tbb	[pc, ip]
    ecb0:	29271071 	.word	0x29271071
    ecb4:	a46dfc2e 	.word	0xa46dfc2e
    ecb8:	fbdac0ae 	.word	0xfbdac0ae
    ecbc:	f7f8f9fa 	.word	0xf7f8f9fa
    ecc0:	507171f6 	.word	0x507171f6
    ecc4:	f3f4f572 	.word	0xf3f4f572
    ecc8:	eff0f1f2 	.word	0xeff0f1f2
    eccc:	ec71edee 	.word	0xec71edee
    ecd0:	7026      	strb	r6, [r4, #0]
    ecd2:	7908      	ldrb	r0, [r1, #4]
    ecd4:	70a0      	strb	r0, [r4, #2]
    ecd6:	7948      	ldrb	r0, [r1, #5]
    ecd8:	70e0      	strb	r0, [r4, #3]
    ecda:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ecde:	0a00      	lsrs	r0, r0, #8
    ece0:	7120      	strb	r0, [r4, #4]
    ece2:	79c8      	ldrb	r0, [r1, #7]
    ece4:	7160      	strb	r0, [r4, #5]
    ece6:	7a08      	ldrb	r0, [r1, #8]
    ece8:	71a0      	strb	r0, [r4, #6]
    ecea:	8908      	ldrh	r0, [r1, #8]
    ecec:	0a00      	lsrs	r0, r0, #8
    ecee:	71e0      	strb	r0, [r4, #7]
    ecf0:	7a88      	ldrb	r0, [r1, #10]
    ecf2:	7220      	strb	r0, [r4, #8]
    ecf4:	8948      	ldrh	r0, [r1, #10]
    ecf6:	0a00      	lsrs	r0, r0, #8
    ecf8:	7260      	strb	r0, [r4, #9]
    ecfa:	2008      	movs	r0, #8
    ecfc:	e153      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ecfe:	2010      	movs	r0, #16
    ed00:	e000      	b.n	ed04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    ed02:	201a      	movs	r0, #26
    ed04:	7020      	strb	r0, [r4, #0]
    ed06:	7908      	ldrb	r0, [r1, #4]
    ed08:	70a0      	strb	r0, [r4, #2]
    ed0a:	e154      	b.n	efb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    ed0c:	7022      	strb	r2, [r4, #0]
    ed0e:	2002      	movs	r0, #2
    ed10:	70a0      	strb	r0, [r4, #2]
    ed12:	7908      	ldrb	r0, [r1, #4]
    ed14:	70e0      	strb	r0, [r4, #3]
    ed16:	7b88      	ldrb	r0, [r1, #14]
    ed18:	7120      	strb	r0, [r4, #4]
    ed1a:	7948      	ldrb	r0, [r1, #5]
    ed1c:	7160      	strb	r0, [r4, #5]
    ed1e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ed22:	f8c4 0006 	str.w	r0, [r4, #6]
    ed26:	8948      	ldrh	r0, [r1, #10]
    ed28:	8160      	strh	r0, [r4, #10]
    ed2a:	7b08      	ldrb	r0, [r1, #12]
    ed2c:	7320      	strb	r0, [r4, #12]
    ed2e:	7b0e      	ldrb	r6, [r1, #12]
    ed30:	1d0d      	adds	r5, r1, #4
    ed32:	2e1f      	cmp	r6, #31
    ed34:	d300      	bcc.n	ed38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    ed36:	261f      	movs	r6, #31
    ed38:	4638      	mov	r0, r7
    ed3a:	4632      	mov	r2, r6
    ed3c:	f105 010b 	add.w	r1, r5, #11
    ed40:	f7f4 fd96 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed44:	360d      	adds	r6, #13
    ed46:	7a69      	ldrb	r1, [r5, #9]
    ed48:	55a1      	strb	r1, [r4, r6]
    ed4a:	1e76      	subs	r6, r6, #1
    ed4c:	b2f0      	uxtb	r0, r6
    ed4e:	e128      	b.n	efa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    ed50:	7022      	strb	r2, [r4, #0]
    ed52:	200b      	movs	r0, #11
    ed54:	70a0      	strb	r0, [r4, #2]
    ed56:	7908      	ldrb	r0, [r1, #4]
    ed58:	70e0      	strb	r0, [r4, #3]
    ed5a:	7948      	ldrb	r0, [r1, #5]
    ed5c:	7120      	strb	r0, [r4, #4]
    ed5e:	7988      	ldrb	r0, [r1, #6]
    ed60:	7160      	strb	r0, [r4, #5]
    ed62:	f8d1 0007 	ldr.w	r0, [r1, #7]
    ed66:	f8c4 0006 	str.w	r0, [r4, #6]
    ed6a:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    ed6e:	8160      	strh	r0, [r4, #10]
    ed70:	7b48      	ldrb	r0, [r1, #13]
    ed72:	7320      	strb	r0, [r4, #12]
    ed74:	f8d1 000e 	ldr.w	r0, [r1, #14]
    ed78:	f8c4 000d 	str.w	r0, [r4, #13]
    ed7c:	8a48      	ldrh	r0, [r1, #18]
    ed7e:	f8a4 0011 	strh.w	r0, [r4, #17]
    ed82:	7d08      	ldrb	r0, [r1, #20]
    ed84:	74e0      	strb	r0, [r4, #19]
    ed86:	4628      	mov	r0, r5
    ed88:	e10d      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ed8a:	4620      	mov	r0, r4
    ed8c:	f000 f98d 	bl	f0aa <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    ed90:	e107      	b.n	efa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    ed92:	e10b      	b.n	efac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    ed94:	7022      	strb	r2, [r4, #0]
    ed96:	200a      	movs	r0, #10
    ed98:	70a0      	strb	r0, [r4, #2]
    ed9a:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    ed9e:	70e0      	strb	r0, [r4, #3]
    eda0:	7888      	ldrb	r0, [r1, #2]
    eda2:	7120      	strb	r0, [r4, #4]
    eda4:	8848      	ldrh	r0, [r1, #2]
    eda6:	0a00      	lsrs	r0, r0, #8
    eda8:	7160      	strb	r0, [r4, #5]
    edaa:	7908      	ldrb	r0, [r1, #4]
    edac:	71a0      	strb	r0, [r4, #6]
    edae:	7948      	ldrb	r0, [r1, #5]
    edb0:	71e0      	strb	r0, [r4, #7]
    edb2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    edb6:	60a0      	str	r0, [r4, #8]
    edb8:	8948      	ldrh	r0, [r1, #10]
    edba:	81a0      	strh	r0, [r4, #12]
    edbc:	68c8      	ldr	r0, [r1, #12]
    edbe:	f8c4 000e 	str.w	r0, [r4, #14]
    edc2:	8a08      	ldrh	r0, [r1, #16]
    edc4:	8260      	strh	r0, [r4, #18]
    edc6:	f8d1 0012 	ldr.w	r0, [r1, #18]
    edca:	6160      	str	r0, [r4, #20]
    edcc:	8ac8      	ldrh	r0, [r1, #22]
    edce:	8320      	strh	r0, [r4, #24]
    edd0:	7e08      	ldrb	r0, [r1, #24]
    edd2:	76a0      	strb	r0, [r4, #26]
    edd4:	8b08      	ldrh	r0, [r1, #24]
    edd6:	0a00      	lsrs	r0, r0, #8
    edd8:	76e0      	strb	r0, [r4, #27]
    edda:	7e88      	ldrb	r0, [r1, #26]
    eddc:	7720      	strb	r0, [r4, #28]
    edde:	8b48      	ldrh	r0, [r1, #26]
    ede0:	0a00      	lsrs	r0, r0, #8
    ede2:	7760      	strb	r0, [r4, #29]
    ede4:	7f08      	ldrb	r0, [r1, #28]
    ede6:	77a0      	strb	r0, [r4, #30]
    ede8:	8b88      	ldrh	r0, [r1, #28]
    edea:	0a00      	lsrs	r0, r0, #8
    edec:	77e0      	strb	r0, [r4, #31]
    edee:	7f88      	ldrb	r0, [r1, #30]
    edf0:	f884 0020 	strb.w	r0, [r4, #32]
    edf4:	201f      	movs	r0, #31
    edf6:	e0d6      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    edf8:	7022      	strb	r2, [r4, #0]
    edfa:	f884 b002 	strb.w	fp, [r4, #2]
    edfe:	7908      	ldrb	r0, [r1, #4]
    ee00:	70e0      	strb	r0, [r4, #3]
    ee02:	8888      	ldrh	r0, [r1, #4]
    ee04:	0a00      	lsrs	r0, r0, #8
    ee06:	7120      	strb	r0, [r4, #4]
    ee08:	7988      	ldrb	r0, [r1, #6]
    ee0a:	e0ed      	b.n	efe8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ee0c:	7022      	strb	r2, [r4, #0]
    ee0e:	2004      	movs	r0, #4
    ee10:	70a0      	strb	r0, [r4, #2]
    ee12:	7908      	ldrb	r0, [r1, #4]
    ee14:	70e0      	strb	r0, [r4, #3]
    ee16:	7988      	ldrb	r0, [r1, #6]
    ee18:	7120      	strb	r0, [r4, #4]
    ee1a:	88c8      	ldrh	r0, [r1, #6]
    ee1c:	0a00      	lsrs	r0, r0, #8
    ee1e:	7160      	strb	r0, [r4, #5]
    ee20:	6888      	ldr	r0, [r1, #8]
    ee22:	f8c4 0006 	str.w	r0, [r4, #6]
    ee26:	68c8      	ldr	r0, [r1, #12]
    ee28:	f8c4 000a 	str.w	r0, [r4, #10]
    ee2c:	200c      	movs	r0, #12
    ee2e:	e0ba      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ee30:	7022      	strb	r2, [r4, #0]
    ee32:	2003      	movs	r0, #3
    ee34:	70a0      	strb	r0, [r4, #2]
    ee36:	7908      	ldrb	r0, [r1, #4]
    ee38:	70e0      	strb	r0, [r4, #3]
    ee3a:	7988      	ldrb	r0, [r1, #6]
    ee3c:	7120      	strb	r0, [r4, #4]
    ee3e:	88c8      	ldrh	r0, [r1, #6]
    ee40:	0a00      	lsrs	r0, r0, #8
    ee42:	7160      	strb	r0, [r4, #5]
    ee44:	7a08      	ldrb	r0, [r1, #8]
    ee46:	71a0      	strb	r0, [r4, #6]
    ee48:	8908      	ldrh	r0, [r1, #8]
    ee4a:	0a00      	lsrs	r0, r0, #8
    ee4c:	71e0      	strb	r0, [r4, #7]
    ee4e:	7a88      	ldrb	r0, [r1, #10]
    ee50:	7220      	strb	r0, [r4, #8]
    ee52:	8948      	ldrh	r0, [r1, #10]
    ee54:	0a00      	lsrs	r0, r0, #8
    ee56:	7260      	strb	r0, [r4, #9]
    ee58:	7b08      	ldrb	r0, [r1, #12]
    ee5a:	72a0      	strb	r0, [r4, #10]
    ee5c:	8988      	ldrh	r0, [r1, #12]
    ee5e:	0a00      	lsrs	r0, r0, #8
    ee60:	72e0      	strb	r0, [r4, #11]
    ee62:	e120      	b.n	f0a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    ee64:	7022      	strb	r2, [r4, #0]
    ee66:	f884 a002 	strb.w	sl, [r4, #2]
    ee6a:	7908      	ldrb	r0, [r1, #4]
    ee6c:	70e0      	strb	r0, [r4, #3]
    ee6e:	8888      	ldrh	r0, [r1, #4]
    ee70:	0a00      	lsrs	r0, r0, #8
    ee72:	7120      	strb	r0, [r4, #4]
    ee74:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ee78:	f8c4 0005 	str.w	r0, [r4, #5]
    ee7c:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ee80:	f8c4 0009 	str.w	r0, [r4, #9]
    ee84:	89c8      	ldrh	r0, [r1, #14]
    ee86:	e010      	b.n	eeaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    ee88:	e0fa      	b.n	f080 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    ee8a:	e0ce      	b.n	f02a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    ee8c:	e0af      	b.n	efee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    ee8e:	e0da      	b.n	f046 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    ee90:	e0e8      	b.n	f064 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    ee92:	e0a1      	b.n	efd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    ee94:	e08c      	b.n	efb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    ee96:	e090      	b.n	efba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    ee98:	e033      	b.n	ef02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    ee9a:	e02f      	b.n	eefc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    ee9c:	e043      	b.n	ef26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    ee9e:	e03d      	b.n	ef1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    eea0:	e021      	b.n	eee6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    eea2:	e015      	b.n	eed0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    eea4:	e008      	b.n	eeb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    eea6:	e004      	b.n	eeb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    eea8:	e046      	b.n	ef38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    eeaa:	f8a4 000d 	strh.w	r0, [r4, #13]
    eeae:	200d      	movs	r0, #13
    eeb0:	e079      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    eeb2:	f884 9000 	strb.w	r9, [r4]
    eeb6:	e038      	b.n	ef2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    eeb8:	f884 a000 	strb.w	sl, [r4]
    eebc:	7908      	ldrb	r0, [r1, #4]
    eebe:	70a0      	strb	r0, [r4, #2]
    eec0:	7948      	ldrb	r0, [r1, #5]
    eec2:	70e0      	strb	r0, [r4, #3]
    eec4:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    eec8:	0a00      	lsrs	r0, r0, #8
    eeca:	7120      	strb	r0, [r4, #4]
    eecc:	79c8      	ldrb	r0, [r1, #7]
    eece:	e08b      	b.n	efe8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    eed0:	2008      	movs	r0, #8
    eed2:	7020      	strb	r0, [r4, #0]
    eed4:	7908      	ldrb	r0, [r1, #4]
    eed6:	70a0      	strb	r0, [r4, #2]
    eed8:	7988      	ldrb	r0, [r1, #6]
    eeda:	70e0      	strb	r0, [r4, #3]
    eedc:	88c8      	ldrh	r0, [r1, #6]
    eede:	0a00      	lsrs	r0, r0, #8
    eee0:	7120      	strb	r0, [r4, #4]
    eee2:	7a08      	ldrb	r0, [r1, #8]
    eee4:	e080      	b.n	efe8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    eee6:	2030      	movs	r0, #48	; 0x30
    eee8:	7020      	strb	r0, [r4, #0]
    eeea:	7908      	ldrb	r0, [r1, #4]
    eeec:	70a0      	strb	r0, [r4, #2]
    eeee:	7988      	ldrb	r0, [r1, #6]
    eef0:	70e0      	strb	r0, [r4, #3]
    eef2:	88c8      	ldrh	r0, [r1, #6]
    eef4:	0a00      	lsrs	r0, r0, #8
    eef6:	7120      	strb	r0, [r4, #4]
    eef8:	2003      	movs	r0, #3
    eefa:	e054      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    eefc:	7022      	strb	r2, [r4, #0]
    eefe:	2007      	movs	r0, #7
    ef00:	e077      	b.n	eff2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    ef02:	7022      	strb	r2, [r4, #0]
    ef04:	70a6      	strb	r6, [r4, #2]
    ef06:	7908      	ldrb	r0, [r1, #4]
    ef08:	70e0      	strb	r0, [r4, #3]
    ef0a:	7988      	ldrb	r0, [r1, #6]
    ef0c:	7120      	strb	r0, [r4, #4]
    ef0e:	88c8      	ldrh	r0, [r1, #6]
    ef10:	0a00      	lsrs	r0, r0, #8
    ef12:	7160      	strb	r0, [r4, #5]
    ef14:	7a08      	ldrb	r0, [r1, #8]
    ef16:	71a0      	strb	r0, [r4, #6]
    ef18:	7a48      	ldrb	r0, [r1, #9]
    ef1a:	e05a      	b.n	efd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    ef1c:	4620      	mov	r0, r4
    ef1e:	1d09      	adds	r1, r1, #4
    ef20:	f7f4 ff06 	bl	3d30 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
    ef24:	e03d      	b.n	efa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    ef26:	2057      	movs	r0, #87	; 0x57
    ef28:	7020      	strb	r0, [r4, #0]
    ef2a:	7908      	ldrb	r0, [r1, #4]
    ef2c:	70a0      	strb	r0, [r4, #2]
    ef2e:	8888      	ldrh	r0, [r1, #4]
    ef30:	0a00      	lsrs	r0, r0, #8
    ef32:	70e0      	strb	r0, [r4, #3]
    ef34:	2002      	movs	r0, #2
    ef36:	e036      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ef38:	7022      	strb	r2, [r4, #0]
    ef3a:	220d      	movs	r2, #13
    ef3c:	70a2      	strb	r2, [r4, #2]
    ef3e:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    ef42:	70e2      	strb	r2, [r4, #3]
    ef44:	894a      	ldrh	r2, [r1, #10]
    ef46:	80a2      	strh	r2, [r4, #4]
    ef48:	784a      	ldrb	r2, [r1, #1]
    ef4a:	71a2      	strb	r2, [r4, #6]
    ef4c:	f8d1 2002 	ldr.w	r2, [r1, #2]
    ef50:	f8c4 2007 	str.w	r2, [r4, #7]
    ef54:	88ca      	ldrh	r2, [r1, #6]
    ef56:	f8a4 200b 	strh.w	r2, [r4, #11]
    ef5a:	7b0a      	ldrb	r2, [r1, #12]
    ef5c:	4620      	mov	r0, r4
    ef5e:	7362      	strb	r2, [r4, #13]
    ef60:	7b4a      	ldrb	r2, [r1, #13]
    ef62:	7382      	strb	r2, [r0, #14]
    ef64:	7b8a      	ldrb	r2, [r1, #14]
    ef66:	73c2      	strb	r2, [r0, #15]
    ef68:	7eca      	ldrb	r2, [r1, #27]
    ef6a:	7402      	strb	r2, [r0, #16]
    ef6c:	7a4a      	ldrb	r2, [r1, #9]
    ef6e:	7442      	strb	r2, [r0, #17]
    ef70:	8a4a      	ldrh	r2, [r1, #18]
    ef72:	8242      	strh	r2, [r0, #18]
    ef74:	7d0a      	ldrb	r2, [r1, #20]
    ef76:	7502      	strb	r2, [r0, #20]
    ef78:	f8d1 2015 	ldr.w	r2, [r1, #21]
    ef7c:	f8c0 2015 	str.w	r2, [r0, #21]
    ef80:	f8b1 2019 	ldrh.w	r2, [r1, #25]
    ef84:	f8a0 2019 	strh.w	r2, [r0, #25]
    ef88:	7a0a      	ldrb	r2, [r1, #8]
    ef8a:	76c2      	strb	r2, [r0, #27]
    ef8c:	7a0d      	ldrb	r5, [r1, #8]
    ef8e:	2de5      	cmp	r5, #229	; 0xe5
    ef90:	d300      	bcc.n	ef94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    ef92:	25e5      	movs	r5, #229	; 0xe5
    ef94:	462a      	mov	r2, r5
    ef96:	301c      	adds	r0, #28
    ef98:	311d      	adds	r1, #29
    ef9a:	f7f4 fc69 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ef9e:	351a      	adds	r5, #26
    efa0:	b2e8      	uxtb	r0, r5
    efa2:	2800      	cmp	r0, #0
    efa4:	d002      	beq.n	efac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    efa6:	7060      	strb	r0, [r4, #1]
    efa8:	1c80      	adds	r0, r0, #2
    efaa:	b2c0      	uxtb	r0, r0
    efac:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    efb0:	7022      	strb	r2, [r4, #0]
    efb2:	f884 9002 	strb.w	r9, [r4, #2]
    efb6:	2001      	movs	r0, #1
    efb8:	e7f5      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    efba:	7022      	strb	r2, [r4, #0]
    efbc:	70a5      	strb	r5, [r4, #2]
    efbe:	7908      	ldrb	r0, [r1, #4]
    efc0:	70e0      	strb	r0, [r4, #3]
    efc2:	7948      	ldrb	r0, [r1, #5]
    efc4:	7120      	strb	r0, [r4, #4]
    efc6:	7988      	ldrb	r0, [r1, #6]
    efc8:	7160      	strb	r0, [r4, #5]
    efca:	88c8      	ldrh	r0, [r1, #6]
    efcc:	0a00      	lsrs	r0, r0, #8
    efce:	71a0      	strb	r0, [r4, #6]
    efd0:	7a08      	ldrb	r0, [r1, #8]
    efd2:	71e0      	strb	r0, [r4, #7]
    efd4:	2006      	movs	r0, #6
    efd6:	e7e6      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    efd8:	7023      	strb	r3, [r4, #0]
    efda:	20a1      	movs	r0, #161	; 0xa1
    efdc:	70a0      	strb	r0, [r4, #2]
    efde:	7908      	ldrb	r0, [r1, #4]
    efe0:	70e0      	strb	r0, [r4, #3]
    efe2:	7948      	ldrb	r0, [r1, #5]
    efe4:	7120      	strb	r0, [r4, #4]
    efe6:	2000      	movs	r0, #0
    efe8:	7160      	strb	r0, [r4, #5]
    efea:	2004      	movs	r0, #4
    efec:	e7db      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    efee:	7023      	strb	r3, [r4, #0]
    eff0:	20a2      	movs	r0, #162	; 0xa2
    eff2:	70a0      	strb	r0, [r4, #2]
    eff4:	7908      	ldrb	r0, [r1, #4]
    eff6:	70e0      	strb	r0, [r4, #3]
    eff8:	8888      	ldrh	r0, [r1, #4]
    effa:	0a00      	lsrs	r0, r0, #8
    effc:	7120      	strb	r0, [r4, #4]
    effe:	7988      	ldrb	r0, [r1, #6]
    f000:	7160      	strb	r0, [r4, #5]
    f002:	88c8      	ldrh	r0, [r1, #6]
    f004:	0a00      	lsrs	r0, r0, #8
    f006:	71a0      	strb	r0, [r4, #6]
    f008:	7a08      	ldrb	r0, [r1, #8]
    f00a:	71e0      	strb	r0, [r4, #7]
    f00c:	8908      	ldrh	r0, [r1, #8]
    f00e:	0a00      	lsrs	r0, r0, #8
    f010:	7220      	strb	r0, [r4, #8]
    f012:	7a88      	ldrb	r0, [r1, #10]
    f014:	7260      	strb	r0, [r4, #9]
    f016:	8948      	ldrh	r0, [r1, #10]
    f018:	0a00      	lsrs	r0, r0, #8
    f01a:	72a0      	strb	r0, [r4, #10]
    f01c:	7b08      	ldrb	r0, [r1, #12]
    f01e:	72e0      	strb	r0, [r4, #11]
    f020:	8988      	ldrh	r0, [r1, #12]
    f022:	0a00      	lsrs	r0, r0, #8
    f024:	7320      	strb	r0, [r4, #12]
    f026:	200b      	movs	r0, #11
    f028:	e7bd      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f02a:	7023      	strb	r3, [r4, #0]
    f02c:	20a3      	movs	r0, #163	; 0xa3
    f02e:	70a0      	strb	r0, [r4, #2]
    f030:	7908      	ldrb	r0, [r1, #4]
    f032:	70e0      	strb	r0, [r4, #3]
    f034:	8888      	ldrh	r0, [r1, #4]
    f036:	0a00      	lsrs	r0, r0, #8
    f038:	7120      	strb	r0, [r4, #4]
    f03a:	7988      	ldrb	r0, [r1, #6]
    f03c:	7160      	strb	r0, [r4, #5]
    f03e:	79c8      	ldrb	r0, [r1, #7]
    f040:	71a0      	strb	r0, [r4, #6]
    f042:	2005      	movs	r0, #5
    f044:	e7af      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f046:	7022      	strb	r2, [r4, #0]
    f048:	f884 e002 	strb.w	lr, [r4, #2]
    f04c:	7908      	ldrb	r0, [r1, #4]
    f04e:	70e0      	strb	r0, [r4, #3]
    f050:	7948      	ldrb	r0, [r1, #5]
    f052:	7120      	strb	r0, [r4, #4]
    f054:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f058:	f8c4 0005 	str.w	r0, [r4, #5]
    f05c:	8948      	ldrh	r0, [r1, #10]
    f05e:	f8a4 0009 	strh.w	r0, [r4, #9]
    f062:	e020      	b.n	f0a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    f064:	7023      	strb	r3, [r4, #0]
    f066:	20a4      	movs	r0, #164	; 0xa4
    f068:	70a0      	strb	r0, [r4, #2]
    f06a:	7908      	ldrb	r0, [r1, #4]
    f06c:	70e0      	strb	r0, [r4, #3]
    f06e:	8888      	ldrh	r0, [r1, #4]
    f070:	0a00      	lsrs	r0, r0, #8
    f072:	7120      	strb	r0, [r4, #4]
    f074:	7988      	ldrb	r0, [r1, #6]
    f076:	7160      	strb	r0, [r4, #5]
    f078:	79c8      	ldrb	r0, [r1, #7]
    f07a:	71a0      	strb	r0, [r4, #6]
    f07c:	2007      	movs	r0, #7
    f07e:	e792      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f080:	7023      	strb	r3, [r4, #0]
    f082:	2080      	movs	r0, #128	; 0x80
    f084:	70a0      	strb	r0, [r4, #2]
    f086:	888a      	ldrh	r2, [r1, #4]
    f088:	f8a4 2003 	strh.w	r2, [r4, #3]
    f08c:	88ca      	ldrh	r2, [r1, #6]
    f08e:	f8a4 2005 	strh.w	r2, [r4, #5]
    f092:	7a0a      	ldrb	r2, [r1, #8]
    f094:	71e2      	strb	r2, [r4, #7]
    f096:	7a4a      	ldrb	r2, [r1, #9]
    f098:	8122      	strh	r2, [r4, #8]
    f09a:	7a8a      	ldrb	r2, [r1, #10]
    f09c:	72a2      	strb	r2, [r4, #10]
    f09e:	7ac9      	ldrb	r1, [r1, #11]
    f0a0:	f001 0101 	and.w	r1, r1, #1
    f0a4:	72e1      	strb	r1, [r4, #11]
    f0a6:	200a      	movs	r0, #10
    f0a8:	e77d      	b.n	efa6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>

0000f0aa <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    f0aa:	223e      	movs	r2, #62	; 0x3e
    f0ac:	7002      	strb	r2, [r0, #0]
    f0ae:	2201      	movs	r2, #1
    f0b0:	7082      	strb	r2, [r0, #2]
    f0b2:	790a      	ldrb	r2, [r1, #4]
    f0b4:	70c2      	strb	r2, [r0, #3]
    f0b6:	798a      	ldrb	r2, [r1, #6]
    f0b8:	7102      	strb	r2, [r0, #4]
    f0ba:	88ca      	ldrh	r2, [r1, #6]
    f0bc:	0a12      	lsrs	r2, r2, #8
    f0be:	7142      	strb	r2, [r0, #5]
    f0c0:	7a0a      	ldrb	r2, [r1, #8]
    f0c2:	7182      	strb	r2, [r0, #6]
    f0c4:	7a4a      	ldrb	r2, [r1, #9]
    f0c6:	71c2      	strb	r2, [r0, #7]
    f0c8:	f8d1 200a 	ldr.w	r2, [r1, #10]
    f0cc:	6082      	str	r2, [r0, #8]
    f0ce:	89ca      	ldrh	r2, [r1, #14]
    f0d0:	8182      	strh	r2, [r0, #12]
    f0d2:	7c0a      	ldrb	r2, [r1, #16]
    f0d4:	7382      	strb	r2, [r0, #14]
    f0d6:	8a0a      	ldrh	r2, [r1, #16]
    f0d8:	0a12      	lsrs	r2, r2, #8
    f0da:	73c2      	strb	r2, [r0, #15]
    f0dc:	7c8a      	ldrb	r2, [r1, #18]
    f0de:	7402      	strb	r2, [r0, #16]
    f0e0:	8a4a      	ldrh	r2, [r1, #18]
    f0e2:	0a12      	lsrs	r2, r2, #8
    f0e4:	7442      	strb	r2, [r0, #17]
    f0e6:	7d0a      	ldrb	r2, [r1, #20]
    f0e8:	7482      	strb	r2, [r0, #18]
    f0ea:	8a8a      	ldrh	r2, [r1, #20]
    f0ec:	0a12      	lsrs	r2, r2, #8
    f0ee:	74c2      	strb	r2, [r0, #19]
    f0f0:	7d89      	ldrb	r1, [r1, #22]
    f0f2:	7501      	strb	r1, [r0, #20]
    f0f4:	2013      	movs	r0, #19
    f0f6:	4770      	bx	lr

0000f0f8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    f0f8:	223e      	movs	r2, #62	; 0x3e
    f0fa:	7002      	strb	r2, [r0, #0]
    f0fc:	2201      	movs	r2, #1
    f0fe:	7082      	strb	r2, [r0, #2]
    f100:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    f104:	70c2      	strb	r2, [r0, #3]
    f106:	788a      	ldrb	r2, [r1, #2]
    f108:	7102      	strb	r2, [r0, #4]
    f10a:	884a      	ldrh	r2, [r1, #2]
    f10c:	0a12      	lsrs	r2, r2, #8
    f10e:	7142      	strb	r2, [r0, #5]
    f110:	790a      	ldrb	r2, [r1, #4]
    f112:	7182      	strb	r2, [r0, #6]
    f114:	794a      	ldrb	r2, [r1, #5]
    f116:	71c2      	strb	r2, [r0, #7]
    f118:	f8d1 2006 	ldr.w	r2, [r1, #6]
    f11c:	6082      	str	r2, [r0, #8]
    f11e:	894a      	ldrh	r2, [r1, #10]
    f120:	8182      	strh	r2, [r0, #12]
    f122:	7e0a      	ldrb	r2, [r1, #24]
    f124:	7382      	strb	r2, [r0, #14]
    f126:	8b0a      	ldrh	r2, [r1, #24]
    f128:	0a12      	lsrs	r2, r2, #8
    f12a:	73c2      	strb	r2, [r0, #15]
    f12c:	7e8a      	ldrb	r2, [r1, #26]
    f12e:	7402      	strb	r2, [r0, #16]
    f130:	8b4a      	ldrh	r2, [r1, #26]
    f132:	0a12      	lsrs	r2, r2, #8
    f134:	7442      	strb	r2, [r0, #17]
    f136:	7f0a      	ldrb	r2, [r1, #28]
    f138:	7482      	strb	r2, [r0, #18]
    f13a:	8b8a      	ldrh	r2, [r1, #28]
    f13c:	0a12      	lsrs	r2, r2, #8
    f13e:	74c2      	strb	r2, [r0, #19]
    f140:	7f89      	ldrb	r1, [r1, #30]
    f142:	7501      	strb	r1, [r0, #20]
    f144:	2113      	movs	r1, #19
    f146:	7041      	strb	r1, [r0, #1]
    f148:	4608      	mov	r0, r1
    f14a:	4770      	bx	lr

0000f14c <sdc_hci_data_get>:
    f14c:	b510      	push	{r4, lr}
    f14e:	b120      	cbz	r0, f15a <sdc_hci_data_get+0xe>
    f150:	f7ff fd34 	bl	ebbc <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    f154:	b120      	cbz	r0, f160 <sdc_hci_data_get+0x14>
    f156:	2000      	movs	r0, #0
    f158:	bd10      	pop	{r4, pc}
    f15a:	f06f 0015 	mvn.w	r0, #21
    f15e:	bd10      	pop	{r4, pc}
    f160:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f164:	bd10      	pop	{r4, pc}

0000f166 <sdc_hci_data_put>:
    f166:	b510      	push	{r4, lr}
    f168:	f06f 0415 	mvn.w	r4, #21
    f16c:	b120      	cbz	r0, f178 <sdc_hci_data_put+0x12>
    f16e:	f7ff fd33 	bl	ebd8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    f172:	b108      	cbz	r0, f178 <sdc_hci_data_put+0x12>
    f174:	2000      	movs	r0, #0
    f176:	bd10      	pop	{r4, pc}
    f178:	4620      	mov	r0, r4
    f17a:	bd10      	pop	{r4, pc}

0000f17c <sdc_hci_evt_get>:
    f17c:	b510      	push	{r4, lr}
    f17e:	b120      	cbz	r0, f18a <sdc_hci_evt_get+0xe>
    f180:	f7f4 fd80 	bl	3c84 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    f184:	b120      	cbz	r0, f190 <sdc_hci_evt_get+0x14>
    f186:	2000      	movs	r0, #0
    f188:	bd10      	pop	{r4, pc}
    f18a:	f06f 0015 	mvn.w	r0, #21
    f18e:	bd10      	pop	{r4, pc}
    f190:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f194:	bd10      	pop	{r4, pc}

0000f196 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    f196:	f002 b9ed 	b.w	11574 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000f19a <sdc_hci_cmd_cb_read_transmit_power_level>:
    f19a:	f002 ba3e 	b.w	1161a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000f19e <sdc_hci_cmd_cb_set_event_mask>:
    f19e:	b510      	push	{r4, lr}
    f1a0:	f7f4 fe24 	bl	3dec <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    f1a4:	2000      	movs	r0, #0
    f1a6:	bd10      	pop	{r4, pc}

0000f1a8 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    f1a8:	b510      	push	{r4, lr}
    f1aa:	f7f4 fe2d 	bl	3e08 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    f1ae:	2000      	movs	r0, #0
    f1b0:	bd10      	pop	{r4, pc}

0000f1b2 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    f1b2:	f002 ba4d 	b.w	11650 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000f1b6 <sdc_hci_cmd_vs_conn_event_extend>:
    f1b6:	b508      	push	{r3, lr}
    f1b8:	7800      	ldrb	r0, [r0, #0]
    f1ba:	f88d 0000 	strb.w	r0, [sp]
    f1be:	4668      	mov	r0, sp
    f1c0:	f002 f9a4 	bl	1150c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    f1c4:	bd08      	pop	{r3, pc}

0000f1c6 <sdc_hci_cmd_vs_conn_update>:
    f1c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f1c8:	2100      	movs	r1, #0
    f1ca:	9100      	str	r1, [sp, #0]
    f1cc:	9101      	str	r1, [sp, #4]
    f1ce:	9102      	str	r1, [sp, #8]
    f1d0:	9103      	str	r1, [sp, #12]
    f1d2:	f8d0 1002 	ldr.w	r1, [r0, #2]
    f1d6:	f641 524c 	movw	r2, #7500	; 0x1d4c
    f1da:	4291      	cmp	r1, r2
    f1dc:	d304      	bcc.n	f1e8 <sdc_hci_cmd_vs_conn_update+0x22>
    f1de:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f1e2:	fbb1 f1f2 	udiv	r1, r1, r2
    f1e6:	e005      	b.n	f1f4 <sdc_hci_cmd_vs_conn_update+0x2e>
    f1e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f1ec:	fbb1 f1f2 	udiv	r1, r1, r2
    f1f0:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    f1f4:	8802      	ldrh	r2, [r0, #0]
    f1f6:	b289      	uxth	r1, r1
    f1f8:	f8ad 2000 	strh.w	r2, [sp]
    f1fc:	f8ad 1002 	strh.w	r1, [sp, #2]
    f200:	f8ad 1004 	strh.w	r1, [sp, #4]
    f204:	88c1      	ldrh	r1, [r0, #6]
    f206:	f8ad 1006 	strh.w	r1, [sp, #6]
    f20a:	8900      	ldrh	r0, [r0, #8]
    f20c:	f8ad 0008 	strh.w	r0, [sp, #8]
    f210:	4668      	mov	r0, sp
    f212:	f001 ff51 	bl	110b8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    f216:	b004      	add	sp, #16
    f218:	bd10      	pop	{r4, pc}

0000f21a <sdc_hci_cmd_vs_event_length_set>:
    f21a:	f7fd ba05 	b.w	c628 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000f21e <sdc_hci_cmd_vs_llpm_mode_set>:
    f21e:	b508      	push	{r3, lr}
    f220:	7800      	ldrb	r0, [r0, #0]
    f222:	f88d 0000 	strb.w	r0, [sp]
    f226:	4668      	mov	r0, sp
    f228:	f7fd fa5e 	bl	c6e8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
    f22c:	bd08      	pop	{r3, pc}

0000f22e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    f22e:	7800      	ldrb	r0, [r0, #0]
    f230:	b100      	cbz	r0, f234 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    f232:	2001      	movs	r0, #1
    f234:	f002 b904 	b.w	11440 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000f238 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    f238:	b510      	push	{r4, lr}
    f23a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    f23e:	4604      	mov	r4, r0
    f240:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f244:	1c40      	adds	r0, r0, #1
    f246:	d105      	bne.n	f254 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    f248:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f24c:	43c0      	mvns	r0, r0
    f24e:	0400      	lsls	r0, r0, #16
    f250:	0c00      	lsrs	r0, r0, #16
    f252:	d036      	beq.n	f2c2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f254:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
    f258:	07c0      	lsls	r0, r0, #31
    f25a:	d032      	beq.n	f2c2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f25c:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f260:	f8c4 0001 	str.w	r0, [r4, #1]
    f264:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f268:	f8a4 0005 	strh.w	r0, [r4, #5]
    f26c:	79a0      	ldrb	r0, [r4, #6]
    f26e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    f272:	71a0      	strb	r0, [r4, #6]
    f274:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    f278:	1c40      	adds	r0, r0, #1
    f27a:	d019      	beq.n	f2b0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f27c:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    f280:	1c40      	adds	r0, r0, #1
    f282:	d015      	beq.n	f2b0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f284:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
    f288:	1c40      	adds	r0, r0, #1
    f28a:	d011      	beq.n	f2b0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f28c:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    f290:	1c40      	adds	r0, r0, #1
    f292:	d00d      	beq.n	f2b0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f294:	f851 0f90 	ldr.w	r0, [r1, #144]!
    f298:	f8c4 0007 	str.w	r0, [r4, #7]
    f29c:	6848      	ldr	r0, [r1, #4]
    f29e:	f8c4 000b 	str.w	r0, [r4, #11]
    f2a2:	6888      	ldr	r0, [r1, #8]
    f2a4:	f8c4 000f 	str.w	r0, [r4, #15]
    f2a8:	68c8      	ldr	r0, [r1, #12]
    f2aa:	f8c4 0013 	str.w	r0, [r4, #19]
    f2ae:	e004      	b.n	f2ba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x82>
    f2b0:	2210      	movs	r2, #16
    f2b2:	2100      	movs	r1, #0
    f2b4:	1de0      	adds	r0, r4, #7
    f2b6:	f7ff fbb7 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f2ba:	2001      	movs	r0, #1
    f2bc:	7020      	strb	r0, [r4, #0]
    f2be:	2000      	movs	r0, #0
    f2c0:	bd10      	pop	{r4, pc}
    f2c2:	2000      	movs	r0, #0
    f2c4:	e7fa      	b.n	f2bc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x84>

0000f2c6 <sdc_hci_cmd_vs_zephyr_read_supported_commands>:
    f2c6:	b510      	push	{r4, lr}
    f2c8:	4604      	mov	r4, r0
    f2ca:	2240      	movs	r2, #64	; 0x40
    f2cc:	2100      	movs	r1, #0
    f2ce:	f7ff fbab 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f2d2:	7861      	ldrb	r1, [r4, #1]
    f2d4:	7820      	ldrb	r0, [r4, #0]
    f2d6:	f041 0121 	orr.w	r1, r1, #33	; 0x21
    f2da:	7061      	strb	r1, [r4, #1]
    f2dc:	f040 0023 	orr.w	r0, r0, #35	; 0x23
    f2e0:	7020      	strb	r0, [r4, #0]
    f2e2:	2000      	movs	r0, #0
    f2e4:	bd10      	pop	{r4, pc}

0000f2e6 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    f2e6:	f002 b8f1 	b.w	114cc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000f2ea <sdc_hci_cmd_ip_read_bd_addr>:
    f2ea:	f002 b954 	b.w	11596 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000f2ee <sdc_hci_cmd_ip_read_local_supported_features>:
    f2ee:	f002 b95e 	b.w	115ae <sym_2PTHETYGBZAPJ2ZKYDOVYDIWST3AXGZGS3MY6DI>

0000f2f2 <sdc_hci_cmd_ip_read_local_version_information>:
    f2f2:	f7fd ba0d 	b.w	c710 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000f2f6 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    f2f6:	f001 be90 	b.w	1101a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000f2fa <sdc_hci_cmd_le_add_device_to_white_list>:
    f2fa:	f001 bea9 	b.w	11050 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000f2fe <sdc_hci_cmd_le_clear_resolving_list>:
    f2fe:	f001 bec4 	b.w	1108a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000f302 <sdc_hci_cmd_le_clear_white_list>:
    f302:	f001 becf 	b.w	110a4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000f306 <sdc_hci_cmd_le_encrypt>:
    f306:	f001 bf34 	b.w	11172 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000f30a <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    f30a:	8802      	ldrh	r2, [r0, #0]
    f30c:	800a      	strh	r2, [r1, #0]
    f30e:	f001 bf39 	b.w	11184 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000f312 <sdc_hci_cmd_le_long_term_key_request_reply>:
    f312:	8802      	ldrh	r2, [r0, #0]
    f314:	800a      	strh	r2, [r1, #0]
    f316:	f001 bf4e 	b.w	111b6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000f31a <sdc_hci_cmd_le_rand>:
    f31a:	f001 bf70 	b.w	111fe <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000f31e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    f31e:	f7fc bfc1 	b.w	c2a4 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000f322 <sdc_hci_cmd_le_read_buffer_size>:
    f322:	f7fc bfcd 	b.w	c2c0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000f326 <sdc_hci_cmd_le_read_channel_map>:
    f326:	f001 bf70 	b.w	1120a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000f32a <sdc_hci_cmd_le_read_local_supported_features>:
    f32a:	f001 bf8f 	b.w	1124c <sym_7YL5EH5YISPHYP3GLCPHHLYJDC4YFSU26ARBXOI>

0000f32e <sdc_hci_cmd_le_read_max_data_length>:
    f32e:	f001 bf9b 	b.w	11268 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000f332 <sdc_hci_cmd_le_read_phy>:
    f332:	f7fc bfd1 	b.w	c2d8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000f336 <sdc_hci_cmd_le_read_remote_features>:
    f336:	f7fc bff7 	b.w	c328 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000f33a <sdc_hci_cmd_le_read_resolving_list_size>:
    f33a:	f001 bfa5 	b.w	11288 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000f33e <sdc_hci_cmd_le_read_suggested_default_data_length>:
    f33e:	f7fd b823 	b.w	c388 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000f342 <sdc_hci_cmd_le_read_transmit_power>:
    f342:	f001 bfa5 	b.w	11290 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000f346 <sdc_hci_cmd_le_read_white_list_size>:
    f346:	f001 bfa9 	b.w	1129c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000f34a <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    f34a:	f001 bfab 	b.w	112a4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000f34e <sdc_hci_cmd_le_remove_device_from_white_list>:
    f34e:	f001 bfc2 	b.w	112d6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000f352 <sdc_hci_cmd_le_set_address_resolution_enable>:
    f352:	f001 bfdc 	b.w	1130e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000f356 <sdc_hci_cmd_le_set_adv_data>:
    f356:	f7fd b827 	b.w	c3a8 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000f35a <sdc_hci_cmd_le_set_adv_enable>:
    f35a:	f7fd b855 	b.w	c408 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000f35e <sdc_hci_cmd_le_set_adv_params>:
    f35e:	f7fd b871 	b.w	c444 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000f362 <sdc_hci_cmd_le_set_data_length>:
    f362:	f001 bfe2 	b.w	1132a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000f366 <sdc_hci_cmd_le_set_default_phy>:
    f366:	f7fd b8e3 	b.w	c530 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000f36a <sdc_hci_cmd_le_set_event_mask>:
    f36a:	b510      	push	{r4, lr}
    f36c:	f7f4 fd38 	bl	3de0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    f370:	2000      	movs	r0, #0
    f372:	bd10      	pop	{r4, pc}

0000f374 <sdc_hci_cmd_le_set_phy>:
    f374:	f002 b800 	b.w	11378 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000f378 <sdc_hci_cmd_le_set_privacy_mode>:
    f378:	f002 b81e 	b.w	113b8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000f37c <sdc_hci_cmd_le_set_random_address>:
    f37c:	f002 b832 	b.w	113e4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000f380 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    f380:	f002 b83e 	b.w	11400 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000f384 <sdc_hci_cmd_le_set_scan_response_data>:
    f384:	f7fd b906 	b.w	c594 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000f388 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    f388:	f002 b843 	b.w	11412 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000f38c <sdc_hci_cmd_lc_disconnect>:
    f38c:	f001 bde5 	b.w	10f5a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000f390 <sdc_hci_cmd_lc_read_remote_version_information>:
    f390:	f002 b914 	b.w	115bc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    f394:	b530      	push	{r4, r5, lr}
    f396:	8804      	ldrh	r4, [r0, #0]
    f398:	f424 4500 	bic.w	r5, r4, #32768	; 0x8000
    f39c:	4429      	add	r1, r5
    f39e:	b289      	uxth	r1, r1
    f3a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f3a4:	4291      	cmp	r1, r2
    f3a6:	d20b      	bcs.n	f3c0 <sdc_hci_cmd_lc_read_remote_version_information+0x30>
    f3a8:	1a52      	subs	r2, r2, r1
    f3aa:	b292      	uxth	r2, r2
    f3ac:	331b      	adds	r3, #27
    f3ae:	429a      	cmp	r2, r3
    f3b0:	d201      	bcs.n	f3b6 <sdc_hci_cmd_lc_read_remote_version_information+0x26>
    f3b2:	43a5      	bics	r5, r4
    f3b4:	e002      	b.n	f3bc <sdc_hci_cmd_lc_read_remote_version_information+0x2c>
    f3b6:	f404 4500 	and.w	r5, r4, #32768	; 0x8000
    f3ba:	430d      	orrs	r5, r1
    f3bc:	8005      	strh	r5, [r0, #0]
    f3be:	bd30      	pop	{r4, r5, pc}
    f3c0:	1a89      	subs	r1, r1, r2
    f3c2:	b289      	uxth	r1, r1
    f3c4:	43a5      	bics	r5, r4
    f3c6:	e7f8      	b.n	f3ba <sdc_hci_cmd_lc_read_remote_version_information+0x2a>
    f3c8:	b510      	push	{r4, lr}
    f3ca:	8802      	ldrh	r2, [r0, #0]
    f3cc:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    f3d0:	428b      	cmp	r3, r1
    f3d2:	d203      	bcs.n	f3dc <sdc_hci_cmd_lc_read_remote_version_information+0x4c>
    f3d4:	21b6      	movs	r1, #182	; 0xb6
    f3d6:	2014      	movs	r0, #20
    f3d8:	f7f4 fbd4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f3e0:	4393      	bics	r3, r2
    f3e2:	430b      	orrs	r3, r1
    f3e4:	8003      	strh	r3, [r0, #0]
    f3e6:	bd10      	pop	{r4, pc}
    f3e8:	4288      	cmp	r0, r1
    f3ea:	d101      	bne.n	f3f0 <sdc_hci_cmd_lc_read_remote_version_information+0x60>
    f3ec:	2001      	movs	r0, #1
    f3ee:	4770      	bx	lr
    f3f0:	2000      	movs	r0, #0
    f3f2:	4770      	bx	lr
    f3f4:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    f3f8:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    f3fc:	429a      	cmp	r2, r3
    f3fe:	d107      	bne.n	f410 <sdc_hci_cmd_lc_read_remote_version_information+0x80>
    f400:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    f404:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    f408:	4288      	cmp	r0, r1
    f40a:	d001      	beq.n	f410 <sdc_hci_cmd_lc_read_remote_version_information+0x80>
    f40c:	2001      	movs	r0, #1
    f40e:	4770      	bx	lr
    f410:	2000      	movs	r0, #0
    f412:	4770      	bx	lr

0000f414 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    f414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f418:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f41c:	7f40      	ldrb	r0, [r0, #29]
    f41e:	461d      	mov	r5, r3
    f420:	3008      	adds	r0, #8
    f422:	4690      	mov	r8, r2
    f424:	1843      	adds	r3, r0, r1
    f426:	2400      	movs	r4, #0
    f428:	8808      	ldrh	r0, [r1, #0]
    f42a:	884f      	ldrh	r7, [r1, #2]
    f42c:	9a06      	ldr	r2, [sp, #24]
    f42e:	1edb      	subs	r3, r3, #3
    f430:	b190      	cbz	r0, f458 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x44>
    f432:	1cc0      	adds	r0, r0, #3
    f434:	b280      	uxth	r0, r0
    f436:	4290      	cmp	r0, r2
    f438:	d912      	bls.n	f460 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x4c>
    f43a:	1a80      	subs	r0, r0, r2
    f43c:	42a8      	cmp	r0, r5
    f43e:	db00      	blt.n	f442 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2e>
    f440:	4628      	mov	r0, r5
    f442:	b284      	uxth	r4, r0
    f444:	1899      	adds	r1, r3, r2
    f446:	4622      	mov	r2, r4
    f448:	4640      	mov	r0, r8
    f44a:	f7f4 fa11 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f44e:	1b28      	subs	r0, r5, r4
    f450:	b285      	uxth	r5, r0
    f452:	44a0      	add	r8, r4
    f454:	2000      	movs	r0, #0
    f456:	e005      	b.n	f464 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x50>
    f458:	1cff      	adds	r7, r7, #3
    f45a:	b2bf      	uxth	r7, r7
    f45c:	1ef6      	subs	r6, r6, #3
    f45e:	e7ea      	b.n	f436 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x22>
    f460:	1a10      	subs	r0, r2, r0
    f462:	b280      	uxth	r0, r0
    f464:	1941      	adds	r1, r0, r5
    f466:	42b9      	cmp	r1, r7
    f468:	d806      	bhi.n	f478 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x64>
    f46a:	1831      	adds	r1, r6, r0
    f46c:	462a      	mov	r2, r5
    f46e:	4640      	mov	r0, r8
    f470:	f7f4 f9fe 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f474:	1960      	adds	r0, r4, r5
    f476:	b284      	uxth	r4, r0
    f478:	4620      	mov	r0, r4
    f47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f47e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    f47e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f482:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f486:	7f40      	ldrb	r0, [r0, #29]
    f488:	461d      	mov	r5, r3
    f48a:	3008      	adds	r0, #8
    f48c:	4690      	mov	r8, r2
    f48e:	1843      	adds	r3, r0, r1
    f490:	2400      	movs	r4, #0
    f492:	8808      	ldrh	r0, [r1, #0]
    f494:	884f      	ldrh	r7, [r1, #2]
    f496:	9a06      	ldr	r2, [sp, #24]
    f498:	1edb      	subs	r3, r3, #3
    f49a:	b190      	cbz	r0, f4c2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x44>
    f49c:	1cc0      	adds	r0, r0, #3
    f49e:	b280      	uxth	r0, r0
    f4a0:	4290      	cmp	r0, r2
    f4a2:	d912      	bls.n	f4ca <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x4c>
    f4a4:	1a80      	subs	r0, r0, r2
    f4a6:	42a8      	cmp	r0, r5
    f4a8:	db00      	blt.n	f4ac <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2e>
    f4aa:	4628      	mov	r0, r5
    f4ac:	b284      	uxth	r4, r0
    f4ae:	1898      	adds	r0, r3, r2
    f4b0:	4622      	mov	r2, r4
    f4b2:	4641      	mov	r1, r8
    f4b4:	f7f4 f9dc 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f4b8:	1b28      	subs	r0, r5, r4
    f4ba:	b285      	uxth	r5, r0
    f4bc:	44a0      	add	r8, r4
    f4be:	2000      	movs	r0, #0
    f4c0:	e005      	b.n	f4ce <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x50>
    f4c2:	1cff      	adds	r7, r7, #3
    f4c4:	b2bf      	uxth	r7, r7
    f4c6:	1ef6      	subs	r6, r6, #3
    f4c8:	e7ea      	b.n	f4a0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x22>
    f4ca:	1a10      	subs	r0, r2, r0
    f4cc:	b280      	uxth	r0, r0
    f4ce:	1941      	adds	r1, r0, r5
    f4d0:	42b9      	cmp	r1, r7
    f4d2:	d806      	bhi.n	f4e2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x64>
    f4d4:	4430      	add	r0, r6
    f4d6:	462a      	mov	r2, r5
    f4d8:	4641      	mov	r1, r8
    f4da:	f7f4 f9c9 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f4de:	1960      	adds	r0, r4, r5
    f4e0:	b284      	uxth	r4, r0
    f4e2:	4620      	mov	r0, r4
    f4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f4e8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    f4e8:	88c1      	ldrh	r1, [r0, #6]
    f4ea:	8880      	ldrh	r0, [r0, #4]
    f4ec:	f7ff bf7c 	b.w	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>

0000f4f0 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    f4f0:	8881      	ldrh	r1, [r0, #4]
    f4f2:	8900      	ldrh	r0, [r0, #8]
    f4f4:	f7ff bf78 	b.w	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>

0000f4f8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    f4f8:	b570      	push	{r4, r5, r6, lr}
    f4fa:	4604      	mov	r4, r0
    f4fc:	f100 0128 	add.w	r1, r0, #40	; 0x28
    f500:	8880      	ldrh	r0, [r0, #4]
    f502:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    f506:	1842      	adds	r2, r0, r1
    f508:	8a20      	ldrh	r0, [r4, #16]
    f50a:	2800      	cmp	r0, #0
    f50c:	d027      	beq.n	f55e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x66>
    f50e:	89a1      	ldrh	r1, [r4, #12]
    f510:	2500      	movs	r5, #0
    f512:	4408      	add	r0, r1
    f514:	b280      	uxth	r0, r0
    f516:	81a0      	strh	r0, [r4, #12]
    f518:	8811      	ldrh	r1, [r2, #0]
    f51a:	8853      	ldrh	r3, [r2, #2]
    f51c:	4419      	add	r1, r3
    f51e:	4281      	cmp	r1, r0
    f520:	d205      	bcs.n	f52e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
    f522:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    f526:	f04f 0014 	mov.w	r0, #20
    f52a:	f7f4 fb2b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f52e:	d114      	bne.n	f55a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x62>
    f530:	69a0      	ldr	r0, [r4, #24]
    f532:	b108      	cbz	r0, f538 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
    f534:	7f80      	ldrb	r0, [r0, #30]
    f536:	7110      	strb	r0, [r2, #4]
    f538:	8851      	ldrh	r1, [r2, #2]
    f53a:	b121      	cbz	r1, f546 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4e>
    f53c:	f104 0004 	add.w	r0, r4, #4
    f540:	f7ff ff42 	bl	f3c8 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f544:	e008      	b.n	f558 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x60>
    f546:	7f63      	ldrb	r3, [r4, #29]
    f548:	8810      	ldrh	r0, [r2, #0]
    f54a:	3308      	adds	r3, #8
    f54c:	4418      	add	r0, r3
    f54e:	b281      	uxth	r1, r0
    f550:	8862      	ldrh	r2, [r4, #2]
    f552:	1d20      	adds	r0, r4, #4
    f554:	f7ff ff1e 	bl	f394 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f558:	81a5      	strh	r5, [r4, #12]
    f55a:	8225      	strh	r5, [r4, #16]
    f55c:	2001      	movs	r0, #1
    f55e:	bd70      	pop	{r4, r5, r6, pc}

0000f560 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    f560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f564:	4604      	mov	r4, r0
    f566:	f100 0328 	add.w	r3, r0, #40	; 0x28
    f56a:	88c0      	ldrh	r0, [r0, #6]
    f56c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    f570:	8a60      	ldrh	r0, [r4, #18]
    f572:	19dd      	adds	r5, r3, r7
    f574:	b108      	cbz	r0, f57a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    f576:	4288      	cmp	r0, r1
    f578:	d202      	bcs.n	f580 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x20>
    f57a:	2000      	movs	r0, #0
    f57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f580:	89e6      	ldrh	r6, [r4, #14]
    f582:	b15e      	cbz	r6, f59c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3c>
    f584:	8828      	ldrh	r0, [r5, #0]
    f586:	f8b5 c002 	ldrh.w	ip, [r5, #2]
    f58a:	eb00 080c 	add.w	r8, r0, ip
    f58e:	4546      	cmp	r6, r8
    f590:	d008      	beq.n	f5a4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x44>
    f592:	f240 3112 	movw	r1, #786	; 0x312
    f596:	2014      	movs	r0, #20
    f598:	f7f4 faf4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f59c:	2000      	movs	r0, #0
    f59e:	7fa6      	ldrb	r6, [r4, #30]
    f5a0:	4684      	mov	ip, r0
    f5a2:	712e      	strb	r6, [r5, #4]
    f5a4:	f894 801c 	ldrb.w	r8, [r4, #28]
    f5a8:	f04f 0600 	mov.w	r6, #0
    f5ac:	46c1      	mov	r9, r8
    f5ae:	ea58 080c 	orrs.w	r8, r8, ip
    f5b2:	d003      	beq.n	f5bc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    f5b4:	ea5f 0709 	movs.w	r7, r9
    f5b8:	d02d      	beq.n	f616 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xb6>
    f5ba:	e037      	b.n	f62c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xcc>
    f5bc:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    f5c0:	f1bc 0f00 	cmp.w	ip, #0
    f5c4:	d00e      	beq.n	f5e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x84>
    f5c6:	f894 801d 	ldrb.w	r8, [r4, #29]
    f5ca:	449c      	add	ip, r3
    f5cc:	f108 0808 	add.w	r8, r8, #8
    f5d0:	44b8      	add	r8, r7
    f5d2:	44c4      	add	ip, r8
    f5d4:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    f5d8:	f82c 8c03 	strh.w	r8, [ip, #-3]
    f5dc:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    f5e0:	f80c 8c01 	strb.w	r8, [ip, #-1]
    f5e4:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    f5e8:	4408      	add	r0, r1
    f5ea:	4461      	add	r1, ip
    f5ec:	81e1      	strh	r1, [r4, #14]
    f5ee:	8028      	strh	r0, [r5, #0]
    f5f0:	806e      	strh	r6, [r5, #2]
    f5f2:	b14a      	cbz	r2, f608 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa8>
    f5f4:	7f63      	ldrb	r3, [r4, #29]
    f5f6:	8828      	ldrh	r0, [r5, #0]
    f5f8:	3308      	adds	r3, #8
    f5fa:	4418      	add	r0, r3
    f5fc:	b281      	uxth	r1, r0
    f5fe:	8862      	ldrh	r2, [r4, #2]
    f600:	1da0      	adds	r0, r4, #6
    f602:	f7ff fec7 	bl	f394 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f606:	e01f      	b.n	f648 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xe8>
    f608:	7f60      	ldrb	r0, [r4, #29]
    f60a:	89e1      	ldrh	r1, [r4, #14]
    f60c:	3008      	adds	r0, #8
    f60e:	4438      	add	r0, r7
    f610:	4419      	add	r1, r3
    f612:	4408      	add	r0, r1
    f614:	e028      	b.n	f668 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x108>
    f616:	89e7      	ldrh	r7, [r4, #14]
    f618:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    f61c:	441f      	add	r7, r3
    f61e:	1a3f      	subs	r7, r7, r0
    f620:	f827 8c03 	strh.w	r8, [r7, #-3]
    f624:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    f628:	f807 8c01 	strb.w	r8, [r7, #-1]
    f62c:	eb0c 0701 	add.w	r7, ip, r1
    f630:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    f634:	b2bf      	uxth	r7, r7
    f636:	4461      	add	r1, ip
    f638:	81e1      	strh	r1, [r4, #14]
    f63a:	8028      	strh	r0, [r5, #0]
    f63c:	806f      	strh	r7, [r5, #2]
    f63e:	b182      	cbz	r2, f662 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x102>
    f640:	4639      	mov	r1, r7
    f642:	1da0      	adds	r0, r4, #6
    f644:	f7ff fec0 	bl	f3c8 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f648:	81e6      	strh	r6, [r4, #14]
    f64a:	7fa0      	ldrb	r0, [r4, #30]
    f64c:	1c40      	adds	r0, r0, #1
    f64e:	77a0      	strb	r0, [r4, #30]
    f650:	7da0      	ldrb	r0, [r4, #22]
    f652:	b108      	cbz	r0, f658 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xf8>
    f654:	88e0      	ldrh	r0, [r4, #6]
    f656:	82a0      	strh	r0, [r4, #20]
    f658:	75a6      	strb	r6, [r4, #22]
    f65a:	8266      	strh	r6, [r4, #18]
    f65c:	75e6      	strb	r6, [r4, #23]
    f65e:	2001      	movs	r0, #1
    f660:	e78c      	b.n	f57c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    f662:	89e1      	ldrh	r1, [r4, #14]
    f664:	4419      	add	r1, r3
    f666:	1a08      	subs	r0, r1, r0
    f668:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    f66c:	f8a4 101f 	strh.w	r1, [r4, #31]
    f670:	7880      	ldrb	r0, [r0, #2]
    f672:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    f676:	e7f0      	b.n	f65a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xfa>

0000f678 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    f678:	b570      	push	{r4, r5, r6, lr}
    f67a:	4604      	mov	r4, r0
    f67c:	f100 0228 	add.w	r2, r0, #40	; 0x28
    f680:	88c1      	ldrh	r1, [r0, #6]
    f682:	8880      	ldrh	r0, [r0, #4]
    f684:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    f688:	18d5      	adds	r5, r2, r3
    f68a:	f7ff fead 	bl	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f68e:	b938      	cbnz	r0, f6a0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    f690:	89a0      	ldrh	r0, [r4, #12]
    f692:	b928      	cbnz	r0, f6a0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    f694:	8a20      	ldrh	r0, [r4, #16]
    f696:	b918      	cbnz	r0, f6a0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    f698:	88a0      	ldrh	r0, [r4, #4]
    f69a:	8aa1      	ldrh	r1, [r4, #20]
    f69c:	4288      	cmp	r0, r1
    f69e:	d101      	bne.n	f6a4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x2c>
    f6a0:	2000      	movs	r0, #0
    f6a2:	bd70      	pop	{r4, r5, r6, pc}
    f6a4:	8828      	ldrh	r0, [r5, #0]
    f6a6:	8869      	ldrh	r1, [r5, #2]
    f6a8:	b131      	cbz	r1, f6b8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x40>
    f6aa:	1d20      	adds	r0, r4, #4
    f6ac:	f7ff fe8c 	bl	f3c8 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f6b0:	2000      	movs	r0, #0
    f6b2:	8220      	strh	r0, [r4, #16]
    f6b4:	2001      	movs	r0, #1
    f6b6:	bd70      	pop	{r4, r5, r6, pc}
    f6b8:	7f63      	ldrb	r3, [r4, #29]
    f6ba:	8862      	ldrh	r2, [r4, #2]
    f6bc:	3308      	adds	r3, #8
    f6be:	4418      	add	r0, r3
    f6c0:	b281      	uxth	r1, r0
    f6c2:	1d20      	adds	r0, r4, #4
    f6c4:	f7ff fe66 	bl	f394 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f6c8:	e7f2      	b.n	f6b0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x38>

0000f6ca <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    f6ca:	b570      	push	{r4, r5, r6, lr}
    f6cc:	4604      	mov	r4, r0
    f6ce:	f100 0228 	add.w	r2, r0, #40	; 0x28
    f6d2:	88c0      	ldrh	r0, [r0, #6]
    f6d4:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    f6d8:	7de0      	ldrb	r0, [r4, #23]
    f6da:	2800      	cmp	r0, #0
    f6dc:	d006      	beq.n	f6ec <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x22>
    f6de:	18d0      	adds	r0, r2, r3
    f6e0:	8802      	ldrh	r2, [r0, #0]
    f6e2:	8843      	ldrh	r3, [r0, #2]
    f6e4:	4413      	add	r3, r2
    f6e6:	428b      	cmp	r3, r1
    f6e8:	d201      	bcs.n	f6ee <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x24>
    f6ea:	2000      	movs	r0, #0
    f6ec:	bd70      	pop	{r4, r5, r6, pc}
    f6ee:	2500      	movs	r5, #0
    f6f0:	428a      	cmp	r2, r1
    f6f2:	d302      	bcc.n	f6fa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x30>
    f6f4:	8001      	strh	r1, [r0, #0]
    f6f6:	8045      	strh	r5, [r0, #2]
    f6f8:	e008      	b.n	f70c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    f6fa:	1a89      	subs	r1, r1, r2
    f6fc:	0409      	lsls	r1, r1, #16
    f6fe:	0c09      	lsrs	r1, r1, #16
    f700:	8041      	strh	r1, [r0, #2]
    f702:	d003      	beq.n	f70c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    f704:	1da0      	adds	r0, r4, #6
    f706:	f7ff fe5f 	bl	f3c8 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f70a:	e008      	b.n	f71e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x54>
    f70c:	7f63      	ldrb	r3, [r4, #29]
    f70e:	8800      	ldrh	r0, [r0, #0]
    f710:	3308      	adds	r3, #8
    f712:	4418      	add	r0, r3
    f714:	b281      	uxth	r1, r0
    f716:	8862      	ldrh	r2, [r4, #2]
    f718:	1da0      	adds	r0, r4, #6
    f71a:	f7ff fe3b 	bl	f394 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f71e:	75e5      	strb	r5, [r4, #23]
    f720:	2001      	movs	r0, #1
    f722:	bd70      	pop	{r4, r5, r6, pc}

0000f724 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    f724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f728:	4604      	mov	r4, r0
    f72a:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f72e:	8947      	ldrh	r7, [r0, #10]
    f730:	8880      	ldrh	r0, [r0, #4]
    f732:	2500      	movs	r5, #0
    f734:	4681      	mov	r9, r0
    f736:	4601      	mov	r1, r0
    f738:	4638      	mov	r0, r7
    f73a:	f7ff fe55 	bl	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f73e:	b9e0      	cbnz	r0, f77a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x56>
    f740:	f104 080a 	add.w	r8, r4, #10
    f744:	f427 4000 	bic.w	r0, r7, #32768	; 0x8000
    f748:	4430      	add	r0, r6
    f74a:	8841      	ldrh	r1, [r0, #2]
    f74c:	b119      	cbz	r1, f756 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x32>
    f74e:	4640      	mov	r0, r8
    f750:	f7ff fe3a 	bl	f3c8 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f754:	e008      	b.n	f768 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x44>
    f756:	7f63      	ldrb	r3, [r4, #29]
    f758:	8800      	ldrh	r0, [r0, #0]
    f75a:	3308      	adds	r3, #8
    f75c:	4418      	add	r0, r3
    f75e:	b281      	uxth	r1, r0
    f760:	8862      	ldrh	r2, [r4, #2]
    f762:	4640      	mov	r0, r8
    f764:	f7ff fe16 	bl	f394 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    f768:	8967      	ldrh	r7, [r4, #10]
    f76a:	1c6d      	adds	r5, r5, #1
    f76c:	b2ad      	uxth	r5, r5
    f76e:	4649      	mov	r1, r9
    f770:	4638      	mov	r0, r7
    f772:	f7ff fe39 	bl	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f776:	2800      	cmp	r0, #0
    f778:	d0e4      	beq.n	f744 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    f77a:	4628      	mov	r0, r5
    f77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f780 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    f780:	b570      	push	{r4, r5, r6, lr}
    f782:	4604      	mov	r4, r0
    f784:	f100 0228 	add.w	r2, r0, #40	; 0x28
    f788:	88c1      	ldrh	r1, [r0, #6]
    f78a:	8880      	ldrh	r0, [r0, #4]
    f78c:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    f790:	18d5      	adds	r5, r2, r3
    f792:	88a2      	ldrh	r2, [r4, #4]
    f794:	8aa3      	ldrh	r3, [r4, #20]
    f796:	429a      	cmp	r2, r3
    f798:	d013      	beq.n	f7c2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    f79a:	f7ff fe25 	bl	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f79e:	b980      	cbnz	r0, f7c2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    f7a0:	89a0      	ldrh	r0, [r4, #12]
    f7a2:	b970      	cbnz	r0, f7c2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    f7a4:	69a4      	ldr	r4, [r4, #24]
    f7a6:	b174      	cbz	r4, f7c6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    f7a8:	4620      	mov	r0, r4
    f7aa:	f7ff fea1 	bl	f4f0 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    f7ae:	b950      	cbnz	r0, f7c6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    f7b0:	8920      	ldrh	r0, [r4, #8]
    f7b2:	3428      	adds	r4, #40	; 0x28
    f7b4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    f7b8:	4420      	add	r0, r4
    f7ba:	7929      	ldrb	r1, [r5, #4]
    f7bc:	7900      	ldrb	r0, [r0, #4]
    f7be:	4288      	cmp	r0, r1
    f7c0:	d101      	bne.n	f7c6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    f7c2:	2000      	movs	r0, #0
    f7c4:	bd70      	pop	{r4, r5, r6, pc}
    f7c6:	4628      	mov	r0, r5
    f7c8:	bd70      	pop	{r4, r5, r6, pc}

0000f7ca <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    f7ca:	f100 0328 	add.w	r3, r0, #40	; 0x28
    f7ce:	7f40      	ldrb	r0, [r0, #29]
    f7d0:	3008      	adds	r0, #8
    f7d2:	4408      	add	r0, r1
    f7d4:	1ec0      	subs	r0, r0, #3
    f7d6:	6010      	str	r0, [r2, #0]
    f7d8:	8808      	ldrh	r0, [r1, #0]
    f7da:	b908      	cbnz	r0, f7e0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY+0x16>
    f7dc:	1edb      	subs	r3, r3, #3
    f7de:	6013      	str	r3, [r2, #0]
    f7e0:	8808      	ldrh	r0, [r1, #0]
    f7e2:	8849      	ldrh	r1, [r1, #2]
    f7e4:	4408      	add	r0, r1
    f7e6:	b280      	uxth	r0, r0
    f7e8:	4770      	bx	lr

0000f7ea <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    f7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7ee:	460e      	mov	r6, r1
    f7f0:	88c1      	ldrh	r1, [r0, #6]
    f7f2:	4604      	mov	r4, r0
    f7f4:	f100 0828 	add.w	r8, r0, #40	; 0x28
    f7f8:	8900      	ldrh	r0, [r0, #8]
    f7fa:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    f7fe:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    f802:	f7ff fdf7 	bl	f3f4 <sdc_hci_cmd_lc_read_remote_version_information+0x64>
    f806:	b110      	cbz	r0, f80e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x24>
    f808:	2000      	movs	r0, #0
    f80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f80e:	2200      	movs	r2, #0
    f810:	2301      	movs	r3, #1
    f812:	7f60      	ldrb	r0, [r4, #29]
    f814:	42af      	cmp	r7, r5
    f816:	d90b      	bls.n	f830 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x46>
    f818:	1b79      	subs	r1, r7, r5
    f81a:	3008      	adds	r0, #8
    f81c:	1a08      	subs	r0, r1, r0
    f81e:	4286      	cmp	r6, r0
    f820:	dc1d      	bgt.n	f85e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    f822:	eb08 0005 	add.w	r0, r8, r5
    f826:	2100      	movs	r1, #0
    f828:	8006      	strh	r6, [r0, #0]
    f82a:	8041      	strh	r1, [r0, #2]
    f82c:	75e3      	strb	r3, [r4, #23]
    f82e:	e7ec      	b.n	f80a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    f830:	8861      	ldrh	r1, [r4, #2]
    f832:	3008      	adds	r0, #8
    f834:	1b49      	subs	r1, r1, r5
    f836:	1a08      	subs	r0, r1, r0
    f838:	d411      	bmi.n	f85e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    f83a:	281b      	cmp	r0, #27
    f83c:	da04      	bge.n	f848 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x5e>
    f83e:	f240 111d 	movw	r1, #285	; 0x11d
    f842:	2014      	movs	r0, #20
    f844:	f7f4 f99e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f848:	4286      	cmp	r6, r0
    f84a:	dc01      	bgt.n	f850 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x66>
    f84c:	4630      	mov	r0, r6
    f84e:	e000      	b.n	f852 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x68>
    f850:	b280      	uxth	r0, r0
    f852:	1a31      	subs	r1, r6, r0
    f854:	0409      	lsls	r1, r1, #16
    f856:	0c09      	lsrs	r1, r1, #16
    f858:	d003      	beq.n	f862 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    f85a:	42b9      	cmp	r1, r7
    f85c:	dd01      	ble.n	f862 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    f85e:	75e2      	strb	r2, [r4, #23]
    f860:	e7d2      	b.n	f808 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x1e>
    f862:	eb08 0205 	add.w	r2, r8, r5
    f866:	8010      	strh	r0, [r2, #0]
    f868:	8051      	strh	r1, [r2, #2]
    f86a:	75e3      	strb	r3, [r4, #23]
    f86c:	4610      	mov	r0, r2
    f86e:	e7cc      	b.n	f80a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>

0000f870 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    f870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f874:	4604      	mov	r4, r0
    f876:	f100 0228 	add.w	r2, r0, #40	; 0x28
    f87a:	88c1      	ldrh	r1, [r0, #6]
    f87c:	8880      	ldrh	r0, [r0, #4]
    f87e:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    f882:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    f886:	19d6      	adds	r6, r2, r7
    f888:	f7ff fdae 	bl	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f88c:	b9e8      	cbnz	r0, f8ca <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    f88e:	89a0      	ldrh	r0, [r4, #12]
    f890:	8a21      	ldrh	r1, [r4, #16]
    f892:	8832      	ldrh	r2, [r6, #0]
    f894:	4401      	add	r1, r0
    f896:	8870      	ldrh	r0, [r6, #2]
    f898:	1813      	adds	r3, r2, r0
    f89a:	4299      	cmp	r1, r3
    f89c:	d312      	bcc.n	f8c4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    f89e:	b110      	cbz	r0, f8a6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    f8a0:	42a8      	cmp	r0, r5
    f8a2:	d30f      	bcc.n	f8c4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    f8a4:	e011      	b.n	f8ca <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    f8a6:	7f61      	ldrb	r1, [r4, #29]
    f8a8:	3108      	adds	r1, #8
    f8aa:	19c8      	adds	r0, r1, r7
    f8ac:	4410      	add	r0, r2
    f8ae:	8862      	ldrh	r2, [r4, #2]
    f8b0:	b280      	uxth	r0, r0
    f8b2:	1a12      	subs	r2, r2, r0
    f8b4:	b292      	uxth	r2, r2
    f8b6:	311b      	adds	r1, #27
    f8b8:	4291      	cmp	r1, r2
    f8ba:	d901      	bls.n	f8c0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x50>
    f8bc:	b915      	cbnz	r5, f8c4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    f8be:	e004      	b.n	f8ca <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    f8c0:	42a8      	cmp	r0, r5
    f8c2:	d002      	beq.n	f8ca <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    f8c4:	2001      	movs	r0, #1
    f8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8ca:	2000      	movs	r0, #0
    f8cc:	e7fb      	b.n	f8c6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x56>

0000f8ce <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    f8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8d2:	460f      	mov	r7, r1
    f8d4:	4604      	mov	r4, r0
    f8d6:	f100 0528 	add.w	r5, r0, #40	; 0x28
    f8da:	88c1      	ldrh	r1, [r0, #6]
    f8dc:	8880      	ldrh	r0, [r0, #4]
    f8de:	4690      	mov	r8, r2
    f8e0:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    f8e4:	18ae      	adds	r6, r5, r2
    f8e6:	f7ff fd7f 	bl	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f8ea:	b118      	cbz	r0, f8f4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x26>
    f8ec:	2000      	movs	r0, #0
    f8ee:	8220      	strh	r0, [r4, #16]
    f8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8f4:	89a0      	ldrh	r0, [r4, #12]
    f8f6:	8831      	ldrh	r1, [r6, #0]
    f8f8:	4288      	cmp	r0, r1
    f8fa:	d306      	bcc.n	f90a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3c>
    f8fc:	1a40      	subs	r0, r0, r1
    f8fe:	8871      	ldrh	r1, [r6, #2]
    f900:	1a09      	subs	r1, r1, r0
    f902:	4428      	add	r0, r5
    f904:	b289      	uxth	r1, r1
    f906:	1ec0      	subs	r0, r0, #3
    f908:	e005      	b.n	f916 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x48>
    f90a:	1a09      	subs	r1, r1, r0
    f90c:	7f62      	ldrb	r2, [r4, #29]
    f90e:	b289      	uxth	r1, r1
    f910:	4410      	add	r0, r2
    f912:	4430      	add	r0, r6
    f914:	1d40      	adds	r0, r0, #5
    f916:	883a      	ldrh	r2, [r7, #0]
    f918:	428a      	cmp	r2, r1
    f91a:	d900      	bls.n	f91e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
    f91c:	8039      	strh	r1, [r7, #0]
    f91e:	89a1      	ldrh	r1, [r4, #12]
    f920:	b129      	cbz	r1, f92e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x60>
    f922:	2100      	movs	r1, #0
    f924:	f888 1000 	strb.w	r1, [r8]
    f928:	8839      	ldrh	r1, [r7, #0]
    f92a:	8221      	strh	r1, [r4, #16]
    f92c:	e7e0      	b.n	f8f0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x22>
    f92e:	2101      	movs	r1, #1
    f930:	e7f8      	b.n	f924 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x56>

0000f932 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    f932:	b510      	push	{r4, lr}
    f934:	8a81      	ldrh	r1, [r0, #20]
    f936:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    f93a:	3aff      	subs	r2, #255	; 0xff
    f93c:	d002      	beq.n	f944 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    f93e:	7d82      	ldrb	r2, [r0, #22]
    f940:	b95a      	cbnz	r2, f95a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    f942:	e004      	b.n	f94e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    f944:	f240 41ea 	movw	r1, #1258	; 0x4ea
    f948:	2014      	movs	r0, #20
    f94a:	f7f4 f91b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f94e:	8880      	ldrh	r0, [r0, #4]
    f950:	f7ff fd4a 	bl	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    f954:	b108      	cbz	r0, f95a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    f956:	2000      	movs	r0, #0
    f958:	bd10      	pop	{r4, pc}
    f95a:	2001      	movs	r0, #1
    f95c:	bd10      	pop	{r4, pc}

0000f95e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    f95e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f962:	8281      	strh	r1, [r0, #20]
    f964:	2100      	movs	r1, #0
    f966:	7581      	strb	r1, [r0, #22]
    f968:	4770      	bx	lr

0000f96a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    f96a:	b510      	push	{r4, lr}
    f96c:	8a81      	ldrh	r1, [r0, #20]
    f96e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    f972:	3aff      	subs	r2, #255	; 0xff
    f974:	d004      	beq.n	f980 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    f976:	f240 41cd 	movw	r1, #1229	; 0x4cd
    f97a:	2014      	movs	r0, #20
    f97c:	f7f4 f902 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f980:	88c1      	ldrh	r1, [r0, #6]
    f982:	8281      	strh	r1, [r0, #20]
    f984:	89c1      	ldrh	r1, [r0, #14]
    f986:	b101      	cbz	r1, f98a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    f988:	2101      	movs	r1, #1
    f98a:	7581      	strb	r1, [r0, #22]
    f98c:	bd10      	pop	{r4, pc}

0000f98e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    f98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f992:	461e      	mov	r6, r3
    f994:	4613      	mov	r3, r2
    f996:	460f      	mov	r7, r1
    f998:	4604      	mov	r4, r0
    f99a:	4631      	mov	r1, r6
    f99c:	4618      	mov	r0, r3
    f99e:	9a06      	ldr	r2, [sp, #24]
    f9a0:	f000 f864 	bl	fa6c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    f9a4:	4605      	mov	r5, r0
    f9a6:	42af      	cmp	r7, r5
    f9a8:	d201      	bcs.n	f9ae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    f9aa:	21ca      	movs	r1, #202	; 0xca
    f9ac:	e016      	b.n	f9dc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    f9ae:	2228      	movs	r2, #40	; 0x28
    f9b0:	2100      	movs	r1, #0
    f9b2:	4620      	mov	r0, r4
    f9b4:	f7ff f838 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f9b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f9bc:	82a0      	strh	r0, [r4, #20]
    f9be:	3d28      	subs	r5, #40	; 0x28
    f9c0:	b2a8      	uxth	r0, r5
    f9c2:	7766      	strb	r6, [r4, #29]
    f9c4:	8060      	strh	r0, [r4, #2]
    f9c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    f9ca:	d901      	bls.n	f9d0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x42>
    f9cc:	21d0      	movs	r1, #208	; 0xd0
    f9ce:	e005      	b.n	f9dc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    f9d0:	f106 013c 	add.w	r1, r6, #60	; 0x3c
    f9d4:	3608      	adds	r6, #8
    f9d6:	4281      	cmp	r1, r0
    f9d8:	d903      	bls.n	f9e2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x54>
    f9da:	21d2      	movs	r1, #210	; 0xd2
    f9dc:	2014      	movs	r0, #20
    f9de:	f7f4 f8d1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9e2:	1b80      	subs	r0, r0, r6
    f9e4:	3834      	subs	r0, #52	; 0x34
    f9e6:	b280      	uxth	r0, r0
    f9e8:	8020      	strh	r0, [r4, #0]
    f9ea:	281b      	cmp	r0, #27
    f9ec:	d200      	bcs.n	f9f0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x62>
    f9ee:	201b      	movs	r0, #27
    f9f0:	8020      	strh	r0, [r4, #0]
    f9f2:	2000      	movs	r0, #0
    f9f4:	77a0      	strb	r0, [r4, #30]
    f9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f9fa <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    f9fa:	6181      	str	r1, [r0, #24]
    f9fc:	6188      	str	r0, [r1, #24]
    f9fe:	4770      	bx	lr

0000fa00 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    fa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa04:	4604      	mov	r4, r0
    fa06:	4689      	mov	r9, r1
    fa08:	8927      	ldrh	r7, [r4, #8]
    fa0a:	f8b4 800a 	ldrh.w	r8, [r4, #10]
    fa0e:	88a1      	ldrh	r1, [r4, #4]
    fa10:	4616      	mov	r6, r2
    fa12:	3028      	adds	r0, #40	; 0x28
    fa14:	f427 4200 	bic.w	r2, r7, #32768	; 0x8000
    fa18:	1885      	adds	r5, r0, r2
    fa1a:	4638      	mov	r0, r7
    fa1c:	f7ff fce4 	bl	f3e8 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fa20:	b110      	cbz	r0, fa28 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    fa22:	2000      	movs	r0, #0
    fa24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fa28:	b10e      	cbz	r6, fa2e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2e>
    fa2a:	1d68      	adds	r0, r5, #5
    fa2c:	6030      	str	r0, [r6, #0]
    fa2e:	f1b9 0f00 	cmp.w	r9, #0
    fa32:	d004      	beq.n	fa3e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x3e>
    fa34:	7f62      	ldrb	r2, [r4, #29]
    fa36:	1d69      	adds	r1, r5, #5
    fa38:	4648      	mov	r0, r9
    fa3a:	f7f3 ff19 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fa3e:	882e      	ldrh	r6, [r5, #0]
    fa40:	8869      	ldrh	r1, [r5, #2]
    fa42:	f104 0008 	add.w	r0, r4, #8
    fa46:	b121      	cbz	r1, fa52 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x52>
    fa48:	198a      	adds	r2, r1, r6
    fa4a:	b296      	uxth	r6, r2
    fa4c:	f7ff fcbc 	bl	f3c8 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fa50:	e006      	b.n	fa60 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x60>
    fa52:	7f63      	ldrb	r3, [r4, #29]
    fa54:	8862      	ldrh	r2, [r4, #2]
    fa56:	3308      	adds	r3, #8
    fa58:	1999      	adds	r1, r3, r6
    fa5a:	b289      	uxth	r1, r1
    fa5c:	f7ff fc9a 	bl	f394 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fa60:	4547      	cmp	r7, r8
    fa62:	d101      	bne.n	fa68 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x68>
    fa64:	8920      	ldrh	r0, [r4, #8]
    fa66:	8160      	strh	r0, [r4, #10]
    fa68:	4630      	mov	r0, r6
    fa6a:	e7db      	b.n	fa24 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>

0000fa6c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    fa6c:	f101 0308 	add.w	r3, r1, #8
    fa70:	4418      	add	r0, r3
    fa72:	4350      	muls	r0, r2
    fa74:	314a      	adds	r1, #74	; 0x4a
    fa76:	4408      	add	r0, r1
    fa78:	b280      	uxth	r0, r0
    fa7a:	4770      	bx	lr

0000fa7c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    fa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa80:	4688      	mov	r8, r1
    fa82:	88c1      	ldrh	r1, [r0, #6]
    fa84:	4604      	mov	r4, r0
    fa86:	8900      	ldrh	r0, [r0, #8]
    fa88:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    fa8c:	f104 0628 	add.w	r6, r4, #40	; 0x28
    fa90:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fa94:	eb06 0905 	add.w	r9, r6, r5
    fa98:	f7ff fcac 	bl	f3f4 <sdc_hci_cmd_lc_read_remote_version_information+0x64>
    fa9c:	2300      	movs	r3, #0
    fa9e:	bb80      	cbnz	r0, fb02 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x86>
    faa0:	7f60      	ldrb	r0, [r4, #29]
    faa2:	42af      	cmp	r7, r5
    faa4:	d904      	bls.n	fab0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x34>
    faa6:	1b79      	subs	r1, r7, r5
    faa8:	3008      	adds	r0, #8
    faaa:	1a09      	subs	r1, r1, r0
    faac:	2700      	movs	r7, #0
    faae:	e003      	b.n	fab8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3c>
    fab0:	8861      	ldrh	r1, [r4, #2]
    fab2:	3008      	adds	r0, #8
    fab4:	1b49      	subs	r1, r1, r5
    fab6:	1a09      	subs	r1, r1, r0
    fab8:	2900      	cmp	r1, #0
    faba:	db23      	blt.n	fb04 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    fabc:	89e0      	ldrh	r0, [r4, #14]
    fabe:	b160      	cbz	r0, fada <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
    fac0:	f8b9 0000 	ldrh.w	r0, [r9]
    fac4:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    fac8:	b13a      	cbz	r2, fada <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
    faca:	1ab9      	subs	r1, r7, r2
    facc:	7723      	strb	r3, [r4, #28]
    face:	4541      	cmp	r1, r8
    fad0:	db18      	blt.n	fb04 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    fad2:	89e1      	ldrh	r1, [r4, #14]
    fad4:	4431      	add	r1, r6
    fad6:	1a08      	subs	r0, r1, r0
    fad8:	e009      	b.n	faee <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x72>
    fada:	1a09      	subs	r1, r1, r0
    fadc:	7723      	strb	r3, [r4, #28]
    fade:	4541      	cmp	r1, r8
    fae0:	db0a      	blt.n	faf8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x7c>
    fae2:	7f60      	ldrb	r0, [r4, #29]
    fae4:	89e1      	ldrh	r1, [r4, #14]
    fae6:	3008      	adds	r0, #8
    fae8:	4428      	add	r0, r5
    faea:	4431      	add	r1, r6
    faec:	4408      	add	r0, r1
    faee:	1ec0      	subs	r0, r0, #3
    faf0:	f8a4 8012 	strh.w	r8, [r4, #18]
    faf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    faf8:	4547      	cmp	r7, r8
    fafa:	db03      	blt.n	fb04 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    fafc:	2101      	movs	r1, #1
    fafe:	7721      	strb	r1, [r4, #28]
    fb00:	e7e7      	b.n	fad2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x56>
    fb02:	e7ff      	b.n	fb04 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    fb04:	8263      	strh	r3, [r4, #18]
    fb06:	2000      	movs	r0, #0
    fb08:	e7f4      	b.n	faf4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x78>

0000fb0a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    fb0a:	2100      	movs	r1, #0
    fb0c:	81c1      	strh	r1, [r0, #14]
    fb0e:	7701      	strb	r1, [r0, #28]
    fb10:	8241      	strh	r1, [r0, #18]
    fb12:	75c1      	strb	r1, [r0, #23]
    fb14:	7581      	strb	r1, [r0, #22]
    fb16:	4770      	bx	lr

0000fb18 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    fb18:	b570      	push	{r4, r5, r6, lr}
    fb1a:	2300      	movs	r3, #0
    fb1c:	2908      	cmp	r1, #8
    fb1e:	d204      	bcs.n	fb2a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    fb20:	f240 11cb 	movw	r1, #459	; 0x1cb
    fb24:	2015      	movs	r0, #21
    fb26:	f7f4 f82d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb2a:	6802      	ldr	r2, [r0, #0]
    fb2c:	b90a      	cbnz	r2, fb32 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    fb2e:	e01e      	b.n	fb6e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    fb30:	4610      	mov	r0, r2
    fb32:	6802      	ldr	r2, [r0, #0]
    fb34:	8893      	ldrh	r3, [r2, #4]
    fb36:	428b      	cmp	r3, r1
    fb38:	d002      	beq.n	fb40 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    fb3a:	6813      	ldr	r3, [r2, #0]
    fb3c:	2b00      	cmp	r3, #0
    fb3e:	d1f7      	bne.n	fb30 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    fb40:	8894      	ldrh	r4, [r2, #4]
    fb42:	4613      	mov	r3, r2
    fb44:	428c      	cmp	r4, r1
    fb46:	d101      	bne.n	fb4c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    fb48:	6811      	ldr	r1, [r2, #0]
    fb4a:	e00d      	b.n	fb68 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    fb4c:	f101 0508 	add.w	r5, r1, #8
    fb50:	b2ad      	uxth	r5, r5
    fb52:	42ac      	cmp	r4, r5
    fb54:	d30a      	bcc.n	fb6c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    fb56:	1a64      	subs	r4, r4, r1
    fb58:	4411      	add	r1, r2
    fb5a:	2200      	movs	r2, #0
    fb5c:	600a      	str	r2, [r1, #0]
    fb5e:	808c      	strh	r4, [r1, #4]
    fb60:	6802      	ldr	r2, [r0, #0]
    fb62:	6812      	ldr	r2, [r2, #0]
    fb64:	6002      	str	r2, [r0, #0]
    fb66:	600a      	str	r2, [r1, #0]
    fb68:	6001      	str	r1, [r0, #0]
    fb6a:	e000      	b.n	fb6e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    fb6c:	2300      	movs	r3, #0
    fb6e:	4618      	mov	r0, r3
    fb70:	bd70      	pop	{r4, r5, r6, pc}

0000fb72 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    fb72:	b510      	push	{r4, lr}
    fb74:	000c      	movs	r4, r1
    fb76:	d006      	beq.n	fb86 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    fb78:	2c08      	cmp	r4, #8
    fb7a:	d209      	bcs.n	fb90 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    fb7c:	f240 1195 	movw	r1, #405	; 0x195
    fb80:	2015      	movs	r0, #21
    fb82:	f7f3 ffff 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb86:	b108      	cbz	r0, fb8c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    fb88:	2100      	movs	r1, #0
    fb8a:	6001      	str	r1, [r0, #0]
    fb8c:	2000      	movs	r0, #0
    fb8e:	bd10      	pop	{r4, pc}
    fb90:	b118      	cbz	r0, fb9a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    fb92:	b2a1      	uxth	r1, r4
    fb94:	6800      	ldr	r0, [r0, #0]
    fb96:	f000 f814 	bl	fbc2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    fb9a:	1d20      	adds	r0, r4, #4
    fb9c:	bd10      	pop	{r4, pc}

0000fb9e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    fb9e:	2100      	movs	r1, #0
    fba0:	6802      	ldr	r2, [r0, #0]
    fba2:	e003      	b.n	fbac <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    fba4:	8893      	ldrh	r3, [r2, #4]
    fba6:	6812      	ldr	r2, [r2, #0]
    fba8:	4419      	add	r1, r3
    fbaa:	b289      	uxth	r1, r1
    fbac:	2a00      	cmp	r2, #0
    fbae:	d1f9      	bne.n	fba4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    fbb0:	f000 b807 	b.w	fbc2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000fbb4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    fbb4:	2300      	movs	r3, #0
    fbb6:	600b      	str	r3, [r1, #0]
    fbb8:	808a      	strh	r2, [r1, #4]
    fbba:	6802      	ldr	r2, [r0, #0]
    fbbc:	600a      	str	r2, [r1, #0]
    fbbe:	6001      	str	r1, [r0, #0]
    fbc0:	4770      	bx	lr
    fbc2:	2300      	movs	r3, #0
    fbc4:	6043      	str	r3, [r0, #4]
    fbc6:	1d02      	adds	r2, r0, #4
    fbc8:	8101      	strh	r1, [r0, #8]
    fbca:	6002      	str	r2, [r0, #0]
    fbcc:	4770      	bx	lr

0000fbce <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    fbce:	b50e      	push	{r1, r2, r3, lr}
    fbd0:	4669      	mov	r1, sp
    fbd2:	f000 f818 	bl	fc06 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fbd6:	b120      	cbz	r0, fbe2 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    fbd8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    fbdc:	2017      	movs	r0, #23
    fbde:	f7f3 ffd1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbe2:	4668      	mov	r0, sp
    fbe4:	f7f4 f9d4 	bl	3f90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fbe8:	b108      	cbz	r0, fbee <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    fbea:	2000      	movs	r0, #0
    fbec:	bd0e      	pop	{r1, r2, r3, pc}
    fbee:	2001      	movs	r0, #1
    fbf0:	bd0e      	pop	{r1, r2, r3, pc}

0000fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    fbf2:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    fbf6:	3aff      	subs	r2, #255	; 0xff
    fbf8:	d001      	beq.n	fbfe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    fbfa:	2902      	cmp	r1, #2
    fbfc:	d301      	bcc.n	fc02 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    fbfe:	2000      	movs	r0, #0
    fc00:	4770      	bx	lr
    fc02:	f7f4 ba5b 	b.w	40bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>

0000fc06 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    fc06:	b570      	push	{r4, r5, r6, lr}
    fc08:	4605      	mov	r5, r0
    fc0a:	460c      	mov	r4, r1
    fc0c:	4608      	mov	r0, r1
    fc0e:	f000 f899 	bl	fd44 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    fc12:	b108      	cbz	r0, fc18 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    fc14:	2010      	movs	r0, #16
    fc16:	bd70      	pop	{r4, r5, r6, pc}
    fc18:	2d02      	cmp	r5, #2
    fc1a:	d301      	bcc.n	fc20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    fc1c:	2007      	movs	r0, #7
    fc1e:	bd70      	pop	{r4, r5, r6, pc}
    fc20:	7025      	strb	r5, [r4, #0]
    fc22:	2000      	movs	r0, #0
    fc24:	8060      	strh	r0, [r4, #2]
    fc26:	bd70      	pop	{r4, r5, r6, pc}
    fc28:	b510      	push	{r4, lr}
    fc2a:	4604      	mov	r4, r0
    fc2c:	f7f4 fa08 	bl	4040 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    fc30:	42a0      	cmp	r0, r4
    fc32:	d901      	bls.n	fc38 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    fc34:	2001      	movs	r0, #1
    fc36:	bd10      	pop	{r4, pc}
    fc38:	2000      	movs	r0, #0
    fc3a:	bd10      	pop	{r4, pc}

0000fc3c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    fc3c:	b570      	push	{r4, r5, r6, lr}
    fc3e:	460e      	mov	r6, r1
    fc40:	461d      	mov	r5, r3
    fc42:	4611      	mov	r1, r2
    fc44:	f000 f811 	bl	fc6a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    fc48:	4604      	mov	r4, r0
    fc4a:	4629      	mov	r1, r5
    fc4c:	4630      	mov	r0, r6
    fc4e:	f000 f803 	bl	fc58 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    fc52:	4420      	add	r0, r4
    fc54:	1d00      	adds	r0, r0, #4
    fc56:	bd70      	pop	{r4, r5, r6, pc}
    fc58:	b510      	push	{r4, lr}
    fc5a:	460a      	mov	r2, r1
    fc5c:	2101      	movs	r1, #1
    fc5e:	f7ff ff05 	bl	fa6c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    fc62:	1cc0      	adds	r0, r0, #3
    fc64:	f020 0003 	bic.w	r0, r0, #3
    fc68:	bd10      	pop	{r4, pc}
    fc6a:	b510      	push	{r4, lr}
    fc6c:	460a      	mov	r2, r1
    fc6e:	2101      	movs	r1, #1
    fc70:	f7ff fefc 	bl	fa6c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    fc74:	1cc0      	adds	r0, r0, #3
    fc76:	f020 0003 	bic.w	r0, r0, #3
    fc7a:	bd10      	pop	{r4, pc}
    fc7c:	2800      	cmp	r0, #0
    fc7e:	db09      	blt.n	fc94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    fc80:	f000 021f 	and.w	r2, r0, #31
    fc84:	2101      	movs	r1, #1
    fc86:	4091      	lsls	r1, r2
    fc88:	0940      	lsrs	r0, r0, #5
    fc8a:	0080      	lsls	r0, r0, #2
    fc8c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fc90:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fc94:	4770      	bx	lr

0000fc96 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    fc96:	f7f4 bc01 	b.w	449c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    fc9a:	2800      	cmp	r0, #0
    fc9c:	db09      	blt.n	fcb2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1c>
    fc9e:	f000 021f 	and.w	r2, r0, #31
    fca2:	2101      	movs	r1, #1
    fca4:	4091      	lsls	r1, r2
    fca6:	0940      	lsrs	r0, r0, #5
    fca8:	0080      	lsls	r0, r0, #2
    fcaa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fcae:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fcb2:	4770      	bx	lr
    fcb4:	2800      	cmp	r0, #0
    fcb6:	db0d      	blt.n	fcd4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x3e>
    fcb8:	f000 021f 	and.w	r2, r0, #31
    fcbc:	2101      	movs	r1, #1
    fcbe:	4091      	lsls	r1, r2
    fcc0:	0940      	lsrs	r0, r0, #5
    fcc2:	0080      	lsls	r0, r0, #2
    fcc4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fcc8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fccc:	f3bf 8f4f 	dsb	sy
    fcd0:	f3bf 8f6f 	isb	sy
    fcd4:	4770      	bx	lr

0000fcd6 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    fcd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    fcda:	2000      	movs	r0, #0
    fcdc:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    fce0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fce4:	2001      	movs	r0, #1
    fce6:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    fcea:	4770      	bx	lr
    fcec:	2800      	cmp	r0, #0
    fcee:	db04      	blt.n	fcfa <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x24>
    fcf0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fcf4:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    fcf8:	e005      	b.n	fd06 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x30>
    fcfa:	f000 000f 	and.w	r0, r0, #15
    fcfe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fd02:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    fd06:	0940      	lsrs	r0, r0, #5
    fd08:	4770      	bx	lr
    fd0a:	f810 1f41 	ldrb.w	r1, [r0, #65]!
    fd0e:	7840      	ldrb	r0, [r0, #1]
    fd10:	4281      	cmp	r1, r0
    fd12:	d301      	bcc.n	fd18 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x42>
    fd14:	1a08      	subs	r0, r1, r0
    fd16:	e002      	b.n	fd1e <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x48>
    fd18:	f1c0 0041 	rsb	r0, r0, #65	; 0x41
    fd1c:	4408      	add	r0, r1
    fd1e:	b2c0      	uxtb	r0, r0
    fd20:	4770      	bx	lr
    fd22:	f810 1f41 	ldrb.w	r1, [r0, #65]!
    fd26:	2241      	movs	r2, #65	; 0x41
    fd28:	1c49      	adds	r1, r1, #1
    fd2a:	fbb1 f3f2 	udiv	r3, r1, r2
    fd2e:	fb02 1113 	mls	r1, r2, r3, r1
    fd32:	7840      	ldrb	r0, [r0, #1]
    fd34:	4281      	cmp	r1, r0
    fd36:	d101      	bne.n	fd3c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x66>
    fd38:	2001      	movs	r0, #1
    fd3a:	4770      	bx	lr
    fd3c:	2000      	movs	r0, #0
    fd3e:	4770      	bx	lr

0000fd40 <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>:
    fd40:	2040      	movs	r0, #64	; 0x40
    fd42:	4770      	bx	lr

0000fd44 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    fd44:	b108      	cbz	r0, fd4a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    fd46:	2000      	movs	r0, #0
    fd48:	4770      	bx	lr
    fd4a:	2001      	movs	r0, #1
    fd4c:	4770      	bx	lr

0000fd4e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    fd4e:	b510      	push	{r4, lr}
    fd50:	2900      	cmp	r1, #0
    fd52:	4604      	mov	r4, r0
    fd54:	f04f 0106 	mov.w	r1, #6
    fd58:	d002      	beq.n	fd60 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    fd5a:	f7f4 fd13 	bl	4784 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    fd5e:	e001      	b.n	fd64 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    fd60:	f7f4 fd26 	bl	47b0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    fd64:	7960      	ldrb	r0, [r4, #5]
    fd66:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    fd6a:	7160      	strb	r0, [r4, #5]
    fd6c:	bd10      	pop	{r4, pc}

0000fd6e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    fd6e:	b530      	push	{r4, r5, lr}
    fd70:	460c      	mov	r4, r1
    fd72:	4605      	mov	r5, r0
    fd74:	b08d      	sub	sp, #52	; 0x34
    fd76:	f04f 0103 	mov.w	r1, #3
    fd7a:	f104 0003 	add.w	r0, r4, #3
    fd7e:	b112      	cbz	r2, fd86 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    fd80:	f7f4 fd00 	bl	4784 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    fd84:	e001      	b.n	fd8a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    fd86:	f7f4 fd13 	bl	47b0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    fd8a:	7960      	ldrb	r0, [r4, #5]
    fd8c:	220d      	movs	r2, #13
    fd8e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    fd92:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    fd96:	7160      	strb	r0, [r4, #5]
    fd98:	2100      	movs	r1, #0
    fd9a:	a804      	add	r0, sp, #16
    fd9c:	f7fe fe44 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fda0:	78e0      	ldrb	r0, [r4, #3]
    fda2:	f88d 001f 	strb.w	r0, [sp, #31]
    fda6:	7920      	ldrb	r0, [r4, #4]
    fda8:	f88d 001e 	strb.w	r0, [sp, #30]
    fdac:	7960      	ldrb	r0, [r4, #5]
    fdae:	f88d 001d 	strb.w	r0, [sp, #29]
    fdb2:	6828      	ldr	r0, [r5, #0]
    fdb4:	9000      	str	r0, [sp, #0]
    fdb6:	6868      	ldr	r0, [r5, #4]
    fdb8:	9001      	str	r0, [sp, #4]
    fdba:	68a8      	ldr	r0, [r5, #8]
    fdbc:	9002      	str	r0, [sp, #8]
    fdbe:	68e8      	ldr	r0, [r5, #12]
    fdc0:	9003      	str	r0, [sp, #12]
    fdc2:	4668      	mov	r0, sp
    fdc4:	f7ff ff67 	bl	fc96 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    fdc8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    fdcc:	7020      	strb	r0, [r4, #0]
    fdce:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    fdd2:	7060      	strb	r0, [r4, #1]
    fdd4:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    fdd8:	70a0      	strb	r0, [r4, #2]
    fdda:	b00d      	add	sp, #52	; 0x34
    fddc:	bd30      	pop	{r4, r5, pc}

0000fdde <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    fdde:	b510      	push	{r4, lr}
    fde0:	f7fd f8de 	bl	cfa0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    fde4:	2800      	cmp	r0, #0
    fde6:	bf04      	itt	eq
    fde8:	20ff      	moveq	r0, #255	; 0xff
    fdea:	bd10      	popeq	{r4, pc}
    fdec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fdf0:	f7fd b894 	b.w	cf1c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

0000fdf4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    fdf4:	b510      	push	{r4, lr}
    fdf6:	f7f6 f82b 	bl	5e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    fdfa:	2810      	cmp	r0, #16
    fdfc:	bf04      	itt	eq
    fdfe:	2000      	moveq	r0, #0
    fe00:	bd10      	popeq	{r4, pc}
    fe02:	f7f6 f8df 	bl	5fc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x218>
    fe06:	2001      	movs	r0, #1
    fe08:	bd10      	pop	{r4, pc}

0000fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    fe0a:	b570      	push	{r4, r5, r6, lr}
    fe0c:	460c      	mov	r4, r1
    fe0e:	4605      	mov	r5, r0
    fe10:	2100      	movs	r1, #0
    fe12:	f7ff feee 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe16:	6060      	str	r0, [r4, #4]
    fe18:	b110      	cbz	r0, fe20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    fe1a:	2000      	movs	r0, #0
    fe1c:	7020      	strb	r0, [r4, #0]
    fe1e:	bd70      	pop	{r4, r5, r6, pc}
    fe20:	2101      	movs	r1, #1
    fe22:	4628      	mov	r0, r5
    fe24:	f7ff fee5 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe28:	6060      	str	r0, [r4, #4]
    fe2a:	2800      	cmp	r0, #0
    fe2c:	bf04      	itt	eq
    fe2e:	2002      	moveq	r0, #2
    fe30:	bd70      	popeq	{r4, r5, r6, pc}
    fe32:	2001      	movs	r0, #1
    fe34:	7020      	strb	r0, [r4, #0]
    fe36:	2000      	movs	r0, #0
    fe38:	bd70      	pop	{r4, r5, r6, pc}

0000fe3a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    fe3a:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
    fe3e:	2906      	cmp	r1, #6
    fe40:	bf9a      	itte	ls
    fe42:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    fe46:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
    fe4a:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    fe4e:	4348      	muls	r0, r1
    fe50:	4770      	bx	lr

0000fe52 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    fe52:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
    fe56:	f241 7270 	movw	r2, #6000	; 0x1770
    fe5a:	4291      	cmp	r1, r2
    fe5c:	bf94      	ite	ls
    fe5e:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    fe62:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    fe66:	fbb0 f0f1 	udiv	r0, r0, r1
    fe6a:	bf98      	it	ls
    fe6c:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
    fe70:	b280      	uxth	r0, r0
    fe72:	4770      	bx	lr

0000fe74 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    fe74:	b570      	push	{r4, r5, r6, lr}
    fe76:	4604      	mov	r4, r0
    fe78:	4290      	cmp	r0, r2
    fe7a:	bf28      	it	cs
    fe7c:	bd70      	popcs	{r4, r5, r6, pc}
    fe7e:	1b10      	subs	r0, r2, r4
    fe80:	2864      	cmp	r0, #100	; 0x64
    fe82:	d30b      	bcc.n	fe9c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
    fe84:	1825      	adds	r5, r4, r0
    fe86:	428d      	cmp	r5, r1
    fe88:	d806      	bhi.n	fe98 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
    fe8a:	2104      	movs	r1, #4
    fe8c:	f7f1 f9ca 	bl	1224 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    fe90:	2800      	cmp	r0, #0
    fe92:	bf04      	itt	eq
    fe94:	4628      	moveq	r0, r5
    fe96:	bd70      	popeq	{r4, r5, r6, pc}
    fe98:	4620      	mov	r0, r4
    fe9a:	bd70      	pop	{r4, r5, r6, pc}
    fe9c:	2064      	movs	r0, #100	; 0x64
    fe9e:	e7f1      	b.n	fe84 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

0000fea0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    fea0:	290c      	cmp	r1, #12
    fea2:	d265      	bcs.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fea4:	e8df f001 	tbb	[pc, r1]
    fea8:	130e0906 	.word	0x130e0906
    feac:	3c321b16 	.word	0x3c321b16
    feb0:	504a5e43 	.word	0x504a5e43
    feb4:	2a00      	cmp	r2, #0
    feb6:	d05d      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    feb8:	e05a      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    feba:	2a07      	cmp	r2, #7
    febc:	bf18      	it	ne
    febe:	2a08      	cmpne	r2, #8
    fec0:	d058      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fec2:	e055      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fec4:	2a0c      	cmp	r2, #12
    fec6:	bf18      	it	ne
    fec8:	2a0b      	cmpne	r2, #11
    feca:	d053      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fecc:	e050      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fece:	2a0d      	cmp	r2, #13
    fed0:	d050      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fed2:	e04d      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fed4:	f1a2 000f 	sub.w	r0, r2, #15
    fed8:	280c      	cmp	r0, #12
    feda:	d94b      	bls.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fedc:	e048      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fede:	b123      	cbz	r3, feea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x4a>
    fee0:	f1a2 0010 	sub.w	r0, r2, #16
    fee4:	280b      	cmp	r0, #11
    fee6:	d945      	bls.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fee8:	e042      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    feea:	2a12      	cmp	r2, #18
    feec:	bf18      	it	ne
    feee:	2a11      	cmpne	r2, #17
    fef0:	d040      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    fef2:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
    fef6:	b120      	cbz	r0, ff02 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x62>
    fef8:	2a12      	cmp	r2, #18
    fefa:	d339      	bcc.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    fefc:	2a1a      	cmp	r2, #26
    fefe:	d939      	bls.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff00:	e036      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff02:	2a16      	cmp	r2, #22
    ff04:	d334      	bcc.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff06:	2a1a      	cmp	r2, #26
    ff08:	d934      	bls.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff0a:	e031      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff0c:	f1a2 010f 	sub.w	r1, r2, #15
    ff10:	2903      	cmp	r1, #3
    ff12:	d92f      	bls.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff14:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
    ff18:	b318      	cbz	r0, ff62 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    ff1a:	2a1b      	cmp	r2, #27
    ff1c:	d92a      	bls.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff1e:	e027      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff20:	b113      	cbz	r3, ff28 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x88>
    ff22:	2a04      	cmp	r2, #4
    ff24:	d026      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff26:	e023      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff28:	2a04      	cmp	r2, #4
    ff2a:	d121      	bne.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff2c:	e022      	b.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff2e:	b113      	cbz	r3, ff36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x96>
    ff30:	2a06      	cmp	r2, #6
    ff32:	d01f      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff34:	e01c      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff36:	2a01      	cmp	r2, #1
    ff38:	d11a      	bne.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff3a:	e01b      	b.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff3c:	2a1c      	cmp	r2, #28
    ff3e:	bf1c      	itt	ne
    ff40:	2a1d      	cmpne	r2, #29
    ff42:	2a1e      	cmpne	r2, #30
    ff44:	d016      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff46:	e013      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff48:	2a1f      	cmp	r2, #31
    ff4a:	bf18      	it	ne
    ff4c:	2a20      	cmpne	r2, #32
    ff4e:	d011      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff50:	2a21      	cmp	r2, #33	; 0x21
    ff52:	bf18      	it	ne
    ff54:	2a22      	cmpne	r2, #34	; 0x22
    ff56:	d00d      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff58:	2a23      	cmp	r2, #35	; 0x23
    ff5a:	bf1c      	itt	ne
    ff5c:	2a24      	cmpne	r2, #36	; 0x24
    ff5e:	2a26      	cmpne	r2, #38	; 0x26
    ff60:	d008      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff62:	e005      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff64:	b113      	cbz	r3, ff6c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xcc>
    ff66:	2a0e      	cmp	r2, #14
    ff68:	d004      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff6a:	e001      	b.n	ff70 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
    ff6c:	2a05      	cmp	r2, #5
    ff6e:	d001      	beq.n	ff74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
    ff70:	2000      	movs	r0, #0
    ff72:	4770      	bx	lr
    ff74:	2001      	movs	r0, #1
    ff76:	4770      	bx	lr

0000ff78 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ff78:	280c      	cmp	r0, #12
    ff7a:	bf18      	it	ne
    ff7c:	280b      	cmpne	r0, #11
    ff7e:	d010      	beq.n	ffa2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
    ff80:	280d      	cmp	r0, #13
    ff82:	bf18      	it	ne
    ff84:	281f      	cmpne	r0, #31
    ff86:	d00c      	beq.n	ffa2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
    ff88:	2820      	cmp	r0, #32
    ff8a:	bf18      	it	ne
    ff8c:	2821      	cmpne	r0, #33	; 0x21
    ff8e:	d008      	beq.n	ffa2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
    ff90:	2822      	cmp	r0, #34	; 0x22
    ff92:	bf18      	it	ne
    ff94:	2823      	cmpne	r0, #35	; 0x23
    ff96:	d004      	beq.n	ffa2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
    ff98:	2824      	cmp	r0, #36	; 0x24
    ff9a:	bf1e      	ittt	ne
    ff9c:	2826      	cmpne	r0, #38	; 0x26
    ff9e:	2000      	movne	r0, #0
    ffa0:	4770      	bxne	lr
    ffa2:	f04f 0001 	mov.w	r0, #1
    ffa6:	4770      	bx	lr

0000ffa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ffa8:	f011 0f0c 	tst.w	r1, #12
    ffac:	d013      	beq.n	ffd6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2e>
    ffae:	f001 0104 	and.w	r1, r1, #4
    ffb2:	2900      	cmp	r1, #0
    ffb4:	bf0d      	iteet	eq
    ffb6:	2240      	moveq	r2, #64	; 0x40
    ffb8:	2210      	movne	r2, #16
    ffba:	2196      	movne	r1, #150	; 0x96
    ffbc:	f44f 7116 	moveq.w	r1, #600	; 0x258
    ffc0:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ffc4:	eba0 0301 	sub.w	r3, r0, r1
    ffc8:	4288      	cmp	r0, r1
    ffca:	bf88      	it	hi
    ffcc:	fb93 f0f2 	sdivhi	r0, r3, r2
    ffd0:	d90e      	bls.n	fff0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
    ffd2:	b280      	uxth	r0, r0
    ffd4:	4770      	bx	lr
    ffd6:	2902      	cmp	r1, #2
    ffd8:	d002      	beq.n	ffe0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    ffda:	2870      	cmp	r0, #112	; 0x70
    ffdc:	d908      	bls.n	fff0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
    ffde:	e009      	b.n	fff4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4c>
    ffe0:	283c      	cmp	r0, #60	; 0x3c
    ffe2:	d905      	bls.n	fff0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
    ffe4:	383c      	subs	r0, #60	; 0x3c
    ffe6:	17c1      	asrs	r1, r0, #31
    ffe8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ffec:	1080      	asrs	r0, r0, #2
    ffee:	e7f0      	b.n	ffd2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
    fff0:	2000      	movs	r0, #0
    fff2:	e7ee      	b.n	ffd2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
    fff4:	3870      	subs	r0, #112	; 0x70
    fff6:	17c1      	asrs	r1, r0, #31
    fff8:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    fffc:	10c0      	asrs	r0, r0, #3
    fffe:	e7e8      	b.n	ffd2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>

00010000 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   10000:	6809      	ldr	r1, [r1, #0]
   10002:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
   10006:	4770      	bx	lr

00010008 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   10008:	f010 0f01 	tst.w	r0, #1
   1000c:	bf1c      	itt	ne
   1000e:	2001      	movne	r0, #1
   10010:	4770      	bxne	lr
   10012:	f010 0f02 	tst.w	r0, #2
   10016:	bf1c      	itt	ne
   10018:	2002      	movne	r0, #2
   1001a:	4770      	bxne	lr
   1001c:	f010 0004 	ands.w	r0, r0, #4
   10020:	bf18      	it	ne
   10022:	2008      	movne	r0, #8
   10024:	4770      	bx	lr

00010026 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   10026:	2901      	cmp	r1, #1
   10028:	d002      	beq.n	10030 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0xa>
   1002a:	2902      	cmp	r1, #2
   1002c:	d005      	beq.n	1003a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x14>
   1002e:	e007      	b.n	10040 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
   10030:	2800      	cmp	r0, #0
   10032:	bf04      	itt	eq
   10034:	f240 40e2 	movweq	r0, #1250	; 0x4e2
   10038:	4770      	bxeq	lr
   1003a:	f640 10c4 	movw	r0, #2500	; 0x9c4
   1003e:	4770      	bx	lr
   10040:	b510      	push	{r4, lr}
   10042:	f240 514a 	movw	r1, #1354	; 0x54a
   10046:	2029      	movs	r0, #41	; 0x29
   10048:	f7f3 fd9c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001004c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
   1004c:	2a16      	cmp	r2, #22
   1004e:	d110      	bne.n	10072 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   10050:	222a      	movs	r2, #42	; 0x2a
   10052:	280c      	cmp	r0, #12
   10054:	bf18      	it	ne
   10056:	280d      	cmpne	r0, #13
   10058:	d00f      	beq.n	1007a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   1005a:	f04f 0c23 	mov.w	ip, #35	; 0x23
   1005e:	281f      	cmp	r0, #31
   10060:	d00d      	beq.n	1007e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   10062:	b131      	cbz	r1, 10072 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   10064:	7808      	ldrb	r0, [r1, #0]
   10066:	2801      	cmp	r0, #1
   10068:	bf18      	it	ne
   1006a:	2800      	cmpne	r0, #0
   1006c:	d005      	beq.n	1007a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   1006e:	2816      	cmp	r0, #22
   10070:	d005      	beq.n	1007e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   10072:	2000      	movs	r0, #0
   10074:	4770      	bx	lr
   10076:	2001      	movs	r0, #1
   10078:	4770      	bx	lr
   1007a:	701a      	strb	r2, [r3, #0]
   1007c:	e7fb      	b.n	10076 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
   1007e:	f883 c000 	strb.w	ip, [r3]
   10082:	e7f8      	b.n	10076 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>

00010084 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
   10084:	b418      	push	{r3, r4}
   10086:	b2cb      	uxtb	r3, r1
   10088:	f3c1 2c07 	ubfx	ip, r1, #8, #8
   1008c:	b2c1      	uxtb	r1, r0
   1008e:	f3c0 2007 	ubfx	r0, r0, #8, #8
   10092:	2b01      	cmp	r3, #1
   10094:	d005      	beq.n	100a2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x1e>
   10096:	2b02      	cmp	r3, #2
   10098:	bf08      	it	eq
   1009a:	f1bc 0f02 	cmpeq.w	ip, #2
   1009e:	d01a      	beq.n	100d6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   100a0:	e002      	b.n	100a8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
   100a2:	f1bc 0f01 	cmp.w	ip, #1
   100a6:	d016      	beq.n	100d6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   100a8:	2901      	cmp	r1, #1
   100aa:	d004      	beq.n	100b6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x32>
   100ac:	2902      	cmp	r1, #2
   100ae:	bf08      	it	eq
   100b0:	2802      	cmpeq	r0, #2
   100b2:	d010      	beq.n	100d6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   100b4:	e001      	b.n	100ba <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
   100b6:	2801      	cmp	r0, #1
   100b8:	d00d      	beq.n	100d6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   100ba:	ea01 010c 	and.w	r1, r1, ip
   100be:	f361 0207 	bfi	r2, r1, #0, #8
   100c2:	4018      	ands	r0, r3
   100c4:	f360 220f 	bfi	r2, r0, #8, #8
   100c8:	b2d0      	uxtb	r0, r2
   100ca:	f010 0f02 	tst.w	r0, #2
   100ce:	bf18      	it	ne
   100d0:	2002      	movne	r0, #2
   100d2:	d10b      	bne.n	100ec <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   100d4:	e006      	b.n	100e4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x60>
   100d6:	4008      	ands	r0, r1
   100d8:	ea03 010c 	and.w	r1, r3, ip
   100dc:	4008      	ands	r0, r1
   100de:	f360 0207 	bfi	r2, r0, #0, #8
   100e2:	e7ef      	b.n	100c4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x40>
   100e4:	f010 0001 	ands.w	r0, r0, #1
   100e8:	bf18      	it	ne
   100ea:	2001      	movne	r0, #1
   100ec:	f88d 0000 	strb.w	r0, [sp]
   100f0:	f3c2 2007 	ubfx	r0, r2, #8, #8
   100f4:	f010 0f02 	tst.w	r0, #2
   100f8:	bf18      	it	ne
   100fa:	2002      	movne	r0, #2
   100fc:	d103      	bne.n	10106 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x82>
   100fe:	f010 0001 	ands.w	r0, r0, #1
   10102:	bf18      	it	ne
   10104:	2001      	movne	r0, #1
   10106:	f88d 0001 	strb.w	r0, [sp, #1]
   1010a:	f8bd 0000 	ldrh.w	r0, [sp]
   1010e:	bc18      	pop	{r3, r4}
   10110:	4770      	bx	lr

00010112 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   10112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10116:	460c      	mov	r4, r1
   10118:	4605      	mov	r5, r0
   1011a:	68c7      	ldr	r7, [r0, #12]
   1011c:	f7f1 fd08 	bl	1b30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   10120:	b198      	cbz	r0, 1014a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   10122:	b1bc      	cbz	r4, 10154 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   10124:	4638      	mov	r0, r7
   10126:	68e9      	ldr	r1, [r5, #12]
   10128:	f7f1 f9aa 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1012c:	2800      	cmp	r0, #0
   1012e:	dd11      	ble.n	10154 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   10130:	4420      	add	r0, r4
   10132:	1e40      	subs	r0, r0, #1
   10134:	fbb0 f6f4 	udiv	r6, r0, r4
   10138:	fb06 f104 	mul.w	r1, r6, r4
   1013c:	4638      	mov	r0, r7
   1013e:	f7f1 f969 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   10142:	60e8      	str	r0, [r5, #12]
   10144:	4630      	mov	r0, r6
   10146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1014a:	f240 31cf 	movw	r1, #975	; 0x3cf
   1014e:	2029      	movs	r0, #41	; 0x29
   10150:	f7f3 fd18 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10154:	2000      	movs	r0, #0
   10156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001015a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   1015a:	b538      	push	{r3, r4, r5, lr}
   1015c:	4605      	mov	r5, r0
   1015e:	460c      	mov	r4, r1
   10160:	4668      	mov	r0, sp
   10162:	f7fd fef7 	bl	df54 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   10166:	2800      	cmp	r0, #0
   10168:	bf08      	it	eq
   1016a:	bd38      	popeq	{r3, r4, r5, pc}
   1016c:	f99d 2000 	ldrsb.w	r2, [sp]
   10170:	7222      	strb	r2, [r4, #8]
   10172:	7ee0      	ldrb	r0, [r4, #27]
   10174:	7260      	strb	r0, [r4, #9]
   10176:	f994 100a 	ldrsb.w	r1, [r4, #10]
   1017a:	2000      	movs	r0, #0
   1017c:	1a51      	subs	r1, r2, r1
   1017e:	bf48      	it	mi
   10180:	4249      	negmi	r1, r1
   10182:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   10186:	428b      	cmp	r3, r1
   10188:	bfc8      	it	gt
   1018a:	bd38      	popgt	{r3, r4, r5, pc}
   1018c:	2bff      	cmp	r3, #255	; 0xff
   1018e:	bf08      	it	eq
   10190:	bd38      	popeq	{r3, r4, r5, pc}
   10192:	7ae1      	ldrb	r1, [r4, #11]
   10194:	1c49      	adds	r1, r1, #1
   10196:	b2c9      	uxtb	r1, r1
   10198:	72e1      	strb	r1, [r4, #11]
   1019a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1019e:	4299      	cmp	r1, r3
   101a0:	d803      	bhi.n	101aa <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   101a2:	7aa1      	ldrb	r1, [r4, #10]
   101a4:	297f      	cmp	r1, #127	; 0x7f
   101a6:	bf18      	it	ne
   101a8:	bd38      	popne	{r3, r4, r5, pc}
   101aa:	72a2      	strb	r2, [r4, #10]
   101ac:	2000      	movs	r0, #0
   101ae:	72e0      	strb	r0, [r4, #11]
   101b0:	2001      	movs	r0, #1
   101b2:	bd38      	pop	{r3, r4, r5, pc}

000101b4 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   101b4:	2300      	movs	r3, #0
   101b6:	6203      	str	r3, [r0, #32]
   101b8:	8502      	strh	r2, [r0, #40]	; 0x28
   101ba:	f240 2371 	movw	r3, #625	; 0x271
   101be:	435a      	muls	r2, r3
   101c0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   101c4:	1e52      	subs	r2, r2, #1
   101c6:	fbb2 f1f1 	udiv	r1, r2, r1
   101ca:	6241      	str	r1, [r0, #36]	; 0x24
   101cc:	4770      	bx	lr

000101ce <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
   101ce:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   101d2:	4607      	mov	r7, r0
   101d4:	4691      	mov	r9, r2
   101d6:	468a      	mov	sl, r1
   101d8:	f04f 0801 	mov.w	r8, #1
   101dc:	4608      	mov	r0, r1
   101de:	f000 f91d 	bl	1041c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
   101e2:	4604      	mov	r4, r0
   101e4:	4650      	mov	r0, sl
   101e6:	f000 f925 	bl	10434 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
   101ea:	4606      	mov	r6, r0
   101ec:	f010 0f01 	tst.w	r0, #1
   101f0:	bf18      	it	ne
   101f2:	2501      	movne	r5, #1
   101f4:	d02a      	beq.n	1024c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x7e>
   101f6:	f014 0f01 	tst.w	r4, #1
   101fa:	bf18      	it	ne
   101fc:	f04f 0b01 	movne.w	fp, #1
   10200:	d02f      	beq.n	10262 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x94>
   10202:	ea55 000b 	orrs.w	r0, r5, fp
   10206:	bf08      	it	eq
   10208:	f04f 0800 	moveq.w	r8, #0
   1020c:	f7fc fe14 	bl	ce38 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10210:	4230      	tst	r0, r6
   10212:	bf08      	it	eq
   10214:	2500      	moveq	r5, #0
   10216:	f7fc fe0f 	bl	ce38 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1021a:	4220      	tst	r0, r4
   1021c:	bf08      	it	eq
   1021e:	f04f 0b00 	moveq.w	fp, #0
   10222:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
   10226:	42a8      	cmp	r0, r5
   10228:	bf08      	it	eq
   1022a:	2500      	moveq	r5, #0
   1022c:	f889 5000 	strb.w	r5, [r9]
   10230:	f897 0067 	ldrb.w	r0, [r7, #103]	; 0x67
   10234:	4558      	cmp	r0, fp
   10236:	bf08      	it	eq
   10238:	f04f 0b00 	moveq.w	fp, #0
   1023c:	f889 b001 	strb.w	fp, [r9, #1]
   10240:	2d00      	cmp	r5, #0
   10242:	bf08      	it	eq
   10244:	f1bb 0f00 	cmpeq.w	fp, #0
   10248:	d128      	bne.n	1029c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xce>
   1024a:	e018      	b.n	1027e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb0>
   1024c:	f010 0f02 	tst.w	r0, #2
   10250:	bf18      	it	ne
   10252:	2502      	movne	r5, #2
   10254:	d1cf      	bne.n	101f6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   10256:	f016 0f04 	tst.w	r6, #4
   1025a:	bf14      	ite	ne
   1025c:	2508      	movne	r5, #8
   1025e:	2500      	moveq	r5, #0
   10260:	e7c9      	b.n	101f6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   10262:	f014 0f02 	tst.w	r4, #2
   10266:	bf18      	it	ne
   10268:	f04f 0b02 	movne.w	fp, #2
   1026c:	d1c9      	bne.n	10202 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   1026e:	f014 0f04 	tst.w	r4, #4
   10272:	bf14      	ite	ne
   10274:	f04f 0b08 	movne.w	fp, #8
   10278:	f04f 0b00 	moveq.w	fp, #0
   1027c:	e7c1      	b.n	10202 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   1027e:	4650      	mov	r0, sl
   10280:	f000 f8d6 	bl	10430 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
   10284:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
   10288:	1a40      	subs	r0, r0, r1
   1028a:	b200      	sxth	r0, r0
   1028c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   10290:	4288      	cmp	r0, r1
   10292:	dc01      	bgt.n	10298 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xca>
   10294:	2800      	cmp	r0, #0
   10296:	dc01      	bgt.n	1029c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xce>
   10298:	f04f 0800 	mov.w	r8, #0
   1029c:	4640      	mov	r0, r8
   1029e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

000102a2 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>:
   102a2:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
   102a6:	4281      	cmp	r1, r0
   102a8:	bf38      	it	cc
   102aa:	4608      	movcc	r0, r1
   102ac:	1a08      	subs	r0, r1, r0
   102ae:	6819      	ldr	r1, [r3, #0]
   102b0:	0840      	lsrs	r0, r0, #1
   102b2:	4401      	add	r1, r0
   102b4:	6019      	str	r1, [r3, #0]
   102b6:	6811      	ldr	r1, [r2, #0]
   102b8:	eba1 0100 	sub.w	r1, r1, r0
   102bc:	6011      	str	r1, [r2, #0]
   102be:	bf18      	it	ne
   102c0:	2001      	movne	r0, #1
   102c2:	4770      	bx	lr

000102c4 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   102c4:	f641 524c 	movw	r2, #7500	; 0x1d4c
   102c8:	4291      	cmp	r1, r2
   102ca:	bf34      	ite	cc
   102cc:	2164      	movcc	r1, #100	; 0x64
   102ce:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   102d2:	4348      	muls	r0, r1
   102d4:	4770      	bx	lr

000102d6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   102d6:	f641 524c 	movw	r2, #7500	; 0x1d4c
   102da:	4291      	cmp	r1, r2
   102dc:	bf34      	ite	cc
   102de:	2164      	movcc	r1, #100	; 0x64
   102e0:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   102e4:	fb10 f001 	smulbb	r0, r0, r1
   102e8:	4770      	bx	lr
   102ea:	b510      	push	{r4, lr}
   102ec:	7c0a      	ldrb	r2, [r1, #16]
   102ee:	f002 021f 	and.w	r2, r2, #31
   102f2:	740a      	strb	r2, [r1, #16]
   102f4:	2200      	movs	r2, #0
   102f6:	7642      	strb	r2, [r0, #25]
   102f8:	188b      	adds	r3, r1, r2
   102fa:	f893 c00c 	ldrb.w	ip, [r3, #12]
   102fe:	f00c 0301 	and.w	r3, ip, #1
   10302:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10306:	f00c 0401 	and.w	r4, ip, #1
   1030a:	4423      	add	r3, r4
   1030c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10310:	f00c 0401 	and.w	r4, ip, #1
   10314:	4423      	add	r3, r4
   10316:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1031a:	f00c 0401 	and.w	r4, ip, #1
   1031e:	4423      	add	r3, r4
   10320:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10324:	f00c 0401 	and.w	r4, ip, #1
   10328:	4423      	add	r3, r4
   1032a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1032e:	f00c 0401 	and.w	r4, ip, #1
   10332:	4423      	add	r3, r4
   10334:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10338:	f00c 0401 	and.w	r4, ip, #1
   1033c:	4423      	add	r3, r4
   1033e:	eb03 035c 	add.w	r3, r3, ip, lsr #1
   10342:	eb00 0c02 	add.w	ip, r0, r2
   10346:	1c52      	adds	r2, r2, #1
   10348:	f88c 3014 	strb.w	r3, [ip, #20]
   1034c:	f890 c019 	ldrb.w	ip, [r0, #25]
   10350:	2a05      	cmp	r2, #5
   10352:	4463      	add	r3, ip
   10354:	7643      	strb	r3, [r0, #25]
   10356:	dbcf      	blt.n	102f8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
   10358:	b2d8      	uxtb	r0, r3
   1035a:	2825      	cmp	r0, #37	; 0x25
   1035c:	bf98      	it	ls
   1035e:	bd10      	popls	{r4, pc}
   10360:	21d8      	movs	r1, #216	; 0xd8
   10362:	2029      	movs	r0, #41	; 0x29
   10364:	f7f3 fc0e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010368 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
   10368:	b430      	push	{r4, r5}
   1036a:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   1036e:	f8b0 4009 	ldrh.w	r4, [r0, #9]
   10372:	f8b0 c005 	ldrh.w	ip, [r0, #5]
   10376:	7903      	ldrb	r3, [r0, #4]
   10378:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   1037c:	2900      	cmp	r1, #0
   1037e:	bf18      	it	ne
   10380:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   10384:	d903      	bls.n	1038e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x26>
   10386:	f640 5107 	movw	r1, #3335	; 0xd07
   1038a:	428a      	cmp	r2, r1
   1038c:	d90b      	bls.n	103a6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3e>
   1038e:	1f91      	subs	r1, r2, #6
   10390:	f640 457a 	movw	r5, #3194	; 0xc7a
   10394:	42a9      	cmp	r1, r5
   10396:	d80f      	bhi.n	103b8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10398:	b173      	cbz	r3, 103b8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   1039a:	2b08      	cmp	r3, #8
   1039c:	bf98      	it	ls
   1039e:	4293      	cmpls	r3, r2
   103a0:	d20a      	bcs.n	103b8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   103a2:	4562      	cmp	r2, ip
   103a4:	d308      	bcc.n	103b8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   103a6:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   103aa:	d205      	bcs.n	103b8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   103ac:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   103b0:	bf9e      	ittt	ls
   103b2:	2001      	movls	r0, #1
   103b4:	bc30      	popls	{r4, r5}
   103b6:	4770      	bxls	lr
   103b8:	2000      	movs	r0, #0
   103ba:	bc30      	pop	{r4, r5}
   103bc:	4770      	bx	lr

000103be <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
   103be:	1d02      	adds	r2, r0, #4
   103c0:	4608      	mov	r0, r1
   103c2:	4611      	mov	r1, r2
   103c4:	f001 bdb7 	b.w	11f36 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

000103c8 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
   103c8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   103cc:	4770      	bx	lr

000103ce <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
   103ce:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   103d2:	4770      	bx	lr

000103d4 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
   103d4:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   103d8:	4770      	bx	lr

000103da <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
   103da:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   103de:	4770      	bx	lr

000103e0 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
   103e0:	8980      	ldrh	r0, [r0, #12]
   103e2:	8008      	strh	r0, [r1, #0]
   103e4:	4770      	bx	lr

000103e6 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
   103e6:	f8d0 0016 	ldr.w	r0, [r0, #22]
   103ea:	6008      	str	r0, [r1, #0]
   103ec:	4770      	bx	lr

000103ee <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
   103ee:	6842      	ldr	r2, [r0, #4]
   103f0:	600a      	str	r2, [r1, #0]
   103f2:	6880      	ldr	r0, [r0, #8]
   103f4:	6048      	str	r0, [r1, #4]
   103f6:	4770      	bx	lr

000103f8 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
   103f8:	f8d0 200e 	ldr.w	r2, [r0, #14]
   103fc:	600a      	str	r2, [r1, #0]
   103fe:	f8d0 0012 	ldr.w	r0, [r0, #18]
   10402:	6048      	str	r0, [r1, #4]
   10404:	4770      	bx	lr

00010406 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
   10406:	6842      	ldr	r2, [r0, #4]
   10408:	600a      	str	r2, [r1, #0]
   1040a:	6880      	ldr	r0, [r0, #8]
   1040c:	6048      	str	r0, [r1, #4]
   1040e:	4770      	bx	lr

00010410 <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>:
   10410:	7840      	ldrb	r0, [r0, #1]
   10412:	4770      	bx	lr

00010414 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   10414:	7800      	ldrb	r0, [r0, #0]
   10416:	f000 0003 	and.w	r0, r0, #3
   1041a:	4770      	bx	lr

0001041c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
   1041c:	7900      	ldrb	r0, [r0, #4]
   1041e:	4770      	bx	lr

00010420 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   10420:	8880      	ldrh	r0, [r0, #4]
   10422:	4770      	bx	lr

00010424 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   10424:	88c0      	ldrh	r0, [r0, #6]
   10426:	4770      	bx	lr

00010428 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   10428:	8900      	ldrh	r0, [r0, #8]
   1042a:	4770      	bx	lr

0001042c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   1042c:	8940      	ldrh	r0, [r0, #10]
   1042e:	4770      	bx	lr

00010430 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
   10430:	88c0      	ldrh	r0, [r0, #6]
   10432:	4770      	bx	lr

00010434 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
   10434:	7940      	ldrb	r0, [r0, #5]
   10436:	4770      	bx	lr

00010438 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   10438:	7900      	ldrb	r0, [r0, #4]
   1043a:	4770      	bx	lr

0001043c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   1043c:	7900      	ldrb	r0, [r0, #4]
   1043e:	4770      	bx	lr

00010440 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   10440:	8901      	ldrh	r1, [r0, #8]
   10442:	291b      	cmp	r1, #27
   10444:	bf24      	itt	cs
   10446:	8941      	ldrhcs	r1, [r0, #10]
   10448:	f5b1 7fa4 	cmpcs.w	r1, #328	; 0x148
   1044c:	d307      	bcc.n	1045e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x1e>
   1044e:	8881      	ldrh	r1, [r0, #4]
   10450:	291b      	cmp	r1, #27
   10452:	bf21      	itttt	cs
   10454:	88c0      	ldrhcs	r0, [r0, #6]
   10456:	f5b0 7fa4 	cmpcs.w	r0, #328	; 0x148
   1045a:	2001      	movcs	r0, #1
   1045c:	4770      	bxcs	lr
   1045e:	2000      	movs	r0, #0
   10460:	4770      	bx	lr

00010462 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   10462:	b510      	push	{r4, lr}
   10464:	29fb      	cmp	r1, #251	; 0xfb
   10466:	bf9c      	itt	ls
   10468:	7041      	strbls	r1, [r0, #1]
   1046a:	bd10      	popls	{r4, pc}
   1046c:	f240 5156 	movw	r1, #1366	; 0x556
   10470:	202a      	movs	r0, #42	; 0x2a
   10472:	f7f3 fb87 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010476 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   10476:	7901      	ldrb	r1, [r0, #4]
   10478:	f011 0f07 	tst.w	r1, #7
   1047c:	bf1b      	ittet	ne
   1047e:	7940      	ldrbne	r0, [r0, #5]
   10480:	f010 0f07 	tstne.w	r0, #7
   10484:	2000      	moveq	r0, #0
   10486:	2001      	movne	r0, #1
   10488:	4770      	bx	lr

0001048a <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
   1048a:	7901      	ldrb	r1, [r0, #4]
   1048c:	f011 0f07 	tst.w	r1, #7
   10490:	bf1b      	ittet	ne
   10492:	7940      	ldrbne	r0, [r0, #5]
   10494:	f010 0f07 	tstne.w	r0, #7
   10498:	2000      	moveq	r0, #0
   1049a:	2001      	movne	r0, #1
   1049c:	4770      	bx	lr

0001049e <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   1049e:	7900      	ldrb	r0, [r0, #4]
   104a0:	4770      	bx	lr

000104a2 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   104a2:	7940      	ldrb	r0, [r0, #5]
   104a4:	4770      	bx	lr

000104a6 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   104a6:	7101      	strb	r1, [r0, #4]
   104a8:	4770      	bx	lr

000104aa <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   104aa:	7141      	strb	r1, [r0, #5]
   104ac:	4770      	bx	lr

000104ae <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
   104ae:	b510      	push	{r4, lr}
   104b0:	2a1b      	cmp	r2, #27
   104b2:	d904      	bls.n	104be <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
   104b4:	f240 31bd 	movw	r1, #957	; 0x3bd
   104b8:	202a      	movs	r0, #42	; 0x2a
   104ba:	f7f3 fb63 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104be:	7042      	strb	r2, [r0, #1]
   104c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104c4:	1cc0      	adds	r0, r0, #3
   104c6:	f7f3 b9d3 	b.w	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

000104ca <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
   104ca:	6809      	ldr	r1, [r1, #0]
   104cc:	60c1      	str	r1, [r0, #12]
   104ce:	4770      	bx	lr

000104d0 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
   104d0:	680a      	ldr	r2, [r1, #0]
   104d2:	6042      	str	r2, [r0, #4]
   104d4:	6849      	ldr	r1, [r1, #4]
   104d6:	6081      	str	r1, [r0, #8]
   104d8:	4770      	bx	lr

000104da <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   104da:	680a      	ldr	r2, [r1, #0]
   104dc:	6042      	str	r2, [r0, #4]
   104de:	6849      	ldr	r1, [r1, #4]
   104e0:	6081      	str	r1, [r0, #8]
   104e2:	4770      	bx	lr

000104e4 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
   104e4:	680a      	ldr	r2, [r1, #0]
   104e6:	6042      	str	r2, [r0, #4]
   104e8:	6849      	ldr	r1, [r1, #4]
   104ea:	6081      	str	r1, [r0, #8]
   104ec:	4770      	bx	lr

000104ee <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   104ee:	7802      	ldrb	r2, [r0, #0]
   104f0:	f001 0103 	and.w	r1, r1, #3
   104f4:	f022 0203 	bic.w	r2, r2, #3
   104f8:	4311      	orrs	r1, r2
   104fa:	7001      	strb	r1, [r0, #0]
   104fc:	4770      	bx	lr

000104fe <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   104fe:	7101      	strb	r1, [r0, #4]
   10500:	0a09      	lsrs	r1, r1, #8
   10502:	7141      	strb	r1, [r0, #5]
   10504:	4770      	bx	lr

00010506 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   10506:	7181      	strb	r1, [r0, #6]
   10508:	0a09      	lsrs	r1, r1, #8
   1050a:	71c1      	strb	r1, [r0, #7]
   1050c:	4770      	bx	lr

0001050e <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   1050e:	7201      	strb	r1, [r0, #8]
   10510:	0a09      	lsrs	r1, r1, #8
   10512:	7241      	strb	r1, [r0, #9]
   10514:	4770      	bx	lr

00010516 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   10516:	7281      	strb	r1, [r0, #10]
   10518:	0a09      	lsrs	r1, r1, #8
   1051a:	72c1      	strb	r1, [r0, #11]
   1051c:	4770      	bx	lr

0001051e <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>:
   1051e:	7800      	ldrb	r0, [r0, #0]
   10520:	f000 000f 	and.w	r0, r0, #15
   10524:	4770      	bx	lr

00010526 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   10526:	b430      	push	{r4, r5}
   10528:	7802      	ldrb	r2, [r0, #0]
   1052a:	f002 020f 	and.w	r2, r2, #15
   1052e:	2a03      	cmp	r2, #3
   10530:	d02d      	beq.n	1058e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x68>
   10532:	2a05      	cmp	r2, #5
   10534:	d12e      	bne.n	10594 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10536:	f8b0 2019 	ldrh.w	r2, [r0, #25]
   1053a:	f8b0 401b 	ldrh.w	r4, [r0, #27]
   1053e:	f8b0 c017 	ldrh.w	ip, [r0, #23]
   10542:	7d83      	ldrb	r3, [r0, #22]
   10544:	2900      	cmp	r1, #0
   10546:	bf18      	it	ne
   10548:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   1054c:	d907      	bls.n	1055e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   1054e:	f640 5107 	movw	r1, #3335	; 0xd07
   10552:	428a      	cmp	r2, r1
   10554:	d803      	bhi.n	1055e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   10556:	7841      	ldrb	r1, [r0, #1]
   10558:	2922      	cmp	r1, #34	; 0x22
   1055a:	d11b      	bne.n	10594 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   1055c:	e00e      	b.n	1057c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x56>
   1055e:	7841      	ldrb	r1, [r0, #1]
   10560:	2922      	cmp	r1, #34	; 0x22
   10562:	d117      	bne.n	10594 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10564:	1f91      	subs	r1, r2, #6
   10566:	f640 457a 	movw	r5, #3194	; 0xc7a
   1056a:	42a9      	cmp	r1, r5
   1056c:	d812      	bhi.n	10594 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   1056e:	b18b      	cbz	r3, 10594 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10570:	2b08      	cmp	r3, #8
   10572:	bf98      	it	ls
   10574:	4293      	cmpls	r3, r2
   10576:	d20d      	bcs.n	10594 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10578:	4562      	cmp	r2, ip
   1057a:	d30b      	bcc.n	10594 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   1057c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   10580:	d208      	bcs.n	10594 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10582:	f8b0 001d 	ldrh.w	r0, [r0, #29]
   10586:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1058a:	d803      	bhi.n	10594 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   1058c:	e005      	b.n	1059a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   1058e:	7840      	ldrb	r0, [r0, #1]
   10590:	280c      	cmp	r0, #12
   10592:	d002      	beq.n	1059a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   10594:	bc30      	pop	{r4, r5}
   10596:	2000      	movs	r0, #0
   10598:	4770      	bx	lr
   1059a:	bc30      	pop	{r4, r5}
   1059c:	2001      	movs	r0, #1
   1059e:	4770      	bx	lr

000105a0 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>:
   105a0:	22c0      	movs	r2, #192	; 0xc0
   105a2:	ea02 1181 	and.w	r1, r2, r1, lsl #6
   105a6:	78c2      	ldrb	r2, [r0, #3]
   105a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   105ac:	4311      	orrs	r1, r2
   105ae:	70c1      	strb	r1, [r0, #3]
   105b0:	4770      	bx	lr

000105b2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   105b2:	b570      	push	{r4, r5, r6, lr}
   105b4:	4614      	mov	r4, r2
   105b6:	4605      	mov	r5, r0
   105b8:	2a1f      	cmp	r2, #31
   105ba:	d903      	bls.n	105c4 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   105bc:	21b0      	movs	r1, #176	; 0xb0
   105be:	202a      	movs	r0, #42	; 0x2a
   105c0:	f7f3 fae0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105c4:	f105 0009 	add.w	r0, r5, #9
   105c8:	f7f3 f952 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   105cc:	1da0      	adds	r0, r4, #6
   105ce:	7068      	strb	r0, [r5, #1]
   105d0:	bd70      	pop	{r4, r5, r6, pc}

000105d2 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>:
   105d2:	b570      	push	{r4, r5, r6, lr}
   105d4:	461e      	mov	r6, r3
   105d6:	000c      	movs	r4, r1
   105d8:	4605      	mov	r5, r0
   105da:	d00a      	beq.n	105f2 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x20>
   105dc:	4611      	mov	r1, r2
   105de:	f7f5 ffdf 	bl	65a0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
   105e2:	b158      	cbz	r0, 105fc <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x2a>
   105e4:	4428      	add	r0, r5
   105e6:	4632      	mov	r2, r6
   105e8:	4621      	mov	r1, r4
   105ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   105ee:	f7f3 b93f 	b.w	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   105f2:	f240 21be 	movw	r1, #702	; 0x2be
   105f6:	202a      	movs	r0, #42	; 0x2a
   105f8:	f7f3 fac4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105fc:	f240 21bf 	movw	r1, #703	; 0x2bf
   10600:	202a      	movs	r0, #42	; 0x2a
   10602:	f7f3 fabf 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010606 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>:
   10606:	b2c9      	uxtb	r1, r1
   10608:	f001 0201 	and.w	r2, r1, #1
   1060c:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10610:	441a      	add	r2, r3
   10612:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10616:	f3c1 0380 	ubfx	r3, r1, #2, #1
   1061a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1061e:	f3c1 03c0 	ubfx	r3, r1, #3, #1
   10622:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   10626:	f3c1 1300 	ubfx	r3, r1, #4, #1
   1062a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1062e:	441a      	add	r2, r3
   10630:	f3c1 1340 	ubfx	r3, r1, #5, #1
   10634:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10638:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   1063c:	f3c1 1380 	ubfx	r3, r1, #6, #1
   10640:	441a      	add	r2, r3
   10642:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10646:	d002      	beq.n	1064e <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ+0x48>
   10648:	1c52      	adds	r2, r2, #1
   1064a:	b2d2      	uxtb	r2, r2
   1064c:	7101      	strb	r1, [r0, #4]
   1064e:	78c3      	ldrb	r3, [r0, #3]
   10650:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   10654:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10658:	4319      	orrs	r1, r3
   1065a:	70c1      	strb	r1, [r0, #3]
   1065c:	1c51      	adds	r1, r2, #1
   1065e:	7041      	strb	r1, [r0, #1]
   10660:	4770      	bx	lr

00010662 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   10662:	b510      	push	{r4, lr}
   10664:	7802      	ldrb	r2, [r0, #0]
   10666:	f001 030f 	and.w	r3, r1, #15
   1066a:	f022 020f 	bic.w	r2, r2, #15
   1066e:	431a      	orrs	r2, r3
   10670:	7002      	strb	r2, [r0, #0]
   10672:	2909      	cmp	r1, #9
   10674:	d213      	bcs.n	1069e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
   10676:	e8df f001 	tbb	[pc, r1]
   1067a:	0705      	.short	0x0705
   1067c:	09050705 	.word	0x09050705
   10680:	000f0b05 	.word	0x000f0b05
   10684:	2106      	movs	r1, #6
   10686:	e008      	b.n	1069a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10688:	210c      	movs	r1, #12
   1068a:	e006      	b.n	1069a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   1068c:	2122      	movs	r1, #34	; 0x22
   1068e:	e004      	b.n	1069a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10690:	2101      	movs	r1, #1
   10692:	2200      	movs	r2, #0
   10694:	70c2      	strb	r2, [r0, #3]
   10696:	e000      	b.n	1069a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10698:	210e      	movs	r1, #14
   1069a:	7041      	strb	r1, [r0, #1]
   1069c:	bd10      	pop	{r4, pc}
   1069e:	216e      	movs	r1, #110	; 0x6e
   106a0:	202a      	movs	r0, #42	; 0x2a
   106a2:	f7f3 fa6f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000106a6 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   106a6:	680a      	ldr	r2, [r1, #0]
   106a8:	f8c0 2009 	str.w	r2, [r0, #9]
   106ac:	8889      	ldrh	r1, [r1, #4]
   106ae:	f8a0 100d 	strh.w	r1, [r0, #13]
   106b2:	4770      	bx	lr

000106b4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   106b4:	7802      	ldrb	r2, [r0, #0]
   106b6:	2380      	movs	r3, #128	; 0x80
   106b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   106bc:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   106c0:	4311      	orrs	r1, r2
   106c2:	7001      	strb	r1, [r0, #0]
   106c4:	4770      	bx	lr

000106c6 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   106c6:	680a      	ldr	r2, [r1, #0]
   106c8:	f8c0 2003 	str.w	r2, [r0, #3]
   106cc:	8889      	ldrh	r1, [r1, #4]
   106ce:	f8a0 1007 	strh.w	r1, [r0, #7]
   106d2:	4770      	bx	lr

000106d4 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   106d4:	7802      	ldrb	r2, [r0, #0]
   106d6:	2340      	movs	r3, #64	; 0x40
   106d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   106dc:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   106e0:	4311      	orrs	r1, r2
   106e2:	7001      	strb	r1, [r0, #0]
   106e4:	4770      	bx	lr

000106e6 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   106e6:	b570      	push	{r4, r5, r6, lr}
   106e8:	4614      	mov	r4, r2
   106ea:	4605      	mov	r5, r0
   106ec:	2a1f      	cmp	r2, #31
   106ee:	d903      	bls.n	106f8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   106f0:	21d2      	movs	r1, #210	; 0xd2
   106f2:	202a      	movs	r0, #42	; 0x2a
   106f4:	f7f3 fa46 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106f8:	f105 0009 	add.w	r0, r5, #9
   106fc:	f7f3 f8b8 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10700:	1da0      	adds	r0, r4, #6
   10702:	7068      	strb	r0, [r5, #1]
   10704:	bd70      	pop	{r4, r5, r6, pc}

00010706 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
   10706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1070a:	4604      	mov	r4, r0
   1070c:	b082      	sub	sp, #8
   1070e:	4688      	mov	r8, r1
   10710:	2000      	movs	r0, #0
   10712:	f7f3 fbeb 	bl	3eec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   10716:	4605      	mov	r5, r0
   10718:	2001      	movs	r0, #1
   1071a:	f7f3 fbe7 	bl	3eec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1071e:	4428      	add	r0, r5
   10720:	b2c7      	uxtb	r7, r0
   10722:	2600      	movs	r6, #0
   10724:	eb17 0508 	adds.w	r5, r7, r8
   10728:	bf18      	it	ne
   1072a:	f04f 0800 	movne.w	r8, #0
   1072e:	d01c      	beq.n	1076a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x64>
   10730:	8820      	ldrh	r0, [r4, #0]
   10732:	1c40      	adds	r0, r0, #1
   10734:	b280      	uxth	r0, r0
   10736:	8020      	strh	r0, [r4, #0]
   10738:	42a8      	cmp	r0, r5
   1073a:	bf28      	it	cs
   1073c:	f8a4 8000 	strhcs.w	r8, [r4]
   10740:	8820      	ldrh	r0, [r4, #0]
   10742:	42b8      	cmp	r0, r7
   10744:	bf28      	it	cs
   10746:	4285      	cmpcs	r5, r0
   10748:	d903      	bls.n	10752 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4c>
   1074a:	b002      	add	sp, #8
   1074c:	2000      	movs	r0, #0
   1074e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10752:	4669      	mov	r1, sp
   10754:	f7ff fb59 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10758:	2800      	cmp	r0, #0
   1075a:	bf04      	itt	eq
   1075c:	b002      	addeq	sp, #8
   1075e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10762:	1c70      	adds	r0, r6, #1
   10764:	b2c6      	uxtb	r6, r0
   10766:	42b5      	cmp	r5, r6
   10768:	d8e2      	bhi.n	10730 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x2a>
   1076a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1076e:	8020      	strh	r0, [r4, #0]
   10770:	b002      	add	sp, #8
   10772:	2012      	movs	r0, #18
   10774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010778 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   10778:	7801      	ldrb	r1, [r0, #0]
   1077a:	2900      	cmp	r1, #0
   1077c:	bf08      	it	eq
   1077e:	4770      	bxeq	lr
   10780:	6841      	ldr	r1, [r0, #4]
   10782:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
   10786:	2a00      	cmp	r2, #0
   10788:	bf08      	it	eq
   1078a:	4770      	bxeq	lr
   1078c:	2200      	movs	r2, #0
   1078e:	f881 210d 	strb.w	r2, [r1, #269]	; 0x10d
   10792:	6840      	ldr	r0, [r0, #4]
   10794:	f000 ba28 	b.w	10be8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>

00010798 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   10798:	b430      	push	{r4, r5}
   1079a:	8050      	strh	r0, [r2, #2]
   1079c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   107a0:	f8a2 c004 	strh.w	ip, [r2, #4]
   107a4:	898b      	ldrh	r3, [r1, #12]
   107a6:	80d3      	strh	r3, [r2, #6]
   107a8:	8948      	ldrh	r0, [r1, #10]
   107aa:	8110      	strh	r0, [r2, #8]
   107ac:	89cc      	ldrh	r4, [r1, #14]
   107ae:	8154      	strh	r4, [r2, #10]
   107b0:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
   107b2:	42a5      	cmp	r5, r4
   107b4:	bf04      	itt	eq
   107b6:	8d4c      	ldrheq	r4, [r1, #42]	; 0x2a
   107b8:	4284      	cmpeq	r4, r0
   107ba:	d106      	bne.n	107ca <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   107bc:	8e0c      	ldrh	r4, [r1, #48]	; 0x30
   107be:	429c      	cmp	r4, r3
   107c0:	bf02      	ittt	eq
   107c2:	8d8b      	ldrheq	r3, [r1, #44]	; 0x2c
   107c4:	4563      	cmpeq	r3, ip
   107c6:	2300      	moveq	r3, #0
   107c8:	d001      	beq.n	107ce <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x36>
   107ca:	f04f 0301 	mov.w	r3, #1
   107ce:	7313      	strb	r3, [r2, #12]
   107d0:	8548      	strh	r0, [r1, #42]	; 0x2a
   107d2:	8950      	ldrh	r0, [r2, #10]
   107d4:	85c8      	strh	r0, [r1, #46]	; 0x2e
   107d6:	8890      	ldrh	r0, [r2, #4]
   107d8:	8588      	strh	r0, [r1, #44]	; 0x2c
   107da:	88d0      	ldrh	r0, [r2, #6]
   107dc:	8608      	strh	r0, [r1, #48]	; 0x30
   107de:	f04f 0001 	mov.w	r0, #1
   107e2:	7010      	strb	r0, [r2, #0]
   107e4:	bc30      	pop	{r4, r5}
   107e6:	4770      	bx	lr

000107e8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   107e8:	888a      	ldrh	r2, [r1, #4]
   107ea:	890b      	ldrh	r3, [r1, #8]
   107ec:	f8b1 c002 	ldrh.w	ip, [r1, #2]
   107f0:	88c9      	ldrh	r1, [r1, #6]
   107f2:	f8a0 c044 	strh.w	ip, [r0, #68]	; 0x44
   107f6:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
   107fa:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   107fe:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
   10802:	4770      	bx	lr

00010804 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   10804:	b4f0      	push	{r4, r5, r6, r7}
   10806:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1080a:	2696      	movs	r6, #150	; 0x96
   1080c:	f641 534c 	movw	r3, #7500	; 0x1d4c
   10810:	459c      	cmp	ip, r3
   10812:	bf3a      	itte	cc
   10814:	264d      	movcc	r6, #77	; 0x4d
   10816:	4635      	movcc	r5, r6
   10818:	2596      	movcs	r5, #150	; 0x96
   1081a:	f890 c066 	ldrb.w	ip, [r0, #102]	; 0x66
   1081e:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
   10822:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10824:	f1bc 0f02 	cmp.w	ip, #2
   10828:	bf07      	ittee	eq
   1082a:	009b      	lsleq	r3, r3, #2
   1082c:	333c      	addeq	r3, #60	; 0x3c
   1082e:	00db      	lslne	r3, r3, #3
   10830:	3370      	addne	r3, #112	; 0x70
   10832:	fa1f fc83 	uxth.w	ip, r3
   10836:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   1083a:	f8b0 7042 	ldrh.w	r7, [r0, #66]	; 0x42
   1083e:	42bb      	cmp	r3, r7
   10840:	bf28      	it	cs
   10842:	463b      	movcs	r3, r7
   10844:	4563      	cmp	r3, ip
   10846:	bf28      	it	cs
   10848:	4663      	movcs	r3, ip
   1084a:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   1084e:	2c02      	cmp	r4, #2
   10850:	bf07      	ittee	eq
   10852:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   10856:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
   1085a:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
   1085e:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
   10862:	fa1f f48c 	uxth.w	r4, ip
   10866:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	; 0x4a
   1086a:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   1086e:	4584      	cmp	ip, r0
   10870:	bf28      	it	cs
   10872:	4684      	movcs	ip, r0
   10874:	45a4      	cmp	ip, r4
   10876:	bf28      	it	cs
   10878:	46a4      	movcs	ip, r4
   1087a:	eb03 000c 	add.w	r0, r3, ip
   1087e:	4428      	add	r0, r5
   10880:	1d80      	adds	r0, r0, #6
   10882:	4430      	add	r0, r6
   10884:	4410      	add	r0, r2
   10886:	4288      	cmp	r0, r1
   10888:	bf94      	ite	ls
   1088a:	1a08      	subls	r0, r1, r0
   1088c:	2000      	movhi	r0, #0
   1088e:	bcf0      	pop	{r4, r5, r6, r7}
   10890:	4770      	bx	lr

00010892 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   10892:	b470      	push	{r4, r5, r6}
   10894:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   10898:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
   1089a:	8e45      	ldrh	r5, [r0, #50]	; 0x32
   1089c:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
   1089e:	428a      	cmp	r2, r1
   108a0:	bf28      	it	cs
   108a2:	460a      	movcs	r2, r1
   108a4:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   108a8:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
   108ac:	428b      	cmp	r3, r1
   108ae:	bf38      	it	cc
   108b0:	4619      	movcc	r1, r3
   108b2:	8642      	strh	r2, [r0, #50]	; 0x32
   108b4:	86c1      	strh	r1, [r0, #54]	; 0x36
   108b6:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   108ba:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   108bc:	4594      	cmp	ip, r2
   108be:	bf38      	it	cc
   108c0:	4694      	movcc	ip, r2
   108c2:	428b      	cmp	r3, r1
   108c4:	bf38      	it	cc
   108c6:	460b      	movcc	r3, r1
   108c8:	f8a0 c038 	strh.w	ip, [r0, #56]	; 0x38
   108cc:	8743      	strh	r3, [r0, #58]	; 0x3a
   108ce:	42aa      	cmp	r2, r5
   108d0:	bf0a      	itet	eq
   108d2:	42a1      	cmpeq	r1, r4
   108d4:	2301      	movne	r3, #1
   108d6:	2300      	moveq	r3, #0
   108d8:	8e04      	ldrh	r4, [r0, #48]	; 0x30
   108da:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   108de:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   108e0:	f8b0 c034 	ldrh.w	ip, [r0, #52]	; 0x34
   108e4:	428a      	cmp	r2, r1
   108e6:	bf28      	it	cs
   108e8:	460a      	movcs	r2, r1
   108ea:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
   108ee:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
   108f2:	428d      	cmp	r5, r1
   108f4:	bf38      	it	cc
   108f6:	4629      	movcc	r1, r5
   108f8:	f890 505c 	ldrb.w	r5, [r0, #92]	; 0x5c
   108fc:	2d02      	cmp	r5, #2
   108fe:	d00a      	beq.n	10916 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
   10900:	8602      	strh	r2, [r0, #48]	; 0x30
   10902:	8681      	strh	r1, [r0, #52]	; 0x34
   10904:	42a2      	cmp	r2, r4
   10906:	bf0a      	itet	eq
   10908:	4561      	cmpeq	r1, ip
   1090a:	2001      	movne	r0, #1
   1090c:	2000      	moveq	r0, #0
   1090e:	ea40 0003 	orr.w	r0, r0, r3
   10912:	bc70      	pop	{r4, r5, r6}
   10914:	4770      	bx	lr
   10916:	4294      	cmp	r4, r2
   10918:	bf38      	it	cc
   1091a:	4622      	movcc	r2, r4
   1091c:	458c      	cmp	ip, r1
   1091e:	bf38      	it	cc
   10920:	4661      	movcc	r1, ip
   10922:	2500      	movs	r5, #0
   10924:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
   10928:	e7ea      	b.n	10900 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6e>

0001092a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   1092a:	b4f0      	push	{r4, r5, r6, r7}
   1092c:	6845      	ldr	r5, [r0, #4]
   1092e:	f641 534c 	movw	r3, #7500	; 0x1d4c
   10932:	429d      	cmp	r5, r3
   10934:	bf34      	ite	cc
   10936:	264d      	movcc	r6, #77	; 0x4d
   10938:	2696      	movcs	r6, #150	; 0x96
   1093a:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
   1093e:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   10942:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
   10946:	2c02      	cmp	r4, #2
   10948:	bf07      	ittee	eq
   1094a:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   1094e:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
   10952:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
   10956:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
   1095a:	fa1f f48c 	uxth.w	r4, ip
   1095e:	f8b0 7046 	ldrh.w	r7, [r0, #70]	; 0x46
   10962:	f8b0 c042 	ldrh.w	ip, [r0, #66]	; 0x42
   10966:	4567      	cmp	r7, ip
   10968:	bf38      	it	cc
   1096a:	46bc      	movcc	ip, r7
   1096c:	45a4      	cmp	ip, r4
   1096e:	bf38      	it	cc
   10970:	4664      	movcc	r4, ip
   10972:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   10976:	2b02      	cmp	r3, #2
   10978:	bf07      	ittee	eq
   1097a:	ea4f 038c 	moveq.w	r3, ip, lsl #2
   1097e:	333c      	addeq	r3, #60	; 0x3c
   10980:	ea4f 03cc 	movne.w	r3, ip, lsl #3
   10984:	3370      	addne	r3, #112	; 0x70
   10986:	fa1f fc83 	uxth.w	ip, r3
   1098a:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
   1098e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10992:	429f      	cmp	r7, r3
   10994:	bf38      	it	cc
   10996:	463b      	movcc	r3, r7
   10998:	4563      	cmp	r3, ip
   1099a:	bf28      	it	cs
   1099c:	4663      	movcs	r3, ip
   1099e:	4423      	add	r3, r4
   109a0:	4433      	add	r3, r6
   109a2:	f8d0 c028 	ldr.w	ip, [r0, #40]	; 0x28
   109a6:	1d9b      	adds	r3, r3, #6
   109a8:	45ac      	cmp	ip, r5
   109aa:	bf38      	it	cc
   109ac:	4665      	movcc	r5, ip
   109ae:	1a69      	subs	r1, r5, r1
   109b0:	441a      	add	r2, r3
   109b2:	428a      	cmp	r2, r1
   109b4:	bf28      	it	cs
   109b6:	4611      	movcs	r1, r2
   109b8:	62c1      	str	r1, [r0, #44]	; 0x2c
   109ba:	bcf0      	pop	{r4, r5, r6, r7}
   109bc:	4770      	bx	lr

000109be <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   109be:	221b      	movs	r2, #27
   109c0:	8402      	strh	r2, [r0, #32]
   109c2:	8382      	strh	r2, [r0, #28]
   109c4:	82c2      	strh	r2, [r0, #22]
   109c6:	8282      	strh	r2, [r0, #20]
   109c8:	8142      	strh	r2, [r0, #10]
   109ca:	8202      	strh	r2, [r0, #16]
   109cc:	8102      	strh	r2, [r0, #8]
   109ce:	8542      	strh	r2, [r0, #42]	; 0x2a
   109d0:	8582      	strh	r2, [r0, #44]	; 0x2c
   109d2:	8482      	strh	r2, [r0, #36]	; 0x24
   109d4:	2900      	cmp	r1, #0
   109d6:	bf18      	it	ne
   109d8:	4770      	bxne	lr
   109da:	f44f 71a4 	mov.w	r1, #328	; 0x148
   109de:	8441      	strh	r1, [r0, #34]	; 0x22
   109e0:	83c1      	strh	r1, [r0, #30]
   109e2:	8341      	strh	r1, [r0, #26]
   109e4:	8301      	strh	r1, [r0, #24]
   109e6:	81c1      	strh	r1, [r0, #14]
   109e8:	8241      	strh	r1, [r0, #18]
   109ea:	8181      	strh	r1, [r0, #12]
   109ec:	85c1      	strh	r1, [r0, #46]	; 0x2e
   109ee:	8601      	strh	r1, [r0, #48]	; 0x30
   109f0:	4770      	bx	lr

000109f2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   109f2:	6800      	ldr	r0, [r0, #0]
   109f4:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   109f8:	4290      	cmp	r0, r2
   109fa:	bf9c      	itt	ls
   109fc:	2000      	movls	r0, #0
   109fe:	4770      	bxls	lr
   10a00:	1a40      	subs	r0, r0, r1
   10a02:	389c      	subs	r0, #156	; 0x9c
   10a04:	0840      	lsrs	r0, r0, #1
   10a06:	4770      	bx	lr

00010a08 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   10a08:	f8dd c000 	ldr.w	ip, [sp]
   10a0c:	8281      	strh	r1, [r0, #20]
   10a0e:	82c2      	strh	r2, [r0, #22]
   10a10:	8303      	strh	r3, [r0, #24]
   10a12:	f8a0 c01a 	strh.w	ip, [r0, #26]
   10a16:	4770      	bx	lr

00010a18 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   10a18:	8050      	strh	r0, [r2, #2]
   10a1a:	8a88      	ldrh	r0, [r1, #20]
   10a1c:	8090      	strh	r0, [r2, #4]
   10a1e:	8ac8      	ldrh	r0, [r1, #22]
   10a20:	80d0      	strh	r0, [r2, #6]
   10a22:	8b08      	ldrh	r0, [r1, #24]
   10a24:	8110      	strh	r0, [r2, #8]
   10a26:	8b48      	ldrh	r0, [r1, #26]
   10a28:	8150      	strh	r0, [r2, #10]
   10a2a:	2001      	movs	r0, #1
   10a2c:	7010      	strb	r0, [r2, #0]
   10a2e:	4770      	bx	lr
   10a30:	2001      	movs	r0, #1
   10a32:	f7f6 bdff 	b.w	7634 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10a36:	2001      	movs	r0, #1
   10a38:	f7f6 bdfc 	b.w	7634 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10a3c:	b510      	push	{r4, lr}
   10a3e:	f7f7 f86f 	bl	7b20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   10a42:	2800      	cmp	r0, #0
   10a44:	bf18      	it	ne
   10a46:	bd10      	popne	{r4, pc}
   10a48:	2000      	movs	r0, #0
   10a4a:	f7f6 fdf3 	bl	7634 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10a4e:	2000      	movs	r0, #0
   10a50:	bd10      	pop	{r4, pc}
   10a52:	2001      	movs	r0, #1
   10a54:	f7f6 bdee 	b.w	7634 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>

00010a58 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   10a58:	b510      	push	{r4, lr}
   10a5a:	7001      	strb	r1, [r0, #0]
   10a5c:	7042      	strb	r2, [r0, #1]
   10a5e:	7880      	ldrb	r0, [r0, #2]
   10a60:	f3c0 0380 	ubfx	r3, r0, #2, #1
   10a64:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   10a68:	4463      	add	r3, ip
   10a6a:	f000 0001 	and.w	r0, r0, #1
   10a6e:	4418      	add	r0, r3
   10a70:	fb10 f001 	smulbb	r0, r0, r1
   10a74:	fb10 f002 	smulbb	r0, r0, r2
   10a78:	28ff      	cmp	r0, #255	; 0xff
   10a7a:	bf38      	it	cc
   10a7c:	bd10      	popcc	{r4, pc}
   10a7e:	215c      	movs	r1, #92	; 0x5c
   10a80:	202e      	movs	r0, #46	; 0x2e
   10a82:	f7f3 f87f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010a86 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   10a86:	7881      	ldrb	r1, [r0, #2]
   10a88:	f3c1 0280 	ubfx	r2, r1, #2, #1
   10a8c:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10a90:	441a      	add	r2, r3
   10a92:	f001 0101 	and.w	r1, r1, #1
   10a96:	4411      	add	r1, r2
   10a98:	7842      	ldrb	r2, [r0, #1]
   10a9a:	7800      	ldrb	r0, [r0, #0]
   10a9c:	fb12 f000 	smulbb	r0, r2, r0
   10aa0:	4348      	muls	r0, r1
   10aa2:	b2c0      	uxtb	r0, r0
   10aa4:	4770      	bx	lr

00010aa6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   10aa6:	7882      	ldrb	r2, [r0, #2]
   10aa8:	2100      	movs	r1, #0
   10aaa:	f012 0f01 	tst.w	r2, #1
   10aae:	d005      	beq.n	10abc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   10ab0:	78c3      	ldrb	r3, [r0, #3]
   10ab2:	f013 0f01 	tst.w	r3, #1
   10ab6:	bf08      	it	eq
   10ab8:	2101      	moveq	r1, #1
   10aba:	d010      	beq.n	10ade <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10abc:	f012 0f02 	tst.w	r2, #2
   10ac0:	d005      	beq.n	10ace <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   10ac2:	78c3      	ldrb	r3, [r0, #3]
   10ac4:	f013 0f02 	tst.w	r3, #2
   10ac8:	bf08      	it	eq
   10aca:	2102      	moveq	r1, #2
   10acc:	d007      	beq.n	10ade <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10ace:	f012 0f04 	tst.w	r2, #4
   10ad2:	d004      	beq.n	10ade <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10ad4:	78c3      	ldrb	r3, [r0, #3]
   10ad6:	f013 0f04 	tst.w	r3, #4
   10ada:	bf08      	it	eq
   10adc:	2104      	moveq	r1, #4
   10ade:	7943      	ldrb	r3, [r0, #5]
   10ae0:	1c5b      	adds	r3, r3, #1
   10ae2:	b2db      	uxtb	r3, r3
   10ae4:	7143      	strb	r3, [r0, #5]
   10ae6:	f890 c001 	ldrb.w	ip, [r0, #1]
   10aea:	4563      	cmp	r3, ip
   10aec:	d10d      	bne.n	10b0a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   10aee:	2300      	movs	r3, #0
   10af0:	7143      	strb	r3, [r0, #5]
   10af2:	f890 c003 	ldrb.w	ip, [r0, #3]
   10af6:	ea4c 0c01 	orr.w	ip, ip, r1
   10afa:	f880 c003 	strb.w	ip, [r0, #3]
   10afe:	4594      	cmp	ip, r2
   10b00:	d103      	bne.n	10b0a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   10b02:	70c3      	strb	r3, [r0, #3]
   10b04:	7902      	ldrb	r2, [r0, #4]
   10b06:	1c52      	adds	r2, r2, #1
   10b08:	7102      	strb	r2, [r0, #4]
   10b0a:	2901      	cmp	r1, #1
   10b0c:	bf04      	itt	eq
   10b0e:	2025      	moveq	r0, #37	; 0x25
   10b10:	4770      	bxeq	lr
   10b12:	2902      	cmp	r1, #2
   10b14:	bf04      	itt	eq
   10b16:	2026      	moveq	r0, #38	; 0x26
   10b18:	4770      	bxeq	lr
   10b1a:	2904      	cmp	r1, #4
   10b1c:	bf04      	itt	eq
   10b1e:	2027      	moveq	r0, #39	; 0x27
   10b20:	4770      	bxeq	lr
   10b22:	b510      	push	{r4, lr}
   10b24:	2139      	movs	r1, #57	; 0x39
   10b26:	202e      	movs	r0, #46	; 0x2e
   10b28:	f7f3 f82c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010b2c <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   10b2c:	7081      	strb	r1, [r0, #2]
   10b2e:	4770      	bx	lr

00010b30 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   10b30:	b410      	push	{r4}
   10b32:	7881      	ldrb	r1, [r0, #2]
   10b34:	f3c1 0280 	ubfx	r2, r1, #2, #1
   10b38:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10b3c:	441a      	add	r2, r3
   10b3e:	f001 0101 	and.w	r1, r1, #1
   10b42:	7843      	ldrb	r3, [r0, #1]
   10b44:	4411      	add	r1, r2
   10b46:	fb13 f201 	smulbb	r2, r3, r1
   10b4a:	78c1      	ldrb	r1, [r0, #3]
   10b4c:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   10b50:	f3c1 0440 	ubfx	r4, r1, #1, #1
   10b54:	44a4      	add	ip, r4
   10b56:	f001 0101 	and.w	r1, r1, #1
   10b5a:	4461      	add	r1, ip
   10b5c:	f890 c005 	ldrb.w	ip, [r0, #5]
   10b60:	fb11 c103 	smlabb	r1, r1, r3, ip
   10b64:	7803      	ldrb	r3, [r0, #0]
   10b66:	7900      	ldrb	r0, [r0, #4]
   10b68:	1a18      	subs	r0, r3, r0
   10b6a:	fb10 f002 	smulbb	r0, r0, r2
   10b6e:	1a40      	subs	r0, r0, r1
   10b70:	bc10      	pop	{r4}
   10b72:	b2c0      	uxtb	r0, r0
   10b74:	4770      	bx	lr

00010b76 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   10b76:	b510      	push	{r4, lr}
   10b78:	4604      	mov	r4, r0
   10b7a:	f001 f9e1 	bl	11f40 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   10b7e:	2001      	movs	r0, #1
   10b80:	7060      	strb	r0, [r4, #1]
   10b82:	7020      	strb	r0, [r4, #0]
   10b84:	bd10      	pop	{r4, pc}

00010b86 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   10b86:	2100      	movs	r1, #0
   10b88:	70c1      	strb	r1, [r0, #3]
   10b8a:	7141      	strb	r1, [r0, #5]
   10b8c:	7101      	strb	r1, [r0, #4]
   10b8e:	4770      	bx	lr

00010b90 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   10b90:	f240 315a 	movw	r1, #858	; 0x35a
   10b94:	4348      	muls	r0, r1
   10b96:	4770      	bx	lr

00010b98 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   10b98:	f240 20ef 	movw	r0, #751	; 0x2ef
   10b9c:	4770      	bx	lr
   10b9e:	020e      	.short	0x020e
   10ba0:	0630041c 	.word	0x0630041c
   10ba4:	035a0c60 	.word	0x035a0c60
   10ba8:	05c506b4 	.word	0x05c506b4
   10bac:	12250bf5 	.word	0x12250bf5
   10bb0:	03b101a3 	.word	0x03b101a3
   10bb4:	02ef05bf 	.word	0x02ef05bf
   10bb8:	09a30649 	.word	0x09a30649

00010bbc <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>:
   10bbc:	b510      	push	{r4, lr}
   10bbe:	4604      	mov	r4, r0
   10bc0:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   10bc4:	f001 f92d 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10bc8:	f64d 7141 	movw	r1, #57153	; 0xdf41
   10bcc:	4408      	add	r0, r1
   10bce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10bd2:	fbb0 f0f1 	udiv	r0, r0, r1
   10bd6:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
   10bda:	4620      	mov	r0, r4
   10bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10be0:	f44f 71a8 	mov.w	r1, #336	; 0x150
   10be4:	f7ff bea1 	b.w	1092a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>

00010be8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
   10be8:	b570      	push	{r4, r5, r6, lr}
   10bea:	4604      	mov	r4, r0
   10bec:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
   10bf0:	b082      	sub	sp, #8
   10bf2:	2800      	cmp	r0, #0
   10bf4:	bf07      	ittee	eq
   10bf6:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
   10bfa:	2803      	cmpeq	r0, #3
   10bfc:	b002      	addne	sp, #8
   10bfe:	bd70      	popne	{r4, r5, r6, pc}
   10c00:	f7fd fdad 	bl	e75e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   10c04:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
   10c08:	4601      	mov	r1, r0
   10c0a:	4610      	mov	r0, r2
   10c0c:	f7f0 fc38 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   10c10:	2800      	cmp	r0, #0
   10c12:	bfdc      	itt	le
   10c14:	b002      	addle	sp, #8
   10c16:	bd70      	pople	{r4, r5, r6, pc}
   10c18:	6861      	ldr	r1, [r4, #4]
   10c1a:	2900      	cmp	r1, #0
   10c1c:	bf14      	ite	ne
   10c1e:	fbb0 f0f1 	udivne	r0, r0, r1
   10c22:	2000      	moveq	r0, #0
   10c24:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   10c28:	1c40      	adds	r0, r0, #1
   10c2a:	4408      	add	r0, r1
   10c2c:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   10c30:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
   10c34:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   10c38:	1a08      	subs	r0, r1, r0
   10c3a:	b200      	sxth	r0, r0
   10c3c:	2800      	cmp	r0, #0
   10c3e:	bfdc      	itt	le
   10c40:	b002      	addle	sp, #8
   10c42:	bd70      	pople	{r4, r5, r6, pc}
   10c44:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
   10c48:	f7f1 f954 	bl	1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   10c4c:	2800      	cmp	r0, #0
   10c4e:	bf04      	itt	eq
   10c50:	b002      	addeq	sp, #8
   10c52:	bd70      	popeq	{r4, r5, r6, pc}
   10c54:	2001      	movs	r0, #1
   10c56:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
   10c5a:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
   10c5e:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   10c62:	ae01      	add	r6, sp, #4
   10c64:	1a40      	subs	r0, r0, r1
   10c66:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   10c6a:	1e40      	subs	r0, r0, #1
   10c6c:	4408      	add	r0, r1
   10c6e:	b285      	uxth	r5, r0
   10c70:	e019      	b.n	10ca6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xbe>
   10c72:	9600      	str	r6, [sp, #0]
   10c74:	f8b4 1150 	ldrh.w	r1, [r4, #336]	; 0x150
   10c78:	2300      	movs	r3, #0
   10c7a:	2201      	movs	r2, #1
   10c7c:	4620      	mov	r0, r4
   10c7e:	f7f8 f91b 	bl	8eb8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
   10c82:	2800      	cmp	r0, #0
   10c84:	bf04      	itt	eq
   10c86:	b002      	addeq	sp, #8
   10c88:	bd70      	popeq	{r4, r5, r6, pc}
   10c8a:	2801      	cmp	r0, #1
   10c8c:	d004      	beq.n	10c98 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb0>
   10c8e:	f240 51df 	movw	r1, #1503	; 0x5df
   10c92:	2030      	movs	r0, #48	; 0x30
   10c94:	f7f2 ff76 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10c98:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   10c9c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   10ca0:	4408      	add	r0, r1
   10ca2:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   10ca6:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   10caa:	1a28      	subs	r0, r5, r0
   10cac:	b200      	sxth	r0, r0
   10cae:	2800      	cmp	r0, #0
   10cb0:	dadf      	bge.n	10c72 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x8a>
   10cb2:	b002      	add	sp, #8
   10cb4:	bd70      	pop	{r4, r5, r6, pc}
   10cb6:	01f4      	.short	0x01f4
   10cb8:	009600fa 	.word	0x009600fa
   10cbc:	004b0064 	.word	0x004b0064
   10cc0:	001e0032 	.word	0x001e0032
   10cc4:	000a0014 	.word	0x000a0014
   10cc8:	00020005 	.word	0x00020005
   10ccc:	0001      	.short	0x0001

00010cce <sym_KI22E7SNUU4SSUGQ7PUDMBEHERNXLLCCBKOZDTY>:
   10cce:	b570      	push	{r4, r5, r6, lr}
   10cd0:	460c      	mov	r4, r1
   10cd2:	4605      	mov	r5, r0
   10cd4:	f44f 720a 	mov.w	r2, #552	; 0x228
   10cd8:	2100      	movs	r1, #0
   10cda:	4620      	mov	r0, r4
   10cdc:	f7fd fea4 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   10ce0:	8025      	strh	r5, [r4, #0]
   10ce2:	bd70      	pop	{r4, r5, r6, pc}

00010ce4 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   10ce4:	f7f3 ba92 	b.w	420c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00010ce8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
   10ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cec:	460d      	mov	r5, r1
   10cee:	4607      	mov	r7, r0
   10cf0:	2101      	movs	r1, #1
   10cf2:	f7fe ff7e 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10cf6:	1e04      	subs	r4, r0, #0
   10cf8:	bf08      	it	eq
   10cfa:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cfe:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   10d02:	2600      	movs	r6, #0
   10d04:	b1b8      	cbz	r0, 10d36 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4e>
   10d06:	706e      	strb	r6, [r5, #1]
   10d08:	2009      	movs	r0, #9
   10d0a:	7028      	strb	r0, [r5, #0]
   10d0c:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   10d10:	b178      	cbz	r0, 10d32 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4a>
   10d12:	8466      	strh	r6, [r4, #34]	; 0x22
   10d14:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
   10d18:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
   10d1c:	6068      	str	r0, [r5, #4]
   10d1e:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
   10d22:	60a8      	str	r0, [r5, #8]
   10d24:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
   10d28:	81a8      	strh	r0, [r5, #12]
   10d2a:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   10d2e:	2800      	cmp	r0, #0
   10d30:	d1ef      	bne.n	10d12 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x2a>
   10d32:	712e      	strb	r6, [r5, #4]
   10d34:	e047      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10d36:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   10d3a:	2800      	cmp	r0, #0
   10d3c:	d03a      	beq.n	10db4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xcc>
   10d3e:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   10d42:	280d      	cmp	r0, #13
   10d44:	d01b      	beq.n	10d7e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x96>
   10d46:	280e      	cmp	r0, #14
   10d48:	d004      	beq.n	10d54 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x6c>
   10d4a:	f640 21c9 	movw	r1, #2761	; 0xac9
   10d4e:	2031      	movs	r0, #49	; 0x31
   10d50:	f7f2 ff18 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d54:	8820      	ldrh	r0, [r4, #0]
   10d56:	f7f3 facd 	bl	42f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   10d5a:	4607      	mov	r7, r0
   10d5c:	f7fe fde9 	bl	f932 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   10d60:	b9a0      	cbnz	r0, 10d8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa4>
   10d62:	706e      	strb	r6, [r5, #1]
   10d64:	200e      	movs	r0, #14
   10d66:	7028      	strb	r0, [r5, #0]
   10d68:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   10d6c:	7128      	strb	r0, [r5, #4]
   10d6e:	8820      	ldrh	r0, [r4, #0]
   10d70:	80e8      	strh	r0, [r5, #6]
   10d72:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   10d76:	4638      	mov	r0, r7
   10d78:	f7fe fdf1 	bl	f95e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   10d7c:	e023      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10d7e:	8820      	ldrh	r0, [r4, #0]
   10d80:	f7f3 fab8 	bl	42f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   10d84:	4607      	mov	r7, r0
   10d86:	f7fe fdd4 	bl	f932 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   10d8a:	b110      	cbz	r0, 10d92 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xaa>
   10d8c:	2000      	movs	r0, #0
   10d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d92:	706e      	strb	r6, [r5, #1]
   10d94:	200d      	movs	r0, #13
   10d96:	7028      	strb	r0, [r5, #0]
   10d98:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   10d9c:	7128      	strb	r0, [r5, #4]
   10d9e:	8820      	ldrh	r0, [r4, #0]
   10da0:	80e8      	strh	r0, [r5, #6]
   10da2:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   10da6:	7228      	strb	r0, [r5, #8]
   10da8:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   10dac:	4638      	mov	r0, r7
   10dae:	f7fe fdd6 	bl	f95e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   10db2:	e008      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10db4:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
   10db8:	b140      	cbz	r0, 10dcc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xe4>
   10dba:	706e      	strb	r6, [r5, #1]
   10dbc:	2010      	movs	r0, #16
   10dbe:	7028      	strb	r0, [r5, #0]
   10dc0:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
   10dc4:	80af      	strh	r7, [r5, #4]
   10dc6:	2001      	movs	r0, #1
   10dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dcc:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   10dd0:	b190      	cbz	r0, 10df8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x110>
   10dd2:	706e      	strb	r6, [r5, #1]
   10dd4:	200a      	movs	r0, #10
   10dd6:	7028      	strb	r0, [r5, #0]
   10dd8:	8820      	ldrh	r0, [r4, #0]
   10dda:	80a8      	strh	r0, [r5, #4]
   10ddc:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   10de0:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
   10de4:	f8c5 0006 	str.w	r0, [r5, #6]
   10de8:	f8c5 100a 	str.w	r1, [r5, #10]
   10dec:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
   10df0:	81e8      	strh	r0, [r5, #14]
   10df2:	f884 61dc 	strb.w	r6, [r4, #476]	; 0x1dc
   10df6:	e7e6      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10df8:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   10dfc:	b180      	cbz	r0, 10e20 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x138>
   10dfe:	706e      	strb	r6, [r5, #1]
   10e00:	201a      	movs	r0, #26
   10e02:	7028      	strb	r0, [r5, #0]
   10e04:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   10e08:	2800      	cmp	r0, #0
   10e0a:	d0dc      	beq.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e0c:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
   10e10:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
   10e14:	6068      	str	r0, [r5, #4]
   10e16:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   10e1a:	2800      	cmp	r0, #0
   10e1c:	d1f6      	bne.n	10e0c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x124>
   10e1e:	e7d2      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e20:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
   10e24:	b160      	cbz	r0, 10e40 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x158>
   10e26:	706e      	strb	r6, [r5, #1]
   10e28:	2008      	movs	r0, #8
   10e2a:	7028      	strb	r0, [r5, #0]
   10e2c:	e9d4 0187 	ldrd	r0, r1, [r4, #540]	; 0x21c
   10e30:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
   10e34:	60ea      	str	r2, [r5, #12]
   10e36:	e9c5 0101 	strd	r0, r1, [r5, #4]
   10e3a:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
   10e3e:	e7c2      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e40:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   10e44:	b1a0      	cbz	r0, 10e70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x188>
   10e46:	706e      	strb	r6, [r5, #1]
   10e48:	2015      	movs	r0, #21
   10e4a:	7028      	strb	r0, [r5, #0]
   10e4c:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   10e50:	2800      	cmp	r0, #0
   10e52:	d0b8      	beq.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e54:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
   10e58:	e9d4 017b 	ldrd	r0, r1, [r4, #492]	; 0x1ec
   10e5c:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
   10e60:	60ea      	str	r2, [r5, #12]
   10e62:	e9c5 0101 	strd	r0, r1, [r5, #4]
   10e66:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   10e6a:	2800      	cmp	r0, #0
   10e6c:	d1f2      	bne.n	10e54 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
   10e6e:	e7aa      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e70:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
   10e74:	b170      	cbz	r0, 10e94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ac>
   10e76:	706e      	strb	r6, [r5, #1]
   10e78:	201c      	movs	r0, #28
   10e7a:	7028      	strb	r0, [r5, #0]
   10e7c:	f884 61f8 	strb.w	r6, [r4, #504]	; 0x1f8
   10e80:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
   10e84:	6068      	str	r0, [r5, #4]
   10e86:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
   10e8a:	60a8      	str	r0, [r5, #8]
   10e8c:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
   10e90:	81a8      	strh	r0, [r5, #12]
   10e92:	e798      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10e94:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
   10e98:	b138      	cbz	r0, 10eaa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1c2>
   10e9a:	201d      	movs	r0, #29
   10e9c:	7028      	strb	r0, [r5, #0]
   10e9e:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
   10ea2:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
   10ea6:	6068      	str	r0, [r5, #4]
   10ea8:	e78d      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10eaa:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   10eae:	2800      	cmp	r0, #0
   10eb0:	bf08      	it	eq
   10eb2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10eb6:	706e      	strb	r6, [r5, #1]
   10eb8:	2016      	movs	r0, #22
   10eba:	7028      	strb	r0, [r5, #0]
   10ebc:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   10ec0:	2800      	cmp	r0, #0
   10ec2:	d080      	beq.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   10ec4:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
   10ec8:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
   10ecc:	6068      	str	r0, [r5, #4]
   10ece:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
   10ed2:	8128      	strh	r0, [r5, #8]
   10ed4:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   10ed8:	2800      	cmp	r0, #0
   10eda:	d1f3      	bne.n	10ec4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1dc>
   10edc:	e773      	b.n	10dc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>

00010ede <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   10ede:	2100      	movs	r1, #0
   10ee0:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
   10ee4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   10ee8:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
   10eec:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
   10ef0:	b111      	cbz	r1, 10ef8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   10ef2:	2102      	movs	r1, #2
   10ef4:	f7f7 beb8 	b.w	8c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   10ef8:	2103      	movs	r1, #3
   10efa:	f7f7 beb5 	b.w	8c68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>

00010efe <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY>:
   10efe:	b570      	push	{r4, r5, r6, lr}
   10f00:	460c      	mov	r4, r1
   10f02:	4615      	mov	r5, r2
   10f04:	4606      	mov	r6, r0
   10f06:	f44f 72c8 	mov.w	r2, #400	; 0x190
   10f0a:	2100      	movs	r1, #0
   10f0c:	4620      	mov	r0, r4
   10f0e:	f7fd fd8b 	bl	ea28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   10f12:	8026      	strh	r6, [r4, #0]
   10f14:	b14d      	cbz	r5, 10f2a <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY+0x2c>
   10f16:	6828      	ldr	r0, [r5, #0]
   10f18:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   10f1c:	6868      	ldr	r0, [r5, #4]
   10f1e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
   10f22:	68a8      	ldr	r0, [r5, #8]
   10f24:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   10f28:	bd70      	pop	{r4, r5, r6, pc}
   10f2a:	f640 116b 	movw	r1, #2411	; 0x96b
   10f2e:	2036      	movs	r0, #54	; 0x36
   10f30:	f7f2 fe28 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010f34 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   10f34:	f7f3 b96a 	b.w	420c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   10f38:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10f3c:	f001 0107 	and.w	r1, r1, #7
   10f40:	7800      	ldrb	r0, [r0, #0]
   10f42:	2201      	movs	r2, #1
   10f44:	408a      	lsls	r2, r1
   10f46:	4010      	ands	r0, r2
   10f48:	40c8      	lsrs	r0, r1
   10f4a:	4770      	bx	lr
   10f4c:	b118      	cbz	r0, 10f56 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   10f4e:	2802      	cmp	r0, #2
   10f50:	d001      	beq.n	10f56 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   10f52:	2001      	movs	r0, #1
   10f54:	4770      	bx	lr
   10f56:	2000      	movs	r0, #0
   10f58:	4770      	bx	lr

00010f5a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   10f5a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10f5e:	7881      	ldrb	r1, [r0, #2]
   10f60:	4605      	mov	r5, r0
   10f62:	291a      	cmp	r1, #26
   10f64:	d025      	beq.n	10fb2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
   10f66:	dc0e      	bgt.n	10f86 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   10f68:	2916      	cmp	r1, #22
   10f6a:	d22e      	bcs.n	10fca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10f6c:	e8df f001 	tbb	[pc, r1]
   10f70:	2d2d2d2d 	.word	0x2d2d2d2d
   10f74:	2d2d212d 	.word	0x2d2d212d
   10f78:	2d2d2d2d 	.word	0x2d2d2d2d
   10f7c:	2d2d2d2d 	.word	0x2d2d2d2d
   10f80:	212d2d2d 	.word	0x212d2d2d
   10f84:	2121      	.short	0x2121
   10f86:	292a      	cmp	r1, #42	; 0x2a
   10f88:	d01f      	beq.n	10fca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10f8a:	dc0b      	bgt.n	10fa4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   10f8c:	f1a1 011e 	sub.w	r1, r1, #30
   10f90:	290c      	cmp	r1, #12
   10f92:	d21a      	bcs.n	10fca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10f94:	e8df f001 	tbb	[pc, r1]
   10f98:	19191919 	.word	0x19191919
   10f9c:	19191919 	.word	0x19191919
   10fa0:	0d191919 	.word	0x0d191919
   10fa4:	393a      	subs	r1, #58	; 0x3a
   10fa6:	2904      	cmp	r1, #4
   10fa8:	d20f      	bcs.n	10fca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10faa:	e8df f001 	tbb	[pc, r1]
   10fae:	020e      	.short	0x020e
   10fb0:	020e      	.short	0x020e
   10fb2:	8828      	ldrh	r0, [r5, #0]
   10fb4:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   10fb8:	d207      	bcs.n	10fca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   10fba:	2701      	movs	r7, #1
   10fbc:	4669      	mov	r1, sp
   10fbe:	f7fe ff24 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10fc2:	b120      	cbz	r0, 10fce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
   10fc4:	2002      	movs	r0, #2
   10fc6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10fca:	2012      	movs	r0, #18
   10fcc:	e7fb      	b.n	10fc6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   10fce:	f89d 0000 	ldrb.w	r0, [sp]
   10fd2:	f000 fc22 	bl	1181a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   10fd6:	9c01      	ldr	r4, [sp, #4]
   10fd8:	b110      	cbz	r0, 10fe0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x86>
   10fda:	f504 7494 	add.w	r4, r4, #296	; 0x128
   10fde:	e001      	b.n	10fe4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   10fe0:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   10fe4:	f89d 0000 	ldrb.w	r0, [sp]
   10fe8:	f000 fc17 	bl	1181a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   10fec:	9e01      	ldr	r6, [sp, #4]
   10fee:	b110      	cbz	r0, 10ff6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x9c>
   10ff0:	f206 1629 	addw	r6, r6, #297	; 0x129
   10ff4:	e001      	b.n	10ffa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xa0>
   10ff6:	f206 1689 	addw	r6, r6, #393	; 0x189
   10ffa:	4668      	mov	r0, sp
   10ffc:	f000 fd6d 	bl	11ada <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   11000:	b108      	cbz	r0, 11006 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xac>
   11002:	7820      	ldrb	r0, [r4, #0]
   11004:	b108      	cbz	r0, 1100a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xb0>
   11006:	200c      	movs	r0, #12
   11008:	e7dd      	b.n	10fc6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1100a:	7027      	strb	r7, [r4, #0]
   1100c:	78a8      	ldrb	r0, [r5, #2]
   1100e:	7030      	strb	r0, [r6, #0]
   11010:	4668      	mov	r0, sp
   11012:	f7ff fbb1 	bl	10778 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   11016:	2000      	movs	r0, #0
   11018:	e7d5      	b.n	10fc6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0001101a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   1101a:	b510      	push	{r4, lr}
   1101c:	4604      	mov	r4, r0
   1101e:	7800      	ldrb	r0, [r0, #0]
   11020:	b118      	cbz	r0, 1102a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   11022:	2801      	cmp	r0, #1
   11024:	d001      	beq.n	1102a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   11026:	2012      	movs	r0, #18
   11028:	bd10      	pop	{r4, pc}
   1102a:	f000 fd26 	bl	11a7a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   1102e:	b120      	cbz	r0, 1103a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   11030:	f7f4 fc86 	bl	5940 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11034:	b108      	cbz	r0, 1103a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   11036:	200c      	movs	r0, #12
   11038:	bd10      	pop	{r4, pc}
   1103a:	7820      	ldrb	r0, [r4, #0]
   1103c:	f7ff ff86 	bl	10f4c <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11040:	1de2      	adds	r2, r4, #7
   11042:	f104 0317 	add.w	r3, r4, #23
   11046:	1c61      	adds	r1, r4, #1
   11048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1104c:	f7f4 bcc8 	b.w	59e0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

00011050 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   11050:	b510      	push	{r4, lr}
   11052:	4604      	mov	r4, r0
   11054:	f000 fe48 	bl	11ce8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   11058:	b108      	cbz	r0, 1105e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   1105a:	200c      	movs	r0, #12
   1105c:	bd10      	pop	{r4, pc}
   1105e:	7820      	ldrb	r0, [r4, #0]
   11060:	b128      	cbz	r0, 1106e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   11062:	2801      	cmp	r0, #1
   11064:	d003      	beq.n	1106e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   11066:	28ff      	cmp	r0, #255	; 0xff
   11068:	d00b      	beq.n	11082 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   1106a:	2012      	movs	r0, #18
   1106c:	bd10      	pop	{r4, pc}
   1106e:	f7ff ff6d 	bl	10f4c <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11072:	1c61      	adds	r1, r4, #1
   11074:	f7f4 fdfc 	bl	5c70 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   11078:	b108      	cbz	r0, 1107e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   1107a:	2000      	movs	r0, #0
   1107c:	bd10      	pop	{r4, pc}
   1107e:	2007      	movs	r0, #7
   11080:	bd10      	pop	{r4, pc}
   11082:	2001      	movs	r0, #1
   11084:	f7f4 fe30 	bl	5ce8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   11088:	e7f7      	b.n	1107a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

0001108a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   1108a:	b510      	push	{r4, lr}
   1108c:	f000 fcf5 	bl	11a7a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   11090:	b120      	cbz	r0, 1109c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   11092:	f7f4 fc55 	bl	5940 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11096:	b108      	cbz	r0, 1109c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   11098:	200c      	movs	r0, #12
   1109a:	bd10      	pop	{r4, pc}
   1109c:	f7f4 fd06 	bl	5aac <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   110a0:	2000      	movs	r0, #0
   110a2:	bd10      	pop	{r4, pc}

000110a4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   110a4:	b510      	push	{r4, lr}
   110a6:	f000 fe1f 	bl	11ce8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   110aa:	b108      	cbz	r0, 110b0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   110ac:	200c      	movs	r0, #12
   110ae:	bd10      	pop	{r4, pc}
   110b0:	f7f4 fe20 	bl	5cf4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   110b4:	2000      	movs	r0, #0
   110b6:	bd10      	pop	{r4, pc}

000110b8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   110b8:	b570      	push	{r4, r5, r6, lr}
   110ba:	4605      	mov	r5, r0
   110bc:	f000 fb6d 	bl	1179a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   110c0:	2800      	cmp	r0, #0
   110c2:	d10e      	bne.n	110e2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2a>
   110c4:	8828      	ldrh	r0, [r5, #0]
   110c6:	2100      	movs	r1, #0
   110c8:	f7fe fd93 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   110cc:	0004      	movs	r4, r0
   110ce:	d007      	beq.n	110e0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   110d0:	f000 fd0a 	bl	11ae8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
   110d4:	b120      	cbz	r0, 110e0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   110d6:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   110da:	7800      	ldrb	r0, [r0, #0]
   110dc:	b930      	cbnz	r0, 110ec <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   110de:	e001      	b.n	110e4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2c>
   110e0:	2002      	movs	r0, #2
   110e2:	bd70      	pop	{r4, r5, r6, pc}
   110e4:	f8d4 018c 	ldr.w	r0, [r4, #396]	; 0x18c
   110e8:	7800      	ldrb	r0, [r0, #0]
   110ea:	b108      	cbz	r0, 110f0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   110ec:	203a      	movs	r0, #58	; 0x3a
   110ee:	bd70      	pop	{r4, r5, r6, pc}
   110f0:	88a8      	ldrh	r0, [r5, #4]
   110f2:	f7fe fea2 	bl	fe3a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   110f6:	4606      	mov	r6, r0
   110f8:	4601      	mov	r1, r0
   110fa:	2005      	movs	r0, #5
   110fc:	f7ff f8eb 	bl	102d6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   11100:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   11104:	80c8      	strh	r0, [r1, #6]
   11106:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   1110a:	2000      	movs	r0, #0
   1110c:	6088      	str	r0, [r1, #8]
   1110e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   11112:	60c6      	str	r6, [r0, #12]
   11114:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   11118:	88e8      	ldrh	r0, [r5, #6]
   1111a:	8208      	strh	r0, [r1, #16]
   1111c:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   11120:	8928      	ldrh	r0, [r5, #8]
   11122:	f504 7496 	add.w	r4, r4, #300	; 0x12c
   11126:	8248      	strh	r0, [r1, #18]
   11128:	4631      	mov	r1, r6
   1112a:	2008      	movs	r0, #8
   1112c:	f7ff f8d3 	bl	102d6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   11130:	6821      	ldr	r1, [r4, #0]
   11132:	4602      	mov	r2, r0
   11134:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   11138:	88c8      	ldrh	r0, [r1, #6]
   1113a:	4282      	cmp	r2, r0
   1113c:	d301      	bcc.n	11142 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x8a>
   1113e:	42b0      	cmp	r0, r6
   11140:	d301      	bcc.n	11146 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x8e>
   11142:	2012      	movs	r0, #18
   11144:	bd70      	pop	{r4, r5, r6, pc}
   11146:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1114a:	4286      	cmp	r6, r0
   1114c:	d209      	bcs.n	11162 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xaa>
   1114e:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
   11152:	2802      	cmp	r0, #2
   11154:	d103      	bne.n	1115e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xa6>
   11156:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1115a:	2802      	cmp	r0, #2
   1115c:	d001      	beq.n	11162 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xaa>
   1115e:	200c      	movs	r0, #12
   11160:	bd70      	pop	{r4, r5, r6, pc}
   11162:	8828      	ldrh	r0, [r5, #0]
   11164:	8048      	strh	r0, [r1, #2]
   11166:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   1116a:	2002      	movs	r0, #2
   1116c:	7008      	strb	r0, [r1, #0]
   1116e:	2000      	movs	r0, #0
   11170:	bd70      	pop	{r4, r5, r6, pc}

00011172 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   11172:	b510      	push	{r4, lr}
   11174:	460b      	mov	r3, r1
   11176:	2201      	movs	r2, #1
   11178:	f100 0110 	add.w	r1, r0, #16
   1117c:	f7f4 ff70 	bl	6060 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   11180:	2000      	movs	r0, #0
   11182:	bd10      	pop	{r4, pc}

00011184 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   11184:	b510      	push	{r4, lr}
   11186:	8800      	ldrh	r0, [r0, #0]
   11188:	2101      	movs	r1, #1
   1118a:	f7fe fd32 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1118e:	b118      	cbz	r0, 11198 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   11190:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
   11194:	b111      	cbz	r1, 1119c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   11196:	e007      	b.n	111a8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   11198:	2002      	movs	r0, #2
   1119a:	bd10      	pop	{r4, pc}
   1119c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   111a0:	2914      	cmp	r1, #20
   111a2:	d003      	beq.n	111ac <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   111a4:	2915      	cmp	r1, #21
   111a6:	d001      	beq.n	111ac <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   111a8:	200c      	movs	r0, #12
   111aa:	bd10      	pop	{r4, pc}
   111ac:	2102      	movs	r1, #2
   111ae:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
   111b2:	2000      	movs	r0, #0
   111b4:	bd10      	pop	{r4, pc}

000111b6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   111b6:	b570      	push	{r4, r5, r6, lr}
   111b8:	4605      	mov	r5, r0
   111ba:	8800      	ldrh	r0, [r0, #0]
   111bc:	2101      	movs	r1, #1
   111be:	f7fe fd18 	bl	fbf2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   111c2:	0004      	movs	r4, r0
   111c4:	d003      	beq.n	111ce <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   111c6:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
   111ca:	b110      	cbz	r0, 111d2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   111cc:	e00a      	b.n	111e4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   111ce:	2002      	movs	r0, #2
   111d0:	bd70      	pop	{r4, r5, r6, pc}
   111d2:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
   111d6:	2814      	cmp	r0, #20
   111d8:	d001      	beq.n	111de <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   111da:	2815      	cmp	r0, #21
   111dc:	d102      	bne.n	111e4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   111de:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   111e2:	b108      	cbz	r0, 111e8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x32>
   111e4:	200c      	movs	r0, #12
   111e6:	bd70      	pop	{r4, r5, r6, pc}
   111e8:	2210      	movs	r2, #16
   111ea:	1ca9      	adds	r1, r5, #2
   111ec:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
   111f0:	f7f2 fb3e 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   111f4:	2001      	movs	r0, #1
   111f6:	f884 018b 	strb.w	r0, [r4, #395]	; 0x18b
   111fa:	2000      	movs	r0, #0
   111fc:	bd70      	pop	{r4, r5, r6, pc}

000111fe <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   111fe:	b510      	push	{r4, lr}
   11200:	2108      	movs	r1, #8
   11202:	f7f3 fad5 	bl	47b0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   11206:	2000      	movs	r0, #0
   11208:	bd10      	pop	{r4, pc}

0001120a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   1120a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1120c:	460c      	mov	r4, r1
   1120e:	4605      	mov	r5, r0
   11210:	8800      	ldrh	r0, [r0, #0]
   11212:	4669      	mov	r1, sp
   11214:	f7fe fdf9 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11218:	2200      	movs	r2, #0
   1121a:	b128      	cbz	r0, 11228 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
   1121c:	f8c4 2002 	str.w	r2, [r4, #2]
   11220:	71a2      	strb	r2, [r4, #6]
   11222:	8022      	strh	r2, [r4, #0]
   11224:	2002      	movs	r0, #2
   11226:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11228:	9901      	ldr	r1, [sp, #4]
   1122a:	4608      	mov	r0, r1
   1122c:	3178      	adds	r1, #120	; 0x78
   1122e:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
   11232:	68c3      	ldr	r3, [r0, #12]
   11234:	f8c4 3002 	str.w	r3, [r4, #2]
   11238:	7c03      	ldrb	r3, [r0, #16]
   1123a:	71a3      	strb	r3, [r4, #6]
   1123c:	882b      	ldrh	r3, [r5, #0]
   1123e:	8023      	strh	r3, [r4, #0]
   11240:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   11244:	2b00      	cmp	r3, #0
   11246:	d1f2      	bne.n	1122e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
   11248:	2000      	movs	r0, #0
   1124a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001124c <sym_7YL5EH5YISPHYP3GLCPHHLYJDC4YFSU26ARBXOI>:
   1124c:	b510      	push	{r4, lr}
   1124e:	4604      	mov	r4, r0
   11250:	2000      	movs	r0, #0
   11252:	6020      	str	r0, [r4, #0]
   11254:	6060      	str	r0, [r4, #4]
   11256:	f7fb fde7 	bl	ce28 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>
   1125a:	7020      	strb	r0, [r4, #0]
   1125c:	2001      	movs	r0, #1
   1125e:	f7fb fde3 	bl	ce28 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>
   11262:	7060      	strb	r0, [r4, #1]
   11264:	2000      	movs	r0, #0
   11266:	bd10      	pop	{r4, pc}

00011268 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   11268:	b510      	push	{r4, lr}
   1126a:	4604      	mov	r4, r0
   1126c:	f000 fc2f 	bl	11ace <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11270:	b140      	cbz	r0, 11284 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   11272:	20fb      	movs	r0, #251	; 0xfb
   11274:	8020      	strh	r0, [r4, #0]
   11276:	f640 0148 	movw	r1, #2120	; 0x848
   1127a:	8061      	strh	r1, [r4, #2]
   1127c:	80a0      	strh	r0, [r4, #4]
   1127e:	80e1      	strh	r1, [r4, #6]
   11280:	2000      	movs	r0, #0
   11282:	bd10      	pop	{r4, pc}
   11284:	2001      	movs	r0, #1
   11286:	bd10      	pop	{r4, pc}

00011288 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   11288:	2108      	movs	r1, #8
   1128a:	7001      	strb	r1, [r0, #0]
   1128c:	2000      	movs	r0, #0
   1128e:	4770      	bx	lr

00011290 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   11290:	21d8      	movs	r1, #216	; 0xd8
   11292:	7001      	strb	r1, [r0, #0]
   11294:	2104      	movs	r1, #4
   11296:	7041      	strb	r1, [r0, #1]
   11298:	2000      	movs	r0, #0
   1129a:	4770      	bx	lr

0001129c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   1129c:	2108      	movs	r1, #8
   1129e:	7001      	strb	r1, [r0, #0]
   112a0:	2000      	movs	r0, #0
   112a2:	4770      	bx	lr

000112a4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   112a4:	b510      	push	{r4, lr}
   112a6:	4604      	mov	r4, r0
   112a8:	7800      	ldrb	r0, [r0, #0]
   112aa:	b108      	cbz	r0, 112b0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   112ac:	2801      	cmp	r0, #1
   112ae:	d110      	bne.n	112d2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   112b0:	f000 fbe3 	bl	11a7a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   112b4:	b120      	cbz	r0, 112c0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   112b6:	f7f4 fb43 	bl	5940 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   112ba:	b108      	cbz	r0, 112c0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   112bc:	200c      	movs	r0, #12
   112be:	bd10      	pop	{r4, pc}
   112c0:	7820      	ldrb	r0, [r4, #0]
   112c2:	f7ff fe43 	bl	10f4c <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   112c6:	1c61      	adds	r1, r4, #1
   112c8:	f7f4 fc8e 	bl	5be8 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   112cc:	b108      	cbz	r0, 112d2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   112ce:	2000      	movs	r0, #0
   112d0:	bd10      	pop	{r4, pc}
   112d2:	2012      	movs	r0, #18
   112d4:	bd10      	pop	{r4, pc}

000112d6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   112d6:	b510      	push	{r4, lr}
   112d8:	4604      	mov	r4, r0
   112da:	f000 fd05 	bl	11ce8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   112de:	b108      	cbz	r0, 112e4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   112e0:	200c      	movs	r0, #12
   112e2:	bd10      	pop	{r4, pc}
   112e4:	7820      	ldrb	r0, [r4, #0]
   112e6:	b120      	cbz	r0, 112f2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   112e8:	2801      	cmp	r0, #1
   112ea:	d002      	beq.n	112f2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   112ec:	28ff      	cmp	r0, #255	; 0xff
   112ee:	d108      	bne.n	11302 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   112f0:	e009      	b.n	11306 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   112f2:	f7ff fe2b 	bl	10f4c <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   112f6:	1c61      	adds	r1, r4, #1
   112f8:	f7fe fd7c 	bl	fdf4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   112fc:	b108      	cbz	r0, 11302 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   112fe:	2000      	movs	r0, #0
   11300:	bd10      	pop	{r4, pc}
   11302:	2012      	movs	r0, #18
   11304:	bd10      	pop	{r4, pc}
   11306:	2000      	movs	r0, #0
   11308:	f7f4 fcee 	bl	5ce8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   1130c:	e7f7      	b.n	112fe <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

0001130e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   1130e:	b510      	push	{r4, lr}
   11310:	4604      	mov	r4, r0
   11312:	f000 fbb2 	bl	11a7a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   11316:	b108      	cbz	r0, 1131c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   11318:	200c      	movs	r0, #12
   1131a:	bd10      	pop	{r4, pc}
   1131c:	7820      	ldrb	r0, [r4, #0]
   1131e:	f000 0001 	and.w	r0, r0, #1
   11322:	f7f4 fb07 	bl	5934 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   11326:	2000      	movs	r0, #0
   11328:	bd10      	pop	{r4, pc}

0001132a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   1132a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1132c:	460d      	mov	r5, r1
   1132e:	4604      	mov	r4, r0
   11330:	f000 fbcd 	bl	11ace <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11334:	b130      	cbz	r0, 11344 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   11336:	88a2      	ldrh	r2, [r4, #4]
   11338:	f244 2090 	movw	r0, #17040	; 0x4290
   1133c:	4282      	cmp	r2, r0
   1133e:	d903      	bls.n	11348 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   11340:	2012      	movs	r0, #18
   11342:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11344:	2001      	movs	r0, #1
   11346:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11348:	f640 0048 	movw	r0, #2120	; 0x848
   1134c:	4282      	cmp	r2, r0
   1134e:	d300      	bcc.n	11352 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   11350:	4602      	mov	r2, r0
   11352:	8820      	ldrh	r0, [r4, #0]
   11354:	f8ad 0000 	strh.w	r0, [sp]
   11358:	8860      	ldrh	r0, [r4, #2]
   1135a:	f8ad 0002 	strh.w	r0, [sp, #2]
   1135e:	f8ad 2004 	strh.w	r2, [sp, #4]
   11362:	8860      	ldrh	r0, [r4, #2]
   11364:	f8ad 0006 	strh.w	r0, [sp, #6]
   11368:	f8ad 2008 	strh.w	r2, [sp, #8]
   1136c:	8820      	ldrh	r0, [r4, #0]
   1136e:	8028      	strh	r0, [r5, #0]
   11370:	4668      	mov	r0, sp
   11372:	f000 fbdc 	bl	11b2e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x394>
   11376:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00011378 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   11378:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1137a:	4604      	mov	r4, r0
   1137c:	f7fb fd4e 	bl	ce1c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   11380:	f3c0 2000 	ubfx	r0, r0, #8, #1
   11384:	b1b0      	cbz	r0, 113b4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
   11386:	f10d 0007 	add.w	r0, sp, #7
   1138a:	9000      	str	r0, [sp, #0]
   1138c:	7922      	ldrb	r2, [r4, #4]
   1138e:	78e1      	ldrb	r1, [r4, #3]
   11390:	78a0      	ldrb	r0, [r4, #2]
   11392:	f10d 0306 	add.w	r3, sp, #6
   11396:	f000 fc61 	bl	11c5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4c2>
   1139a:	2800      	cmp	r0, #0
   1139c:	d109      	bne.n	113b2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
   1139e:	8820      	ldrh	r0, [r4, #0]
   113a0:	f8ad 0004 	strh.w	r0, [sp, #4]
   113a4:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   113a8:	f8ad 0008 	strh.w	r0, [sp, #8]
   113ac:	a801      	add	r0, sp, #4
   113ae:	f000 f8c7 	bl	11540 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   113b2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   113b4:	2001      	movs	r0, #1
   113b6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000113b8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   113b8:	b510      	push	{r4, lr}
   113ba:	4604      	mov	r4, r0
   113bc:	f000 fb5d 	bl	11a7a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   113c0:	b120      	cbz	r0, 113cc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   113c2:	f7f4 fabd 	bl	5940 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   113c6:	b108      	cbz	r0, 113cc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   113c8:	200c      	movs	r0, #12
   113ca:	bd10      	pop	{r4, pc}
   113cc:	7820      	ldrb	r0, [r4, #0]
   113ce:	f7ff fdbd 	bl	10f4c <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   113d2:	79e2      	ldrb	r2, [r4, #7]
   113d4:	1c61      	adds	r1, r4, #1
   113d6:	f7f4 fa43 	bl	5860 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   113da:	b108      	cbz	r0, 113e0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   113dc:	2000      	movs	r0, #0
   113de:	bd10      	pop	{r4, pc}
   113e0:	2002      	movs	r0, #2
   113e2:	bd10      	pop	{r4, pc}

000113e4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   113e4:	b510      	push	{r4, lr}
   113e6:	4604      	mov	r4, r0
   113e8:	2001      	movs	r0, #1
   113ea:	f7fb fa3b 	bl	c864 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   113ee:	b128      	cbz	r0, 113fc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   113f0:	4621      	mov	r1, r4
   113f2:	2001      	movs	r0, #1
   113f4:	f7f3 fb3e 	bl	4a74 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   113f8:	2000      	movs	r0, #0
   113fa:	bd10      	pop	{r4, pc}
   113fc:	200c      	movs	r0, #12
   113fe:	bd10      	pop	{r4, pc}

00011400 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   11400:	b510      	push	{r4, lr}
   11402:	8800      	ldrh	r0, [r0, #0]
   11404:	f7f4 fc16 	bl	5c34 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   11408:	b108      	cbz	r0, 1140e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   1140a:	2000      	movs	r0, #0
   1140c:	bd10      	pop	{r4, pc}
   1140e:	2030      	movs	r0, #48	; 0x30
   11410:	bd10      	pop	{r4, pc}

00011412 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   11412:	b51c      	push	{r2, r3, r4, lr}
   11414:	4604      	mov	r4, r0
   11416:	f000 fb5a 	bl	11ace <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   1141a:	b178      	cbz	r0, 1143c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   1141c:	8820      	ldrh	r0, [r4, #0]
   1141e:	f8ad 0000 	strh.w	r0, [sp]
   11422:	8860      	ldrh	r0, [r4, #2]
   11424:	f8ad 0002 	strh.w	r0, [sp, #2]
   11428:	8820      	ldrh	r0, [r4, #0]
   1142a:	f8ad 0004 	strh.w	r0, [sp, #4]
   1142e:	8860      	ldrh	r0, [r4, #2]
   11430:	f8ad 0006 	strh.w	r0, [sp, #6]
   11434:	4668      	mov	r0, sp
   11436:	f7fb fc1d 	bl	cc74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
   1143a:	bd1c      	pop	{r2, r3, r4, pc}
   1143c:	2001      	movs	r0, #1
   1143e:	bd1c      	pop	{r2, r3, r4, pc}

00011440 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   11440:	b510      	push	{r4, lr}
   11442:	f7f3 fb45 	bl	4ad0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   11446:	2000      	movs	r0, #0
   11448:	bd10      	pop	{r4, pc}

0001144a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   1144a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1144c:	460c      	mov	r4, r1
   1144e:	4605      	mov	r5, r0
   11450:	f000 fb3d 	bl	11ace <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11454:	b178      	cbz	r0, 11476 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2c>
   11456:	4669      	mov	r1, sp
   11458:	4628      	mov	r0, r5
   1145a:	f7fe fcd6 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1145e:	2800      	cmp	r0, #0
   11460:	d108      	bne.n	11474 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2a>
   11462:	f89d 0000 	ldrb.w	r0, [sp]
   11466:	b140      	cbz	r0, 1147a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x30>
   11468:	2100      	movs	r1, #0
   1146a:	4622      	mov	r2, r4
   1146c:	9801      	ldr	r0, [sp, #4]
   1146e:	f000 faca 	bl	11a06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
   11472:	2000      	movs	r0, #0
   11474:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11476:	2001      	movs	r0, #1
   11478:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1147a:	2101      	movs	r1, #1
   1147c:	e7f5      	b.n	1146a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>

0001147e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   1147e:	b538      	push	{r3, r4, r5, lr}
   11480:	460d      	mov	r5, r1
   11482:	4604      	mov	r4, r0
   11484:	f000 fa32 	bl	118ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   11488:	2800      	cmp	r0, #0
   1148a:	d108      	bne.n	1149e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   1148c:	4620      	mov	r0, r4
   1148e:	f000 f9fc 	bl	1188a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf0>
   11492:	2800      	cmp	r0, #0
   11494:	d103      	bne.n	1149e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   11496:	f7f7 fae7 	bl	8a68 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   1149a:	b108      	cbz	r0, 114a0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x22>
   1149c:	200c      	movs	r0, #12
   1149e:	bd38      	pop	{r3, r4, r5, pc}
   114a0:	f7f6 f800 	bl	74a4 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   114a4:	7028      	strb	r0, [r5, #0]
   114a6:	74e0      	strb	r0, [r4, #19]
   114a8:	7e60      	ldrb	r0, [r4, #25]
   114aa:	b150      	cbz	r0, 114c2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x44>
   114ac:	20ff      	movs	r0, #255	; 0xff
   114ae:	f88d 0000 	strb.w	r0, [sp]
   114b2:	4669      	mov	r1, sp
   114b4:	2000      	movs	r0, #0
   114b6:	f7f6 f84f 	bl	7558 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
   114ba:	4669      	mov	r1, sp
   114bc:	2000      	movs	r0, #0
   114be:	f7f6 f859 	bl	7574 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
   114c2:	4620      	mov	r0, r4
   114c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   114c8:	f7f5 bea0 	b.w	720c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>

000114cc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   114cc:	b510      	push	{r4, lr}
   114ce:	4604      	mov	r4, r0
   114d0:	2000      	movs	r0, #0
   114d2:	f7fb f9c7 	bl	c864 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   114d6:	b128      	cbz	r0, 114e4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   114d8:	4621      	mov	r1, r4
   114da:	2000      	movs	r0, #0
   114dc:	f7f3 faca 	bl	4a74 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   114e0:	2000      	movs	r0, #0
   114e2:	bd10      	pop	{r4, pc}
   114e4:	200c      	movs	r0, #12
   114e6:	bd10      	pop	{r4, pc}

000114e8 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
   114e8:	b510      	push	{r4, lr}
   114ea:	4604      	mov	r4, r0
   114ec:	f7fa fbfe 	bl	bcec <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>
   114f0:	b150      	cbz	r0, 11508 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   114f2:	f7f7 fb55 	bl	8ba0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
   114f6:	b138      	cbz	r0, 11508 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   114f8:	7820      	ldrb	r0, [r4, #0]
   114fa:	f7f7 fb6f 	bl	8bdc <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
   114fe:	7820      	ldrb	r0, [r4, #0]
   11500:	f7fa fbc8 	bl	bc94 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>
   11504:	2000      	movs	r0, #0
   11506:	bd10      	pop	{r4, pc}
   11508:	200c      	movs	r0, #12
   1150a:	bd10      	pop	{r4, pc}

0001150c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1150c:	b510      	push	{r4, lr}
   1150e:	4604      	mov	r4, r0
   11510:	7800      	ldrb	r0, [r0, #0]
   11512:	f000 0001 	and.w	r0, r0, #1
   11516:	f7fa fbff 	bl	bd18 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
   1151a:	7820      	ldrb	r0, [r4, #0]
   1151c:	f000 0001 	and.w	r0, r0, #1
   11520:	f7f7 fb62 	bl	8be8 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
   11524:	2000      	movs	r0, #0
   11526:	bd10      	pop	{r4, pc}

00011528 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   11528:	b510      	push	{r4, lr}
   1152a:	4604      	mov	r4, r0
   1152c:	f000 facf 	bl	11ace <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11530:	b120      	cbz	r0, 1153c <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   11532:	4620      	mov	r0, r4
   11534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11538:	f000 baf9 	b.w	11b2e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x394>
   1153c:	2001      	movs	r0, #1
   1153e:	bd10      	pop	{r4, pc}

00011540 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   11540:	b510      	push	{r4, lr}
   11542:	4604      	mov	r4, r0
   11544:	8880      	ldrh	r0, [r0, #4]
   11546:	b128      	cbz	r0, 11554 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11548:	2801      	cmp	r0, #1
   1154a:	d003      	beq.n	11554 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1154c:	2802      	cmp	r0, #2
   1154e:	d001      	beq.n	11554 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11550:	2012      	movs	r0, #18
   11552:	bd10      	pop	{r4, pc}
   11554:	78e0      	ldrb	r0, [r4, #3]
   11556:	f000 fa33 	bl	119c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
   1155a:	b148      	cbz	r0, 11570 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1155c:	78a0      	ldrb	r0, [r4, #2]
   1155e:	f000 fa2f 	bl	119c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
   11562:	b128      	cbz	r0, 11570 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11564:	4620      	mov	r0, r4
   11566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1156a:	2101      	movs	r1, #1
   1156c:	f000 b893 	b.w	11696 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   11570:	2011      	movs	r0, #17
   11572:	bd10      	pop	{r4, pc}

00011574 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   11574:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11576:	460c      	mov	r4, r1
   11578:	4605      	mov	r5, r0
   1157a:	8800      	ldrh	r0, [r0, #0]
   1157c:	4669      	mov	r1, sp
   1157e:	f7fe fc44 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11582:	2800      	cmp	r0, #0
   11584:	d106      	bne.n	11594 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   11586:	9801      	ldr	r0, [sp, #4]
   11588:	8829      	ldrh	r1, [r5, #0]
   1158a:	8021      	strh	r1, [r4, #0]
   1158c:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   11590:	8060      	strh	r0, [r4, #2]
   11592:	2000      	movs	r0, #0
   11594:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011596 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   11596:	b510      	push	{r4, lr}
   11598:	4604      	mov	r4, r0
   1159a:	4601      	mov	r1, r0
   1159c:	2000      	movs	r0, #0
   1159e:	f7f3 fa47 	bl	4a30 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   115a2:	b910      	cbnz	r0, 115aa <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   115a4:	2000      	movs	r0, #0
   115a6:	6020      	str	r0, [r4, #0]
   115a8:	80a0      	strh	r0, [r4, #4]
   115aa:	2000      	movs	r0, #0
   115ac:	bd10      	pop	{r4, pc}

000115ae <sym_2PTHETYGBZAPJ2ZKYDOVYDIWST3AXGZGS3MY6DI>:
   115ae:	2100      	movs	r1, #0
   115b0:	6001      	str	r1, [r0, #0]
   115b2:	6041      	str	r1, [r0, #4]
   115b4:	2160      	movs	r1, #96	; 0x60
   115b6:	7101      	strb	r1, [r0, #4]
   115b8:	2000      	movs	r0, #0
   115ba:	4770      	bx	lr

000115bc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   115bc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   115be:	8800      	ldrh	r0, [r0, #0]
   115c0:	4669      	mov	r1, sp
   115c2:	f7fe fc22 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   115c6:	b978      	cbnz	r0, 115e8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   115c8:	4668      	mov	r0, sp
   115ca:	f000 fa86 	bl	11ada <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   115ce:	b158      	cbz	r0, 115e8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   115d0:	9c01      	ldr	r4, [sp, #4]
   115d2:	f89d 0000 	ldrb.w	r0, [sp]
   115d6:	3478      	adds	r4, #120	; 0x78
   115d8:	f000 f91f 	bl	1181a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   115dc:	2800      	cmp	r0, #0
   115de:	9801      	ldr	r0, [sp, #4]
   115e0:	d004      	beq.n	115ec <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x30>
   115e2:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   115e6:	e003      	b.n	115f0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   115e8:	2002      	movs	r0, #2
   115ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   115ec:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
   115f0:	7801      	ldrb	r1, [r0, #0]
   115f2:	b911      	cbnz	r1, 115fa <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   115f4:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   115f8:	b109      	cbz	r1, 115fe <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   115fa:	203a      	movs	r0, #58	; 0x3a
   115fc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   115fe:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   11602:	f04f 0501 	mov.w	r5, #1
   11606:	0789      	lsls	r1, r1, #30
   11608:	d103      	bne.n	11612 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x56>
   1160a:	7005      	strb	r5, [r0, #0]
   1160c:	4668      	mov	r0, sp
   1160e:	f7ff f8b3 	bl	10778 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   11612:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   11616:	2000      	movs	r0, #0
   11618:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001161a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1161a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1161c:	460c      	mov	r4, r1
   1161e:	4605      	mov	r5, r0
   11620:	8800      	ldrh	r0, [r0, #0]
   11622:	4669      	mov	r1, sp
   11624:	f7fe fbf1 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11628:	b108      	cbz	r0, 1162e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1162a:	2002      	movs	r0, #2
   1162c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1162e:	78a8      	ldrb	r0, [r5, #2]
   11630:	b128      	cbz	r0, 1163e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x24>
   11632:	2004      	movs	r0, #4
   11634:	70a0      	strb	r0, [r4, #2]
   11636:	8828      	ldrh	r0, [r5, #0]
   11638:	8020      	strh	r0, [r4, #0]
   1163a:	2000      	movs	r0, #0
   1163c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1163e:	9801      	ldr	r0, [sp, #4]
   11640:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   11644:	e7f6      	b.n	11634 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1a>

00011646 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   11646:	b510      	push	{r4, lr}
   11648:	f7fb fb44 	bl	ccd4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1164c:	2000      	movs	r0, #0
   1164e:	bd10      	pop	{r4, pc}

00011650 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   11650:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11654:	460d      	mov	r5, r1
   11656:	4604      	mov	r4, r0
   11658:	8842      	ldrh	r2, [r0, #2]
   1165a:	f64b 3180 	movw	r1, #48000	; 0xbb80
   1165e:	2012      	movs	r0, #18
   11660:	428a      	cmp	r2, r1
   11662:	d816      	bhi.n	11692 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11664:	2a00      	cmp	r2, #0
   11666:	d014      	beq.n	11692 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11668:	8820      	ldrh	r0, [r4, #0]
   1166a:	4669      	mov	r1, sp
   1166c:	f7fe fbcd 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11670:	2800      	cmp	r0, #0
   11672:	d10e      	bne.n	11692 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11674:	8820      	ldrh	r0, [r4, #0]
   11676:	8028      	strh	r0, [r5, #0]
   11678:	9e01      	ldr	r6, [sp, #4]
   1167a:	1d35      	adds	r5, r6, #4
   1167c:	3678      	adds	r6, #120	; 0x78
   1167e:	682f      	ldr	r7, [r5, #0]
   11680:	8862      	ldrh	r2, [r4, #2]
   11682:	4639      	mov	r1, r7
   11684:	4630      	mov	r0, r6
   11686:	f7fe fd95 	bl	101b4 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   1168a:	6828      	ldr	r0, [r5, #0]
   1168c:	42b8      	cmp	r0, r7
   1168e:	d1f6      	bne.n	1167e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x2e>
   11690:	2000      	movs	r0, #0
   11692:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00011696 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   11696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1169a:	b089      	sub	sp, #36	; 0x24
   1169c:	4689      	mov	r9, r1
   1169e:	4604      	mov	r4, r0
   116a0:	8800      	ldrh	r0, [r0, #0]
   116a2:	a904      	add	r1, sp, #16
   116a4:	f7fe fbb1 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   116a8:	2800      	cmp	r0, #0
   116aa:	d14a      	bne.n	11742 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   116ac:	9805      	ldr	r0, [sp, #20]
   116ae:	f89d 1010 	ldrb.w	r1, [sp, #16]
   116b2:	4605      	mov	r5, r0
   116b4:	3078      	adds	r0, #120	; 0x78
   116b6:	2900      	cmp	r1, #0
   116b8:	4629      	mov	r1, r5
   116ba:	d005      	beq.n	116c8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x32>
   116bc:	f891 620c 	ldrb.w	r6, [r1, #524]	; 0x20c
   116c0:	7b41      	ldrb	r1, [r0, #13]
   116c2:	2921      	cmp	r1, #33	; 0x21
   116c4:	d003      	beq.n	116ce <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   116c6:	e003      	b.n	116d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   116c8:	f891 616e 	ldrb.w	r6, [r1, #366]	; 0x16e
   116cc:	e7f8      	b.n	116c0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x2a>
   116ce:	b13e      	cbz	r6, 116e0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4a>
   116d0:	2700      	movs	r7, #0
   116d2:	3046      	adds	r0, #70	; 0x46
   116d4:	2108      	movs	r1, #8
   116d6:	4680      	mov	r8, r0
   116d8:	f7ff fc2e 	bl	10f38 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   116dc:	b110      	cbz	r0, 116e4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   116de:	e007      	b.n	116f0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   116e0:	2701      	movs	r7, #1
   116e2:	e7f6      	b.n	116d2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   116e4:	210b      	movs	r1, #11
   116e6:	4640      	mov	r0, r8
   116e8:	f7ff fc26 	bl	10f38 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   116ec:	b900      	cbnz	r0, 116f0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   116ee:	b33f      	cbz	r7, 11740 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xaa>
   116f0:	a802      	add	r0, sp, #8
   116f2:	9000      	str	r0, [sp, #0]
   116f4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   116f8:	ab01      	add	r3, sp, #4
   116fa:	4622      	mov	r2, r4
   116fc:	4629      	mov	r1, r5
   116fe:	f000 f9c6 	bl	11a8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f4>
   11702:	0007      	movs	r7, r0
   11704:	d11d      	bne.n	11742 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11706:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1170a:	9c05      	ldr	r4, [sp, #20]
   1170c:	b1e0      	cbz	r0, 11748 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb2>
   1170e:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   11712:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   11716:	b168      	cbz	r0, 11734 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   11718:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1171c:	f010 0102 	ands.w	r1, r0, #2
   11720:	f89d 0008 	ldrb.w	r0, [sp, #8]
   11724:	f88d 1004 	strb.w	r1, [sp, #4]
   11728:	f000 0002 	and.w	r0, r0, #2
   1172c:	f88d 0008 	strb.w	r0, [sp, #8]
   11730:	d00d      	beq.n	1174e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   11732:	b160      	cbz	r0, 1174e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   11734:	2001      	movs	r0, #1
   11736:	7060      	strb	r0, [r4, #1]
   11738:	f04f 0800 	mov.w	r8, #0
   1173c:	b95e      	cbnz	r6, 11756 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc0>
   1173e:	e008      	b.n	11752 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xbc>
   11740:	201a      	movs	r0, #26
   11742:	b009      	add	sp, #36	; 0x24
   11744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11748:	f504 74a1 	add.w	r4, r4, #322	; 0x142
   1174c:	e7e1      	b.n	11712 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7c>
   1174e:	2009      	movs	r0, #9
   11750:	e7f7      	b.n	11742 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11752:	7820      	ldrb	r0, [r4, #0]
   11754:	b108      	cbz	r0, 1175a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
   11756:	273a      	movs	r7, #58	; 0x3a
   11758:	e011      	b.n	1177e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xe8>
   1175a:	f8cd 8018 	str.w	r8, [sp, #24]
   1175e:	f884 9000 	strb.w	r9, [r4]
   11762:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11766:	70a1      	strb	r1, [r4, #2]
   11768:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1176c:	70e0      	strb	r0, [r4, #3]
   1176e:	f88d 1018 	strb.w	r1, [sp, #24]
   11772:	f88d 0019 	strb.w	r0, [sp, #25]
   11776:	a906      	add	r1, sp, #24
   11778:	4628      	mov	r0, r5
   1177a:	f7fe fc41 	bl	10000 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1177e:	f884 8001 	strb.w	r8, [r4, #1]
   11782:	4638      	mov	r0, r7
   11784:	e7dd      	b.n	11742 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>

00011786 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   11786:	b510      	push	{r4, lr}
   11788:	2008      	movs	r0, #8
   1178a:	f7fb fb35 	bl	cdf8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1178e:	f7fa fafb 	bl	bd88 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>
   11792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11796:	f7f8 b9ad 	b.w	9af4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>

0001179a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   1179a:	b510      	push	{r4, lr}
   1179c:	4604      	mov	r4, r0
   1179e:	2000      	movs	r0, #0
   117a0:	8822      	ldrh	r2, [r4, #0]
   117a2:	b086      	sub	sp, #24
   117a4:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   117a8:	39ff      	subs	r1, #255	; 0xff
   117aa:	d008      	beq.n	117be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   117ac:	a903      	add	r1, sp, #12
   117ae:	4610      	mov	r0, r2
   117b0:	f7fe fb2b 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   117b4:	b110      	cbz	r0, 117bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   117b6:	2002      	movs	r0, #2
   117b8:	b006      	add	sp, #24
   117ba:	bd10      	pop	{r4, pc}
   117bc:	9804      	ldr	r0, [sp, #16]
   117be:	8921      	ldrh	r1, [r4, #8]
   117c0:	89a3      	ldrh	r3, [r4, #12]
   117c2:	8962      	ldrh	r2, [r4, #10]
   117c4:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   117c8:	88e3      	ldrh	r3, [r4, #6]
   117ca:	88a2      	ldrh	r2, [r4, #4]
   117cc:	8861      	ldrh	r1, [r4, #2]
   117ce:	f7fb f8db 	bl	c988 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18c>
   117d2:	b108      	cbz	r0, 117d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   117d4:	2000      	movs	r0, #0
   117d6:	e7ef      	b.n	117b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   117d8:	2030      	movs	r0, #48	; 0x30
   117da:	e7ed      	b.n	117b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   117dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   117e0:	4288      	cmp	r0, r1
   117e2:	d303      	bcc.n	117ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   117e4:	f640 0148 	movw	r1, #2120	; 0x848
   117e8:	4288      	cmp	r0, r1
   117ea:	d300      	bcc.n	117ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   117ec:	4608      	mov	r0, r1
   117ee:	4770      	bx	lr
   117f0:	07c1      	lsls	r1, r0, #31
   117f2:	d001      	beq.n	117f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   117f4:	2001      	movs	r0, #1
   117f6:	4770      	bx	lr
   117f8:	0780      	lsls	r0, r0, #30
   117fa:	d501      	bpl.n	11800 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   117fc:	2002      	movs	r0, #2
   117fe:	4770      	bx	lr
   11800:	2000      	movs	r0, #0
   11802:	4770      	bx	lr
   11804:	b510      	push	{r4, lr}
   11806:	2801      	cmp	r0, #1
   11808:	d006      	beq.n	11818 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   1180a:	2802      	cmp	r0, #2
   1180c:	d004      	beq.n	11818 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   1180e:	f240 218f 	movw	r1, #655	; 0x28f
   11812:	2006      	movs	r0, #6
   11814:	f7f2 f9b6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11818:	bd10      	pop	{r4, pc}
   1181a:	b108      	cbz	r0, 11820 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x86>
   1181c:	2000      	movs	r0, #0
   1181e:	4770      	bx	lr
   11820:	2001      	movs	r0, #1
   11822:	4770      	bx	lr
   11824:	b570      	push	{r4, r5, r6, lr}
   11826:	460d      	mov	r5, r1
   11828:	8899      	ldrh	r1, [r3, #4]
   1182a:	461c      	mov	r4, r3
   1182c:	194b      	adds	r3, r1, r5
   1182e:	4293      	cmp	r3, r2
   11830:	d901      	bls.n	11836 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
   11832:	2007      	movs	r0, #7
   11834:	bd70      	pop	{r4, r5, r6, pc}
   11836:	6822      	ldr	r2, [r4, #0]
   11838:	1853      	adds	r3, r2, r1
   1183a:	4601      	mov	r1, r0
   1183c:	462a      	mov	r2, r5
   1183e:	4618      	mov	r0, r3
   11840:	f7f2 f816 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11844:	88a0      	ldrh	r0, [r4, #4]
   11846:	4428      	add	r0, r5
   11848:	80a0      	strh	r0, [r4, #4]
   1184a:	2000      	movs	r0, #0
   1184c:	bd70      	pop	{r4, r5, r6, pc}
   1184e:	b570      	push	{r4, r5, r6, lr}
   11850:	460c      	mov	r4, r1
   11852:	4605      	mov	r5, r0
   11854:	b112      	cbz	r2, 1185c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   11856:	291f      	cmp	r1, #31
   11858:	d807      	bhi.n	1186a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
   1185a:	e010      	b.n	1187e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe4>
   1185c:	2cff      	cmp	r4, #255	; 0xff
   1185e:	d804      	bhi.n	1186a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
   11860:	f7f5 fe08 	bl	7474 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   11864:	b118      	cbz	r0, 1186e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   11866:	2c1f      	cmp	r4, #31
   11868:	d901      	bls.n	1186e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   1186a:	2012      	movs	r0, #18
   1186c:	bd70      	pop	{r4, r5, r6, pc}
   1186e:	4628      	mov	r0, r5
   11870:	f7f5 fe1e 	bl	74b0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   11874:	b128      	cbz	r0, 11882 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe8>
   11876:	4620      	mov	r0, r4
   11878:	f7f5 fc7c 	bl	7174 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1187c:	b118      	cbz	r0, 11886 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xec>
   1187e:	2000      	movs	r0, #0
   11880:	bd70      	pop	{r4, r5, r6, pc}
   11882:	2042      	movs	r0, #66	; 0x42
   11884:	bd70      	pop	{r4, r5, r6, pc}
   11886:	2045      	movs	r0, #69	; 0x45
   11888:	bd70      	pop	{r4, r5, r6, pc}
   1188a:	b510      	push	{r4, lr}
   1188c:	4604      	mov	r4, r0
   1188e:	7840      	ldrb	r0, [r0, #1]
   11890:	06c0      	lsls	r0, r0, #27
   11892:	d413      	bmi.n	118bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
   11894:	f7fb fad0 	bl	ce38 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11898:	0780      	lsls	r0, r0, #30
   1189a:	d405      	bmi.n	118a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x10e>
   1189c:	7d20      	ldrb	r0, [r4, #20]
   1189e:	2802      	cmp	r0, #2
   118a0:	d020      	beq.n	118e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   118a2:	7da0      	ldrb	r0, [r4, #22]
   118a4:	2802      	cmp	r0, #2
   118a6:	d01d      	beq.n	118e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   118a8:	f7fb fac6 	bl	ce38 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   118ac:	0740      	lsls	r0, r0, #29
   118ae:	d405      	bmi.n	118bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
   118b0:	7d20      	ldrb	r0, [r4, #20]
   118b2:	2803      	cmp	r0, #3
   118b4:	d016      	beq.n	118e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   118b6:	7da0      	ldrb	r0, [r4, #22]
   118b8:	2803      	cmp	r0, #3
   118ba:	d013      	beq.n	118e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   118bc:	7860      	ldrb	r0, [r4, #1]
   118be:	07c0      	lsls	r0, r0, #31
   118c0:	d002      	beq.n	118c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x12e>
   118c2:	f7fb fa45 	bl	cd50 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   118c6:	b168      	cbz	r0, 118e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   118c8:	7860      	ldrb	r0, [r4, #1]
   118ca:	06c1      	lsls	r1, r0, #27
   118cc:	d405      	bmi.n	118da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   118ce:	0700      	lsls	r0, r0, #28
   118d0:	d503      	bpl.n	118da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   118d2:	7d20      	ldrb	r0, [r4, #20]
   118d4:	2802      	cmp	r0, #2
   118d6:	d105      	bne.n	118e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   118d8:	e006      	b.n	118e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   118da:	7d20      	ldrb	r0, [r4, #20]
   118dc:	2802      	cmp	r0, #2
   118de:	d003      	beq.n	118e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   118e0:	7ea0      	ldrb	r0, [r4, #26]
   118e2:	b108      	cbz	r0, 118e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   118e4:	2011      	movs	r0, #17
   118e6:	bd10      	pop	{r4, pc}
   118e8:	2000      	movs	r0, #0
   118ea:	bd10      	pop	{r4, pc}
   118ec:	b538      	push	{r3, r4, r5, lr}
   118ee:	4604      	mov	r4, r0
   118f0:	7800      	ldrb	r0, [r0, #0]
   118f2:	28ef      	cmp	r0, #239	; 0xef
   118f4:	d860      	bhi.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   118f6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   118fa:	f8ad 0000 	strh.w	r0, [sp]
   118fe:	9800      	ldr	r0, [sp, #0]
   11900:	f000 f9c3 	bl	11c8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f0>
   11904:	b3c0      	cbz	r0, 11978 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
   11906:	7860      	ldrb	r0, [r4, #1]
   11908:	0701      	lsls	r1, r0, #28
   1190a:	d40f      	bmi.n	1192c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x192>
   1190c:	f8d4 2002 	ldr.w	r2, [r4, #2]
   11910:	f8d4 1005 	ldr.w	r1, [r4, #5]
   11914:	0a13      	lsrs	r3, r2, #8
   11916:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
   1191a:	d84d      	bhi.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1191c:	2320      	movs	r3, #32
   1191e:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
   11922:	d849      	bhi.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11924:	025a      	lsls	r2, r3, #9
   11926:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   1192a:	d345      	bcc.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1192c:	7a61      	ldrb	r1, [r4, #9]
   1192e:	b319      	cbz	r1, 11978 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
   11930:	2907      	cmp	r1, #7
   11932:	d841      	bhi.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11934:	7aa1      	ldrb	r1, [r4, #10]
   11936:	b129      	cbz	r1, 11944 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   11938:	2901      	cmp	r1, #1
   1193a:	d003      	beq.n	11944 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   1193c:	2902      	cmp	r1, #2
   1193e:	d001      	beq.n	11944 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   11940:	2903      	cmp	r1, #3
   11942:	d139      	bne.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11944:	0742      	lsls	r2, r0, #29
   11946:	d403      	bmi.n	11950 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b6>
   11948:	2902      	cmp	r1, #2
   1194a:	d001      	beq.n	11950 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b6>
   1194c:	2903      	cmp	r1, #3
   1194e:	d105      	bne.n	1195c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c2>
   11950:	7ae1      	ldrb	r1, [r4, #11]
   11952:	b109      	cbz	r1, 11958 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1be>
   11954:	2901      	cmp	r1, #1
   11956:	d12f      	bne.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11958:	0741      	lsls	r1, r0, #29
   1195a:	d407      	bmi.n	1196c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   1195c:	7ca1      	ldrb	r1, [r4, #18]
   1195e:	b129      	cbz	r1, 1196c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11960:	2901      	cmp	r1, #1
   11962:	d003      	beq.n	1196c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11964:	2902      	cmp	r1, #2
   11966:	d001      	beq.n	1196c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11968:	2903      	cmp	r1, #3
   1196a:	d125      	bne.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1196c:	06c1      	lsls	r1, r0, #27
   1196e:	d504      	bpl.n	1197a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e0>
   11970:	7d20      	ldrb	r0, [r4, #20]
   11972:	2801      	cmp	r0, #1
   11974:	d120      	bne.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11976:	e01b      	b.n	119b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x216>
   11978:	e01e      	b.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1197a:	7d21      	ldrb	r1, [r4, #20]
   1197c:	2902      	cmp	r1, #2
   1197e:	d10b      	bne.n	11998 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fe>
   11980:	07c1      	lsls	r1, r0, #31
   11982:	d019      	beq.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11984:	0741      	lsls	r1, r0, #29
   11986:	d417      	bmi.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11988:	0701      	lsls	r1, r0, #28
   1198a:	d515      	bpl.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   1198c:	0641      	lsls	r1, r0, #25
   1198e:	d413      	bmi.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11990:	0681      	lsls	r1, r0, #26
   11992:	d411      	bmi.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11994:	0781      	lsls	r1, r0, #30
   11996:	d40f      	bmi.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11998:	06c0      	lsls	r0, r0, #27
   1199a:	d409      	bmi.n	119b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x216>
   1199c:	7da0      	ldrb	r0, [r4, #22]
   1199e:	2801      	cmp	r0, #1
   119a0:	d003      	beq.n	119aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   119a2:	2802      	cmp	r0, #2
   119a4:	d001      	beq.n	119aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   119a6:	2803      	cmp	r0, #3
   119a8:	d106      	bne.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   119aa:	7de0      	ldrb	r0, [r4, #23]
   119ac:	280f      	cmp	r0, #15
   119ae:	d803      	bhi.n	119b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   119b0:	7e20      	ldrb	r0, [r4, #24]
   119b2:	b118      	cbz	r0, 119bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   119b4:	2801      	cmp	r0, #1
   119b6:	d001      	beq.n	119bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   119b8:	2012      	movs	r0, #18
   119ba:	bd38      	pop	{r3, r4, r5, pc}
   119bc:	2000      	movs	r0, #0
   119be:	bd38      	pop	{r3, r4, r5, pc}
   119c0:	b510      	push	{r4, lr}
   119c2:	0004      	movs	r4, r0
   119c4:	d005      	beq.n	119d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   119c6:	f7fb fa37 	bl	ce38 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   119ca:	4384      	bics	r4, r0
   119cc:	d001      	beq.n	119d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   119ce:	2000      	movs	r0, #0
   119d0:	bd10      	pop	{r4, pc}
   119d2:	2001      	movs	r0, #1
   119d4:	bd10      	pop	{r4, pc}
   119d6:	28fb      	cmp	r0, #251	; 0xfb
   119d8:	d803      	bhi.n	119e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x248>
   119da:	f640 0048 	movw	r0, #2120	; 0x848
   119de:	4281      	cmp	r1, r0
   119e0:	d901      	bls.n	119e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24c>
   119e2:	2011      	movs	r0, #17
   119e4:	4770      	bx	lr
   119e6:	2000      	movs	r0, #0
   119e8:	4770      	bx	lr
   119ea:	381b      	subs	r0, #27
   119ec:	28e1      	cmp	r0, #225	; 0xe1
   119ee:	d206      	bcs.n	119fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
   119f0:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   119f4:	d303      	bcc.n	119fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
   119f6:	f244 2090 	movw	r0, #17040	; 0x4290
   119fa:	4281      	cmp	r1, r0
   119fc:	d901      	bls.n	11a02 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x268>
   119fe:	2012      	movs	r0, #18
   11a00:	4770      	bx	lr
   11a02:	2000      	movs	r0, #0
   11a04:	4770      	bx	lr
   11a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a0a:	4605      	mov	r5, r0
   11a0c:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
   11a10:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
   11a14:	4616      	mov	r6, r2
   11a16:	3028      	adds	r0, #40	; 0x28
   11a18:	b111      	cbz	r1, 11a20 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
   11a1a:	f7fa f983 	bl	bd24 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
   11a1e:	e001      	b.n	11a24 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28a>
   11a20:	f7f7 f8e8 	bl	8bf4 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
   11a24:	4680      	mov	r8, r0
   11a26:	2102      	movs	r1, #2
   11a28:	f7fe fabe 	bl	ffa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11a2c:	4287      	cmp	r7, r0
   11a2e:	d200      	bcs.n	11a32 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
   11a30:	4638      	mov	r0, r7
   11a32:	4607      	mov	r7, r0
   11a34:	2102      	movs	r1, #2
   11a36:	4640      	mov	r0, r8
   11a38:	f7fe fab6 	bl	ffa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11a3c:	4284      	cmp	r4, r0
   11a3e:	d200      	bcs.n	11a42 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a8>
   11a40:	4620      	mov	r0, r4
   11a42:	8829      	ldrh	r1, [r5, #0]
   11a44:	8031      	strh	r1, [r6, #0]
   11a46:	2f1b      	cmp	r7, #27
   11a48:	d913      	bls.n	11a72 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d8>
   11a4a:	2ffb      	cmp	r7, #251	; 0xfb
   11a4c:	d300      	bcc.n	11a50 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b6>
   11a4e:	27fb      	movs	r7, #251	; 0xfb
   11a50:	8077      	strh	r7, [r6, #2]
   11a52:	281b      	cmp	r0, #27
   11a54:	d90f      	bls.n	11a76 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2dc>
   11a56:	28fb      	cmp	r0, #251	; 0xfb
   11a58:	d300      	bcc.n	11a5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c2>
   11a5a:	20fb      	movs	r0, #251	; 0xfb
   11a5c:	80f0      	strh	r0, [r6, #6]
   11a5e:	4640      	mov	r0, r8
   11a60:	f7ff febc 	bl	117dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   11a64:	80b0      	strh	r0, [r6, #4]
   11a66:	4640      	mov	r0, r8
   11a68:	f7ff feb8 	bl	117dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   11a6c:	8130      	strh	r0, [r6, #8]
   11a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a72:	271b      	movs	r7, #27
   11a74:	e7ec      	b.n	11a50 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b6>
   11a76:	201b      	movs	r0, #27
   11a78:	e7f0      	b.n	11a5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c2>
   11a7a:	b510      	push	{r4, lr}
   11a7c:	f000 f84c 	bl	11b18 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   11a80:	b918      	cbnz	r0, 11a8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   11a82:	f7f6 fff1 	bl	8a68 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   11a86:	2800      	cmp	r0, #0
   11a88:	d000      	beq.n	11a8c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f2>
   11a8a:	2001      	movs	r0, #1
   11a8c:	bd10      	pop	{r4, pc}
   11a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a92:	7890      	ldrb	r0, [r2, #2]
   11a94:	9e06      	ldr	r6, [sp, #24]
   11a96:	461d      	mov	r5, r3
   11a98:	4614      	mov	r4, r2
   11a9a:	b908      	cbnz	r0, 11aa0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x306>
   11a9c:	f7fb f9cc 	bl	ce38 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11aa0:	78e4      	ldrb	r4, [r4, #3]
   11aa2:	4607      	mov	r7, r0
   11aa4:	b914      	cbnz	r4, 11aac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x312>
   11aa6:	f7fb f9c7 	bl	ce38 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11aaa:	4604      	mov	r4, r0
   11aac:	b16f      	cbz	r7, 11aca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11aae:	b164      	cbz	r4, 11aca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11ab0:	4638      	mov	r0, r7
   11ab2:	f7ff fe9d 	bl	117f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   11ab6:	4620      	mov	r0, r4
   11ab8:	f7ff fe9a 	bl	117f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   11abc:	b12f      	cbz	r7, 11aca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11abe:	b124      	cbz	r4, 11aca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11ac0:	702f      	strb	r7, [r5, #0]
   11ac2:	7034      	strb	r4, [r6, #0]
   11ac4:	2000      	movs	r0, #0
   11ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11aca:	2009      	movs	r0, #9
   11acc:	e7fb      	b.n	11ac6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x32c>
   11ace:	b510      	push	{r4, lr}
   11ad0:	f7fb f9a4 	bl	ce1c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   11ad4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11ad8:	bd10      	pop	{r4, pc}
   11ada:	7801      	ldrb	r1, [r0, #0]
   11adc:	6840      	ldr	r0, [r0, #4]
   11ade:	b109      	cbz	r1, 11ae4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34a>
   11ae0:	f000 b80e 	b.w	11b00 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x366>
   11ae4:	f000 b800 	b.w	11ae8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
   11ae8:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
   11aec:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   11af0:	b920      	cbnz	r0, 11afc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11af2:	b119      	cbz	r1, 11afc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11af4:	2904      	cmp	r1, #4
   11af6:	d001      	beq.n	11afc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11af8:	2001      	movs	r0, #1
   11afa:	4770      	bx	lr
   11afc:	2000      	movs	r0, #0
   11afe:	4770      	bx	lr
   11b00:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
   11b04:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   11b08:	b920      	cbnz	r0, 11b14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   11b0a:	b119      	cbz	r1, 11b14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   11b0c:	2904      	cmp	r1, #4
   11b0e:	d001      	beq.n	11b14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   11b10:	2001      	movs	r0, #1
   11b12:	4770      	bx	lr
   11b14:	2000      	movs	r0, #0
   11b16:	4770      	bx	lr
   11b18:	b510      	push	{r4, lr}
   11b1a:	f7fa f911 	bl	bd40 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   11b1e:	2804      	cmp	r0, #4
   11b20:	d003      	beq.n	11b2a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x390>
   11b22:	2805      	cmp	r0, #5
   11b24:	d001      	beq.n	11b2a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x390>
   11b26:	2000      	movs	r0, #0
   11b28:	bd10      	pop	{r4, pc}
   11b2a:	2001      	movs	r0, #1
   11b2c:	bd10      	pop	{r4, pc}
   11b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b32:	b086      	sub	sp, #24
   11b34:	4604      	mov	r4, r0
   11b36:	8800      	ldrh	r0, [r0, #0]
   11b38:	4669      	mov	r1, sp
   11b3a:	f7fe f966 	bl	fe0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11b3e:	2800      	cmp	r0, #0
   11b40:	d151      	bne.n	11be6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11b42:	9801      	ldr	r0, [sp, #4]
   11b44:	f89d 1000 	ldrb.w	r1, [sp]
   11b48:	3078      	adds	r0, #120	; 0x78
   11b4a:	2900      	cmp	r1, #0
   11b4c:	9901      	ldr	r1, [sp, #4]
   11b4e:	d007      	beq.n	11b60 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
   11b50:	f891 11f8 	ldrb.w	r1, [r1, #504]	; 0x1f8
   11b54:	f88d 1008 	strb.w	r1, [sp, #8]
   11b58:	7b81      	ldrb	r1, [r0, #14]
   11b5a:	0689      	lsls	r1, r1, #26
   11b5c:	d413      	bmi.n	11b86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   11b5e:	e009      	b.n	11b74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   11b60:	f891 1162 	ldrb.w	r1, [r1, #354]	; 0x162
   11b64:	f88d 1008 	strb.w	r1, [sp, #8]
   11b68:	7b41      	ldrb	r1, [r0, #13]
   11b6a:	291d      	cmp	r1, #29
   11b6c:	d00b      	beq.n	11b86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   11b6e:	e001      	b.n	11b74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   11b70:	2101      	movs	r1, #1
   11b72:	e000      	b.n	11b76 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3dc>
   11b74:	2100      	movs	r1, #0
   11b76:	f88d 100c 	strb.w	r1, [sp, #12]
   11b7a:	2105      	movs	r1, #5
   11b7c:	3046      	adds	r0, #70	; 0x46
   11b7e:	f7ff f9db 	bl	10f38 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   11b82:	b128      	cbz	r0, 11b90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f6>
   11b84:	e007      	b.n	11b96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fc>
   11b86:	f89d 1008 	ldrb.w	r1, [sp, #8]
   11b8a:	2900      	cmp	r1, #0
   11b8c:	d1f2      	bne.n	11b74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   11b8e:	e7ef      	b.n	11b70 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d6>
   11b90:	f89d 000c 	ldrb.w	r0, [sp, #12]
   11b94:	b330      	cbz	r0, 11be4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44a>
   11b96:	8921      	ldrh	r1, [r4, #8]
   11b98:	88e0      	ldrh	r0, [r4, #6]
   11b9a:	f7ff ff26 	bl	119ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
   11b9e:	2800      	cmp	r0, #0
   11ba0:	d121      	bne.n	11be6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11ba2:	88a1      	ldrh	r1, [r4, #4]
   11ba4:	8860      	ldrh	r0, [r4, #2]
   11ba6:	f7ff ff20 	bl	119ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
   11baa:	2800      	cmp	r0, #0
   11bac:	d11b      	bne.n	11be6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11bae:	8921      	ldrh	r1, [r4, #8]
   11bb0:	88e0      	ldrh	r0, [r4, #6]
   11bb2:	f7ff ff10 	bl	119d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   11bb6:	2800      	cmp	r0, #0
   11bb8:	d115      	bne.n	11be6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11bba:	88a1      	ldrh	r1, [r4, #4]
   11bbc:	8860      	ldrh	r0, [r4, #2]
   11bbe:	f7ff ff0a 	bl	119d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   11bc2:	0006      	movs	r6, r0
   11bc4:	d10f      	bne.n	11be6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11bc6:	f89d 0000 	ldrb.w	r0, [sp]
   11bca:	9f01      	ldr	r7, [sp, #4]
   11bcc:	b170      	cbz	r0, 11bec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
   11bce:	f507 75da 	add.w	r5, r7, #436	; 0x1b4
   11bd2:	f04f 0801 	mov.w	r8, #1
   11bd6:	f885 8001 	strb.w	r8, [r5, #1]
   11bda:	f89d 0008 	ldrb.w	r0, [sp, #8]
   11bde:	b140      	cbz	r0, 11bf2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x458>
   11be0:	263a      	movs	r6, #58	; 0x3a
   11be2:	e037      	b.n	11c54 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ba>
   11be4:	201a      	movs	r0, #26
   11be6:	b006      	add	sp, #24
   11be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11bec:	f507 759c 	add.w	r5, r7, #312	; 0x138
   11bf0:	e7ef      	b.n	11bd2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x438>
   11bf2:	f89d 0000 	ldrb.w	r0, [sp]
   11bf6:	f7ff fe10 	bl	1181a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   11bfa:	4601      	mov	r1, r0
   11bfc:	aa02      	add	r2, sp, #8
   11bfe:	4638      	mov	r0, r7
   11c00:	f7ff ff01 	bl	11a06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
   11c04:	8861      	ldrh	r1, [r4, #2]
   11c06:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   11c0a:	4281      	cmp	r1, r0
   11c0c:	d200      	bcs.n	11c10 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   11c0e:	4608      	mov	r0, r1
   11c10:	80e8      	strh	r0, [r5, #6]
   11c12:	88a1      	ldrh	r1, [r4, #4]
   11c14:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   11c18:	4281      	cmp	r1, r0
   11c1a:	d200      	bcs.n	11c1e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x484>
   11c1c:	4608      	mov	r0, r1
   11c1e:	8128      	strh	r0, [r5, #8]
   11c20:	88e2      	ldrh	r2, [r4, #6]
   11c22:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   11c26:	428a      	cmp	r2, r1
   11c28:	d200      	bcs.n	11c2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x492>
   11c2a:	4611      	mov	r1, r2
   11c2c:	8069      	strh	r1, [r5, #2]
   11c2e:	8921      	ldrh	r1, [r4, #8]
   11c30:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   11c34:	4291      	cmp	r1, r2
   11c36:	d300      	bcc.n	11c3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a0>
   11c38:	4611      	mov	r1, r2
   11c3a:	f640 0248 	movw	r2, #2120	; 0x848
   11c3e:	80a9      	strh	r1, [r5, #4]
   11c40:	4291      	cmp	r1, r2
   11c42:	d300      	bcc.n	11c46 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ac>
   11c44:	4611      	mov	r1, r2
   11c46:	80a9      	strh	r1, [r5, #4]
   11c48:	4290      	cmp	r0, r2
   11c4a:	d200      	bcs.n	11c4e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4b4>
   11c4c:	4602      	mov	r2, r0
   11c4e:	812a      	strh	r2, [r5, #8]
   11c50:	f885 8000 	strb.w	r8, [r5]
   11c54:	2000      	movs	r0, #0
   11c56:	7068      	strb	r0, [r5, #1]
   11c58:	4630      	mov	r0, r6
   11c5a:	e7c4      	b.n	11be6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   11c5c:	b530      	push	{r4, r5, lr}
   11c5e:	f340 0400 	sbfx	r4, r0, #0, #1
   11c62:	f340 0040 	sbfx	r0, r0, #1, #1
   11c66:	1c40      	adds	r0, r0, #1
   11c68:	9d03      	ldr	r5, [sp, #12]
   11c6a:	1c64      	adds	r4, r4, #1
   11c6c:	d000      	beq.n	11c70 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4d6>
   11c6e:	b119      	cbz	r1, 11c78 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   11c70:	b100      	cbz	r0, 11c74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4da>
   11c72:	b10a      	cbz	r2, 11c78 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   11c74:	b91c      	cbnz	r4, 11c7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e4>
   11c76:	e001      	b.n	11c7c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e2>
   11c78:	2011      	movs	r0, #17
   11c7a:	bd30      	pop	{r4, r5, pc}
   11c7c:	2100      	movs	r1, #0
   11c7e:	7019      	strb	r1, [r3, #0]
   11c80:	b900      	cbnz	r0, 11c84 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ea>
   11c82:	2200      	movs	r2, #0
   11c84:	702a      	strb	r2, [r5, #0]
   11c86:	2000      	movs	r0, #0
   11c88:	bd30      	pop	{r4, r5, pc}
   11c8a:	b2c0      	uxtb	r0, r0
   11c8c:	06c1      	lsls	r1, r0, #27
   11c8e:	d415      	bmi.n	11cbc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x522>
   11c90:	0681      	lsls	r1, r0, #26
   11c92:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   11c96:	d503      	bpl.n	11ca0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x506>
   11c98:	bb21      	cbnz	r1, 11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c9a:	0781      	lsls	r1, r0, #30
   11c9c:	d422      	bmi.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11c9e:	e001      	b.n	11ca4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x50a>
   11ca0:	2900      	cmp	r1, #0
   11ca2:	d1fa      	bne.n	11c9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x500>
   11ca4:	0701      	lsls	r1, r0, #28
   11ca6:	d51b      	bpl.n	11ce0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x546>
   11ca8:	07c1      	lsls	r1, r0, #31
   11caa:	d01b      	beq.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11cac:	0781      	lsls	r1, r0, #30
   11cae:	d419      	bmi.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11cb0:	0641      	lsls	r1, r0, #25
   11cb2:	d417      	bmi.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11cb4:	0741      	lsls	r1, r0, #29
   11cb6:	d415      	bmi.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11cb8:	0680      	lsls	r0, r0, #26
   11cba:	e00f      	b.n	11cdc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x542>
   11cbc:	0641      	lsls	r1, r0, #25
   11cbe:	d411      	bmi.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11cc0:	0681      	lsls	r1, r0, #26
   11cc2:	d40f      	bmi.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11cc4:	07c1      	lsls	r1, r0, #31
   11cc6:	ea4f 7180 	mov.w	r1, r0, lsl #30
   11cca:	d004      	beq.n	11cd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   11ccc:	2900      	cmp	r1, #0
   11cce:	db02      	blt.n	11cd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   11cd0:	0740      	lsls	r0, r0, #29
   11cd2:	d405      	bmi.n	11ce0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x546>
   11cd4:	e006      	b.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11cd6:	0701      	lsls	r1, r0, #28
   11cd8:	d404      	bmi.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11cda:	0740      	lsls	r0, r0, #29
   11cdc:	2800      	cmp	r0, #0
   11cde:	db01      	blt.n	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   11ce0:	2001      	movs	r0, #1
   11ce2:	4770      	bx	lr
   11ce4:	2000      	movs	r0, #0
   11ce6:	4770      	bx	lr
   11ce8:	b510      	push	{r4, lr}
   11cea:	f7ff ff15 	bl	11b18 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   11cee:	b110      	cbz	r0, 11cf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x55c>
   11cf0:	f7f9 ffe0 	bl	bcb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   11cf4:	b928      	cbnz	r0, 11d02 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x568>
   11cf6:	f7f6 feb7 	bl	8a68 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   11cfa:	b120      	cbz	r0, 11d06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   11cfc:	f7f5 fc92 	bl	7624 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   11d00:	b108      	cbz	r0, 11d06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   11d02:	2001      	movs	r0, #1
   11d04:	bd10      	pop	{r4, pc}
   11d06:	2000      	movs	r0, #0
   11d08:	bd10      	pop	{r4, pc}

00011d0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   11d0a:	6802      	ldr	r2, [r0, #0]
   11d0c:	b912      	cbnz	r2, 11d14 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   11d0e:	6001      	str	r1, [r0, #0]
   11d10:	4770      	bx	lr
   11d12:	4602      	mov	r2, r0
   11d14:	6850      	ldr	r0, [r2, #4]
   11d16:	2800      	cmp	r0, #0
   11d18:	d1fb      	bne.n	11d12 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   11d1a:	6051      	str	r1, [r2, #4]
   11d1c:	4770      	bx	lr
   11d1e:	b510      	push	{r4, lr}
   11d20:	f7f5 fbb8 	bl	7494 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   11d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11d28:	f7fb b818 	b.w	cd5c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   11d2c:	b510      	push	{r4, lr}
   11d2e:	f7f6 feb5 	bl	8a9c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
   11d32:	b108      	cbz	r0, 11d38 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   11d34:	21e2      	movs	r1, #226	; 0xe2
   11d36:	e004      	b.n	11d42 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
   11d38:	f7f5 fbca 	bl	74d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   11d3c:	2800      	cmp	r0, #0
   11d3e:	d003      	beq.n	11d48 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   11d40:	21e7      	movs	r1, #231	; 0xe7
   11d42:	2001      	movs	r0, #1
   11d44:	f7f1 ff1e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11d48:	bd10      	pop	{r4, pc}
   11d4a:	b50e      	push	{r1, r2, r3, lr}
   11d4c:	4669      	mov	r1, sp
   11d4e:	2001      	movs	r0, #1
   11d50:	f7fd ff59 	bl	fc06 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   11d54:	b148      	cbz	r0, 11d6a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x60>
   11d56:	219c      	movs	r1, #156	; 0x9c
   11d58:	e01a      	b.n	11d90 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   11d5a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   11d5e:	2101      	movs	r1, #1
   11d60:	f7f2 f93c 	bl	3fdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   11d64:	b108      	cbz	r0, 11d6a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x60>
   11d66:	21a0      	movs	r1, #160	; 0xa0
   11d68:	e012      	b.n	11d90 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   11d6a:	4668      	mov	r0, sp
   11d6c:	f7f2 f910 	bl	3f90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11d70:	2800      	cmp	r0, #0
   11d72:	d0f2      	beq.n	11d5a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x50>
   11d74:	4669      	mov	r1, sp
   11d76:	2000      	movs	r0, #0
   11d78:	f7fd ff45 	bl	fc06 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   11d7c:	b158      	cbz	r0, 11d96 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   11d7e:	21a6      	movs	r1, #166	; 0xa6
   11d80:	e006      	b.n	11d90 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   11d82:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   11d86:	2100      	movs	r1, #0
   11d88:	f7f2 f928 	bl	3fdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   11d8c:	b118      	cbz	r0, 11d96 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   11d8e:	21aa      	movs	r1, #170	; 0xaa
   11d90:	2001      	movs	r0, #1
   11d92:	f7f1 fef7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11d96:	4668      	mov	r0, sp
   11d98:	f7f2 f8fa 	bl	3f90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11d9c:	2800      	cmp	r0, #0
   11d9e:	d0f0      	beq.n	11d82 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x78>
   11da0:	bd0e      	pop	{r1, r2, r3, pc}
   11da2:	b510      	push	{r4, lr}
   11da4:	4604      	mov	r4, r0
   11da6:	e002      	b.n	11dae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa4>
   11da8:	6820      	ldr	r0, [r4, #0]
   11daa:	4780      	blx	r0
   11dac:	6864      	ldr	r4, [r4, #4]
   11dae:	2c00      	cmp	r4, #0
   11db0:	d1fa      	bne.n	11da8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
   11db2:	bd10      	pop	{r4, pc}
   11db4:	b510      	push	{r4, lr}
   11db6:	f7ff ffc8 	bl	11d4a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x40>
   11dba:	f7f2 fa87 	bl	42cc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   11dbe:	f7f2 fdf7 	bl	49b0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   11dc2:	f7f3 f887 	bl	4ed4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   11dc6:	2800      	cmp	r0, #0
   11dc8:	d003      	beq.n	11dd2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xc8>
   11dca:	21c0      	movs	r1, #192	; 0xc0
   11dcc:	2001      	movs	r0, #1
   11dce:	f7f1 fed9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11dd2:	bd10      	pop	{r4, pc}
   11dd4:	f7ff bfee 	b.w	11db4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xaa>
   11dd8:	b510      	push	{r4, lr}
   11dda:	f7ff ffa7 	bl	11d2c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x22>
   11dde:	f7f8 f84f 	bl	9e80 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   11de2:	2800      	cmp	r0, #0
   11de4:	d003      	beq.n	11dee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xe4>
   11de6:	21fe      	movs	r1, #254	; 0xfe
   11de8:	2001      	movs	r0, #1
   11dea:	f7f1 fecb 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11dee:	bd10      	pop	{r4, pc}

00011df0 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   11df0:	b510      	push	{r4, lr}
   11df2:	f7fb fccb 	bl	d78c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   11df6:	f7fb f9d1 	bl	d19c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   11dfa:	f7fb f885 	bl	cf08 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   11dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e02:	f7fb b965 	b.w	d0d0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00011e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   11e06:	2801      	cmp	r0, #1
   11e08:	bf04      	itt	eq
   11e0a:	2028      	moveq	r0, #40	; 0x28
   11e0c:	4770      	bxeq	lr
   11e0e:	2802      	cmp	r0, #2
   11e10:	bf04      	itt	eq
   11e12:	2018      	moveq	r0, #24
   11e14:	4770      	bxeq	lr
   11e16:	b510      	push	{r4, lr}
   11e18:	f640 217f 	movw	r1, #2687	; 0xa7f
   11e1c:	203e      	movs	r0, #62	; 0x3e
   11e1e:	f7f1 feb1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   11e22:	2801      	cmp	r0, #1
   11e24:	bf04      	itt	eq
   11e26:	f641 6014 	movweq	r0, #7700	; 0x1e14
   11e2a:	4770      	bxeq	lr
   11e2c:	2802      	cmp	r0, #2
   11e2e:	bf04      	itt	eq
   11e30:	f241 1030 	movweq	r0, #4400	; 0x1130
   11e34:	4770      	bxeq	lr
   11e36:	b510      	push	{r4, lr}
   11e38:	f640 2193 	movw	r1, #2707	; 0xa93
   11e3c:	203e      	movs	r0, #62	; 0x3e
   11e3e:	f7f1 fea1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011e42 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   11e42:	b570      	push	{r4, r5, r6, lr}
   11e44:	4604      	mov	r4, r0
   11e46:	4615      	mov	r5, r2
   11e48:	4608      	mov	r0, r1
   11e4a:	f7ff ffea 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11e4e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   11e52:	ebc1 11c4 	rsb	r1, r1, r4, lsl #7
   11e56:	ebc0 04c1 	rsb	r4, r0, r1, lsl #3
   11e5a:	4628      	mov	r0, r5
   11e5c:	f7ff ffe1 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11e60:	4420      	add	r0, r4
   11e62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11e66:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   11e6a:	fbb0 f4f1 	udiv	r4, r0, r1
   11e6e:	4628      	mov	r0, r5
   11e70:	f7ff ffc9 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   11e74:	4420      	add	r0, r4
   11e76:	1d40      	adds	r0, r0, #5
   11e78:	bd70      	pop	{r4, r5, r6, pc}

00011e7a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   11e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e7e:	4606      	mov	r6, r0
   11e80:	461c      	mov	r4, r3
   11e82:	460d      	mov	r5, r1
   11e84:	4617      	mov	r7, r2
   11e86:	4610      	mov	r0, r2
   11e88:	f7ff ffcb 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11e8c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   11e90:	ebc1 11c6 	rsb	r1, r1, r6, lsl #7
   11e94:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   11e98:	2d02      	cmp	r5, #2
   11e9a:	bf0c      	ite	eq
   11e9c:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   11ea0:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   11ea4:	4408      	add	r0, r1
   11ea6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11eaa:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   11eae:	fbb0 f5f1 	udiv	r5, r0, r1
   11eb2:	4638      	mov	r0, r7
   11eb4:	f7ff ffa7 	bl	11e06 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   11eb8:	4428      	add	r0, r5
   11eba:	4420      	add	r0, r4
   11ebc:	1d40      	adds	r0, r0, #5
   11ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011ec2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   11ec2:	b510      	push	{r4, lr}
   11ec4:	4604      	mov	r4, r0
   11ec6:	4608      	mov	r0, r1
   11ec8:	f7ff ffab 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11ed0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   11ed4:	fbb0 f0f1 	udiv	r0, r0, r1
   11ed8:	1a20      	subs	r0, r4, r0
   11eda:	1e80      	subs	r0, r0, #2
   11edc:	bd10      	pop	{r4, pc}

00011ede <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   11ede:	b510      	push	{r4, lr}
   11ee0:	4604      	mov	r4, r0
   11ee2:	4608      	mov	r0, r1
   11ee4:	f7ff ff9d 	bl	11e22 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11ee8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11eec:	fbb0 f0f1 	udiv	r0, r0, r1
   11ef0:	1a20      	subs	r0, r4, r0
   11ef2:	bd10      	pop	{r4, pc}

00011ef4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   11ef4:	2902      	cmp	r1, #2
   11ef6:	bf0c      	ite	eq
   11ef8:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   11efc:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   11f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f04:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   11f08:	fbb1 f1f2 	udiv	r1, r1, r2
   11f0c:	4408      	add	r0, r1
   11f0e:	1e80      	subs	r0, r0, #2
   11f10:	4770      	bx	lr

00011f12 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   11f12:	2902      	cmp	r1, #2
   11f14:	bf0c      	ite	eq
   11f16:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   11f1a:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   11f1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f22:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   11f26:	fbb1 f1f2 	udiv	r1, r1, r2
   11f2a:	4408      	add	r0, r1
   11f2c:	4770      	bx	lr

00011f2e <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>:
   11f2e:	2100      	movs	r1, #0
   11f30:	6001      	str	r1, [r0, #0]
   11f32:	6041      	str	r1, [r0, #4]
   11f34:	4770      	bx	lr

00011f36 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   11f36:	680a      	ldr	r2, [r1, #0]
   11f38:	6002      	str	r2, [r0, #0]
   11f3a:	790b      	ldrb	r3, [r1, #4]
   11f3c:	7103      	strb	r3, [r0, #4]
   11f3e:	4770      	bx	lr

00011f40 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   11f40:	2100      	movs	r1, #0
   11f42:	6001      	str	r1, [r0, #0]
   11f44:	8081      	strh	r1, [r0, #4]
   11f46:	4770      	bx	lr
   11f48:	05020345 	.word	0x05020345
   11f4c:	04020231 	.word	0x04020231
   11f50:	1702080c 	.word	0x1702080c
   11f54:	0201010d 	.word	0x0201010d
   11f58:	01010909 	.word	0x01010909
   11f5c:	18090206 	.word	0x18090206
   11f60:	01010318 	.word	0x01010318
   11f64:	03030909 	.word	0x03030909
   11f68:	00000005 	.word	0x00000005
   11f6c:	00000000 	.word	0x00000000

00011f70 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
   11f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11f72:	4d3e      	ldr	r5, [pc, #248]	; (1206c <hci_init+0xfc>)
   11f74:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   11f78:	6899      	ldr	r1, [r3, #8]
   11f7a:	f011 0101 	ands.w	r1, r1, #1
   11f7e:	d11f      	bne.n	11fc0 <hci_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   11f80:	aa01      	add	r2, sp, #4
   11f82:	f640 4003 	movw	r0, #3075	; 0xc03
   11f86:	f002 fc89 	bl	1489c <bt_hci_cmd_send_sync>
		if (err) {
   11f8a:	4604      	mov	r4, r0
   11f8c:	2800      	cmp	r0, #0
   11f8e:	d16a      	bne.n	12066 <hci_init+0xf6>
		hci_reset_complete(rsp);
   11f90:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   11f92:	689b      	ldr	r3, [r3, #8]
	if (status) {
   11f94:	781b      	ldrb	r3, [r3, #0]
   11f96:	b983      	cbnz	r3, 11fba <hci_init+0x4a>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   11f98:	f105 0398 	add.w	r3, r5, #152	; 0x98
   11f9c:	4618      	mov	r0, r3
   11f9e:	f00a ffec 	bl	1cf7a <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11fa2:	f3bf 8f5b 	dmb	ish
   11fa6:	f000 0005 	and.w	r0, r0, #5
   11faa:	e853 2f00 	ldrex	r2, [r3]
   11fae:	e843 0100 	strex	r1, r0, [r3]
   11fb2:	2900      	cmp	r1, #0
   11fb4:	d1f9      	bne.n	11faa <hci_init+0x3a>
   11fb6:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   11fba:	9801      	ldr	r0, [sp, #4]
   11fbc:	f006 fe30 	bl	18c20 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   11fc0:	aa01      	add	r2, sp, #4
   11fc2:	2100      	movs	r1, #0
   11fc4:	f241 0003 	movw	r0, #4099	; 0x1003
   11fc8:	f002 fc68 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   11fcc:	4604      	mov	r4, r0
   11fce:	2800      	cmp	r0, #0
   11fd0:	d149      	bne.n	12066 <hci_init+0xf6>
	read_local_features_complete(rsp);
   11fd2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11fd4:	4826      	ldr	r0, [pc, #152]	; (12070 <hci_init+0x100>)
   11fd6:	6899      	ldr	r1, [r3, #8]
   11fd8:	2208      	movs	r2, #8
   11fda:	3101      	adds	r1, #1
   11fdc:	f00a fe8d 	bl	1ccfa <memcpy>
	net_buf_unref(rsp);
   11fe0:	9801      	ldr	r0, [sp, #4]
   11fe2:	f006 fe1d 	bl	18c20 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   11fe6:	4621      	mov	r1, r4
   11fe8:	aa01      	add	r2, sp, #4
   11fea:	f241 0001 	movw	r0, #4097	; 0x1001
   11fee:	f002 fc55 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   11ff2:	4604      	mov	r4, r0
   11ff4:	2800      	cmp	r0, #0
   11ff6:	d136      	bne.n	12066 <hci_init+0xf6>
	read_local_ver_complete(rsp);
   11ff8:	9801      	ldr	r0, [sp, #4]
   11ffa:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   11ffc:	785a      	ldrb	r2, [r3, #1]
   11ffe:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   12002:	78d9      	ldrb	r1, [r3, #3]
   12004:	789a      	ldrb	r2, [r3, #2]
   12006:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1200a:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
   1200c:	791a      	ldrb	r2, [r3, #4]
   1200e:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   12012:	7a19      	ldrb	r1, [r3, #8]
   12014:	79da      	ldrb	r2, [r3, #7]
   12016:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1201a:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1201c:	795a      	ldrb	r2, [r3, #5]
   1201e:	799b      	ldrb	r3, [r3, #6]
   12020:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   12024:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
   12026:	f006 fdfb 	bl	18c20 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1202a:	4621      	mov	r1, r4
   1202c:	aa01      	add	r2, sp, #4
   1202e:	f241 0002 	movw	r0, #4098	; 0x1002
   12032:	f002 fc33 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   12036:	4604      	mov	r4, r0
   12038:	b9a8      	cbnz	r0, 12066 <hci_init+0xf6>
	read_supported_commands_complete(rsp);
   1203a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   1203c:	480d      	ldr	r0, [pc, #52]	; (12074 <hci_init+0x104>)
   1203e:	6899      	ldr	r1, [r3, #8]
   12040:	2240      	movs	r2, #64	; 0x40
   12042:	3101      	adds	r1, #1
   12044:	f00a fe59 	bl	1ccfa <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
   12048:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
   1204c:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
   1204e:	f043 0306 	orr.w	r3, r3, #6
   12052:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
   12056:	f006 fde3 	bl	18c20 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1205a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1205e:	065a      	lsls	r2, r3, #25
   12060:	d40a      	bmi.n	12078 <hci_init+0x108>
		return -ENODEV;
   12062:	f06f 0412 	mvn.w	r4, #18
			return err;
		}
	}

	return 0;
}
   12066:	4620      	mov	r0, r4
   12068:	b002      	add	sp, #8
   1206a:	bd70      	pop	{r4, r5, r6, pc}
   1206c:	200003c8 	.word	0x200003c8
   12070:	20000408 	.word	0x20000408
   12074:	20000410 	.word	0x20000410
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   12078:	4621      	mov	r1, r4
   1207a:	aa01      	add	r2, sp, #4
   1207c:	f242 0003 	movw	r0, #8195	; 0x2003
   12080:	f002 fc0c 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   12084:	4604      	mov	r4, r0
   12086:	2800      	cmp	r0, #0
   12088:	d1ed      	bne.n	12066 <hci_init+0xf6>
	read_le_features_complete(rsp);
   1208a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1208c:	48b4      	ldr	r0, [pc, #720]	; (12360 <hci_init+0x3f0>)
   1208e:	6899      	ldr	r1, [r3, #8]
   12090:	2208      	movs	r2, #8
   12092:	3101      	adds	r1, #1
   12094:	f00a fe31 	bl	1ccfa <memcpy>
	net_buf_unref(rsp);
   12098:	9801      	ldr	r0, [sp, #4]
   1209a:	f006 fdc1 	bl	18c20 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1209e:	4621      	mov	r1, r4
   120a0:	aa01      	add	r2, sp, #4
   120a2:	f242 0002 	movw	r0, #8194	; 0x2002
   120a6:	f002 fbf9 	bl	1489c <bt_hci_cmd_send_sync>
		if (err) {
   120aa:	4604      	mov	r4, r0
   120ac:	2800      	cmp	r0, #0
   120ae:	d1da      	bne.n	12066 <hci_init+0xf6>
		le_read_buffer_size_complete(rsp);
   120b0:	9b01      	ldr	r3, [sp, #4]
   120b2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   120b4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   120b8:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
   120bc:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   120be:	b121      	cbz	r1, 120ca <hci_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   120c0:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   120c2:	48a8      	ldr	r0, [pc, #672]	; (12364 <hci_init+0x3f4>)
   120c4:	4611      	mov	r1, r2
   120c6:	f00d ff03 	bl	1fed0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   120ca:	9801      	ldr	r0, [sp, #4]
   120cc:	f006 fda8 	bl	18c20 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   120d0:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
   120d4:	f016 0620 	ands.w	r6, r6, #32
   120d8:	f000 811b 	beq.w	12312 <hci_init+0x3a2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   120dc:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   120e0:	071b      	lsls	r3, r3, #28
   120e2:	d511      	bpl.n	12108 <hci_init+0x198>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   120e4:	aa01      	add	r2, sp, #4
   120e6:	2100      	movs	r1, #0
   120e8:	f242 001c 	movw	r0, #8220	; 0x201c
   120ec:	f002 fbd6 	bl	1489c <bt_hci_cmd_send_sync>
		if (err) {
   120f0:	4604      	mov	r4, r0
   120f2:	2800      	cmp	r0, #0
   120f4:	d1b7      	bne.n	12066 <hci_init+0xf6>
		le_read_supp_states_complete(rsp);
   120f6:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   120f8:	6883      	ldr	r3, [r0, #8]
   120fa:	f853 2f01 	ldr.w	r2, [r3, #1]!
   120fe:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   12100:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
   12104:	f006 fd8c 	bl	18c20 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   12108:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   1210c:	069e      	lsls	r6, r3, #26
   1210e:	d523      	bpl.n	12158 <hci_init+0x1e8>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12110:	f10d 0102 	add.w	r1, sp, #2
   12114:	4668      	mov	r0, sp
   12116:	f00b f8bb 	bl	1d290 <hci_le_read_max_data_len>
		if (err) {
   1211a:	4604      	mov	r4, r0
   1211c:	2800      	cmp	r0, #0
   1211e:	d1a2      	bne.n	12066 <hci_init+0xf6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   12120:	2104      	movs	r1, #4
   12122:	f242 0024 	movw	r0, #8228	; 0x2024
   12126:	f002 fb5f 	bl	147e8 <bt_hci_cmd_create>
		if (!buf) {
   1212a:	4606      	mov	r6, r0
   1212c:	2800      	cmp	r0, #0
   1212e:	f000 80f7 	beq.w	12320 <hci_init+0x3b0>
		cp = net_buf_add(buf, sizeof(*cp));
   12132:	2104      	movs	r1, #4
   12134:	3008      	adds	r0, #8
   12136:	f00d fab7 	bl	1f6a8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1213a:	f8bd 3000 	ldrh.w	r3, [sp]
   1213e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   12140:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12144:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   12146:	4622      	mov	r2, r4
   12148:	4631      	mov	r1, r6
   1214a:	f242 0024 	movw	r0, #8228	; 0x2024
   1214e:	f002 fba5 	bl	1489c <bt_hci_cmd_send_sync>
		if (err) {
   12152:	4604      	mov	r4, r0
   12154:	2800      	cmp	r0, #0
   12156:	d186      	bne.n	12066 <hci_init+0xf6>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   12158:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   1215c:	065c      	lsls	r4, r3, #25
   1215e:	d510      	bpl.n	12182 <hci_init+0x212>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   12160:	aa01      	add	r2, sp, #4
   12162:	2100      	movs	r1, #0
   12164:	f242 002a 	movw	r0, #8234	; 0x202a
   12168:	f002 fb98 	bl	1489c <bt_hci_cmd_send_sync>
		if (err) {
   1216c:	4604      	mov	r4, r0
   1216e:	2800      	cmp	r0, #0
   12170:	f47f af79 	bne.w	12066 <hci_init+0xf6>
		le_read_resolving_list_size_complete(rsp);
   12174:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   12176:	6883      	ldr	r3, [r0, #8]
   12178:	785b      	ldrb	r3, [r3, #1]
   1217a:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
   1217e:	f006 fd4f 	bl	18c20 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   12182:	2108      	movs	r1, #8
   12184:	f242 0001 	movw	r0, #8193	; 0x2001
   12188:	f002 fb2e 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1218c:	4604      	mov	r4, r0
   1218e:	2800      	cmp	r0, #0
   12190:	f000 80c6 	beq.w	12320 <hci_init+0x3b0>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
   12194:	2108      	movs	r1, #8
   12196:	4408      	add	r0, r1
   12198:	f00d fa86 	bl	1f6a8 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   1219c:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   121a0:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
   121a4:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   121a6:	f240 2302 	movw	r3, #514	; 0x202
   121aa:	bf08      	it	eq
   121ac:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   121ae:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   121b0:	bf4c      	ite	mi
   121b2:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   121b6:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   121ba:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   121bc:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   121c0:	bf48      	it	mi
   121c2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   121c6:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   121ca:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   121ce:	bf18      	it	ne
   121d0:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   121d4:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   121d8:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   121da:	bf48      	it	mi
   121dc:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   121e0:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   121e2:	bf08      	it	eq
   121e4:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   121e8:	2100      	movs	r1, #0
   121ea:	f00a ff92 	bl	1d112 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   121ee:	4621      	mov	r1, r4
   121f0:	2200      	movs	r2, #0
   121f2:	f242 0001 	movw	r0, #8193	; 0x2001
   121f6:	f002 fb51 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   121fa:	4604      	mov	r4, r0
   121fc:	2800      	cmp	r0, #0
   121fe:	f47f af32 	bne.w	12066 <hci_init+0xf6>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   12202:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   12206:	0698      	lsls	r0, r3, #26
   12208:	d41e      	bmi.n	12248 <hci_init+0x2d8>
	if (bt_dev.le.acl_mtu) {
   1220a:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
   1220e:	b9d9      	cbnz	r1, 12248 <hci_init+0x2d8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   12210:	aa01      	add	r2, sp, #4
   12212:	f241 0005 	movw	r0, #4101	; 0x1005
   12216:	f002 fb41 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   1221a:	4604      	mov	r4, r0
   1221c:	2800      	cmp	r0, #0
   1221e:	f47f af22 	bne.w	12066 <hci_init+0xf6>
	if (bt_dev.le.acl_mtu) {
   12222:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
   12226:	b963      	cbnz	r3, 12242 <hci_init+0x2d2>
	read_buffer_size_complete(rsp);
   12228:	9b01      	ldr	r3, [sp, #4]
   1222a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1222c:	785a      	ldrb	r2, [r3, #1]
   1222e:	7899      	ldrb	r1, [r3, #2]
   12230:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12234:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   12238:	889a      	ldrh	r2, [r3, #4]
   1223a:	484a      	ldr	r0, [pc, #296]	; (12364 <hci_init+0x3f4>)
   1223c:	4611      	mov	r1, r2
   1223e:	f00d fe47 	bl	1fed0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   12242:	9801      	ldr	r0, [sp, #4]
   12244:	f006 fcec 	bl	18c20 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   12248:	2108      	movs	r1, #8
   1224a:	f640 4001 	movw	r0, #3073	; 0xc01
   1224e:	f002 facb 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   12252:	4604      	mov	r4, r0
   12254:	2800      	cmp	r0, #0
   12256:	d063      	beq.n	12320 <hci_init+0x3b0>
	ev = net_buf_add(buf, sizeof(*ev));
   12258:	2108      	movs	r1, #8
   1225a:	4408      	add	r0, r1
   1225c:	f00d fa24 	bl	1f6a8 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   12260:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   12264:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
   12266:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   12268:	d56f      	bpl.n	1234a <hci_init+0x3da>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   1226a:	a13b      	add	r1, pc, #236	; (adr r1, 12358 <hci_init+0x3e8>)
   1226c:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   12270:	f00a ff4f 	bl	1d112 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   12274:	4621      	mov	r1, r4
   12276:	2200      	movs	r2, #0
   12278:	f640 4001 	movw	r0, #3073	; 0xc01
   1227c:	f002 fb0e 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   12280:	4604      	mov	r4, r0
   12282:	2800      	cmp	r0, #0
   12284:	f47f aeef 	bne.w	12066 <hci_init+0xf6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   12288:	4601      	mov	r1, r0
   1228a:	aa01      	add	r2, sp, #4
   1228c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   12290:	f002 fb04 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   12294:	bb40      	cbnz	r0, 122e8 <hci_init+0x378>
	net_buf_unref(rsp);
   12296:	9801      	ldr	r0, [sp, #4]
   12298:	f006 fcc2 	bl	18c20 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1229c:	aa01      	add	r2, sp, #4
   1229e:	4621      	mov	r1, r4
   122a0:	f64f 4002 	movw	r0, #64514	; 0xfc02
   122a4:	f002 fafa 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   122a8:	b9f0      	cbnz	r0, 122e8 <hci_init+0x378>
	rp.cmds = (void *)rsp->data;
   122aa:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   122ac:	482e      	ldr	r0, [pc, #184]	; (12368 <hci_init+0x3f8>)
   122ae:	6899      	ldr	r1, [r3, #8]
   122b0:	2202      	movs	r2, #2
   122b2:	3101      	adds	r1, #1
   122b4:	f00a fd21 	bl	1ccfa <memcpy>
	net_buf_unref(rsp);
   122b8:	9801      	ldr	r0, [sp, #4]
   122ba:	f006 fcb1 	bl	18c20 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   122be:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
   122c2:	075b      	lsls	r3, r3, #29
   122c4:	d510      	bpl.n	122e8 <hci_init+0x378>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   122c6:	aa01      	add	r2, sp, #4
   122c8:	4621      	mov	r1, r4
   122ca:	f64f 4003 	movw	r0, #64515	; 0xfc03
   122ce:	f002 fae5 	bl	1489c <bt_hci_cmd_send_sync>
		if (err) {
   122d2:	b948      	cbnz	r0, 122e8 <hci_init+0x378>
		rp.feat = (void *)rsp->data;
   122d4:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   122d6:	4825      	ldr	r0, [pc, #148]	; (1236c <hci_init+0x3fc>)
   122d8:	6899      	ldr	r1, [r3, #8]
   122da:	2201      	movs	r2, #1
   122dc:	4411      	add	r1, r2
   122de:	f00a fd0c 	bl	1ccfa <memcpy>
		net_buf_unref(rsp);
   122e2:	9801      	ldr	r0, [sp, #4]
   122e4:	f006 fc9c 	bl	18c20 <net_buf_unref>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   122e8:	79eb      	ldrb	r3, [r5, #7]
   122ea:	2b00      	cmp	r3, #0
   122ec:	f47f aebb 	bne.w	12066 <hci_init+0xf6>
		bt_setup_public_id_addr();
   122f0:	f002 feb2 	bl	15058 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   122f4:	79eb      	ldrb	r3, [r5, #7]
   122f6:	2b00      	cmp	r3, #0
   122f8:	f47f aeb5 	bne.w	12066 <hci_init+0xf6>
		err = bt_setup_random_id_addr();
   122fc:	f002 ff1e 	bl	1513c <bt_setup_random_id_addr>
		if (err) {
   12300:	4604      	mov	r4, r0
   12302:	2800      	cmp	r0, #0
   12304:	f47f aeaf 	bne.w	12066 <hci_init+0xf6>
		err = set_random_address(&bt_dev.id_addr[0].a);
   12308:	4819      	ldr	r0, [pc, #100]	; (12370 <hci_init+0x400>)
   1230a:	f002 fb29 	bl	14960 <set_random_address>
   1230e:	4604      	mov	r4, r0
		if (err) {
   12310:	e6a9      	b.n	12066 <hci_init+0xf6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   12312:	2102      	movs	r1, #2
   12314:	f640 406d 	movw	r0, #3181	; 0xc6d
   12318:	f002 fa66 	bl	147e8 <bt_hci_cmd_create>
		if (!buf) {
   1231c:	4604      	mov	r4, r0
   1231e:	b910      	cbnz	r0, 12326 <hci_init+0x3b6>
		return -ENOBUFS;
   12320:	f06f 0436 	mvn.w	r4, #54	; 0x36
   12324:	e69f      	b.n	12066 <hci_init+0xf6>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
   12326:	2102      	movs	r1, #2
   12328:	3008      	adds	r0, #8
   1232a:	f00d f9bd 	bl	1f6a8 <net_buf_simple_add>
		cp_le->le = 0x01;
   1232e:	2301      	movs	r3, #1
   12330:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   12332:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   12334:	4621      	mov	r1, r4
   12336:	4632      	mov	r2, r6
   12338:	f640 406d 	movw	r0, #3181	; 0xc6d
   1233c:	f002 faae 	bl	1489c <bt_hci_cmd_send_sync>
		if (err) {
   12340:	4604      	mov	r4, r0
   12342:	2800      	cmp	r0, #0
   12344:	f43f aeca 	beq.w	120dc <hci_init+0x16c>
   12348:	e68d      	b.n	12066 <hci_init+0xf6>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   1234a:	480a      	ldr	r0, [pc, #40]	; (12374 <hci_init+0x404>)
   1234c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12350:	e78e      	b.n	12270 <hci_init+0x300>
   12352:	bf00      	nop
   12354:	f3af 8000 	nop.w
   12358:	02008890 	.word	0x02008890
   1235c:	20008000 	.word	0x20008000
   12360:	20000468 	.word	0x20000468
   12364:	20000498 	.word	0x20000498
   12368:	20000451 	.word	0x20000451
   1236c:	20000450 	.word	0x20000450
   12370:	200003c9 	.word	0x200003c9
   12374:	02008810 	.word	0x02008810

00012378 <app_data_cb>:


static uint8_t app_data_cb(void)
{
	return data;
}
   12378:	4b01      	ldr	r3, [pc, #4]	; (12380 <app_data_cb+0x8>)
   1237a:	7818      	ldrb	r0, [r3, #0]
   1237c:	4770      	bx	lr
   1237e:	bf00      	nop
   12380:	2000292a 	.word	0x2000292a

00012384 <disconnected>:
	printk("Disconnected (reason %u)\n", reason);
   12384:	4801      	ldr	r0, [pc, #4]	; (1238c <disconnected+0x8>)
   12386:	f008 bf88 	b.w	1b29a <printk>
   1238a:	bf00      	nop
   1238c:	00020d44 	.word	0x00020d44

00012390 <connected>:
	if (err) {
   12390:	b111      	cbz	r1, 12398 <connected+0x8>
		printk("Connection failed (err %u)\n", err);
   12392:	4803      	ldr	r0, [pc, #12]	; (123a0 <connected+0x10>)
   12394:	f008 bf81 	b.w	1b29a <printk>
	printk("Connected\n");
   12398:	4802      	ldr	r0, [pc, #8]	; (123a4 <connected+0x14>)
   1239a:	f008 bf7e 	b.w	1b29a <printk>
   1239e:	bf00      	nop
   123a0:	00020d5e 	.word	0x00020d5e
   123a4:	00020d7a 	.word	0x00020d7a

000123a8 <main>:
static struct bt_dataService_cb data_callbacs = {
	.data_cb    = app_data_cb,
};

void main(void)
{
   123a8:	b530      	push	{r4, r5, lr}
  
	int err;
  
  bt_conn_cb_register(&conn_callbacks);
   123aa:	481d      	ldr	r0, [pc, #116]	; (12420 <main+0x78>)
{
   123ac:	b089      	sub	sp, #36	; 0x24
  bt_conn_cb_register(&conn_callbacks);
   123ae:	f003 fbe1 	bl	15b74 <bt_conn_cb_register>

    err = bt_enable(NULL);
   123b2:	2000      	movs	r0, #0
   123b4:	f002 feee 	bl	15194 <bt_enable>
    if (err) {
   123b8:	4601      	mov	r1, r0
   123ba:	b120      	cbz	r0, 123c6 <main+0x1e>
      printk("Bluetooth init failed (err %d)\n", err);
   123bc:	4819      	ldr	r0, [pc, #100]	; (12424 <main+0x7c>)
    }

    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
              sd, ARRAY_SIZE(sd));
    if (err) {
      printk("Advertising failed to start (err %d)\n", err);
   123be:	f008 ff6c 	bl	1b29a <printk>
 while(1){
     data++;
     bt_send_data_value(data);
     k_sleep(K_SECONDS(2));
 }
   123c2:	b009      	add	sp, #36	; 0x24
   123c4:	bd30      	pop	{r4, r5, pc}
    printk("Bluetooth initialized\n");
   123c6:	4818      	ldr	r0, [pc, #96]	; (12428 <main+0x80>)
   123c8:	f008 ff67 	bl	1b29a <printk>
    err = bt_dataService_init(&data_callbacs);
   123cc:	4817      	ldr	r0, [pc, #92]	; (1242c <main+0x84>)
   123ce:	f000 f867 	bl	124a0 <bt_dataService_init>
    if (err) {
   123d2:	4601      	mov	r1, r0
   123d4:	b108      	cbz	r0, 123da <main+0x32>
      printk("Failed to init LBS (err:%d)\n", err);
   123d6:	4816      	ldr	r0, [pc, #88]	; (12430 <main+0x88>)
   123d8:	e7f1      	b.n	123be <main+0x16>
    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   123da:	4d16      	ldr	r5, [pc, #88]	; (12434 <main+0x8c>)
   123dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   123de:	ac03      	add	r4, sp, #12
   123e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   123e2:	682b      	ldr	r3, [r5, #0]
   123e4:	6023      	str	r3, [r4, #0]
   123e6:	2301      	movs	r3, #1
   123e8:	4913      	ldr	r1, [pc, #76]	; (12438 <main+0x90>)
   123ea:	9300      	str	r3, [sp, #0]
   123ec:	2202      	movs	r2, #2
   123ee:	4b13      	ldr	r3, [pc, #76]	; (1243c <main+0x94>)
   123f0:	a803      	add	r0, sp, #12
   123f2:	f003 f86f 	bl	154d4 <bt_le_adv_start>
    if (err) {
   123f6:	4601      	mov	r1, r0
   123f8:	b108      	cbz	r0, 123fe <main+0x56>
      printk("Advertising failed to start (err %d)\n", err);
   123fa:	4811      	ldr	r0, [pc, #68]	; (12440 <main+0x98>)
   123fc:	e7df      	b.n	123be <main+0x16>
    printk("Advertising successfully started\n");
   123fe:	4811      	ldr	r0, [pc, #68]	; (12444 <main+0x9c>)
     data++;
   12400:	4c11      	ldr	r4, [pc, #68]	; (12448 <main+0xa0>)
    printk("Advertising successfully started\n");
   12402:	f008 ff4a 	bl	1b29a <printk>
     data++;
   12406:	7820      	ldrb	r0, [r4, #0]
   12408:	3001      	adds	r0, #1
   1240a:	b2c0      	uxtb	r0, r0
   1240c:	7020      	strb	r0, [r4, #0]
     bt_send_data_value(data);
   1240e:	f000 f84f 	bl	124b0 <bt_send_data_value>
	return z_impl_k_sleep(timeout);
   12412:	2100      	movs	r1, #0
   12414:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12418:	f008 fb58 	bl	1aacc <z_impl_k_sleep>
 while(1){
   1241c:	e7f3      	b.n	12406 <main+0x5e>
   1241e:	bf00      	nop
   12420:	20000508 	.word	0x20000508
   12424:	00020d85 	.word	0x00020d85
   12428:	00020da5 	.word	0x00020da5
   1242c:	20000524 	.word	0x20000524
   12430:	00020dbc 	.word	0x00020dbc
   12434:	000205d0 	.word	0x000205d0
   12438:	00020668 	.word	0x00020668
   1243c:	00020678 	.word	0x00020678
   12440:	00020dd9 	.word	0x00020dd9
   12444:	00020dff 	.word	0x00020dff
   12448:	2000292a 	.word	0x2000292a

0001244c <lbslc_ccc_cfg_changed>:
static                         uint8_t data;
static bool                   notify_enabled;
static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   1244c:	1e4b      	subs	r3, r1, #1
   1244e:	4259      	negs	r1, r3
   12450:	4159      	adcs	r1, r3
   12452:	4b01      	ldr	r3, [pc, #4]	; (12458 <lbslc_ccc_cfg_changed+0xc>)
   12454:	7019      	strb	r1, [r3, #0]
}
   12456:	4770      	bx	lr
   12458:	2000292c 	.word	0x2000292c

0001245c <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   1245c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12460:	461f      	mov	r7, r3
	const char *value = attr->user_data;

//	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (dataService_cb.data_cb) {
   12462:	4b0d      	ldr	r3, [pc, #52]	; (12498 <read_button+0x3c>)
{
   12464:	4605      	mov	r5, r0
	if (dataService_cb.data_cb) {
   12466:	6818      	ldr	r0, [r3, #0]
{
   12468:	460c      	mov	r4, r1
   1246a:	4616      	mov	r6, r2
	if (dataService_cb.data_cb) {
   1246c:	b180      	cbz	r0, 12490 <read_button+0x34>
	const char *value = attr->user_data;
   1246e:	f8d1 800c 	ldr.w	r8, [r1, #12]
		data = dataService_cb.data_cb();
   12472:	4780      	blx	r0
   12474:	4b09      	ldr	r3, [pc, #36]	; (1249c <read_button+0x40>)
   12476:	7018      	strb	r0, [r3, #0]
		//memcpy(data, buf, len);
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   12478:	2301      	movs	r3, #1
   1247a:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1247e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12482:	9300      	str	r3, [sp, #0]
   12484:	4632      	mov	r2, r6
   12486:	463b      	mov	r3, r7
   12488:	4621      	mov	r1, r4
   1248a:	4628      	mov	r0, r5
   1248c:	f00c fafa 	bl	1ea84 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   12490:	b004      	add	sp, #16
   12492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12496:	bf00      	nop
   12498:	20002650 	.word	0x20002650
   1249c:	2000292b 	.word	0x2000292b

000124a0 <bt_dataService_init>:
                               BT_GATT_PERM_READ | BT_GATT_PERM_WRITE),
);

int bt_dataService_init(struct bt_dataService_cb *callbacks)
{
	if (callbacks) {
   124a0:	b110      	cbz	r0, 124a8 <bt_dataService_init+0x8>
		dataService_cb.data_cb = callbacks->data_cb;
   124a2:	4b02      	ldr	r3, [pc, #8]	; (124ac <bt_dataService_init+0xc>)
   124a4:	6802      	ldr	r2, [r0, #0]
   124a6:	601a      	str	r2, [r3, #0]
	}

	return 0;
}
   124a8:	2000      	movs	r0, #0
   124aa:	4770      	bx	lr
   124ac:	20002650 	.word	0x20002650

000124b0 <bt_send_data_value>:
int bt_send_data_value(uint8_t data)
{
   124b0:	b500      	push	{lr}
	if (!notify_enabled) {
   124b2:	4b0e      	ldr	r3, [pc, #56]	; (124ec <bt_send_data_value+0x3c>)
{
   124b4:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
   124b6:	781b      	ldrb	r3, [r3, #0]
{
   124b8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
   124bc:	b19b      	cbz	r3, 124e6 <bt_send_data_value+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   124be:	2100      	movs	r1, #0
   124c0:	2218      	movs	r2, #24
   124c2:	a802      	add	r0, sp, #8
   124c4:	f00a fc44 	bl	1cd50 <memset>

	params.attr = attr;
   124c8:	4b09      	ldr	r3, [pc, #36]	; (124f0 <bt_send_data_value+0x40>)
   124ca:	9303      	str	r3, [sp, #12]
	params.data = data;
   124cc:	f10d 0307 	add.w	r3, sp, #7
   124d0:	9304      	str	r3, [sp, #16]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   124d2:	a902      	add	r1, sp, #8
	params.len = len;
   124d4:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   124d6:	2000      	movs	r0, #0
	params.len = len;
   124d8:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   124dc:	f005 f810 	bl	17500 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &data_svc.attrs[2],
			      &data,
			      sizeof(data));
}
   124e0:	b009      	add	sp, #36	; 0x24
   124e2:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   124e6:	f06f 000c 	mvn.w	r0, #12
   124ea:	e7f9      	b.n	124e0 <bt_send_data_value+0x30>
   124ec:	2000292c 	.word	0x2000292c
   124f0:	000206a8 	.word	0x000206a8

000124f4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   124f4:	680b      	ldr	r3, [r1, #0]
   124f6:	3301      	adds	r3, #1
   124f8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   124fa:	4b01      	ldr	r3, [pc, #4]	; (12500 <char_out+0xc>)
   124fc:	681b      	ldr	r3, [r3, #0]
   124fe:	4718      	bx	r3
   12500:	20000554 	.word	0x20000554

00012504 <__printk_hook_install>:
	_char_out = fn;
   12504:	4b01      	ldr	r3, [pc, #4]	; (1250c <__printk_hook_install+0x8>)
   12506:	6018      	str	r0, [r3, #0]
}
   12508:	4770      	bx	lr
   1250a:	bf00      	nop
   1250c:	20000554 	.word	0x20000554

00012510 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   12510:	b507      	push	{r0, r1, r2, lr}
   12512:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12514:	2100      	movs	r1, #0
{
   12516:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   12518:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   1251a:	4803      	ldr	r0, [pc, #12]	; (12528 <vprintk+0x18>)
   1251c:	a901      	add	r1, sp, #4
   1251e:	f000 fa43 	bl	129a8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   12522:	b003      	add	sp, #12
   12524:	f85d fb04 	ldr.w	pc, [sp], #4
   12528:	000124f5 	.word	0x000124f5

0001252c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1252c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12530:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12534:	f019 0808 	ands.w	r8, r9, #8
{
   12538:	4604      	mov	r4, r0
   1253a:	4693      	mov	fp, r2
	if (processing) {
   1253c:	d00d      	beq.n	1255a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   1253e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12540:	bf0c      	ite	eq
   12542:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12546:	f049 0920 	orrne.w	r9, r9, #32
   1254a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1254e:	f38b 8811 	msr	BASEPRI, fp
   12552:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1255a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1255e:	2902      	cmp	r1, #2
   12560:	d107      	bne.n	12572 <process_event+0x46>
			evt = process_recheck(mgr);
   12562:	4620      	mov	r0, r4
   12564:	f008 fea6 	bl	1b2b4 <process_recheck>
		if (evt == EVT_NOP) {
   12568:	2800      	cmp	r0, #0
   1256a:	d0f0      	beq.n	1254e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1256c:	2801      	cmp	r0, #1
   1256e:	8b23      	ldrh	r3, [r4, #24]
   12570:	d150      	bne.n	12614 <process_event+0xe8>
			res = mgr->last_res;
   12572:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12574:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   12576:	2f00      	cmp	r7, #0
   12578:	da15      	bge.n	125a6 <process_event+0x7a>
		*clients = mgr->clients;
   1257a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1257c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   12580:	e9c4 8800 	strd	r8, r8, [r4]
   12584:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12588:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1258a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1258c:	8b21      	ldrh	r1, [r4, #24]
   1258e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12592:	45ca      	cmp	sl, r9
   12594:	d002      	beq.n	1259c <process_event+0x70>
		if (do_monitors
   12596:	68a3      	ldr	r3, [r4, #8]
   12598:	2b00      	cmp	r3, #0
   1259a:	d15c      	bne.n	12656 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   1259c:	b90d      	cbnz	r5, 125a2 <process_event+0x76>
		    || (transit != NULL)) {
   1259e:	2e00      	cmp	r6, #0
   125a0:	d074      	beq.n	1268c <process_event+0x160>
   125a2:	2300      	movs	r3, #0
   125a4:	e058      	b.n	12658 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   125a6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   125aa:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   125ac:	2a01      	cmp	r2, #1
   125ae:	d820      	bhi.n	125f2 <process_event+0xc6>
		*clients = mgr->clients;
   125b0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   125b4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   125b6:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   125b8:	b289      	uxth	r1, r1
	list->tail = NULL;
   125ba:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   125be:	d10c      	bne.n	125da <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   125c0:	2d00      	cmp	r5, #0
   125c2:	462b      	mov	r3, r5
   125c4:	bf38      	it	cc
   125c6:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   125c8:	b12b      	cbz	r3, 125d6 <process_event+0xaa>
				mgr->refs += 1U;
   125ca:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   125cc:	681b      	ldr	r3, [r3, #0]
   125ce:	3201      	adds	r2, #1
   125d0:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   125d2:	2b00      	cmp	r3, #0
   125d4:	d1f8      	bne.n	125c8 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   125d6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   125da:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   125dc:	4620      	mov	r0, r4
   125de:	f008 fe69 	bl	1b2b4 <process_recheck>
   125e2:	4606      	mov	r6, r0
   125e4:	2800      	cmp	r0, #0
   125e6:	d0d1      	beq.n	1258c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   125e8:	8b23      	ldrh	r3, [r4, #24]
   125ea:	f043 0320 	orr.w	r3, r3, #32
   125ee:	8323      	strh	r3, [r4, #24]
   125f0:	e7cb      	b.n	1258a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   125f2:	2b04      	cmp	r3, #4
   125f4:	d10c      	bne.n	12610 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   125f6:	f021 0107 	bic.w	r1, r1, #7
   125fa:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   125fc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   125fe:	4620      	mov	r0, r4
   12600:	f008 fe58 	bl	1b2b4 <process_recheck>
   12604:	4605      	mov	r5, r0
   12606:	2800      	cmp	r0, #0
   12608:	d0bf      	beq.n	1258a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1260a:	f041 0120 	orr.w	r1, r1, #32
   1260e:	8321      	strh	r1, [r4, #24]
   12610:	2500      	movs	r5, #0
   12612:	e7ba      	b.n	1258a <process_event+0x5e>
		} else if (evt == EVT_START) {
   12614:	2803      	cmp	r0, #3
   12616:	d109      	bne.n	1262c <process_event+0x100>
			transit = mgr->transitions->start;
   12618:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1261a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   1261e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12620:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12624:	8323      	strh	r3, [r4, #24]
}
   12626:	2500      	movs	r5, #0
		res = 0;
   12628:	462f      	mov	r7, r5
   1262a:	e7af      	b.n	1258c <process_event+0x60>
		} else if (evt == EVT_STOP) {
   1262c:	2804      	cmp	r0, #4
   1262e:	d106      	bne.n	1263e <process_event+0x112>
			transit = mgr->transitions->stop;
   12630:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12632:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   12636:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12638:	f043 0304 	orr.w	r3, r3, #4
   1263c:	e7f2      	b.n	12624 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   1263e:	2805      	cmp	r0, #5
   12640:	d106      	bne.n	12650 <process_event+0x124>
			transit = mgr->transitions->reset;
   12642:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12644:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   12648:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1264a:	f043 0305 	orr.w	r3, r3, #5
   1264e:	e7e9      	b.n	12624 <process_event+0xf8>
   12650:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   12652:	462e      	mov	r6, r5
   12654:	e7e8      	b.n	12628 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   12656:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12658:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1265c:	8321      	strh	r1, [r4, #24]
   1265e:	f38b 8811 	msr	BASEPRI, fp
   12662:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12666:	bb03      	cbnz	r3, 126aa <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   12668:	2d00      	cmp	r5, #0
   1266a:	d133      	bne.n	126d4 <process_event+0x1a8>
			if (transit != NULL) {
   1266c:	b116      	cbz	r6, 12674 <process_event+0x148>
				transit(mgr, transition_complete);
   1266e:	4921      	ldr	r1, [pc, #132]	; (126f4 <process_event+0x1c8>)
   12670:	4620      	mov	r0, r4
   12672:	47b0      	blx	r6
	__asm__ volatile(
   12674:	f04f 0340 	mov.w	r3, #64	; 0x40
   12678:	f3ef 8b11 	mrs	fp, BASEPRI
   1267c:	f383 8811 	msr	BASEPRI, r3
   12680:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12684:	8b23      	ldrh	r3, [r4, #24]
   12686:	f023 0308 	bic.w	r3, r3, #8
   1268a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1268c:	8b23      	ldrh	r3, [r4, #24]
   1268e:	06da      	lsls	r2, r3, #27
   12690:	d528      	bpl.n	126e4 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12692:	f023 0310 	bic.w	r3, r3, #16
   12696:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12698:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1269a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   1269e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   126a2:	2900      	cmp	r1, #0
   126a4:	f47f af5b 	bne.w	1255e <process_event+0x32>
out:
   126a8:	e751      	b.n	1254e <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   126aa:	68a1      	ldr	r1, [r4, #8]
   126ac:	2900      	cmp	r1, #0
   126ae:	d0db      	beq.n	12668 <process_event+0x13c>
	return node->next;
   126b0:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   126b2:	f8d1 b004 	ldr.w	fp, [r1, #4]
   126b6:	2b00      	cmp	r3, #0
   126b8:	bf38      	it	cc
   126ba:	2300      	movcc	r3, #0
   126bc:	4699      	mov	r9, r3
   126be:	4652      	mov	r2, sl
   126c0:	463b      	mov	r3, r7
   126c2:	4620      	mov	r0, r4
   126c4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   126c6:	f1b9 0f00 	cmp.w	r9, #0
   126ca:	d0cd      	beq.n	12668 <process_event+0x13c>
   126cc:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   126d0:	4649      	mov	r1, r9
   126d2:	e7ee      	b.n	126b2 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   126d4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   126d6:	463b      	mov	r3, r7
   126d8:	4652      	mov	r2, sl
   126da:	4620      	mov	r0, r4
   126dc:	682d      	ldr	r5, [r5, #0]
   126de:	f008 fe05 	bl	1b2ec <notify_one>
   126e2:	e7c1      	b.n	12668 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   126e4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   126e8:	bf1e      	ittt	ne
   126ea:	f023 0320 	bicne.w	r3, r3, #32
   126ee:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   126f0:	2102      	movne	r1, #2
   126f2:	e7d2      	b.n	1269a <process_event+0x16e>
   126f4:	0001b319 	.word	0x0001b319

000126f8 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
   126f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
   126fa:	2200      	movs	r2, #0
   126fc:	e9c0 2200 	strd	r2, r2, [r0]
   12700:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   12702:	784a      	ldrb	r2, [r1, #1]
   12704:	2a25      	cmp	r2, #37	; 0x25
{
   12706:	4603      	mov	r3, r0
	if (*sp == '%') {
   12708:	d033      	beq.n	12772 <extract_conversion+0x7a>
	++sp;
   1270a:	3101      	adds	r1, #1
   1270c:	460c      	mov	r4, r1
		switch (*sp) {
   1270e:	f811 2b01 	ldrb.w	r2, [r1], #1
   12712:	2a2b      	cmp	r2, #43	; 0x2b
   12714:	d03d      	beq.n	12792 <extract_conversion+0x9a>
   12716:	d82f      	bhi.n	12778 <extract_conversion+0x80>
   12718:	2a20      	cmp	r2, #32
   1271a:	d03e      	beq.n	1279a <extract_conversion+0xa2>
   1271c:	2a23      	cmp	r2, #35	; 0x23
   1271e:	d040      	beq.n	127a2 <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
   12720:	781a      	ldrb	r2, [r3, #0]
   12722:	f002 0144 	and.w	r1, r2, #68	; 0x44
   12726:	2944      	cmp	r1, #68	; 0x44
   12728:	d102      	bne.n	12730 <extract_conversion+0x38>
		conv->flag_zero = false;
   1272a:	f36f 1286 	bfc	r2, #6, #1
   1272e:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
   12730:	7822      	ldrb	r2, [r4, #0]
   12732:	2a2a      	cmp	r2, #42	; 0x2a
   12734:	d14c      	bne.n	127d0 <extract_conversion+0xd8>
		conv->width_present = true;
   12736:	881a      	ldrh	r2, [r3, #0]
   12738:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
   1273c:	1c60      	adds	r0, r4, #1
   1273e:	801a      	strh	r2, [r3, #0]
	if (*sp != '.') {
   12740:	7802      	ldrb	r2, [r0, #0]
   12742:	2a2e      	cmp	r2, #46	; 0x2e
   12744:	d14f      	bne.n	127e6 <extract_conversion+0xee>
	if (*sp == '*') {
   12746:	7842      	ldrb	r2, [r0, #1]
   12748:	2a2a      	cmp	r2, #42	; 0x2a
   1274a:	d045      	beq.n	127d8 <extract_conversion+0xe0>
   1274c:	3001      	adds	r0, #1
	const char *sp = *str;
   1274e:	4605      	mov	r5, r0
	size_t val = 0;
   12750:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12752:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12754:	4601      	mov	r1, r0
   12756:	f811 4b01 	ldrb.w	r4, [r1], #1
   1275a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1275e:	2e09      	cmp	r6, #9
   12760:	d953      	bls.n	1280a <extract_conversion+0x112>
	if (sp != wp) {
   12762:	42a8      	cmp	r0, r5
		conv->prec_present = true;
   12764:	bf1f      	itttt	ne
   12766:	7859      	ldrbne	r1, [r3, #1]
		conv->prec_value = prec;
   12768:	609a      	strne	r2, [r3, #8]
		conv->prec_present = true;
   1276a:	f041 0102 	orrne.w	r1, r1, #2
   1276e:	7059      	strbne	r1, [r3, #1]
		if (prec != conv->prec_value) {
   12770:	e039      	b.n	127e6 <extract_conversion+0xee>
		conv->specifier = *sp++;
   12772:	1c88      	adds	r0, r1, #2
   12774:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   12776:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
   12778:	2a2d      	cmp	r2, #45	; 0x2d
   1277a:	d005      	beq.n	12788 <extract_conversion+0x90>
   1277c:	2a30      	cmp	r2, #48	; 0x30
   1277e:	d1cf      	bne.n	12720 <extract_conversion+0x28>
			conv->flag_zero = true;
   12780:	781a      	ldrb	r2, [r3, #0]
   12782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12786:	e002      	b.n	1278e <extract_conversion+0x96>
			conv->flag_dash = true;
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
   1278e:	701a      	strb	r2, [r3, #0]
			break;
   12790:	e7bc      	b.n	1270c <extract_conversion+0x14>
			conv->flag_plus = true;
   12792:	781a      	ldrb	r2, [r3, #0]
   12794:	f042 0208 	orr.w	r2, r2, #8
   12798:	e7f9      	b.n	1278e <extract_conversion+0x96>
			conv->flag_space = true;
   1279a:	781a      	ldrb	r2, [r3, #0]
   1279c:	f042 0210 	orr.w	r2, r2, #16
   127a0:	e7f5      	b.n	1278e <extract_conversion+0x96>
			conv->flag_hash = true;
   127a2:	781a      	ldrb	r2, [r3, #0]
   127a4:	f042 0220 	orr.w	r2, r2, #32
   127a8:	e7f1      	b.n	1278e <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
   127aa:	fb07 5202 	mla	r2, r7, r2, r5
   127ae:	3a30      	subs	r2, #48	; 0x30
   127b0:	4608      	mov	r0, r1
   127b2:	4601      	mov	r1, r0
   127b4:	f811 5b01 	ldrb.w	r5, [r1], #1
   127b8:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   127bc:	2e09      	cmp	r6, #9
   127be:	d9f4      	bls.n	127aa <extract_conversion+0xb2>
	if (sp != wp) {
   127c0:	4284      	cmp	r4, r0
		conv->width_present = true;
   127c2:	bf1f      	itttt	ne
   127c4:	7819      	ldrbne	r1, [r3, #0]
		conv->width_value = width;
   127c6:	605a      	strne	r2, [r3, #4]
		conv->width_present = true;
   127c8:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
   127cc:	7019      	strbne	r1, [r3, #0]
		if (width != conv->width_value) {
   127ce:	e7b7      	b.n	12740 <extract_conversion+0x48>
   127d0:	4620      	mov	r0, r4
	size_t val = 0;
   127d2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   127d4:	270a      	movs	r7, #10
   127d6:	e7ec      	b.n	127b2 <extract_conversion+0xba>
		conv->prec_present = true;
   127d8:	785a      	ldrb	r2, [r3, #1]
   127da:	f022 0206 	bic.w	r2, r2, #6
   127de:	f042 0206 	orr.w	r2, r2, #6
   127e2:	705a      	strb	r2, [r3, #1]
		return ++sp;
   127e4:	3002      	adds	r0, #2
	switch (*sp) {
   127e6:	4601      	mov	r1, r0
   127e8:	f811 4b01 	ldrb.w	r4, [r1], #1
   127ec:	2c6c      	cmp	r4, #108	; 0x6c
   127ee:	d03c      	beq.n	1286a <extract_conversion+0x172>
   127f0:	d810      	bhi.n	12814 <extract_conversion+0x11c>
   127f2:	2c68      	cmp	r4, #104	; 0x68
   127f4:	d015      	beq.n	12822 <extract_conversion+0x12a>
   127f6:	2c6a      	cmp	r4, #106	; 0x6a
   127f8:	d03f      	beq.n	1287a <extract_conversion+0x182>
   127fa:	2c4c      	cmp	r4, #76	; 0x4c
   127fc:	d042      	beq.n	12884 <extract_conversion+0x18c>
		conv->length_mod = LENGTH_NONE;
   127fe:	785a      	ldrb	r2, [r3, #1]
   12800:	f36f 02c6 	bfc	r2, #3, #4
   12804:	705a      	strb	r2, [r3, #1]
		break;
   12806:	4601      	mov	r1, r0
   12808:	e014      	b.n	12834 <extract_conversion+0x13c>
		val = 10U * val + *sp++ - '0';
   1280a:	fb07 4202 	mla	r2, r7, r2, r4
   1280e:	3a30      	subs	r2, #48	; 0x30
   12810:	4608      	mov	r0, r1
   12812:	e79f      	b.n	12754 <extract_conversion+0x5c>
	switch (*sp) {
   12814:	2c74      	cmp	r4, #116	; 0x74
   12816:	785a      	ldrb	r2, [r3, #1]
   12818:	d032      	beq.n	12880 <extract_conversion+0x188>
   1281a:	2c7a      	cmp	r4, #122	; 0x7a
   1281c:	d1ef      	bne.n	127fe <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
   1281e:	2006      	movs	r0, #6
   12820:	e01f      	b.n	12862 <extract_conversion+0x16a>
		if (*++sp == 'h') {
   12822:	7842      	ldrb	r2, [r0, #1]
   12824:	2a68      	cmp	r2, #104	; 0x68
   12826:	785a      	ldrb	r2, [r3, #1]
   12828:	d11a      	bne.n	12860 <extract_conversion+0x168>
			conv->length_mod = LENGTH_HH;
   1282a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1282c:	f361 02c6 	bfi	r2, r1, #3, #4
   12830:	705a      	strb	r2, [r3, #1]
			++sp;
   12832:	1c81      	adds	r1, r0, #2
	conv->specifier = *sp++;
   12834:	4608      	mov	r0, r1
   12836:	f810 4b01 	ldrb.w	r4, [r0], #1
   1283a:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
   1283c:	2c78      	cmp	r4, #120	; 0x78
   1283e:	f200 80ac 	bhi.w	1299a <extract_conversion+0x2a2>
   12842:	2c57      	cmp	r4, #87	; 0x57
   12844:	d829      	bhi.n	1289a <extract_conversion+0x1a2>
   12846:	2c41      	cmp	r4, #65	; 0x41
   12848:	d003      	beq.n	12852 <extract_conversion+0x15a>
   1284a:	3c45      	subs	r4, #69	; 0x45
   1284c:	2c02      	cmp	r4, #2
   1284e:	f200 80a4 	bhi.w	1299a <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
   12852:	789a      	ldrb	r2, [r3, #2]
   12854:	2104      	movs	r1, #4
   12856:	f361 0202 	bfi	r2, r1, #0, #3
   1285a:	709a      	strb	r2, [r3, #2]
			unsupported = true;
   1285c:	2201      	movs	r2, #1
			break;
   1285e:	e078      	b.n	12952 <extract_conversion+0x25a>
			conv->length_mod = LENGTH_H;
   12860:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
   12862:	f360 02c6 	bfi	r2, r0, #3, #4
   12866:	705a      	strb	r2, [r3, #1]
   12868:	e7e4      	b.n	12834 <extract_conversion+0x13c>
		if (*++sp == 'l') {
   1286a:	7842      	ldrb	r2, [r0, #1]
   1286c:	2a6c      	cmp	r2, #108	; 0x6c
   1286e:	785a      	ldrb	r2, [r3, #1]
   12870:	d101      	bne.n	12876 <extract_conversion+0x17e>
			conv->length_mod = LENGTH_LL;
   12872:	2104      	movs	r1, #4
   12874:	e7da      	b.n	1282c <extract_conversion+0x134>
			conv->length_mod = LENGTH_L;
   12876:	2003      	movs	r0, #3
   12878:	e7f3      	b.n	12862 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_J;
   1287a:	785a      	ldrb	r2, [r3, #1]
   1287c:	2005      	movs	r0, #5
   1287e:	e7f0      	b.n	12862 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_T;
   12880:	2007      	movs	r0, #7
   12882:	e7ee      	b.n	12862 <extract_conversion+0x16a>
		conv->unsupported = true;
   12884:	881a      	ldrh	r2, [r3, #0]
   12886:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1288a:	f022 0202 	bic.w	r2, r2, #2
   1288e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12892:	f042 0202 	orr.w	r2, r2, #2
   12896:	801a      	strh	r2, [r3, #0]
		break;
   12898:	e7cc      	b.n	12834 <extract_conversion+0x13c>
   1289a:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
   1289e:	2a20      	cmp	r2, #32
   128a0:	d87b      	bhi.n	1299a <extract_conversion+0x2a2>
   128a2:	a101      	add	r1, pc, #4	; (adr r1, 128a8 <extract_conversion+0x1b0>)
   128a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   128a8:	00012963 	.word	0x00012963
   128ac:	0001299b 	.word	0x0001299b
   128b0:	0001299b 	.word	0x0001299b
   128b4:	0001299b 	.word	0x0001299b
   128b8:	0001299b 	.word	0x0001299b
   128bc:	0001299b 	.word	0x0001299b
   128c0:	0001299b 	.word	0x0001299b
   128c4:	0001299b 	.word	0x0001299b
   128c8:	0001299b 	.word	0x0001299b
   128cc:	00012853 	.word	0x00012853
   128d0:	0001299b 	.word	0x0001299b
   128d4:	00012963 	.word	0x00012963
   128d8:	0001292d 	.word	0x0001292d
   128dc:	00012853 	.word	0x00012853
   128e0:	00012853 	.word	0x00012853
   128e4:	00012853 	.word	0x00012853
   128e8:	0001299b 	.word	0x0001299b
   128ec:	0001292d 	.word	0x0001292d
   128f0:	0001299b 	.word	0x0001299b
   128f4:	0001299b 	.word	0x0001299b
   128f8:	0001299b 	.word	0x0001299b
   128fc:	0001299b 	.word	0x0001299b
   12900:	00012969 	.word	0x00012969
   12904:	00012963 	.word	0x00012963
   12908:	00012983 	.word	0x00012983
   1290c:	0001299b 	.word	0x0001299b
   12910:	0001299b 	.word	0x0001299b
   12914:	00012983 	.word	0x00012983
   12918:	0001299b 	.word	0x0001299b
   1291c:	00012963 	.word	0x00012963
   12920:	0001299b 	.word	0x0001299b
   12924:	0001299b 	.word	0x0001299b
   12928:	00012963 	.word	0x00012963
		conv->specifier_cat = SPECIFIER_SINT;
   1292c:	789a      	ldrb	r2, [r3, #2]
   1292e:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
   12930:	f361 0202 	bfi	r2, r1, #0, #3
   12934:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   12936:	785a      	ldrb	r2, [r3, #1]
   12938:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1293c:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
   1293e:	bf02      	ittt	eq
   12940:	7819      	ldrbeq	r1, [r3, #0]
   12942:	f041 0101 	orreq.w	r1, r1, #1
   12946:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
   12948:	2c63      	cmp	r4, #99	; 0x63
   1294a:	d12a      	bne.n	129a2 <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1294c:	3a00      	subs	r2, #0
   1294e:	bf18      	it	ne
   12950:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
   12952:	7819      	ldrb	r1, [r3, #0]
   12954:	f3c1 0440 	ubfx	r4, r1, #1, #1
   12958:	4322      	orrs	r2, r4
   1295a:	f362 0141 	bfi	r1, r2, #1, #1
   1295e:	7019      	strb	r1, [r3, #0]
	return sp;
   12960:	e709      	b.n	12776 <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
   12962:	789a      	ldrb	r2, [r3, #2]
   12964:	2102      	movs	r1, #2
   12966:	e7e3      	b.n	12930 <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
   12968:	789a      	ldrb	r2, [r3, #2]
   1296a:	2103      	movs	r1, #3
   1296c:	f361 0202 	bfi	r2, r1, #0, #3
   12970:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   12972:	785a      	ldrb	r2, [r3, #1]
   12974:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12978:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
   1297c:	424a      	negs	r2, r1
   1297e:	414a      	adcs	r2, r1
   12980:	e7e7      	b.n	12952 <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
   12982:	789a      	ldrb	r2, [r3, #2]
   12984:	2103      	movs	r1, #3
   12986:	f361 0202 	bfi	r2, r1, #0, #3
   1298a:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
   1298c:	785a      	ldrb	r2, [r3, #1]
   1298e:	f012 0f78 	tst.w	r2, #120	; 0x78
   12992:	bf14      	ite	ne
   12994:	2201      	movne	r2, #1
   12996:	2200      	moveq	r2, #0
   12998:	e7db      	b.n	12952 <extract_conversion+0x25a>
		conv->invalid = true;
   1299a:	781a      	ldrb	r2, [r3, #0]
   1299c:	f042 0201 	orr.w	r2, r2, #1
   129a0:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
   129a2:	2200      	movs	r2, #0
   129a4:	e7d5      	b.n	12952 <extract_conversion+0x25a>
   129a6:	bf00      	nop

000129a8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   129a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129ac:	4680      	mov	r8, r0
   129ae:	b08f      	sub	sp, #60	; 0x3c
   129b0:	4689      	mov	r9, r1
   129b2:	4692      	mov	sl, r2
   129b4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   129b6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   129b8:	f89a 0000 	ldrb.w	r0, [sl]
   129bc:	b908      	cbnz	r0, 129c2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   129be:	4628      	mov	r0, r5
   129c0:	e10b      	b.n	12bda <cbvprintf+0x232>
		if (*fp != '%') {
   129c2:	2825      	cmp	r0, #37	; 0x25
   129c4:	d009      	beq.n	129da <cbvprintf+0x32>
			OUTC(*fp++);
   129c6:	4649      	mov	r1, r9
   129c8:	47c0      	blx	r8
   129ca:	2800      	cmp	r0, #0
   129cc:	f2c0 8105 	blt.w	12bda <cbvprintf+0x232>
   129d0:	f10a 0301 	add.w	r3, sl, #1
   129d4:	9302      	str	r3, [sp, #8]
			OUTC('%');
   129d6:	3501      	adds	r5, #1
			break;
   129d8:	e059      	b.n	12a8e <cbvprintf+0xe6>
		fp = extract_conversion(&conv, sp);
   129da:	4651      	mov	r1, sl
   129dc:	a805      	add	r0, sp, #20
   129de:	f7ff fe8b 	bl	126f8 <extract_conversion>
		if (conv.width_star) {
   129e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
		fp = extract_conversion(&conv, sp);
   129e6:	9002      	str	r0, [sp, #8]
		if (conv.width_star) {
   129e8:	07d9      	lsls	r1, r3, #31
   129ea:	d51a      	bpl.n	12a22 <cbvprintf+0x7a>
			width = va_arg(ap, int);
   129ec:	f854 7b04 	ldr.w	r7, [r4], #4
			if (width < 0) {
   129f0:	2f00      	cmp	r7, #0
   129f2:	da06      	bge.n	12a02 <cbvprintf+0x5a>
				conv.flag_dash = true;
   129f4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   129f8:	f042 0204 	orr.w	r2, r2, #4
   129fc:	f88d 2014 	strb.w	r2, [sp, #20]
				width = -width;
   12a00:	427f      	negs	r7, r7
		if (conv.prec_star) {
   12a02:	075a      	lsls	r2, r3, #29
   12a04:	d515      	bpl.n	12a32 <cbvprintf+0x8a>
			int arg = va_arg(ap, int);
   12a06:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   12a0a:	f1bb 0f00 	cmp.w	fp, #0
   12a0e:	da14      	bge.n	12a3a <cbvprintf+0x92>
				conv.prec_present = false;
   12a10:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12a14:	f36f 0341 	bfc	r3, #1, #1
   12a18:	f88d 3015 	strb.w	r3, [sp, #21]
		int precision = -1;
   12a1c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   12a20:	e00b      	b.n	12a3a <cbvprintf+0x92>
		} else if (conv.width_present) {
   12a22:	f99d 2014 	ldrsb.w	r2, [sp, #20]
   12a26:	2a00      	cmp	r2, #0
			width = conv.width_value;
   12a28:	bfb4      	ite	lt
   12a2a:	9f06      	ldrlt	r7, [sp, #24]
		int width = -1;
   12a2c:	f04f 37ff 	movge.w	r7, #4294967295	; 0xffffffff
   12a30:	e7e7      	b.n	12a02 <cbvprintf+0x5a>
		} else if (conv.prec_present) {
   12a32:	079b      	lsls	r3, r3, #30
   12a34:	d5f2      	bpl.n	12a1c <cbvprintf+0x74>
			precision = conv.prec_value;
   12a36:	f8dd b01c 	ldr.w	fp, [sp, #28]
			= (enum specifier_cat_enum)conv.specifier_cat;
   12a3a:	f89d 3016 	ldrb.w	r3, [sp, #22]
			= (enum length_mod_enum)conv.length_mod;
   12a3e:	f89d c015 	ldrb.w	ip, [sp, #21]
		enum specifier_cat_enum specifier_cat
   12a42:	f003 0307 	and.w	r3, r3, #7
		conv.pad0_value = 0;
   12a46:	2100      	movs	r1, #0
		if (specifier_cat == SPECIFIER_SINT) {
   12a48:	2b01      	cmp	r3, #1
		conv.pad0_pre_exp = 0;
   12a4a:	e9cd 1106 	strd	r1, r1, [sp, #24]
			= (enum length_mod_enum)conv.length_mod;
   12a4e:	f3cc 0cc3 	ubfx	ip, ip, #3, #4
		union argument_value value = (union argument_value){
   12a52:	468e      	mov	lr, r1
		if (specifier_cat == SPECIFIER_SINT) {
   12a54:	d130      	bne.n	12ab8 <cbvprintf+0x110>
			switch (length_mod) {
   12a56:	f1ac 0303 	sub.w	r3, ip, #3
   12a5a:	2b04      	cmp	r3, #4
   12a5c:	d81a      	bhi.n	12a94 <cbvprintf+0xec>
   12a5e:	e8df f003 	tbb	[pc, r3]
   12a62:	3b03      	.short	0x3b03
   12a64:	193b      	.short	0x193b
   12a66:	19          	.byte	0x19
   12a67:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
   12a68:	f854 1b04 	ldr.w	r1, [r4], #4
   12a6c:	17cb      	asrs	r3, r1, #31
				value.sint = (short)value.sint;
   12a6e:	469e      	mov	lr, r3
		if (conv.invalid || conv.unsupported) {
   12a70:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12a74:	f013 0603 	ands.w	r6, r3, #3
   12a78:	d050      	beq.n	12b1c <cbvprintf+0x174>
			OUTS(sp, fp);
   12a7a:	9b02      	ldr	r3, [sp, #8]
   12a7c:	4652      	mov	r2, sl
   12a7e:	4649      	mov	r1, r9
   12a80:	4640      	mov	r0, r8
   12a82:	f008 ff67 	bl	1b954 <outs>
   12a86:	2800      	cmp	r0, #0
   12a88:	f2c0 80a7 	blt.w	12bda <cbvprintf+0x232>
   12a8c:	4405      	add	r5, r0
			OUTS(bps, bpe);
   12a8e:	f8dd a008 	ldr.w	sl, [sp, #8]
   12a92:	e791      	b.n	129b8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12a94:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
   12a98:	f1bc 0f01 	cmp.w	ip, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12a9c:	ea4f 73e1 	mov.w	r3, r1, asr #31
				value.sint =
   12aa0:	469e      	mov	lr, r3
			if (length_mod == LENGTH_HH) {
   12aa2:	d102      	bne.n	12aaa <cbvprintf+0x102>
				value.uint = (unsigned char)value.uint;
   12aa4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12aa8:	e013      	b.n	12ad2 <cbvprintf+0x12a>
			} else if (length_mod == LENGTH_H) {
   12aaa:	f1bc 0f02 	cmp.w	ip, #2
   12aae:	d1df      	bne.n	12a70 <cbvprintf+0xc8>
				value.sint = (short)value.sint;
   12ab0:	b20a      	sxth	r2, r1
   12ab2:	17d3      	asrs	r3, r2, #31
   12ab4:	4611      	mov	r1, r2
   12ab6:	e7da      	b.n	12a6e <cbvprintf+0xc6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12ab8:	2b02      	cmp	r3, #2
   12aba:	d122      	bne.n	12b02 <cbvprintf+0x15a>
			switch (length_mod) {
   12abc:	f1ac 0303 	sub.w	r3, ip, #3
   12ac0:	2b04      	cmp	r3, #4
   12ac2:	d812      	bhi.n	12aea <cbvprintf+0x142>
   12ac4:	e8df f003 	tbb	[pc, r3]
   12ac8:	11080803 	.word	0x11080803
   12acc:	11          	.byte	0x11
   12acd:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
   12ace:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint = (unsigned short)value.uint;
   12ad2:	f04f 0e00 	mov.w	lr, #0
   12ad6:	e7cb      	b.n	12a70 <cbvprintf+0xc8>
					(uint_value_type)va_arg(ap,
   12ad8:	1de3      	adds	r3, r4, #7
   12ada:	f023 0307 	bic.w	r3, r3, #7
   12ade:	461c      	mov	r4, r3
				value.uint =
   12ae0:	f8d3 e004 	ldr.w	lr, [r3, #4]
   12ae4:	f854 1b08 	ldr.w	r1, [r4], #8
				break;
   12ae8:	e7c2      	b.n	12a70 <cbvprintf+0xc8>
			if (length_mod == LENGTH_HH) {
   12aea:	f1bc 0f01 	cmp.w	ip, #1
					(uint_value_type)va_arg(ap, size_t);
   12aee:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint =
   12af2:	f04f 0e00 	mov.w	lr, #0
			if (length_mod == LENGTH_HH) {
   12af6:	d0d5      	beq.n	12aa4 <cbvprintf+0xfc>
			} else if (length_mod == LENGTH_H) {
   12af8:	f1bc 0f02 	cmp.w	ip, #2
   12afc:	d1b8      	bne.n	12a70 <cbvprintf+0xc8>
				value.uint = (unsigned short)value.uint;
   12afe:	b289      	uxth	r1, r1
   12b00:	e7e7      	b.n	12ad2 <cbvprintf+0x12a>
		} else if (specifier_cat == SPECIFIER_FP) {
   12b02:	2b04      	cmp	r3, #4
   12b04:	d105      	bne.n	12b12 <cbvprintf+0x16a>
			if (length_mod == LENGTH_UPPER_L) {
   12b06:	3407      	adds	r4, #7
   12b08:	f024 0407 	bic.w	r4, r4, #7
   12b0c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12b10:	e7d0      	b.n	12ab4 <cbvprintf+0x10c>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12b12:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
   12b14:	bf08      	it	eq
   12b16:	f854 1b04 	ldreq.w	r1, [r4], #4
   12b1a:	e7a9      	b.n	12a70 <cbvprintf+0xc8>
		switch (conv.specifier) {
   12b1c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12b20:	2878      	cmp	r0, #120	; 0x78
   12b22:	d8b4      	bhi.n	12a8e <cbvprintf+0xe6>
   12b24:	2862      	cmp	r0, #98	; 0x62
   12b26:	d821      	bhi.n	12b6c <cbvprintf+0x1c4>
   12b28:	2825      	cmp	r0, #37	; 0x25
   12b2a:	d051      	beq.n	12bd0 <cbvprintf+0x228>
   12b2c:	2858      	cmp	r0, #88	; 0x58
   12b2e:	d1ae      	bne.n	12a8e <cbvprintf+0xe6>
			bps = encode_uint(value.uint, &conv, buf, bpe);
   12b30:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12b34:	9300      	str	r3, [sp, #0]
   12b36:	4608      	mov	r0, r1
   12b38:	ab08      	add	r3, sp, #32
   12b3a:	aa05      	add	r2, sp, #20
   12b3c:	4671      	mov	r1, lr
   12b3e:	f008 febe 	bl	1b8be <encode_uint>
   12b42:	4682      	mov	sl, r0
			if (precision >= 0) {
   12b44:	f1bb 0f00 	cmp.w	fp, #0
   12b48:	f10d 0136 	add.w	r1, sp, #54	; 0x36
   12b4c:	db0c      	blt.n	12b68 <cbvprintf+0x1c0>
				conv.flag_zero = false;
   12b4e:	f89d 2014 	ldrb.w	r2, [sp, #20]
				size_t len = bpe - bps;
   12b52:	eba1 030a 	sub.w	r3, r1, sl
				conv.flag_zero = false;
   12b56:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12b5a:	459b      	cmp	fp, r3
				conv.flag_zero = false;
   12b5c:	f88d 2014 	strb.w	r2, [sp, #20]
				if (len < (size_t)precision) {
   12b60:	d902      	bls.n	12b68 <cbvprintf+0x1c0>
					conv.pad0_value = precision - (int)len;
   12b62:	ebab 0303 	sub.w	r3, fp, r3
   12b66:	9306      	str	r3, [sp, #24]
		const char *bpe = buf + sizeof(buf);
   12b68:	468b      	mov	fp, r1
   12b6a:	e048      	b.n	12bfe <cbvprintf+0x256>
   12b6c:	3863      	subs	r0, #99	; 0x63
   12b6e:	2815      	cmp	r0, #21
   12b70:	d88d      	bhi.n	12a8e <cbvprintf+0xe6>
   12b72:	a201      	add	r2, pc, #4	; (adr r2, 12b78 <cbvprintf+0x1d0>)
   12b74:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12b78:	00012c07 	.word	0x00012c07
   12b7c:	00012c65 	.word	0x00012c65
   12b80:	00012a8f 	.word	0x00012a8f
   12b84:	00012a8f 	.word	0x00012a8f
   12b88:	00012a8f 	.word	0x00012a8f
   12b8c:	00012a8f 	.word	0x00012a8f
   12b90:	00012c65 	.word	0x00012c65
   12b94:	00012a8f 	.word	0x00012a8f
   12b98:	00012a8f 	.word	0x00012a8f
   12b9c:	00012a8f 	.word	0x00012a8f
   12ba0:	00012a8f 	.word	0x00012a8f
   12ba4:	00012cbf 	.word	0x00012cbf
   12ba8:	00012c8d 	.word	0x00012c8d
   12bac:	00012c91 	.word	0x00012c91
   12bb0:	00012a8f 	.word	0x00012a8f
   12bb4:	00012a8f 	.word	0x00012a8f
   12bb8:	00012be1 	.word	0x00012be1
   12bbc:	00012a8f 	.word	0x00012a8f
   12bc0:	00012c8d 	.word	0x00012c8d
   12bc4:	00012a8f 	.word	0x00012a8f
   12bc8:	00012a8f 	.word	0x00012a8f
   12bcc:	00012c8d 	.word	0x00012c8d
			OUTC('%');
   12bd0:	4649      	mov	r1, r9
   12bd2:	47c0      	blx	r8
   12bd4:	2800      	cmp	r0, #0
   12bd6:	f6bf aefe 	bge.w	129d6 <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
   12bda:	b00f      	add	sp, #60	; 0x3c
   12bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = strlen(bps);
   12be0:	4608      	mov	r0, r1
			bps = (const char *)value.ptr;
   12be2:	468a      	mov	sl, r1
			size_t len = strlen(bps);
   12be4:	9103      	str	r1, [sp, #12]
   12be6:	f00a f865 	bl	1ccb4 <strlen>
			if ((precision >= 0)
   12bea:	f1bb 0f00 	cmp.w	fp, #0
   12bee:	9903      	ldr	r1, [sp, #12]
   12bf0:	db02      	blt.n	12bf8 <cbvprintf+0x250>
   12bf2:	4558      	cmp	r0, fp
   12bf4:	bf28      	it	cs
   12bf6:	4658      	movcs	r0, fp
			bpe = bps + len;
   12bf8:	eb01 0b00 	add.w	fp, r1, r0
		char sign = 0;
   12bfc:	2600      	movs	r6, #0
		if (bps == NULL) {
   12bfe:	f1ba 0f00 	cmp.w	sl, #0
   12c02:	d107      	bne.n	12c14 <cbvprintf+0x26c>
   12c04:	e743      	b.n	12a8e <cbvprintf+0xe6>
			buf[0] = value.uint;
   12c06:	f88d 1020 	strb.w	r1, [sp, #32]
			break;
   12c0a:	2600      	movs	r6, #0
			bpe = buf + 1;
   12c0c:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
			bps = buf;
   12c10:	f10d 0a20 	add.w	sl, sp, #32
		size_t nj_len = (bpe - bps);
   12c14:	ebab 030a 	sub.w	r3, fp, sl
		if (sign != 0) {
   12c18:	b106      	cbz	r6, 12c1c <cbvprintf+0x274>
			nj_len += 1U;
   12c1a:	3301      	adds	r3, #1
		if (conv.altform_0c) {
   12c1c:	f89d 2016 	ldrb.w	r2, [sp, #22]
   12c20:	06d0      	lsls	r0, r2, #27
   12c22:	d567      	bpl.n	12cf4 <cbvprintf+0x34c>
			nj_len += 2U;
   12c24:	3302      	adds	r3, #2
		if (conv.pad_fp) {
   12c26:	0652      	lsls	r2, r2, #25
		nj_len += conv.pad0_value;
   12c28:	9906      	ldr	r1, [sp, #24]
			nj_len += conv.pad0_pre_exp;
   12c2a:	bf48      	it	mi
   12c2c:	9a07      	ldrmi	r2, [sp, #28]
		nj_len += conv.pad0_value;
   12c2e:	440b      	add	r3, r1
			nj_len += conv.pad0_pre_exp;
   12c30:	bf48      	it	mi
   12c32:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   12c34:	2f00      	cmp	r7, #0
   12c36:	dd70      	ble.n	12d1a <cbvprintf+0x372>
			if (!conv.flag_dash) {
   12c38:	f89d 2014 	ldrb.w	r2, [sp, #20]
			width -= (int)nj_len;
   12c3c:	1aff      	subs	r7, r7, r3
			if (!conv.flag_dash) {
   12c3e:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12c42:	9303      	str	r3, [sp, #12]
   12c44:	0753      	lsls	r3, r2, #29
   12c46:	d468      	bmi.n	12d1a <cbvprintf+0x372>
				if (conv.flag_zero) {
   12c48:	0650      	lsls	r0, r2, #25
   12c4a:	f140 80a3 	bpl.w	12d94 <cbvprintf+0x3ec>
					if (sign != 0) {
   12c4e:	b13e      	cbz	r6, 12c60 <cbvprintf+0x2b8>
						OUTC(sign);
   12c50:	4649      	mov	r1, r9
   12c52:	4630      	mov	r0, r6
   12c54:	47c0      	blx	r8
   12c56:	2800      	cmp	r0, #0
   12c58:	dbbf      	blt.n	12bda <cbvprintf+0x232>
						sign = 0;
   12c5a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   12c5c:	3501      	adds	r5, #1
						sign = 0;
   12c5e:	461e      	mov	r6, r3
					pad = '0';
   12c60:	2330      	movs	r3, #48	; 0x30
   12c62:	e098      	b.n	12d96 <cbvprintf+0x3ee>
			if (conv.flag_plus) {
   12c64:	071e      	lsls	r6, r3, #28
   12c66:	d40f      	bmi.n	12c88 <cbvprintf+0x2e0>
				sign = ' ';
   12c68:	f013 0610 	ands.w	r6, r3, #16
   12c6c:	bf18      	it	ne
   12c6e:	2620      	movne	r6, #32
			if (value.sint < 0) {
   12c70:	2900      	cmp	r1, #0
   12c72:	f17e 0000 	sbcs.w	r0, lr, #0
   12c76:	f6bf af5b 	bge.w	12b30 <cbvprintf+0x188>
				value.uint = -value.sint;
   12c7a:	424a      	negs	r2, r1
   12c7c:	eb6e 034e 	sbc.w	r3, lr, lr, lsl #1
   12c80:	4611      	mov	r1, r2
   12c82:	469e      	mov	lr, r3
				sign = '-';
   12c84:	262d      	movs	r6, #45	; 0x2d
   12c86:	e753      	b.n	12b30 <cbvprintf+0x188>
				sign = '+';
   12c88:	262b      	movs	r6, #43	; 0x2b
   12c8a:	e7f1      	b.n	12c70 <cbvprintf+0x2c8>
		switch (conv.specifier) {
   12c8c:	2600      	movs	r6, #0
   12c8e:	e74f      	b.n	12b30 <cbvprintf+0x188>
			if (value.ptr != NULL) {
   12c90:	b351      	cbz	r1, 12ce8 <cbvprintf+0x340>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   12c92:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12c96:	9300      	str	r3, [sp, #0]
   12c98:	4608      	mov	r0, r1
   12c9a:	ab08      	add	r3, sp, #32
   12c9c:	aa05      	add	r2, sp, #20
   12c9e:	2100      	movs	r1, #0
   12ca0:	f008 fe0d 	bl	1b8be <encode_uint>
				conv.altform_0c = true;
   12ca4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   12ca8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12cac:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12cb0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   12cb4:	4682      	mov	sl, r0
				conv.altform_0c = true;
   12cb6:	f8ad 3016 	strh.w	r3, [sp, #22]
		char sign = 0;
   12cba:	2600      	movs	r6, #0
				goto prec_int_pad0;
   12cbc:	e742      	b.n	12b44 <cbvprintf+0x19c>
	switch ((enum length_mod_enum)conv->length_mod) {
   12cbe:	f1bc 0f07 	cmp.w	ip, #7
   12cc2:	f63f aee4 	bhi.w	12a8e <cbvprintf+0xe6>
   12cc6:	e8df f00c 	tbb	[pc, ip]
   12cca:	040d      	.short	0x040d
   12ccc:	08080d06 	.word	0x08080d06
   12cd0:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   12cd2:	700d      	strb	r5, [r1, #0]
		break;
   12cd4:	e6db      	b.n	12a8e <cbvprintf+0xe6>
		*(short *)dp = (short)count;
   12cd6:	800d      	strh	r5, [r1, #0]
		break;
   12cd8:	e6d9      	b.n	12a8e <cbvprintf+0xe6>
		*(intmax_t *)dp = (intmax_t)count;
   12cda:	462a      	mov	r2, r5
   12cdc:	17eb      	asrs	r3, r5, #31
   12cde:	e9c1 2300 	strd	r2, r3, [r1]
		break;
   12ce2:	e6d4      	b.n	12a8e <cbvprintf+0xe6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12ce4:	600d      	str	r5, [r1, #0]
		break;
   12ce6:	e6d2      	b.n	12a8e <cbvprintf+0xe6>
			bpe = bps + 5;
   12ce8:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 12dac <cbvprintf+0x404>
   12cec:	460e      	mov	r6, r1
			bps = "(nil)";
   12cee:	f1ab 0a05 	sub.w	sl, fp, #5
   12cf2:	e78f      	b.n	12c14 <cbvprintf+0x26c>
		} else if (conv.altform_0) {
   12cf4:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   12cf6:	bf48      	it	mi
   12cf8:	3301      	addmi	r3, #1
   12cfa:	e794      	b.n	12c26 <cbvprintf+0x27e>
					OUTC(pad);
   12cfc:	4618      	mov	r0, r3
   12cfe:	4649      	mov	r1, r9
   12d00:	9303      	str	r3, [sp, #12]
   12d02:	47c0      	blx	r8
   12d04:	2800      	cmp	r0, #0
   12d06:	9b03      	ldr	r3, [sp, #12]
   12d08:	f6ff af67 	blt.w	12bda <cbvprintf+0x232>
				while (width-- > 0) {
   12d0c:	2f00      	cmp	r7, #0
   12d0e:	eba5 0107 	sub.w	r1, r5, r7
   12d12:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   12d16:	dcf1      	bgt.n	12cfc <cbvprintf+0x354>
   12d18:	460d      	mov	r5, r1
		if (sign != 0) {
   12d1a:	b136      	cbz	r6, 12d2a <cbvprintf+0x382>
			OUTC(sign);
   12d1c:	4649      	mov	r1, r9
   12d1e:	4630      	mov	r0, r6
   12d20:	47c0      	blx	r8
   12d22:	2800      	cmp	r0, #0
   12d24:	f6ff af59 	blt.w	12bda <cbvprintf+0x232>
   12d28:	3501      	adds	r5, #1
			if (conv.altform_0c | conv.altform_0) {
   12d2a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12d2e:	06d9      	lsls	r1, r3, #27
   12d30:	d401      	bmi.n	12d36 <cbvprintf+0x38e>
   12d32:	071a      	lsls	r2, r3, #28
   12d34:	d506      	bpl.n	12d44 <cbvprintf+0x39c>
				OUTC('0');
   12d36:	4649      	mov	r1, r9
   12d38:	2030      	movs	r0, #48	; 0x30
   12d3a:	47c0      	blx	r8
   12d3c:	2800      	cmp	r0, #0
   12d3e:	f6ff af4c 	blt.w	12bda <cbvprintf+0x232>
   12d42:	3501      	adds	r5, #1
			if (conv.altform_0c) {
   12d44:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12d48:	06db      	lsls	r3, r3, #27
   12d4a:	d507      	bpl.n	12d5c <cbvprintf+0x3b4>
				OUTC(conv.specifier);
   12d4c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12d50:	4649      	mov	r1, r9
   12d52:	47c0      	blx	r8
   12d54:	2800      	cmp	r0, #0
   12d56:	f6ff af40 	blt.w	12bda <cbvprintf+0x232>
   12d5a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12d5c:	9e06      	ldr	r6, [sp, #24]
   12d5e:	442e      	add	r6, r5
   12d60:	1b73      	subs	r3, r6, r5
   12d62:	2b00      	cmp	r3, #0
   12d64:	dc19      	bgt.n	12d9a <cbvprintf+0x3f2>
			OUTS(bps, bpe);
   12d66:	465b      	mov	r3, fp
   12d68:	4652      	mov	r2, sl
   12d6a:	4649      	mov	r1, r9
   12d6c:	4640      	mov	r0, r8
   12d6e:	f008 fdf1 	bl	1b954 <outs>
   12d72:	2800      	cmp	r0, #0
   12d74:	f6ff af31 	blt.w	12bda <cbvprintf+0x232>
   12d78:	4405      	add	r5, r0
		while (width > 0) {
   12d7a:	442f      	add	r7, r5
   12d7c:	1b7b      	subs	r3, r7, r5
   12d7e:	2b00      	cmp	r3, #0
   12d80:	f77f ae85 	ble.w	12a8e <cbvprintf+0xe6>
			OUTC(' ');
   12d84:	4649      	mov	r1, r9
   12d86:	2020      	movs	r0, #32
   12d88:	47c0      	blx	r8
   12d8a:	2800      	cmp	r0, #0
   12d8c:	f6ff af25 	blt.w	12bda <cbvprintf+0x232>
   12d90:	3501      	adds	r5, #1
			--width;
   12d92:	e7f3      	b.n	12d7c <cbvprintf+0x3d4>
				char pad = ' ';
   12d94:	2320      	movs	r3, #32
   12d96:	443d      	add	r5, r7
   12d98:	e7b8      	b.n	12d0c <cbvprintf+0x364>
				OUTC('0');
   12d9a:	4649      	mov	r1, r9
   12d9c:	2030      	movs	r0, #48	; 0x30
   12d9e:	47c0      	blx	r8
   12da0:	2800      	cmp	r0, #0
   12da2:	f6ff af1a 	blt.w	12bda <cbvprintf+0x232>
   12da6:	3501      	adds	r5, #1
   12da8:	e7da      	b.n	12d60 <cbvprintf+0x3b8>
   12daa:	bf00      	nop
   12dac:	00020e35 	.word	0x00020e35

00012db0 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   12db0:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   12db2:	4c08      	ldr	r4, [pc, #32]	; (12dd4 <read_blvl+0x24>)
{
   12db4:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   12db6:	7824      	ldrb	r4, [r4, #0]
   12db8:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   12dbc:	2401      	movs	r4, #1
   12dbe:	9402      	str	r4, [sp, #8]
   12dc0:	f10d 0417 	add.w	r4, sp, #23
   12dc4:	9401      	str	r4, [sp, #4]
   12dc6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   12dca:	9400      	str	r4, [sp, #0]
   12dcc:	f00b fe5a 	bl	1ea84 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   12dd0:	b006      	add	sp, #24
   12dd2:	bd10      	pop	{r4, pc}
   12dd4:	20000757 	.word	0x20000757

00012dd8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   12dd8:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   12dda:	4807      	ldr	r0, [pc, #28]	; (12df8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
   12ddc:	4c07      	ldr	r4, [pc, #28]	; (12dfc <uart_console_init+0x24>)
   12dde:	f007 f95d 	bl	1a09c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   12de2:	4b07      	ldr	r3, [pc, #28]	; (12e00 <uart_console_init+0x28>)
   12de4:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   12de6:	4620      	mov	r0, r4
   12de8:	f000 ffb2 	bl	13d50 <__stdout_hook_install>
	__printk_hook_install(console_out);
   12dec:	4620      	mov	r0, r4
   12dee:	f7ff fb89 	bl	12504 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   12df2:	2000      	movs	r0, #0
   12df4:	bd10      	pop	{r4, pc}
   12df6:	bf00      	nop
   12df8:	00020e51 	.word	0x00020e51
   12dfc:	00012e05 	.word	0x00012e05
   12e00:	20002654 	.word	0x20002654

00012e04 <console_out>:
	if ('\n' == c) {
   12e04:	280a      	cmp	r0, #10
{
   12e06:	b538      	push	{r3, r4, r5, lr}
   12e08:	4d07      	ldr	r5, [pc, #28]	; (12e28 <console_out+0x24>)
   12e0a:	4604      	mov	r4, r0
	if ('\n' == c) {
   12e0c:	d104      	bne.n	12e18 <console_out+0x14>
   12e0e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   12e10:	6883      	ldr	r3, [r0, #8]
   12e12:	210d      	movs	r1, #13
   12e14:	685b      	ldr	r3, [r3, #4]
   12e16:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   12e18:	6828      	ldr	r0, [r5, #0]
   12e1a:	6883      	ldr	r3, [r0, #8]
   12e1c:	b2e1      	uxtb	r1, r4
   12e1e:	685b      	ldr	r3, [r3, #4]
   12e20:	4798      	blx	r3
}
   12e22:	4620      	mov	r0, r4
   12e24:	bd38      	pop	{r3, r4, r5, pc}
   12e26:	bf00      	nop
   12e28:	20002654 	.word	0x20002654

00012e2c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
   12e2c:	4a0e      	ldr	r2, [pc, #56]	; (12e68 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12e2e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   12e30:	1a84      	subs	r4, r0, r2
   12e32:	10a3      	asrs	r3, r4, #2
   12e34:	4c0d      	ldr	r4, [pc, #52]	; (12e6c <onoff_stop+0x40>)
   12e36:	435c      	muls	r4, r3
{
   12e38:	4605      	mov	r5, r0
   12e3a:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   12e3c:	200c      	movs	r0, #12
   12e3e:	fb00 2004 	mla	r0, r0, r4, r2
{
   12e42:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   12e44:	2140      	movs	r1, #64	; 0x40
   12e46:	4408      	add	r0, r1
   12e48:	f008 fdc1 	bl	1b9ce <set_off_state>
	if (err < 0) {
   12e4c:	1e01      	subs	r1, r0, #0
   12e4e:	db05      	blt.n	12e5c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   12e50:	4b07      	ldr	r3, [pc, #28]	; (12e70 <onoff_stop+0x44>)
   12e52:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   12e56:	6863      	ldr	r3, [r4, #4]
   12e58:	4798      	blx	r3
	return 0;
   12e5a:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   12e5c:	4628      	mov	r0, r5
   12e5e:	4633      	mov	r3, r6
}
   12e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   12e64:	4718      	bx	r3
   12e66:	bf00      	nop
   12e68:	20002668 	.word	0x20002668
   12e6c:	b6db6db7 	.word	0xb6db6db7
   12e70:	00020798 	.word	0x00020798

00012e74 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   12e78:	4e10      	ldr	r6, [pc, #64]	; (12ebc <onoff_start+0x48>)
   12e7a:	1b84      	subs	r4, r0, r6
   12e7c:	10a3      	asrs	r3, r4, #2
   12e7e:	4c10      	ldr	r4, [pc, #64]	; (12ec0 <onoff_start+0x4c>)
   12e80:	435c      	muls	r4, r3
   12e82:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   12e84:	250c      	movs	r5, #12
   12e86:	4365      	muls	r5, r4
{
   12e88:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
   12e8a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   12e8e:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
   12e90:	4430      	add	r0, r6
   12e92:	2140      	movs	r1, #64	; 0x40
   12e94:	f008 fdb4 	bl	1ba00 <set_starting_state>
	if (err < 0) {
   12e98:	1e01      	subs	r1, r0, #0
   12e9a:	db09      	blt.n	12eb0 <onoff_start+0x3c>
	subdata->cb = cb;
   12e9c:	4a09      	ldr	r2, [pc, #36]	; (12ec4 <onoff_start+0x50>)
   12e9e:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   12ea0:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   12ea4:	4b08      	ldr	r3, [pc, #32]	; (12ec8 <onoff_start+0x54>)
   12ea6:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   12eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   12eae:	4718      	bx	r3
		notify(mgr, err);
   12eb0:	4640      	mov	r0, r8
   12eb2:	463b      	mov	r3, r7
}
   12eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   12eb8:	4718      	bx	r3
   12eba:	bf00      	nop
   12ebc:	20002668 	.word	0x20002668
   12ec0:	b6db6db7 	.word	0xb6db6db7
   12ec4:	0001ba63 	.word	0x0001ba63
   12ec8:	00020798 	.word	0x00020798

00012ecc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12ecc:	2200      	movs	r2, #0
{
   12ece:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12ed0:	2101      	movs	r1, #1
{
   12ed2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12ed4:	4610      	mov	r0, r2
   12ed6:	f000 fc11 	bl	136fc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   12eda:	2000      	movs	r0, #0
   12edc:	f000 fbfe 	bl	136dc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   12ee0:	480f      	ldr	r0, [pc, #60]	; (12f20 <clk_init+0x54>)
   12ee2:	f006 ff0d 	bl	19d00 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   12ee6:	4b0f      	ldr	r3, [pc, #60]	; (12f24 <clk_init+0x58>)
   12ee8:	4298      	cmp	r0, r3
   12eea:	d115      	bne.n	12f18 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   12eec:	f00c fd9f 	bl	1fa2e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   12ef0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   12ef2:	490d      	ldr	r1, [pc, #52]	; (12f28 <clk_init+0x5c>)
   12ef4:	4630      	mov	r0, r6
   12ef6:	f008 fa2c 	bl	1b352 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   12efa:	2800      	cmp	r0, #0
   12efc:	db0b      	blt.n	12f16 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12efe:	2501      	movs	r5, #1
   12f00:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   12f02:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12f04:	4908      	ldr	r1, [pc, #32]	; (12f28 <clk_init+0x5c>)
   12f06:	f104 001c 	add.w	r0, r4, #28
   12f0a:	f008 fa22 	bl	1b352 <onoff_manager_init>
		if (err < 0) {
   12f0e:	2800      	cmp	r0, #0
   12f10:	db01      	blt.n	12f16 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12f12:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   12f14:	2000      	movs	r0, #0
}
   12f16:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   12f18:	f06f 0004 	mvn.w	r0, #4
   12f1c:	e7fb      	b.n	12f16 <clk_init+0x4a>
   12f1e:	bf00      	nop
   12f20:	00012f61 	.word	0x00012f61
   12f24:	0bad0000 	.word	0x0bad0000
   12f28:	000207a8 	.word	0x000207a8

00012f2c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   12f2c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   12f2e:	230c      	movs	r3, #12
   12f30:	4809      	ldr	r0, [pc, #36]	; (12f58 <clkstarted_handle.constprop.0+0x2c>)
   12f32:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   12f34:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   12f36:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   12f38:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   12f3c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   12f3e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   12f40:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   12f42:	4418      	add	r0, r3
   12f44:	f008 fd7a 	bl	1ba3c <set_on_state>
	if (callback) {
   12f48:	b12d      	cbz	r5, 12f56 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   12f4a:	4632      	mov	r2, r6
   12f4c:	462b      	mov	r3, r5
   12f4e:	4803      	ldr	r0, [pc, #12]	; (12f5c <clkstarted_handle.constprop.0+0x30>)
}
   12f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   12f54:	4718      	bx	r3
}
   12f56:	bd70      	pop	{r4, r5, r6, pc}
   12f58:	20002668 	.word	0x20002668
   12f5c:	2000075c 	.word	0x2000075c

00012f60 <clock_event_handler>:
	switch (event) {
   12f60:	b110      	cbz	r0, 12f68 <clock_event_handler+0x8>
   12f62:	2801      	cmp	r0, #1
   12f64:	d004      	beq.n	12f70 <clock_event_handler+0x10>
   12f66:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   12f68:	4b03      	ldr	r3, [pc, #12]	; (12f78 <clock_event_handler+0x18>)
   12f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   12f6c:	075b      	lsls	r3, r3, #29
   12f6e:	d101      	bne.n	12f74 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   12f70:	f7ff bfdc 	b.w	12f2c <clkstarted_handle.constprop.0>
}
   12f74:	4770      	bx	lr
   12f76:	bf00      	nop
   12f78:	20002668 	.word	0x20002668

00012f7c <generic_hfclk_start>:
{
   12f7c:	b508      	push	{r3, lr}
   12f7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12f82:	f3ef 8111 	mrs	r1, BASEPRI
   12f86:	f383 8811 	msr	BASEPRI, r3
   12f8a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   12f8e:	4a12      	ldr	r2, [pc, #72]	; (12fd8 <generic_hfclk_start+0x5c>)
   12f90:	6813      	ldr	r3, [r2, #0]
   12f92:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   12f96:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   12f9a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   12f9c:	d00c      	beq.n	12fb8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12fa2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12fa6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12faa:	f013 0301 	ands.w	r3, r3, #1
   12fae:	d003      	beq.n	12fb8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   12fb0:	480a      	ldr	r0, [pc, #40]	; (12fdc <generic_hfclk_start+0x60>)
   12fb2:	f008 fd43 	bl	1ba3c <set_on_state>
			already_started = true;
   12fb6:	2301      	movs	r3, #1
	__asm__ volatile(
   12fb8:	f381 8811 	msr	BASEPRI, r1
   12fbc:	f3bf 8f6f 	isb	sy
	if (already_started) {
   12fc0:	b123      	cbz	r3, 12fcc <generic_hfclk_start+0x50>
}
   12fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   12fc6:	2000      	movs	r0, #0
   12fc8:	f7ff bfb0 	b.w	12f2c <clkstarted_handle.constprop.0>
}
   12fcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12fd0:	2001      	movs	r0, #1
   12fd2:	f006 be85 	b.w	19ce0 <nrfx_clock_start>
   12fd6:	bf00      	nop
   12fd8:	200026b8 	.word	0x200026b8
   12fdc:	200026a8 	.word	0x200026a8

00012fe0 <lfclk_start>:
{
   12fe0:	b510      	push	{r4, lr}
	if (!once) {
   12fe2:	4c07      	ldr	r4, [pc, #28]	; (13000 <lfclk_start+0x20>)
   12fe4:	7823      	ldrb	r3, [r4, #0]
   12fe6:	b92b      	cbnz	r3, 12ff4 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   12fe8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   12fec:	f00c ff86 	bl	1fefc <z_impl_k_busy_wait>
		once = true;
   12ff0:	2301      	movs	r3, #1
   12ff2:	7023      	strb	r3, [r4, #0]
}
   12ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   12ff8:	2000      	movs	r0, #0
   12ffa:	f006 be71 	b.w	19ce0 <nrfx_clock_start>
   12ffe:	bf00      	nop
   13000:	2000292d 	.word	0x2000292d

00013004 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13004:	4b09      	ldr	r3, [pc, #36]	; (1302c <generic_hfclk_stop+0x28>)
   13006:	f3bf 8f5b 	dmb	ish
   1300a:	e853 2f00 	ldrex	r2, [r3]
   1300e:	f022 0102 	bic.w	r1, r2, #2
   13012:	e843 1000 	strex	r0, r1, [r3]
   13016:	2800      	cmp	r0, #0
   13018:	d1f7      	bne.n	1300a <generic_hfclk_stop+0x6>
   1301a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1301e:	07d3      	lsls	r3, r2, #31
   13020:	d402      	bmi.n	13028 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   13022:	2001      	movs	r0, #1
   13024:	f00c bcfe 	b.w	1fa24 <nrfx_clock_stop>
}
   13028:	4770      	bx	lr
   1302a:	bf00      	nop
   1302c:	200026b8 	.word	0x200026b8

00013030 <api_blocking_start>:
{
   13030:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13032:	2200      	movs	r2, #0
   13034:	2301      	movs	r3, #1
   13036:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1303a:	ab04      	add	r3, sp, #16
   1303c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13040:	4a09      	ldr	r2, [pc, #36]	; (13068 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13042:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13046:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13048:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1304c:	f008 fd2c 	bl	1baa8 <api_start>
	if (err < 0) {
   13050:	2800      	cmp	r0, #0
   13052:	db05      	blt.n	13060 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   13054:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13058:	2300      	movs	r3, #0
   1305a:	4668      	mov	r0, sp
   1305c:	f007 fd82 	bl	1ab64 <z_impl_k_sem_take>
}
   13060:	b007      	add	sp, #28
   13062:	f85d fb04 	ldr.w	pc, [sp], #4
   13066:	bf00      	nop
   13068:	0001ba75 	.word	0x0001ba75

0001306c <z_nrf_clock_control_lf_on>:
{
   1306c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13070:	493a      	ldr	r1, [pc, #232]	; (1315c <z_nrf_clock_control_lf_on+0xf0>)
   13072:	f3bf 8f5b 	dmb	ish
   13076:	4606      	mov	r6, r0
   13078:	2201      	movs	r2, #1
   1307a:	e851 3f00 	ldrex	r3, [r1]
   1307e:	e841 2000 	strex	r0, r2, [r1]
   13082:	2800      	cmp	r0, #0
   13084:	d1f9      	bne.n	1307a <z_nrf_clock_control_lf_on+0xe>
   13086:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1308a:	b933      	cbnz	r3, 1309a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1308c:	4934      	ldr	r1, [pc, #208]	; (13160 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   1308e:	4835      	ldr	r0, [pc, #212]	; (13164 <z_nrf_clock_control_lf_on+0xf8>)
   13090:	604b      	str	r3, [r1, #4]
   13092:	60cb      	str	r3, [r1, #12]
   13094:	608a      	str	r2, [r1, #8]
   13096:	f008 f96f 	bl	1b378 <onoff_request>
	switch (start_mode) {
   1309a:	1e73      	subs	r3, r6, #1
   1309c:	2b01      	cmp	r3, #1
   1309e:	d832      	bhi.n	13106 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   130a0:	2e01      	cmp	r6, #1
   130a2:	d107      	bne.n	130b4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   130a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   130a8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   130ac:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   130b0:	2b01      	cmp	r3, #1
   130b2:	d028      	beq.n	13106 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   130b4:	f00c ff1c 	bl	1fef0 <k_is_in_isr>
   130b8:	4604      	mov	r4, r0
   130ba:	b918      	cbnz	r0, 130c4 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   130bc:	4b2a      	ldr	r3, [pc, #168]	; (13168 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   130be:	781b      	ldrb	r3, [r3, #0]
   130c0:	2b00      	cmp	r3, #0
   130c2:	d144      	bne.n	1314e <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   130c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   130c8:	f3ef 8511 	mrs	r5, BASEPRI
   130cc:	f383 8811 	msr	BASEPRI, r3
   130d0:	f3bf 8f6f 	isb	sy
   130d4:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   130d6:	4f25      	ldr	r7, [pc, #148]	; (1316c <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   130d8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13170 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   130dc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 13174 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   130e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   130e4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   130e8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   130ec:	03d2      	lsls	r2, r2, #15
   130ee:	d50c      	bpl.n	1310a <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   130f0:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   130f4:	2b01      	cmp	r3, #1
   130f6:	d001      	beq.n	130fc <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   130f8:	2e01      	cmp	r6, #1
   130fa:	d106      	bne.n	1310a <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   130fc:	b30c      	cbz	r4, 13142 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   130fe:	f385 8811 	msr	BASEPRI, r5
   13102:	f3bf 8f6f 	isb	sy
}
   13106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   1310a:	b1ac      	cbz	r4, 13138 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1310c:	4628      	mov	r0, r5
   1310e:	f000 fbdd 	bl	138cc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   13112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13116:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1311a:	2b00      	cmp	r3, #0
   1311c:	d1e0      	bne.n	130e0 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1311e:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   13120:	2900      	cmp	r1, #0
   13122:	d0dd      	beq.n	130e0 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13124:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   13126:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   13128:	2301      	movs	r3, #1
   1312a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   1312e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13132:	f8c9 3000 	str.w	r3, [r9]
}
   13136:	e7d3      	b.n	130e0 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   13138:	2100      	movs	r1, #0
   1313a:	2021      	movs	r0, #33	; 0x21
   1313c:	f007 fcc6 	bl	1aacc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13140:	e7e7      	b.n	13112 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   13142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13146:	2202      	movs	r2, #2
   13148:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1314c:	e7db      	b.n	13106 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   1314e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13152:	2202      	movs	r2, #2
   13154:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   13158:	4605      	mov	r5, r0
}
   1315a:	e7bc      	b.n	130d6 <z_nrf_clock_control_lf_on+0x6a>
   1315c:	200026bc 	.word	0x200026bc
   13160:	20002658 	.word	0x20002658
   13164:	20002684 	.word	0x20002684
   13168:	20003250 	.word	0x20003250
   1316c:	40000104 	.word	0x40000104
   13170:	e000e100 	.word	0xe000e100
   13174:	40000008 	.word	0x40000008

00013178 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   13178:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1317a:	4b08      	ldr	r3, [pc, #32]	; (1319c <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1317c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13180:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   13184:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   13188:	4290      	cmp	r0, r2
   1318a:	d100      	bne.n	1318e <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   1318c:	4770      	bx	lr
   1318e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   13192:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   13194:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13198:	e7f2      	b.n	13180 <handle_next_cycle_case+0x8>
   1319a:	bf00      	nop
   1319c:	40011000 	.word	0x40011000

000131a0 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   131a0:	4b07      	ldr	r3, [pc, #28]	; (131c0 <rtc_nrf_isr+0x20>)
   131a2:	2200      	movs	r2, #0
   131a4:	601a      	str	r2, [r3, #0]
   131a6:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   131a8:	4a06      	ldr	r2, [pc, #24]	; (131c4 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   131aa:	4b07      	ldr	r3, [pc, #28]	; (131c8 <rtc_nrf_isr+0x28>)
   131ac:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   131b0:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   131b2:	1ac0      	subs	r0, r0, r3
   131b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   131b8:	4403      	add	r3, r0
   131ba:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   131bc:	f007 bf22 	b.w	1b004 <z_clock_announce>
   131c0:	40011140 	.word	0x40011140
   131c4:	200026c0 	.word	0x200026c0
   131c8:	40011000 	.word	0x40011000

000131cc <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   131cc:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   131ce:	4d10      	ldr	r5, [pc, #64]	; (13210 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   131d0:	4b10      	ldr	r3, [pc, #64]	; (13214 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   131d2:	2400      	movs	r4, #0
   131d4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   131d8:	601c      	str	r4, [r3, #0]
   131da:	681b      	ldr	r3, [r3, #0]
   131dc:	4b0e      	ldr	r3, [pc, #56]	; (13218 <z_clock_driver_init+0x4c>)
   131de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   131e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   131e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   131ea:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   131ee:	4622      	mov	r2, r4
   131f0:	2101      	movs	r1, #1
   131f2:	2011      	movs	r0, #17
   131f4:	f000 fa82 	bl	136fc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   131f8:	2011      	movs	r0, #17
   131fa:	f000 fa6f 	bl	136dc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   131fe:	4a07      	ldr	r2, [pc, #28]	; (1321c <z_clock_driver_init+0x50>)
   13200:	2301      	movs	r3, #1
   13202:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   13204:	2002      	movs	r0, #2
   13206:	602b      	str	r3, [r5, #0]
   13208:	f7ff ff30 	bl	1306c <z_nrf_clock_control_lf_on>

	return 0;
}
   1320c:	4620      	mov	r0, r4
   1320e:	bd38      	pop	{r3, r4, r5, pc}
   13210:	40011000 	.word	0x40011000
   13214:	40011140 	.word	0x40011140
   13218:	e000e100 	.word	0xe000e100
   1321c:	40011008 	.word	0x40011008

00013220 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   13220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13222:	4b2d      	ldr	r3, [pc, #180]	; (132d8 <z_clock_set_timeout+0xb8>)
   13224:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   13228:	bf08      	it	eq
   1322a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1322c:	3801      	subs	r0, #1
   1322e:	2800      	cmp	r0, #0
   13230:	dd40      	ble.n	132b4 <z_clock_set_timeout+0x94>
   13232:	4298      	cmp	r0, r3
   13234:	bfa8      	it	ge
   13236:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   13238:	4c28      	ldr	r4, [pc, #160]	; (132dc <z_clock_set_timeout+0xbc>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   1323a:	4a29      	ldr	r2, [pc, #164]	; (132e0 <z_clock_set_timeout+0xc0>)
   1323c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   13240:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13242:	4e28      	ldr	r6, [pc, #160]	; (132e4 <z_clock_set_timeout+0xc4>)
	return (a - b) & COUNTER_MAX;
   13244:	1a9b      	subs	r3, r3, r2
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   13246:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   1324a:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
		ticks = 0;
   1324e:	bf18      	it	ne
   13250:	2000      	movne	r0, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13252:	3501      	adds	r5, #1
   13254:	4428      	add	r0, r5
    p_reg->INTENCLR = mask;
   13256:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   1325a:	4d1f      	ldr	r5, [pc, #124]	; (132d8 <z_clock_set_timeout+0xb8>)
   1325c:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
   13260:	42a8      	cmp	r0, r5
   13262:	bf94      	ite	ls
   13264:	1815      	addls	r5, r2, r0
   13266:	1955      	addhi	r5, r2, r5
     return p_reg->COUNTER;
   13268:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
   1326c:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13270:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
   13272:	1a9b      	subs	r3, r3, r2
   13274:	6037      	str	r7, [r6, #0]
   13276:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1327a:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
   1327c:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1327e:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   13282:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   13286:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   1328a:	d104      	bne.n	13296 <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   1328c:	200f      	movs	r0, #15
   1328e:	f00c fe35 	bl	1fefc <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13292:	6037      	str	r7, [r6, #0]
   13294:	6833      	ldr	r3, [r6, #0]
   13296:	4b14      	ldr	r3, [pc, #80]	; (132e8 <z_clock_set_timeout+0xc8>)
   13298:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1329c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   132a0:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   132a4:	1a2b      	subs	r3, r5, r0
   132a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   132aa:	2b01      	cmp	r3, #1
   132ac:	d104      	bne.n	132b8 <z_clock_set_timeout+0x98>
		handle_next_cycle_case(t);
   132ae:	f7ff ff63 	bl	13178 <handle_next_cycle_case>
   132b2:	e00b      	b.n	132cc <z_clock_set_timeout+0xac>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   132b4:	2000      	movs	r0, #0
   132b6:	e7bf      	b.n	13238 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   132b8:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   132bc:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   132c0:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   132c4:	1a2d      	subs	r5, r5, r0
   132c6:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
   132c8:	022b      	lsls	r3, r5, #8
   132ca:	d4f0      	bmi.n	132ae <z_clock_set_timeout+0x8e>
    p_reg->INTENSET = mask;
   132cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   132d0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   132d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   132d6:	bf00      	nop
   132d8:	007fffff 	.word	0x007fffff
   132dc:	40011000 	.word	0x40011000
   132e0:	200026c0 	.word	0x200026c0
   132e4:	40011140 	.word	0x40011140
   132e8:	e000e100 	.word	0xe000e100

000132ec <z_clock_elapsed>:
	__asm__ volatile(
   132ec:	f04f 0240 	mov.w	r2, #64	; 0x40
   132f0:	f3ef 8311 	mrs	r3, BASEPRI
   132f4:	f382 8811 	msr	BASEPRI, r2
   132f8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   132fc:	4a06      	ldr	r2, [pc, #24]	; (13318 <z_clock_elapsed+0x2c>)
   132fe:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   13302:	4a06      	ldr	r2, [pc, #24]	; (1331c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   13304:	6812      	ldr	r2, [r2, #0]
   13306:	1a80      	subs	r0, r0, r2
   13308:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   1330c:	f383 8811 	msr	BASEPRI, r3
   13310:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   13314:	4770      	bx	lr
   13316:	bf00      	nop
   13318:	40011000 	.word	0x40011000
   1331c:	200026c0 	.word	0x200026c0

00013320 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
   13320:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13322:	4c11      	ldr	r4, [pc, #68]	; (13368 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   13324:	4a11      	ldr	r2, [pc, #68]	; (1336c <_DoInit+0x4c>)
   13326:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13328:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1332a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1332e:	4b10      	ldr	r3, [pc, #64]	; (13370 <_DoInit+0x50>)
   13330:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   13332:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13334:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
   13338:	4a0e      	ldr	r2, [pc, #56]	; (13374 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   1333a:	490f      	ldr	r1, [pc, #60]	; (13378 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1333c:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   1333e:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   13340:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13342:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
   13344:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   13346:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   13348:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1334a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   1334c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1334e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13350:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13352:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   13354:	f009 fca4 	bl	1cca0 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   13358:	4908      	ldr	r1, [pc, #32]	; (1337c <_DoInit+0x5c>)
   1335a:	4620      	mov	r0, r4
   1335c:	f009 fca0 	bl	1cca0 <strcpy>
  p->acID[6] = ' ';
   13360:	2320      	movs	r3, #32
   13362:	71a3      	strb	r3, [r4, #6]
}
   13364:	bd10      	pop	{r4, pc}
   13366:	bf00      	nop
   13368:	200026c4 	.word	0x200026c4
   1336c:	00020e68 	.word	0x00020e68
   13370:	2000293e 	.word	0x2000293e
   13374:	2000292e 	.word	0x2000292e
   13378:	00020e71 	.word	0x00020e71
   1337c:	00020e75 	.word	0x00020e75

00013380 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   13380:	4b01      	ldr	r3, [pc, #4]	; (13388 <uECC_get_rng+0x8>)
   13382:	6818      	ldr	r0, [r3, #0]
   13384:	4770      	bx	lr
   13386:	bf00      	nop
   13388:	20000594 	.word	0x20000594

0001338c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   1338c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1338e:	2208      	movs	r2, #8
{
   13390:	b089      	sub	sp, #36	; 0x24
   13392:	460c      	mov	r4, r1
   13394:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   13396:	f008 fd6d 	bl	1be74 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   1339a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   1339c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   1339e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   133a0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   133a2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   133a4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   133a6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   133a8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   133aa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   133ac:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   133ae:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   133b0:	2308      	movs	r3, #8
   133b2:	466a      	mov	r2, sp
   133b4:	4669      	mov	r1, sp
   133b6:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   133b8:	e9cd 7701 	strd	r7, r7, [sp, #4]
   133bc:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   133be:	f008 fc5b 	bl	1bc78 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   133c2:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   133c4:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   133c6:	466a      	mov	r2, sp
   133c8:	4631      	mov	r1, r6
   133ca:	4630      	mov	r0, r6
   133cc:	f008 fc54 	bl	1bc78 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   133d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   133d2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   133d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   133d6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   133d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   133da:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   133dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   133de:	4405      	add	r5, r0
	tmp[7] = 0;
   133e0:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   133e4:	466a      	mov	r2, sp
   133e6:	2308      	movs	r3, #8
   133e8:	4669      	mov	r1, sp
   133ea:	4668      	mov	r0, sp
   133ec:	f008 fc44 	bl	1bc78 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   133f0:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   133f2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   133f4:	2308      	movs	r3, #8
   133f6:	466a      	mov	r2, sp
   133f8:	4630      	mov	r0, r6
   133fa:	f008 fc3d 	bl	1bc78 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   133fe:	6a23      	ldr	r3, [r4, #32]
   13400:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   13402:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13404:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   13406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13408:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   1340a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1340c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1340e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13410:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13412:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13414:	2308      	movs	r3, #8
   13416:	466a      	mov	r2, sp
   13418:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   1341a:	e9cd 7704 	strd	r7, r7, [sp, #16]
   1341e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13420:	f008 fc2a 	bl	1bc78 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   13424:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13426:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   13428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   1342a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   1342c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   1342e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13430:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   13432:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   13434:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   13436:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   13438:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   1343a:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   1343e:	6a23      	ldr	r3, [r4, #32]
   13440:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13442:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13444:	2308      	movs	r3, #8
   13446:	466a      	mov	r2, sp
   13448:	4630      	mov	r0, r6
   1344a:	f008 fc15 	bl	1bc78 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   1344e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13450:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   13452:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13454:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   13456:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13458:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   1345a:	6a23      	ldr	r3, [r4, #32]
   1345c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   1345e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13460:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13462:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13464:	2308      	movs	r3, #8
   13466:	466a      	mov	r2, sp
   13468:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   1346a:	e9cd 7704 	strd	r7, r7, [sp, #16]
   1346e:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13470:	f008 fd36 	bl	1bee0 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   13474:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13476:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   13478:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1347a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   1347c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1347e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   13480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13482:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   13484:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13486:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   13488:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1348a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1348c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1348e:	2308      	movs	r3, #8
   13490:	466a      	mov	r2, sp
   13492:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   13494:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13498:	f008 fd22 	bl	1bee0 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   1349c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1349e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   134a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   134a2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   134a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   134a6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   134a8:	6a23      	ldr	r3, [r4, #32]
   134aa:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   134ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   134ae:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   134b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   134b2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   134b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   134b8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   134ba:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   134bc:	2308      	movs	r3, #8
   134be:	466a      	mov	r2, sp
   134c0:	4630      	mov	r0, r6
   134c2:	f008 fd0d 	bl	1bee0 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   134c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   134c8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   134ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   134cc:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   134d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   134d2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   134d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   134d6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   134d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   134da:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   134de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   134e0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   134e2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   134e4:	2308      	movs	r3, #8
   134e6:	466a      	mov	r2, sp
   134e8:	4630      	mov	r0, r6
   134ea:	f008 fcf9 	bl	1bee0 <uECC_vli_sub>

	if (carry < 0) {
   134ee:	1a2d      	subs	r5, r5, r0
   134f0:	d410      	bmi.n	13514 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   134f2:	4c0d      	ldr	r4, [pc, #52]	; (13528 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   134f4:	b935      	cbnz	r5, 13504 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   134f6:	2208      	movs	r2, #8
   134f8:	4631      	mov	r1, r6
   134fa:	4620      	mov	r0, r4
   134fc:	f008 fcc6 	bl	1be8c <uECC_vli_cmp_unsafe>
		while (carry || 
   13500:	2801      	cmp	r0, #1
   13502:	d00f      	beq.n	13524 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   13504:	2308      	movs	r3, #8
   13506:	4622      	mov	r2, r4
   13508:	4631      	mov	r1, r6
   1350a:	4630      	mov	r0, r6
   1350c:	f008 fce8 	bl	1bee0 <uECC_vli_sub>
   13510:	1a2d      	subs	r5, r5, r0
   13512:	e7ef      	b.n	134f4 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   13514:	4a04      	ldr	r2, [pc, #16]	; (13528 <vli_mmod_fast_secp256r1+0x19c>)
   13516:	2308      	movs	r3, #8
   13518:	4631      	mov	r1, r6
   1351a:	4630      	mov	r0, r6
   1351c:	f008 fbac 	bl	1bc78 <uECC_vli_add>
		while (carry < 0);
   13520:	182d      	adds	r5, r5, r0
   13522:	d4f8      	bmi.n	13516 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   13524:	b009      	add	sp, #36	; 0x24
   13526:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13528:	000207b8 	.word	0x000207b8

0001352c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1352c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1352e:	4e26      	ldr	r6, [pc, #152]	; (135c8 <tc_aes128_set_encrypt_key+0x9c>)
{
   13530:	4607      	mov	r7, r0
   13532:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13534:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   13536:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   13538:	ad01      	add	r5, sp, #4
   1353a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1353c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1353e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13540:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13544:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   13548:	4638      	mov	r0, r7
   1354a:	2f00      	cmp	r7, #0
   1354c:	d038      	beq.n	135c0 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1354e:	2c00      	cmp	r4, #0
   13550:	d038      	beq.n	135c4 <tc_aes128_set_encrypt_key+0x98>
   13552:	1f38      	subs	r0, r7, #4
   13554:	4621      	mov	r1, r4
   13556:	4602      	mov	r2, r0
   13558:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1355a:	784b      	ldrb	r3, [r1, #1]
   1355c:	780d      	ldrb	r5, [r1, #0]
   1355e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13560:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13564:	78cd      	ldrb	r5, [r1, #3]
   13566:	432b      	orrs	r3, r5
   13568:	788d      	ldrb	r5, [r1, #2]
   1356a:	3104      	adds	r1, #4
   1356c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13570:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13572:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   13576:	d1f0      	bne.n	1355a <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13578:	4c14      	ldr	r4, [pc, #80]	; (135cc <tc_aes128_set_encrypt_key+0xa0>)
   1357a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   1357c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1357e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13580:	d116      	bne.n	135b0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13582:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13586:	5ca5      	ldrb	r5, [r4, r2]
   13588:	0e1a      	lsrs	r2, r3, #24
   1358a:	5ca2      	ldrb	r2, [r4, r2]
   1358c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13590:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13594:	b2db      	uxtb	r3, r3
   13596:	5d65      	ldrb	r5, [r4, r5]
   13598:	5ce3      	ldrb	r3, [r4, r3]
   1359a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1359e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   135a2:	ad0c      	add	r5, sp, #48	; 0x30
   135a4:	f021 0303 	bic.w	r3, r1, #3
   135a8:	442b      	add	r3, r5
   135aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   135ae:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   135b0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   135b4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   135b6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   135b8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   135ba:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   135bc:	d1de      	bne.n	1357c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   135be:	2001      	movs	r0, #1
}
   135c0:	b00d      	add	sp, #52	; 0x34
   135c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   135c4:	4620      	mov	r0, r4
   135c6:	e7fb      	b.n	135c0 <tc_aes128_set_encrypt_key+0x94>
   135c8:	000205e4 	.word	0x000205e4
   135cc:	00020e7c 	.word	0x00020e7c

000135d0 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   135d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   135d4:	4615      	mov	r5, r2
   135d6:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   135d8:	4606      	mov	r6, r0
   135da:	2800      	cmp	r0, #0
   135dc:	d058      	beq.n	13690 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   135de:	2900      	cmp	r1, #0
   135e0:	d059      	beq.n	13696 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   135e2:	2a00      	cmp	r2, #0
   135e4:	d059      	beq.n	1369a <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   135e6:	2310      	movs	r3, #16
   135e8:	460a      	mov	r2, r1
   135ea:	4668      	mov	r0, sp
   135ec:	4619      	mov	r1, r3
   135ee:	f008 fa7f 	bl	1baf0 <_copy>
	add_round_key(state, s->words);
   135f2:	4629      	mov	r1, r5
   135f4:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   135f6:	4c2a      	ldr	r4, [pc, #168]	; (136a0 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   135f8:	f009 f984 	bl	1c904 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   135fc:	f105 0710 	add.w	r7, r5, #16
   13600:	46a1      	mov	r9, r4
   13602:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   13604:	46e8      	mov	r8, sp
{
   13606:	466a      	mov	r2, sp
   13608:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   1360a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1360c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1360e:	5c61      	ldrb	r1, [r4, r1]
   13610:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13614:	d1f9      	bne.n	1360a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   13616:	4668      	mov	r0, sp
   13618:	f009 f9b9 	bl	1c98e <shift_rows>
	mult_row_column(t, s);
   1361c:	4669      	mov	r1, sp
   1361e:	a804      	add	r0, sp, #16
   13620:	f009 f9ee 	bl	1ca00 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   13624:	a901      	add	r1, sp, #4
   13626:	a805      	add	r0, sp, #20
   13628:	f009 f9ea 	bl	1ca00 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1362c:	a902      	add	r1, sp, #8
   1362e:	a806      	add	r0, sp, #24
   13630:	f009 f9e6 	bl	1ca00 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   13634:	a903      	add	r1, sp, #12
   13636:	a807      	add	r0, sp, #28
   13638:	f009 f9e2 	bl	1ca00 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1363c:	2310      	movs	r3, #16
   1363e:	4619      	mov	r1, r3
   13640:	eb0d 0203 	add.w	r2, sp, r3
   13644:	4668      	mov	r0, sp
   13646:	f008 fa53 	bl	1baf0 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1364a:	4639      	mov	r1, r7
   1364c:	4668      	mov	r0, sp
   1364e:	3710      	adds	r7, #16
   13650:	f009 f958 	bl	1c904 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   13654:	42af      	cmp	r7, r5
   13656:	d1d5      	bne.n	13604 <tc_aes_encrypt+0x34>
   13658:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   1365a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   1365e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   13660:	f819 3003 	ldrb.w	r3, [r9, r3]
   13664:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13668:	d1f7      	bne.n	1365a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   1366a:	4668      	mov	r0, sp
   1366c:	f009 f98f 	bl	1c98e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   13670:	4629      	mov	r1, r5
   13672:	4668      	mov	r0, sp
   13674:	f009 f946 	bl	1c904 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   13678:	2310      	movs	r3, #16
   1367a:	4619      	mov	r1, r3
   1367c:	466a      	mov	r2, sp
   1367e:	4630      	mov	r0, r6
   13680:	f008 fa36 	bl	1baf0 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   13684:	4668      	mov	r0, sp
   13686:	2210      	movs	r2, #16
   13688:	4621      	mov	r1, r4
   1368a:	f008 fa3e 	bl	1bb0a <_set>

	return TC_CRYPTO_SUCCESS;
   1368e:	2001      	movs	r0, #1
}
   13690:	b009      	add	sp, #36	; 0x24
   13692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   13696:	4608      	mov	r0, r1
   13698:	e7fa      	b.n	13690 <tc_aes_encrypt+0xc0>
   1369a:	4610      	mov	r0, r2
   1369c:	e7f8      	b.n	13690 <tc_aes_encrypt+0xc0>
   1369e:	bf00      	nop
   136a0:	00020e7c 	.word	0x00020e7c

000136a4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   136a4:	4a0a      	ldr	r2, [pc, #40]	; (136d0 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   136a6:	490b      	ldr	r1, [pc, #44]	; (136d4 <arch_swap+0x30>)
	_current->arch.basepri = key;
   136a8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   136aa:	6809      	ldr	r1, [r1, #0]
   136ac:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   136b0:	4909      	ldr	r1, [pc, #36]	; (136d8 <arch_swap+0x34>)
	_current->arch.basepri = key;
   136b2:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   136b4:	684b      	ldr	r3, [r1, #4]
   136b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   136ba:	604b      	str	r3, [r1, #4]
   136bc:	2300      	movs	r3, #0
   136be:	f383 8811 	msr	BASEPRI, r3
   136c2:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   136c6:	6893      	ldr	r3, [r2, #8]
}
   136c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   136cc:	4770      	bx	lr
   136ce:	bf00      	nop
   136d0:	200028cc 	.word	0x200028cc
   136d4:	00020d40 	.word	0x00020d40
   136d8:	e000ed00 	.word	0xe000ed00

000136dc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   136dc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   136de:	2b00      	cmp	r3, #0
   136e0:	db08      	blt.n	136f4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   136e2:	2201      	movs	r2, #1
   136e4:	f000 001f 	and.w	r0, r0, #31
   136e8:	fa02 f000 	lsl.w	r0, r2, r0
   136ec:	095b      	lsrs	r3, r3, #5
   136ee:	4a02      	ldr	r2, [pc, #8]	; (136f8 <arch_irq_enable+0x1c>)
   136f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   136f4:	4770      	bx	lr
   136f6:	bf00      	nop
   136f8:	e000e100 	.word	0xe000e100

000136fc <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (flags & IRQ_ZERO_LATENCY) {
   136fc:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   136fe:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   13700:	bf54      	ite	pl
   13702:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13704:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13706:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13708:	bfac      	ite	ge
   1370a:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1370e:	4a07      	ldrlt	r2, [pc, #28]	; (1372c <z_arm_irq_priority_set+0x30>)
   13710:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13714:	bfac      	ite	ge
   13716:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1371a:	f000 000f 	andlt.w	r0, r0, #15
   1371e:	b2db      	uxtb	r3, r3
   13720:	bfb4      	ite	lt
   13722:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13724:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   13728:	4770      	bx	lr
   1372a:	bf00      	nop
   1372c:	e000ed14 	.word	0xe000ed14

00013730 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   13730:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13732:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13734:	4b04      	ldr	r3, [pc, #16]	; (13748 <_arch_isr_direct_pm+0x18>)
   13736:	6a58      	ldr	r0, [r3, #36]	; 0x24
   13738:	b118      	cbz	r0, 13742 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1373a:	2200      	movs	r2, #0
   1373c:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
   1373e:	f00c f997 	bl	1fa70 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13742:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13744:	bd08      	pop	{r3, pc}
   13746:	bf00      	nop
   13748:	200028cc 	.word	0x200028cc

0001374c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1374c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13750:	9b00      	ldr	r3, [sp, #0]
   13752:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13756:	490a      	ldr	r1, [pc, #40]	; (13780 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13758:	9b01      	ldr	r3, [sp, #4]
   1375a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1375e:	9b02      	ldr	r3, [sp, #8]
   13760:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13764:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1376c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13770:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13774:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13776:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   13778:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   1377a:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1377c:	4770      	bx	lr
   1377e:	bf00      	nop
   13780:	0001b40b 	.word	0x0001b40b

00013784 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13784:	4a0b      	ldr	r2, [pc, #44]	; (137b4 <z_check_thread_stack_fail+0x30>)
{
   13786:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   13788:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
   1378a:	b190      	cbz	r0, 137b2 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1378c:	f113 0f16 	cmn.w	r3, #22
   13790:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   13792:	d005      	beq.n	137a0 <z_check_thread_stack_fail+0x1c>
   13794:	f1a0 0220 	sub.w	r2, r0, #32
   13798:	429a      	cmp	r2, r3
   1379a:	d806      	bhi.n	137aa <z_check_thread_stack_fail+0x26>
   1379c:	4283      	cmp	r3, r0
   1379e:	d204      	bcs.n	137aa <z_check_thread_stack_fail+0x26>
   137a0:	4281      	cmp	r1, r0
   137a2:	bf2c      	ite	cs
   137a4:	2100      	movcs	r1, #0
   137a6:	2101      	movcc	r1, #1
   137a8:	e000      	b.n	137ac <z_check_thread_stack_fail+0x28>
   137aa:	2100      	movs	r1, #0
   137ac:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   137ae:	bf08      	it	eq
   137b0:	2000      	moveq	r0, #0
}
   137b2:	4770      	bx	lr
   137b4:	200028cc 	.word	0x200028cc

000137b8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   137b8:	b508      	push	{r3, lr}
   137ba:	4604      	mov	r4, r0
   137bc:	460e      	mov	r6, r1
   137be:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
   137c0:	f000 f9f0 	bl	13ba4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   137c4:	4b08      	ldr	r3, [pc, #32]	; (137e8 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   137c6:	4620      	mov	r0, r4
	_current = main_thread;
   137c8:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
   137ca:	f000 fa07 	bl	13bdc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   137ce:	4628      	mov	r0, r5
   137d0:	f386 8809 	msr	PSP, r6
   137d4:	2100      	movs	r1, #0
   137d6:	b663      	cpsie	if
   137d8:	f381 8811 	msr	BASEPRI, r1
   137dc:	f3bf 8f6f 	isb	sy
   137e0:	2200      	movs	r2, #0
   137e2:	2300      	movs	r3, #0
   137e4:	f007 fe11 	bl	1b40a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   137e8:	200028cc 	.word	0x200028cc

000137ec <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   137ec:	4a0e      	ldr	r2, [pc, #56]	; (13828 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   137ee:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   137f0:	4b0e      	ldr	r3, [pc, #56]	; (1382c <z_arm_prep_c+0x40>)
   137f2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   137f6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   137f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   137fc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13800:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13804:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1380c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   13810:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   13814:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13818:	f006 fca4 	bl	1a164 <z_bss_zero>
	z_data_copy();
   1381c:	f006 fcac 	bl	1a178 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13820:	f000 f992 	bl	13b48 <z_arm_interrupt_init>
	z_cstart();
   13824:	f006 fce6 	bl	1a1f4 <z_cstart>
   13828:	00000000 	.word	0x00000000
   1382c:	e000ed00 	.word	0xe000ed00

00013830 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13830:	4912      	ldr	r1, [pc, #72]	; (1387c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13832:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13834:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   13838:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1383a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1383e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13842:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13844:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13848:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1384c:	4f0c      	ldr	r7, [pc, #48]	; (13880 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1384e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13852:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   13854:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13856:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13858:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
   1385a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1385c:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1385e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13862:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13864:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13866:	f000 f9b9 	bl	13bdc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1386a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1386e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   13872:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13876:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1387a:	4770      	bx	lr
    ldr r1, =_kernel
   1387c:	200028cc 	.word	0x200028cc
    ldr v4, =_SCS_ICSR
   13880:	e000ed04 	.word	0xe000ed04

00013884 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   13884:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13888:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1388a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1388e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13892:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13894:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13898:	2902      	cmp	r1, #2
    beq _oops
   1389a:	d0ff      	beq.n	1389c <_oops>

0001389c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1389c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1389e:	f009 f9f4 	bl	1cc8a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   138a2:	bd01      	pop	{r0, pc}

000138a4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   138a4:	4901      	ldr	r1, [pc, #4]	; (138ac <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   138a6:	2210      	movs	r2, #16
	str	r2, [r1]
   138a8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   138aa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   138ac:	e000ed10 	.word	0xe000ed10

000138b0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   138b0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   138b2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   138b4:	f380 8811 	msr	BASEPRI, r0
	isb
   138b8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   138bc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   138c0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   138c2:	b662      	cpsie	i
	isb
   138c4:	f3bf 8f6f 	isb	sy

	bx	lr
   138c8:	4770      	bx	lr
   138ca:	bf00      	nop

000138cc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   138cc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   138ce:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   138d0:	f381 8811 	msr	BASEPRI, r1

	wfe
   138d4:	bf20      	wfe

	msr	BASEPRI, r0
   138d6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   138da:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   138dc:	4770      	bx	lr
   138de:	bf00      	nop

000138e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   138e0:	bf30      	wfi
    b z_SysNmiOnReset
   138e2:	f7ff bffd 	b.w	138e0 <z_SysNmiOnReset>
   138e6:	bf00      	nop

000138e8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   138e8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   138ea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   138ec:	4a0b      	ldr	r2, [pc, #44]	; (1391c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   138ee:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   138f0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   138f2:	bf1e      	ittt	ne
	movne	r1, #0
   138f4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   138f6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   138f8:	f00c f8ba 	blne	1fa70 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   138fc:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   138fe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13902:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13906:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1390a:	4905      	ldr	r1, [pc, #20]	; (13920 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1390c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1390e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13910:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13912:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13916:	4903      	ldr	r1, [pc, #12]	; (13924 <_isr_wrapper+0x3c>)
	bx r1
   13918:	4708      	bx	r1
   1391a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1391c:	200028cc 	.word	0x200028cc
	ldr r1, =_sw_isr_table
   13920:	0002044c 	.word	0x0002044c
	ldr r1, =z_arm_int_exit
   13924:	0001396d 	.word	0x0001396d

00013928 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   13928:	f009 fa38 	bl	1cd9c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1392c:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1392e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13932:	4808      	ldr	r0, [pc, #32]	; (13954 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13934:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13938:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1393a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1393e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13942:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13944:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13946:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1394a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1394e:	f7ff ff4d 	bl	137ec <z_arm_prep_c>
   13952:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   13954:	20005ae0 	.word	0x20005ae0

00013958 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13958:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1395c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13960:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13962:	4672      	mov	r2, lr
	bl z_arm_fault
   13964:	f000 f872 	bl	13a4c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13968:	bd01      	pop	{r0, pc}
   1396a:	bf00      	nop

0001396c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1396c:	4b04      	ldr	r3, [pc, #16]	; (13980 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1396e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13970:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   13972:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13974:	d003      	beq.n	1397e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13976:	4903      	ldr	r1, [pc, #12]	; (13984 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1397c:	600a      	str	r2, [r1, #0]

0001397e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1397e:	4770      	bx	lr
	ldr r3, =_kernel
   13980:	200028cc 	.word	0x200028cc
	ldr r1, =_SCS_ICSR
   13984:	e000ed04 	.word	0xe000ed04

00013988 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   13988:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1398a:	4b17      	ldr	r3, [pc, #92]	; (139e8 <mem_manage_fault+0x60>)
{
   1398c:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1398e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   13994:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13996:	0790      	lsls	r0, r2, #30
   13998:	d516      	bpl.n	139c8 <mem_manage_fault+0x40>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   1399a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1399c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1399e:	0612      	lsls	r2, r2, #24
   139a0:	d504      	bpl.n	139ac <mem_manage_fault+0x24>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   139a2:	b119      	cbz	r1, 139ac <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   139a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   139a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   139aa:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   139ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   139ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   139b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   139b2:	06d2      	lsls	r2, r2, #27
   139b4:	d40b      	bmi.n	139ce <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   139b6:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   139b8:	4a0b      	ldr	r2, [pc, #44]	; (139e8 <mem_manage_fault+0x60>)
   139ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
   139bc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   139c0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   139c2:	2300      	movs	r3, #0
   139c4:	7023      	strb	r3, [r4, #0]

	return reason;
}
   139c6:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   139c8:	f06f 0015 	mvn.w	r0, #21
   139cc:	e7ee      	b.n	139ac <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   139ce:	685b      	ldr	r3, [r3, #4]
   139d0:	051b      	lsls	r3, r3, #20
   139d2:	d5f0      	bpl.n	139b6 <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   139d4:	4629      	mov	r1, r5
   139d6:	f7ff fed5 	bl	13784 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   139da:	2800      	cmp	r0, #0
   139dc:	d0eb      	beq.n	139b6 <mem_manage_fault+0x2e>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   139de:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   139e2:	2002      	movs	r0, #2
   139e4:	e7e8      	b.n	139b8 <mem_manage_fault+0x30>
   139e6:	bf00      	nop
   139e8:	e000ed00 	.word	0xe000ed00

000139ec <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   139ec:	4b0d      	ldr	r3, [pc, #52]	; (13a24 <bus_fault.isra.0+0x38>)
   139ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   139f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   139f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   139f4:	0592      	lsls	r2, r2, #22
   139f6:	d508      	bpl.n	13a0a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   139f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   139fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   139fc:	0412      	lsls	r2, r2, #16
   139fe:	d504      	bpl.n	13a0a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   13a00:	b118      	cbz	r0, 13a0a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   13a08:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13a0a:	4b06      	ldr	r3, [pc, #24]	; (13a24 <bus_fault.isra.0+0x38>)
   13a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13a10:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13a12:	bf58      	it	pl
   13a14:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
   13a18:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13a1a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   13a1e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   13a20:	7008      	strb	r0, [r1, #0]

	return reason;
}
   13a22:	4770      	bx	lr
   13a24:	e000ed00 	.word	0xe000ed00

00013a28 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13a28:	4b07      	ldr	r3, [pc, #28]	; (13a48 <usage_fault.isra.0+0x20>)
   13a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13a32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13a36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13a38:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   13a3c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   13a40:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   13a42:	2000      	movs	r0, #0
   13a44:	4770      	bx	lr
   13a46:	bf00      	nop
   13a48:	e000ed00 	.word	0xe000ed00

00013a4c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13a4c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13a4e:	4b37      	ldr	r3, [pc, #220]	; (13b2c <z_arm_fault+0xe0>)
   13a50:	685b      	ldr	r3, [r3, #4]
{
   13a52:	b08a      	sub	sp, #40	; 0x28
   13a54:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13a5a:	2500      	movs	r5, #0
   13a5c:	f385 8811 	msr	BASEPRI, r5
   13a60:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13a64:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   13a68:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   13a6c:	d111      	bne.n	13a92 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13a6e:	f002 010c 	and.w	r1, r2, #12
   13a72:	2908      	cmp	r1, #8
   13a74:	d00d      	beq.n	13a92 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13a76:	0711      	lsls	r1, r2, #28
   13a78:	d401      	bmi.n	13a7e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   13a7a:	4606      	mov	r6, r0
			*nested_exc = true;
   13a7c:	2501      	movs	r5, #1
	*recoverable = false;
   13a7e:	2200      	movs	r2, #0
   13a80:	3b03      	subs	r3, #3
   13a82:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   13a86:	2b03      	cmp	r3, #3
   13a88:	d848      	bhi.n	13b1c <z_arm_fault+0xd0>
   13a8a:	e8df f003 	tbb	[pc, r3]
   13a8e:	3f04      	.short	0x3f04
   13a90:	3c43      	.short	0x3c43
		return NULL;
   13a92:	462e      	mov	r6, r5
   13a94:	e7f3      	b.n	13a7e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13a96:	4b25      	ldr	r3, [pc, #148]	; (13b2c <z_arm_fault+0xe0>)
   13a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13a9a:	0792      	lsls	r2, r2, #30
   13a9c:	d43e      	bmi.n	13b1c <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13a9e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   13aa0:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   13aa4:	d009      	beq.n	13aba <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
   13aa6:	3328      	adds	r3, #40	; 0x28
   13aa8:	781b      	ldrb	r3, [r3, #0]
   13aaa:	b1f3      	cbz	r3, 13aea <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
   13aac:	f10d 0207 	add.w	r2, sp, #7
   13ab0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   13ab2:	4630      	mov	r0, r6
   13ab4:	f7ff ff68 	bl	13988 <mem_manage_fault>
		reason = usage_fault(esf);
   13ab8:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13aba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13abe:	b993      	cbnz	r3, 13ae6 <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13ac0:	2220      	movs	r2, #32
   13ac2:	4631      	mov	r1, r6
   13ac4:	a802      	add	r0, sp, #8
   13ac6:	f009 f918 	bl	1ccfa <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13acc:	b345      	cbz	r5, 13b20 <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13ace:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13ad2:	b922      	cbnz	r2, 13ade <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13ad4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13ad8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13adc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13ade:	a902      	add	r1, sp, #8
   13ae0:	4620      	mov	r0, r4
   13ae2:	f009 f8d0 	bl	1cc86 <z_arm_fatal_error>
}
   13ae6:	b00a      	add	sp, #40	; 0x28
   13ae8:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   13aea:	4b11      	ldr	r3, [pc, #68]	; (13b30 <z_arm_fault+0xe4>)
   13aec:	781b      	ldrb	r3, [r3, #0]
   13aee:	b12b      	cbz	r3, 13afc <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
   13af0:	f10d 0107 	add.w	r1, sp, #7
   13af4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   13af6:	f7ff ff79 	bl	139ec <bus_fault.isra.0>
   13afa:	e7dd      	b.n	13ab8 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
   13afc:	4b0d      	ldr	r3, [pc, #52]	; (13b34 <z_arm_fault+0xe8>)
   13afe:	8818      	ldrh	r0, [r3, #0]
   13b00:	b284      	uxth	r4, r0
   13b02:	2c00      	cmp	r4, #0
   13b04:	d0d9      	beq.n	13aba <z_arm_fault+0x6e>
		reason = usage_fault(esf);
   13b06:	f7ff ff8f 	bl	13a28 <usage_fault.isra.0>
   13b0a:	e7d5      	b.n	13ab8 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
   13b0c:	f10d 0207 	add.w	r2, sp, #7
   13b10:	2100      	movs	r1, #0
   13b12:	e7ce      	b.n	13ab2 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
   13b14:	f10d 0107 	add.w	r1, sp, #7
   13b18:	2000      	movs	r0, #0
   13b1a:	e7ec      	b.n	13af6 <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13b1c:	2400      	movs	r4, #0
   13b1e:	e7cc      	b.n	13aba <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13b20:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13b24:	f023 0301 	bic.w	r3, r3, #1
   13b28:	e7d8      	b.n	13adc <z_arm_fault+0x90>
   13b2a:	bf00      	nop
   13b2c:	e000ed00 	.word	0xe000ed00
   13b30:	e000ed29 	.word	0xe000ed29
   13b34:	e000ed2a 	.word	0xe000ed2a

00013b38 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13b38:	4a02      	ldr	r2, [pc, #8]	; (13b44 <z_arm_fault_init+0xc>)
   13b3a:	6953      	ldr	r3, [r2, #20]
   13b3c:	f043 0310 	orr.w	r3, r3, #16
   13b40:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13b42:	4770      	bx	lr
   13b44:	e000ed00 	.word	0xe000ed00

00013b48 <z_arm_interrupt_init>:
   13b48:	4804      	ldr	r0, [pc, #16]	; (13b5c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13b4a:	2300      	movs	r3, #0
   13b4c:	2140      	movs	r1, #64	; 0x40
   13b4e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13b50:	3301      	adds	r3, #1
   13b52:	2b27      	cmp	r3, #39	; 0x27
   13b54:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13b58:	d1f9      	bne.n	13b4e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13b5a:	4770      	bx	lr
   13b5c:	e000e100 	.word	0xe000e100

00013b60 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13b60:	b508      	push	{r3, lr}
	if (_current == thread) {
   13b62:	4b0e      	ldr	r3, [pc, #56]	; (13b9c <z_impl_k_thread_abort+0x3c>)
   13b64:	689b      	ldr	r3, [r3, #8]
   13b66:	4283      	cmp	r3, r0
   13b68:	d107      	bne.n	13b7a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13b6a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13b6e:	b193      	cbz	r3, 13b96 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13b70:	4a0b      	ldr	r2, [pc, #44]	; (13ba0 <z_impl_k_thread_abort+0x40>)
   13b72:	6853      	ldr	r3, [r2, #4]
   13b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13b78:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   13b7a:	f006 fe49 	bl	1a810 <z_thread_single_abort>
	__asm__ volatile(
   13b7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13b82:	f3ef 8011 	mrs	r0, BASEPRI
   13b86:	f383 8811 	msr	BASEPRI, r3
   13b8a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   13b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   13b92:	f00c b8cb 	b.w	1fd2c <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   13b96:	f007 f8e3 	bl	1ad60 <z_self_abort>
   13b9a:	bf00      	nop
   13b9c:	200028cc 	.word	0x200028cc
   13ba0:	e000ed00 	.word	0xe000ed00

00013ba4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   13ba6:	4b08      	ldr	r3, [pc, #32]	; (13bc8 <z_arm_configure_static_mpu_regions+0x24>)
   13ba8:	9301      	str	r3, [sp, #4]
   13baa:	4b08      	ldr	r3, [pc, #32]	; (13bcc <z_arm_configure_static_mpu_regions+0x28>)
   13bac:	9302      	str	r3, [sp, #8]
   13bae:	4b08      	ldr	r3, [pc, #32]	; (13bd0 <z_arm_configure_static_mpu_regions+0x2c>)
   13bb0:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
   13bb2:	ab01      	add	r3, sp, #4
   13bb4:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13bb6:	4a07      	ldr	r2, [pc, #28]	; (13bd4 <z_arm_configure_static_mpu_regions+0x30>)
   13bb8:	4b07      	ldr	r3, [pc, #28]	; (13bd8 <z_arm_configure_static_mpu_regions+0x34>)
   13bba:	2101      	movs	r1, #1
   13bbc:	4668      	mov	r0, sp
   13bbe:	f000 f8a7 	bl	13d10 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13bc2:	b005      	add	sp, #20
   13bc4:	f85d fb04 	ldr.w	pc, [sp], #4
   13bc8:	20000000 	.word	0x20000000
   13bcc:	00000000 	.word	0x00000000
   13bd0:	060b0000 	.word	0x060b0000
   13bd4:	20000000 	.word	0x20000000
   13bd8:	20010000 	.word	0x20010000

00013bdc <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   13bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT((uint32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (uint32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
   13bde:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   13be0:	3b20      	subs	r3, #32
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
   13be2:	9301      	str	r3, [sp, #4]
   13be4:	4b06      	ldr	r3, [pc, #24]	; (13c00 <z_arm_configure_dynamic_mpu_regions+0x24>)
   13be6:	2220      	movs	r2, #32
   13be8:	e9cd 2302 	strd	r2, r3, [sp, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   13bec:	2101      	movs	r1, #1
	dynamic_regions[region_num] = &guard;
   13bee:	ab01      	add	r3, sp, #4
	arm_core_mpu_configure_dynamic_mpu_regions(
   13bf0:	4668      	mov	r0, sp
	dynamic_regions[region_num] = &guard;
   13bf2:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
   13bf4:	f000 f896 	bl	13d24 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   13bf8:	b005      	add	sp, #20
   13bfa:	f85d fb04 	ldr.w	pc, [sp], #4
   13bfe:	bf00      	nop
   13c00:	150b0000 	.word	0x150b0000

00013c04 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   13c04:	f8df c084 	ldr.w	ip, [pc, #132]	; 13c8c <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c0a:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13c0c:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
   13c0e:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
   13c10:	428f      	cmp	r7, r1
   13c12:	db00      	blt.n	13c16 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   13c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
   13c16:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
   13c1a:	f8de 4004 	ldr.w	r4, [lr, #4]
   13c1e:	b394      	cbz	r4, 13c86 <mpu_configure_regions+0x82>
		if (do_sanity_check &&
   13c20:	b143      	cbz	r3, 13c34 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   13c22:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13c24:	422c      	tst	r4, r5
   13c26:	d119      	bne.n	13c5c <mpu_configure_regions+0x58>
		&&
   13c28:	2c1f      	cmp	r4, #31
   13c2a:	d917      	bls.n	13c5c <mpu_configure_regions+0x58>
		((part->start & (part->size - 1U)) == 0U);
   13c2c:	f8de 2000 	ldr.w	r2, [lr]
		&&
   13c30:	4215      	tst	r5, r2
   13c32:	d113      	bne.n	13c5c <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   13c34:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
   13c36:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
   13c38:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   13c3c:	f8de 0008 	ldr.w	r0, [lr, #8]
   13c40:	d90f      	bls.n	13c62 <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   13c42:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13c46:	d80e      	bhi.n	13c66 <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   13c48:	3c01      	subs	r4, #1
   13c4a:	fab4 f484 	clz	r4, r4
   13c4e:	f1c4 041f 	rsb	r4, r4, #31
   13c52:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13c54:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13c56:	ea44 0400 	orr.w	r4, r4, r0
   13c5a:	d906      	bls.n	13c6a <mpu_configure_regions+0x66>
			return -EINVAL;
   13c5c:	f06f 0015 	mvn.w	r0, #21
   13c60:	e7d8      	b.n	13c14 <mpu_configure_regions+0x10>
		return REGION_32B;
   13c62:	2408      	movs	r4, #8
   13c64:	e7f6      	b.n	13c54 <mpu_configure_regions+0x50>
		return REGION_4G;
   13c66:	243e      	movs	r4, #62	; 0x3e
   13c68:	e7f4      	b.n	13c54 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13c6a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   13c6e:	4315      	orrs	r5, r2
   13c70:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13c74:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   13c78:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
   13c7c:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13c7e:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13c82:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
   13c86:	3701      	adds	r7, #1
   13c88:	e7c2      	b.n	13c10 <mpu_configure_regions+0xc>
   13c8a:	bf00      	nop
   13c8c:	e000ed90 	.word	0xe000ed90

00013c90 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13c90:	4b03      	ldr	r3, [pc, #12]	; (13ca0 <arm_core_mpu_enable+0x10>)
   13c92:	2205      	movs	r2, #5
   13c94:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   13c96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13c9a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13c9e:	4770      	bx	lr
   13ca0:	e000ed90 	.word	0xe000ed90

00013ca4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   13ca4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13ca8:	4b01      	ldr	r3, [pc, #4]	; (13cb0 <arm_core_mpu_disable+0xc>)
   13caa:	2200      	movs	r2, #0
   13cac:	605a      	str	r2, [r3, #4]
}
   13cae:	4770      	bx	lr
   13cb0:	e000ed90 	.word	0xe000ed90

00013cb4 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13cb4:	4913      	ldr	r1, [pc, #76]	; (13d04 <arm_mpu_init+0x50>)
   13cb6:	6808      	ldr	r0, [r1, #0]
   13cb8:	2808      	cmp	r0, #8
{
   13cba:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   13cbc:	d81e      	bhi.n	13cfc <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13cbe:	f7ff fff1 	bl	13ca4 <arm_core_mpu_disable>
	MPU->RNR = index;
   13cc2:	4c11      	ldr	r4, [pc, #68]	; (13d08 <arm_mpu_init+0x54>)
   13cc4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13cc6:	2200      	movs	r2, #0
   13cc8:	4290      	cmp	r0, r2
   13cca:	f101 010c 	add.w	r1, r1, #12
   13cce:	d105      	bne.n	13cdc <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13cd0:	4b0e      	ldr	r3, [pc, #56]	; (13d0c <arm_mpu_init+0x58>)
   13cd2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   13cd4:	f7ff ffdc 	bl	13c90 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   13cd8:	2000      	movs	r0, #0
}
   13cda:	bd10      	pop	{r4, pc}
   13cdc:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13cde:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   13ce2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13ce6:	4313      	orrs	r3, r2
   13ce8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13cec:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13cf2:	f043 0301 	orr.w	r3, r3, #1
   13cf6:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13cf8:	3201      	adds	r2, #1
   13cfa:	e7e5      	b.n	13cc8 <arm_mpu_init+0x14>
		return -1;
   13cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13d00:	e7eb      	b.n	13cda <arm_mpu_init+0x26>
   13d02:	bf00      	nop
   13d04:	00020864 	.word	0x00020864
   13d08:	e000ed90 	.word	0xe000ed90
   13d0c:	20002d3e 	.word	0x20002d3e

00013d10 <arm_core_mpu_configure_static_mpu_regions>:
{
   13d10:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13d12:	4c03      	ldr	r4, [pc, #12]	; (13d20 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13d14:	2301      	movs	r3, #1
   13d16:	7822      	ldrb	r2, [r4, #0]
   13d18:	f7ff ff74 	bl	13c04 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13d1c:	7020      	strb	r0, [r4, #0]
}
   13d1e:	bd10      	pop	{r4, pc}
   13d20:	20002d3e 	.word	0x20002d3e

00013d24 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   13d24:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13d26:	4a08      	ldr	r2, [pc, #32]	; (13d48 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   13d28:	2300      	movs	r3, #0
   13d2a:	7812      	ldrb	r2, [r2, #0]
   13d2c:	f7ff ff6a 	bl	13c04 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13d30:	f110 0f16 	cmn.w	r0, #22
   13d34:	d003      	beq.n	13d3e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   13d36:	4b05      	ldr	r3, [pc, #20]	; (13d4c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   13d38:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13d3a:	2807      	cmp	r0, #7
   13d3c:	dd00      	ble.n	13d40 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
   13d3e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   13d40:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   13d42:	611a      	str	r2, [r3, #16]
   13d44:	3001      	adds	r0, #1
   13d46:	e7f8      	b.n	13d3a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13d48:	20002d3e 	.word	0x20002d3e
   13d4c:	e000ed90 	.word	0xe000ed90

00013d50 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13d50:	4b01      	ldr	r3, [pc, #4]	; (13d58 <__stdout_hook_install+0x8>)
   13d52:	6018      	str	r0, [r3, #0]
}
   13d54:	4770      	bx	lr
   13d56:	bf00      	nop
   13d58:	20000598 	.word	0x20000598

00013d5c <nordicsemi_nrf52_init>:
   13d5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13d60:	f3ef 8211 	mrs	r2, BASEPRI
   13d64:	f383 8811 	msr	BASEPRI, r3
   13d68:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13d6c:	4906      	ldr	r1, [pc, #24]	; (13d88 <nordicsemi_nrf52_init+0x2c>)
   13d6e:	2301      	movs	r3, #1
   13d70:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13d74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13d78:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   13d7c:	f382 8811 	msr	BASEPRI, r2
   13d80:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13d84:	2000      	movs	r0, #0
   13d86:	4770      	bx	lr
   13d88:	4001e000 	.word	0x4001e000

00013d8c <sys_arch_reboot>:
    *p_gpregret = val;
   13d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13d90:	b2c0      	uxtb	r0, r0
   13d92:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13d96:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13d9a:	4905      	ldr	r1, [pc, #20]	; (13db0 <sys_arch_reboot+0x24>)
   13d9c:	4b05      	ldr	r3, [pc, #20]	; (13db4 <sys_arch_reboot+0x28>)
   13d9e:	68ca      	ldr	r2, [r1, #12]
   13da0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13da4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13da6:	60cb      	str	r3, [r1, #12]
   13da8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13dac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13dae:	e7fd      	b.n	13dac <sys_arch_reboot+0x20>
   13db0:	e000ed00 	.word	0xe000ed00
   13db4:	05fa0004 	.word	0x05fa0004

00013db8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13db8:	b120      	cbz	r0, 13dc4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13dba:	4b03      	ldr	r3, [pc, #12]	; (13dc8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13dbc:	0180      	lsls	r0, r0, #6
   13dbe:	f043 0301 	orr.w	r3, r3, #1
   13dc2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13dc4:	4770      	bx	lr
   13dc6:	bf00      	nop
   13dc8:	00020660 	.word	0x00020660

00013dcc <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   13dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13dd0:	4f5b      	ldr	r7, [pc, #364]	; (13f40 <ecc_thread+0x174>)
	return z_impl_k_sem_take(sem, timeout);
   13dd2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 13f58 <ecc_thread+0x18c>
   13dd6:	463e      	mov	r6, r7
   13dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13de0:	4640      	mov	r0, r8
   13de2:	f006 febf 	bl	1ab64 <z_impl_k_sem_take>
   13de6:	f3bf 8f5b 	dmb	ish
   13dea:	683c      	ldr	r4, [r7, #0]
   13dec:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   13df0:	f014 0401 	ands.w	r4, r4, #1
   13df4:	d055      	beq.n	13ea2 <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
   13df6:	f8df 915c 	ldr.w	r9, [pc, #348]	; 13f54 <ecc_thread+0x188>
   13dfa:	4c52      	ldr	r4, [pc, #328]	; (13f44 <ecc_thread+0x178>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
   13dfc:	4d52      	ldr	r5, [pc, #328]	; (13f48 <ecc_thread+0x17c>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
   13dfe:	4853      	ldr	r0, [pc, #332]	; (13f4c <ecc_thread+0x180>)
   13e00:	464a      	mov	r2, r9
   13e02:	4621      	mov	r1, r4
   13e04:	f007 fe8c 	bl	1bb20 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   13e08:	2800      	cmp	r0, #0
   13e0a:	d03e      	beq.n	13e8a <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
   13e0c:	2220      	movs	r2, #32
   13e0e:	4629      	mov	r1, r5
   13e10:	4620      	mov	r0, r4
   13e12:	f008 ff62 	bl	1ccda <memcmp>
   13e16:	2800      	cmp	r0, #0
   13e18:	d0f1      	beq.n	13dfe <ecc_thread+0x32>
	return 0;
   13e1a:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   13e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e26:	2001      	movs	r0, #1
   13e28:	f001 fc96 	bl	15758 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   13e2c:	f100 0508 	add.w	r5, r0, #8
   13e30:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   13e32:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   13e34:	4628      	mov	r0, r5
   13e36:	f00b fc37 	bl	1f6a8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   13e3a:	233e      	movs	r3, #62	; 0x3e
   13e3c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   13e3e:	2342      	movs	r3, #66	; 0x42
   13e40:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
   13e42:	2101      	movs	r1, #1
   13e44:	4628      	mov	r0, r5
   13e46:	f00b fc2f 	bl	1f6a8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   13e4a:	2308      	movs	r3, #8
   13e4c:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
   13e4e:	2141      	movs	r1, #65	; 0x41
   13e50:	4628      	mov	r0, r5
   13e52:	f00b fc29 	bl	1f6a8 <net_buf_simple_add>
   13e56:	4605      	mov	r5, r0
	evt->status = status;
   13e58:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
   13e5c:	f1b9 0f00 	cmp.w	r9, #0
   13e60:	d016      	beq.n	13e90 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   13e62:	2240      	movs	r2, #64	; 0x40
   13e64:	2100      	movs	r1, #0
   13e66:	f008 ff73 	bl	1cd50 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13e6a:	f3bf 8f5b 	dmb	ish
   13e6e:	e856 3f00 	ldrex	r3, [r6]
   13e72:	f023 0301 	bic.w	r3, r3, #1
   13e76:	e846 3200 	strex	r2, r3, [r6]
   13e7a:	2a00      	cmp	r2, #0
   13e7c:	d1f7      	bne.n	13e6e <ecc_thread+0xa2>
   13e7e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   13e82:	4620      	mov	r0, r4
	bt_recv(buf);
   13e84:	f001 f874 	bl	14f70 <bt_recv>
	while (true) {
   13e88:	e7a6      	b.n	13dd8 <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
   13e8a:	f04f 091f 	mov.w	r9, #31
   13e8e:	e7c6      	b.n	13e1e <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
   13e90:	492e      	ldr	r1, [pc, #184]	; (13f4c <ecc_thread+0x180>)
   13e92:	f008 ffd9 	bl	1ce48 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
   13e96:	492e      	ldr	r1, [pc, #184]	; (13f50 <ecc_thread+0x184>)
   13e98:	f105 0021 	add.w	r0, r5, #33	; 0x21
   13e9c:	f008 ffd4 	bl	1ce48 <sys_memcpy_swap.constprop.0>
   13ea0:	e7e3      	b.n	13e6a <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13ea2:	f3bf 8f5b 	dmb	ish
   13ea6:	683b      	ldr	r3, [r7, #0]
   13ea8:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   13eac:	079b      	lsls	r3, r3, #30
   13eae:	d593      	bpl.n	13dd8 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
   13eb0:	4928      	ldr	r1, [pc, #160]	; (13f54 <ecc_thread+0x188>)
   13eb2:	4826      	ldr	r0, [pc, #152]	; (13f4c <ecc_thread+0x180>)
   13eb4:	f008 fd03 	bl	1c8be <uECC_valid_public_key>
	if (ret < 0) {
   13eb8:	2800      	cmp	r0, #0
   13eba:	db07      	blt.n	13ecc <ecc_thread+0x100>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
   13ebc:	4a23      	ldr	r2, [pc, #140]	; (13f4c <ecc_thread+0x180>)
   13ebe:	4b25      	ldr	r3, [pc, #148]	; (13f54 <ecc_thread+0x188>)
   13ec0:	f1a2 0120 	sub.w	r1, r2, #32
   13ec4:	4610      	mov	r0, r2
   13ec6:	f007 fe7a 	bl	1bbbe <uECC_shared_secret>
   13eca:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   13ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ed4:	2001      	movs	r0, #1
   13ed6:	f001 fc3f 	bl	15758 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   13eda:	f100 0908 	add.w	r9, r0, #8
   13ede:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   13ee0:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   13ee2:	4648      	mov	r0, r9
   13ee4:	f00b fbe0 	bl	1f6a8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   13ee8:	233e      	movs	r3, #62	; 0x3e
   13eea:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   13eec:	2322      	movs	r3, #34	; 0x22
   13eee:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
   13ef0:	2101      	movs	r1, #1
   13ef2:	4648      	mov	r0, r9
   13ef4:	f00b fbd8 	bl	1f6a8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   13ef8:	2309      	movs	r3, #9
   13efa:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
   13efc:	2121      	movs	r1, #33	; 0x21
   13efe:	4648      	mov	r0, r9
   13f00:	f00b fbd2 	bl	1f6a8 <net_buf_simple_add>
   13f04:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   13f06:	3001      	adds	r0, #1
   13f08:	b99c      	cbnz	r4, 13f32 <ecc_thread+0x166>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   13f0a:	221f      	movs	r2, #31
   13f0c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   13f0e:	21ff      	movs	r1, #255	; 0xff
   13f10:	2220      	movs	r2, #32
   13f12:	f008 ff1d 	bl	1cd50 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13f16:	f3bf 8f5b 	dmb	ish
   13f1a:	e856 3f00 	ldrex	r3, [r6]
   13f1e:	f023 0302 	bic.w	r3, r3, #2
   13f22:	e846 3200 	strex	r2, r3, [r6]
   13f26:	2a00      	cmp	r2, #0
   13f28:	d1f7      	bne.n	13f1a <ecc_thread+0x14e>
   13f2a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   13f2e:	4628      	mov	r0, r5
   13f30:	e7a8      	b.n	13e84 <ecc_thread+0xb8>
		evt->status = 0U;
   13f32:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
   13f34:	4905      	ldr	r1, [pc, #20]	; (13f4c <ecc_thread+0x180>)
		evt->status = 0U;
   13f36:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
   13f38:	f008 ff86 	bl	1ce48 <sys_memcpy_swap.constprop.0>
   13f3c:	e7eb      	b.n	13f16 <ecc_thread+0x14a>
   13f3e:	bf00      	nop
   13f40:	2000276c 	.word	0x2000276c
   13f44:	20002d3f 	.word	0x20002d3f
   13f48:	00020934 	.word	0x00020934
   13f4c:	20002d5f 	.word	0x20002d5f
   13f50:	20002d7f 	.word	0x20002d7f
   13f54:	00020884 	.word	0x00020884
   13f58:	20000804 	.word	0x20000804

00013f5c <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   13f5c:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   13f5e:	7d05      	ldrb	r5, [r0, #20]
   13f60:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   13f62:	b9ad      	cbnz	r5, 13f90 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   13f64:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   13f66:	881a      	ldrh	r2, [r3, #0]
   13f68:	f242 0125 	movw	r1, #8229	; 0x2025
   13f6c:	428a      	cmp	r2, r1
   13f6e:	d017      	beq.n	13fa0 <bt_hci_ecc_send+0x44>
   13f70:	f242 0126 	movw	r1, #8230	; 0x2026
   13f74:	428a      	cmp	r2, r1
   13f76:	d03c      	beq.n	13ff2 <bt_hci_ecc_send+0x96>
   13f78:	f242 0101 	movw	r1, #8193	; 0x2001
   13f7c:	428a      	cmp	r2, r1
   13f7e:	d107      	bne.n	13f90 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   13f80:	78da      	ldrb	r2, [r3, #3]
   13f82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   13f86:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   13f88:	791a      	ldrb	r2, [r3, #4]
   13f8a:	f022 0201 	bic.w	r2, r2, #1
   13f8e:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   13f90:	4b31      	ldr	r3, [pc, #196]	; (14058 <bt_hci_ecc_send+0xfc>)
   13f92:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   13f96:	4620      	mov	r0, r4
   13f98:	691b      	ldr	r3, [r3, #16]
}
   13f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   13f9e:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
   13fa0:	2103      	movs	r1, #3
   13fa2:	3008      	adds	r0, #8
   13fa4:	f00b fb9f 	bl	1f6e6 <net_buf_simple_pull>
	net_buf_unref(buf);
   13fa8:	4620      	mov	r0, r4
   13faa:	f004 fe39 	bl	18c20 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13fae:	f3bf 8f5b 	dmb	ish
   13fb2:	4b2a      	ldr	r3, [pc, #168]	; (1405c <bt_hci_ecc_send+0x100>)
   13fb4:	681a      	ldr	r2, [r3, #0]
   13fb6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   13fba:	0790      	lsls	r0, r2, #30
   13fbc:	d507      	bpl.n	13fce <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   13fbe:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   13fc0:	4629      	mov	r1, r5
   13fc2:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   13fc6:	f008 ff1b 	bl	1ce00 <send_cmd_status>
}
   13fca:	2000      	movs	r0, #0
   13fcc:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13fce:	f3bf 8f5b 	dmb	ish
   13fd2:	e853 2f00 	ldrex	r2, [r3]
   13fd6:	f042 0101 	orr.w	r1, r2, #1
   13fda:	e843 1000 	strex	r0, r1, [r3]
   13fde:	2800      	cmp	r0, #0
   13fe0:	d1f7      	bne.n	13fd2 <bt_hci_ecc_send+0x76>
   13fe2:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   13fe6:	07d1      	lsls	r1, r2, #31
   13fe8:	d4e9      	bmi.n	13fbe <bt_hci_ecc_send+0x62>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13fea:	481d      	ldr	r0, [pc, #116]	; (14060 <bt_hci_ecc_send+0x104>)
   13fec:	f006 fd94 	bl	1ab18 <z_impl_k_sem_give>
}
   13ff0:	e7e6      	b.n	13fc0 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
   13ff2:	2103      	movs	r1, #3
   13ff4:	3008      	adds	r0, #8
   13ff6:	f00b fb76 	bl	1f6e6 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13ffa:	f3bf 8f5b 	dmb	ish
   13ffe:	4b17      	ldr	r3, [pc, #92]	; (1405c <bt_hci_ecc_send+0x100>)
   14000:	681a      	ldr	r2, [r3, #0]
   14002:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   14006:	07d2      	lsls	r2, r2, #31
   14008:	d507      	bpl.n	1401a <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   1400a:	250c      	movs	r5, #12
	net_buf_unref(buf);
   1400c:	4620      	mov	r0, r4
   1400e:	f004 fe07 	bl	18c20 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   14012:	4629      	mov	r1, r5
   14014:	f242 0026 	movw	r0, #8230	; 0x2026
   14018:	e7d5      	b.n	13fc6 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
   1401a:	89a2      	ldrh	r2, [r4, #12]
   1401c:	2a3f      	cmp	r2, #63	; 0x3f
   1401e:	d919      	bls.n	14054 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14020:	f3bf 8f5b 	dmb	ish
   14024:	e853 2f00 	ldrex	r2, [r3]
   14028:	f042 0102 	orr.w	r1, r2, #2
   1402c:	e843 1000 	strex	r0, r1, [r3]
   14030:	2800      	cmp	r0, #0
   14032:	d1f7      	bne.n	14024 <bt_hci_ecc_send+0xc8>
   14034:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   14038:	0793      	lsls	r3, r2, #30
   1403a:	d4e6      	bmi.n	1400a <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
   1403c:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
   1403e:	4809      	ldr	r0, [pc, #36]	; (14064 <bt_hci_ecc_send+0x108>)
   14040:	f008 ff02 	bl	1ce48 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
   14044:	4808      	ldr	r0, [pc, #32]	; (14068 <bt_hci_ecc_send+0x10c>)
   14046:	3120      	adds	r1, #32
   14048:	f008 fefe 	bl	1ce48 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
   1404c:	4804      	ldr	r0, [pc, #16]	; (14060 <bt_hci_ecc_send+0x104>)
   1404e:	f006 fd63 	bl	1ab18 <z_impl_k_sem_give>
}
   14052:	e7db      	b.n	1400c <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
   14054:	2512      	movs	r5, #18
   14056:	e7d9      	b.n	1400c <bt_hci_ecc_send+0xb0>
   14058:	200003c8 	.word	0x200003c8
   1405c:	2000276c 	.word	0x2000276c
   14060:	20000804 	.word	0x20000804
   14064:	20002d5f 	.word	0x20002d5f
   14068:	20002d7f 	.word	0x20002d7f

0001406c <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   1406c:	b510      	push	{r4, lr}
   1406e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14070:	4c0c      	ldr	r4, [pc, #48]	; (140a4 <bt_hci_ecc_init+0x38>)
   14072:	490d      	ldr	r1, [pc, #52]	; (140a8 <bt_hci_ecc_init+0x3c>)
   14074:	2200      	movs	r2, #0
   14076:	2300      	movs	r3, #0
   14078:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1407c:	2300      	movs	r3, #0
   1407e:	220a      	movs	r2, #10
   14080:	e9cd 2303 	strd	r2, r3, [sp, #12]
   14084:	e9cd 3301 	strd	r3, r3, [sp, #4]
   14088:	9300      	str	r3, [sp, #0]
   1408a:	f44f 628a 	mov.w	r2, #1104	; 0x450
   1408e:	4b07      	ldr	r3, [pc, #28]	; (140ac <bt_hci_ecc_init+0x40>)
   14090:	4620      	mov	r0, r4
   14092:	f006 fddb 	bl	1ac4c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   14096:	4906      	ldr	r1, [pc, #24]	; (140b0 <bt_hci_ecc_init+0x44>)
   14098:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   1409a:	b008      	add	sp, #32
   1409c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   140a0:	f00b bf30 	b.w	1ff04 <z_impl_k_thread_name_set>
   140a4:	20001e20 	.word	0x20001e20
   140a8:	20003260 	.word	0x20003260
   140ac:	00013dcd 	.word	0x00013dcd
   140b0:	00020f8b 	.word	0x00020f8b

000140b4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   140b4:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   140b6:	7802      	ldrb	r2, [r0, #0]
   140b8:	2a01      	cmp	r2, #1
{
   140ba:	4604      	mov	r4, r0
   140bc:	460b      	mov	r3, r1
	switch (src->type) {
   140be:	d016      	beq.n	140ee <uuid_to_uuid128+0x3a>
   140c0:	2a02      	cmp	r2, #2
   140c2:	d02c      	beq.n	1411e <uuid_to_uuid128+0x6a>
   140c4:	b98a      	cbnz	r2, 140ea <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   140c6:	4a19      	ldr	r2, [pc, #100]	; (1412c <uuid_to_uuid128+0x78>)
   140c8:	460d      	mov	r5, r1
   140ca:	f102 0710 	add.w	r7, r2, #16
   140ce:	6810      	ldr	r0, [r2, #0]
   140d0:	6851      	ldr	r1, [r2, #4]
   140d2:	462e      	mov	r6, r5
   140d4:	c603      	stmia	r6!, {r0, r1}
   140d6:	3208      	adds	r2, #8
   140d8:	42ba      	cmp	r2, r7
   140da:	4635      	mov	r5, r6
   140dc:	d1f7      	bne.n	140ce <uuid_to_uuid128+0x1a>
   140de:	7812      	ldrb	r2, [r2, #0]
   140e0:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   140e2:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   140e4:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   140e6:	0a12      	lsrs	r2, r2, #8
   140e8:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   140ea:	bcf0      	pop	{r4, r5, r6, r7}
   140ec:	4770      	bx	lr
		*dst = uuid128_base;
   140ee:	4a0f      	ldr	r2, [pc, #60]	; (1412c <uuid_to_uuid128+0x78>)
   140f0:	460d      	mov	r5, r1
   140f2:	f102 0710 	add.w	r7, r2, #16
   140f6:	6810      	ldr	r0, [r2, #0]
   140f8:	6851      	ldr	r1, [r2, #4]
   140fa:	462e      	mov	r6, r5
   140fc:	c603      	stmia	r6!, {r0, r1}
   140fe:	3208      	adds	r2, #8
   14100:	42ba      	cmp	r2, r7
   14102:	4635      	mov	r5, r6
   14104:	d1f7      	bne.n	140f6 <uuid_to_uuid128+0x42>
   14106:	7812      	ldrb	r2, [r2, #0]
   14108:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1410a:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   1410c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1410e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   14112:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   14114:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   14116:	0a12      	lsrs	r2, r2, #8
   14118:	7399      	strb	r1, [r3, #14]
   1411a:	741a      	strb	r2, [r3, #16]
}
   1411c:	e7e5      	b.n	140ea <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1411e:	4601      	mov	r1, r0
}
   14120:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   14122:	2211      	movs	r2, #17
   14124:	4618      	mov	r0, r3
   14126:	f008 bde8 	b.w	1ccfa <memcpy>
   1412a:	bf00      	nop
   1412c:	00020f92 	.word	0x00020f92

00014130 <le_dhkey_complete>:
{
   14130:	b510      	push	{r4, lr}
	if (dh_key_cb) {
   14132:	4c06      	ldr	r4, [pc, #24]	; (1414c <le_dhkey_complete+0x1c>)
   14134:	6822      	ldr	r2, [r4, #0]
   14136:	b132      	cbz	r2, 14146 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   14138:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
   1413a:	7803      	ldrb	r3, [r0, #0]
   1413c:	b923      	cbnz	r3, 14148 <le_dhkey_complete+0x18>
   1413e:	3001      	adds	r0, #1
   14140:	4790      	blx	r2
		dh_key_cb = NULL;
   14142:	2300      	movs	r3, #0
   14144:	6023      	str	r3, [r4, #0]
}
   14146:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
   14148:	2000      	movs	r0, #0
   1414a:	e7f9      	b.n	14140 <le_dhkey_complete+0x10>
   1414c:	20002788 	.word	0x20002788

00014150 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
   14150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14152:	4f0a      	ldr	r7, [pc, #40]	; (1417c <id_find+0x2c>)
{
   14154:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14156:	2500      	movs	r5, #0
   14158:	79fb      	ldrb	r3, [r7, #7]
   1415a:	b2ec      	uxtb	r4, r5
   1415c:	42a3      	cmp	r3, r4
   1415e:	d802      	bhi.n	14166 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14160:	f06f 0401 	mvn.w	r4, #1
   14164:	e008      	b.n	14178 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   14166:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1416a:	4439      	add	r1, r7
   1416c:	4630      	mov	r0, r6
   1416e:	f008 ff0d 	bl	1cf8c <bt_addr_le_cmp>
   14172:	3501      	adds	r5, #1
   14174:	2800      	cmp	r0, #0
   14176:	d1ef      	bne.n	14158 <id_find+0x8>
}
   14178:	4620      	mov	r0, r4
   1417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1417c:	200003c8 	.word	0x200003c8

00014180 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14180:	6843      	ldr	r3, [r0, #4]
{
   14182:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14184:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14186:	0558      	lsls	r0, r3, #21
   14188:	d502      	bpl.n	14190 <valid_adv_param+0x10>
		return false;
   1418a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   1418c:	b003      	add	sp, #12
   1418e:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14190:	6922      	ldr	r2, [r4, #16]
   14192:	b10a      	cbz	r2, 14198 <valid_adv_param+0x18>
   14194:	07d9      	lsls	r1, r3, #31
   14196:	d5f8      	bpl.n	1418a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   14198:	4d17      	ldr	r5, [pc, #92]	; (141f8 <valid_adv_param+0x78>)
   1419a:	7820      	ldrb	r0, [r4, #0]
   1419c:	79eb      	ldrb	r3, [r5, #7]
   1419e:	4283      	cmp	r3, r0
   141a0:	d9f3      	bls.n	1418a <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   141a2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   141a6:	2300      	movs	r3, #0
   141a8:	4669      	mov	r1, sp
   141aa:	4428      	add	r0, r5
   141ac:	9300      	str	r3, [sp, #0]
   141ae:	f8cd 3003 	str.w	r3, [sp, #3]
   141b2:	f008 feeb 	bl	1cf8c <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
   141b6:	2800      	cmp	r0, #0
   141b8:	d0e7      	beq.n	1418a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   141ba:	6860      	ldr	r0, [r4, #4]
   141bc:	07c2      	lsls	r2, r0, #31
   141be:	d406      	bmi.n	141ce <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   141c0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   141c4:	2b08      	cmp	r3, #8
   141c6:	d802      	bhi.n	141ce <valid_adv_param+0x4e>
   141c8:	68a3      	ldr	r3, [r4, #8]
   141ca:	2b9f      	cmp	r3, #159	; 0x9f
   141cc:	d9dd      	bls.n	1418a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   141ce:	06c3      	lsls	r3, r0, #27
   141d0:	d401      	bmi.n	141d6 <valid_adv_param+0x56>
   141d2:	6923      	ldr	r3, [r4, #16]
   141d4:	b943      	cbnz	r3, 141e8 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
   141d6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   141da:	429a      	cmp	r2, r3
   141dc:	d8d5      	bhi.n	1418a <valid_adv_param+0xa>
   141de:	2a1f      	cmp	r2, #31
   141e0:	d9d3      	bls.n	1418a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   141e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   141e6:	d8d0      	bhi.n	1418a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   141e8:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   141ec:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   141f0:	bf18      	it	ne
   141f2:	2001      	movne	r0, #1
   141f4:	e7ca      	b.n	1418c <valid_adv_param+0xc>
   141f6:	bf00      	nop
   141f8:	200003c8 	.word	0x200003c8

000141fc <le_pkey_complete>:
{
   141fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   141fe:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14200:	480f      	ldr	r0, [pc, #60]	; (14240 <le_pkey_complete+0x44>)
   14202:	f06f 0110 	mvn.w	r1, #16
   14206:	f008 fec4 	bl	1cf92 <atomic_and>
	if (!evt->status) {
   1420a:	7833      	ldrb	r3, [r6, #0]
   1420c:	b943      	cbnz	r3, 14220 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
   1420e:	1c71      	adds	r1, r6, #1
   14210:	480c      	ldr	r0, [pc, #48]	; (14244 <le_pkey_complete+0x48>)
   14212:	2240      	movs	r2, #64	; 0x40
   14214:	f008 fd71 	bl	1ccfa <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14218:	4809      	ldr	r0, [pc, #36]	; (14240 <le_pkey_complete+0x44>)
   1421a:	2108      	movs	r1, #8
   1421c:	f008 fec8 	bl	1cfb0 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   14220:	4d09      	ldr	r5, [pc, #36]	; (14248 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
   14222:	4f08      	ldr	r7, [pc, #32]	; (14244 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   14224:	682c      	ldr	r4, [r5, #0]
   14226:	b90c      	cbnz	r4, 1422c <le_pkey_complete+0x30>
	pub_key_cb = NULL;
   14228:	602c      	str	r4, [r5, #0]
}
   1422a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
   1422c:	7832      	ldrb	r2, [r6, #0]
   1422e:	6823      	ldr	r3, [r4, #0]
   14230:	2a00      	cmp	r2, #0
   14232:	bf0c      	ite	eq
   14234:	4638      	moveq	r0, r7
   14236:	2000      	movne	r0, #0
   14238:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   1423a:	6864      	ldr	r4, [r4, #4]
   1423c:	e7f3      	b.n	14226 <le_pkey_complete+0x2a>
   1423e:	bf00      	nop
   14240:	20000460 	.word	0x20000460
   14244:	20002d9f 	.word	0x20002d9f
   14248:	2000278c 	.word	0x2000278c

0001424c <hci_le_meta_event>:
{
   1424c:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   1424e:	2101      	movs	r1, #1
{
   14250:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   14252:	3008      	adds	r0, #8
   14254:	f00b fa4f 	bl	1f6f6 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14258:	4621      	mov	r1, r4
   1425a:	4a03      	ldr	r2, [pc, #12]	; (14268 <hci_le_meta_event+0x1c>)
   1425c:	7800      	ldrb	r0, [r0, #0]
}
   1425e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14262:	230a      	movs	r3, #10
   14264:	f008 be65 	b.w	1cf32 <handle_event>
   14268:	00020954 	.word	0x00020954

0001426c <hci_encrypt_key_refresh_complete>:
{
   1426c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1426e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   14270:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   14274:	f001 fd54 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   14278:	4604      	mov	r4, r0
   1427a:	b1c8      	cbz	r0, 142b0 <hci_encrypt_key_refresh_complete+0x44>
	if (evt->status) {
   1427c:	7829      	ldrb	r1, [r5, #0]
   1427e:	b161      	cbz	r1, 1429a <hci_encrypt_key_refresh_complete+0x2e>
	switch (hci_err) {
   14280:	2929      	cmp	r1, #41	; 0x29
   14282:	bf9a      	itte	ls
   14284:	4b0b      	ldrls	r3, [pc, #44]	; (142b4 <hci_encrypt_key_refresh_complete+0x48>)
   14286:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
   14288:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   1428a:	4620      	mov	r0, r4
   1428c:	f001 fc5c 	bl	15b48 <bt_conn_security_changed>
	bt_conn_unref(conn);
   14290:	4620      	mov	r0, r4
}
   14292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   14296:	f009 bb2c 	b.w	1d8f2 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1429a:	7883      	ldrb	r3, [r0, #2]
   1429c:	2b01      	cmp	r3, #1
   1429e:	d104      	bne.n	142aa <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   142a0:	f00b f912 	bl	1f4c8 <bt_smp_update_keys>
		update_sec_level(conn);
   142a4:	4620      	mov	r0, r4
   142a6:	f008 ff15 	bl	1d0d4 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   142aa:	7829      	ldrb	r1, [r5, #0]
   142ac:	2200      	movs	r2, #0
   142ae:	e7ec      	b.n	1428a <hci_encrypt_key_refresh_complete+0x1e>
}
   142b0:	bd38      	pop	{r3, r4, r5, pc}
   142b2:	bf00      	nop
   142b4:	0002108d 	.word	0x0002108d

000142b8 <hci_encrypt_change>:
{
   142b8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   142ba:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   142bc:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   142c0:	f001 fd2e 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   142c4:	4604      	mov	r4, r0
   142c6:	b1e0      	cbz	r0, 14302 <hci_encrypt_change+0x4a>
	if (evt->status) {
   142c8:	7829      	ldrb	r1, [r5, #0]
   142ca:	b161      	cbz	r1, 142e6 <hci_encrypt_change+0x2e>
	switch (hci_err) {
   142cc:	2929      	cmp	r1, #41	; 0x29
   142ce:	bf9a      	itte	ls
   142d0:	4b0c      	ldrls	r3, [pc, #48]	; (14304 <hci_encrypt_change+0x4c>)
   142d2:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
   142d4:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   142d6:	4620      	mov	r0, r4
   142d8:	f001 fc36 	bl	15b48 <bt_conn_security_changed>
	bt_conn_unref(conn);
   142dc:	4620      	mov	r0, r4
}
   142de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   142e2:	f009 bb06 	b.w	1d8f2 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   142e6:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   142e8:	78eb      	ldrb	r3, [r5, #3]
   142ea:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   142ec:	2a01      	cmp	r2, #1
   142ee:	d105      	bne.n	142fc <hci_encrypt_change+0x44>
		if (conn->encrypt) {
   142f0:	b10b      	cbz	r3, 142f6 <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   142f2:	f00b f8e9 	bl	1f4c8 <bt_smp_update_keys>
		update_sec_level(conn);
   142f6:	4620      	mov	r0, r4
   142f8:	f008 feec 	bl	1d0d4 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   142fc:	7829      	ldrb	r1, [r5, #0]
   142fe:	2200      	movs	r2, #0
   14300:	e7e9      	b.n	142d6 <hci_encrypt_change+0x1e>
}
   14302:	bd38      	pop	{r3, r4, r5, pc}
   14304:	0002108d 	.word	0x0002108d

00014308 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   14308:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1430a:	4c0c      	ldr	r4, [pc, #48]	; (1433c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1430c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1430e:	2205      	movs	r2, #5
   14310:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   14314:	f001 fd2c 	bl	15d70 <bt_conn_lookup_state_le>
		if (!conn) {
   14318:	b970      	cbnz	r0, 14338 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   1431a:	4b09      	ldr	r3, [pc, #36]	; (14340 <find_pending_connect.part.0+0x38>)
   1431c:	6818      	ldr	r0, [r3, #0]
   1431e:	889a      	ldrh	r2, [r3, #4]
   14320:	9000      	str	r0, [sp, #0]
   14322:	799b      	ldrb	r3, [r3, #6]
   14324:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14328:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
   1432c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14330:	2204      	movs	r2, #4
   14332:	4669      	mov	r1, sp
   14334:	f001 fd1c 	bl	15d70 <bt_conn_lookup_state_le>
}
   14338:	b002      	add	sp, #8
   1433a:	bd10      	pop	{r4, pc}
   1433c:	200003c8 	.word	0x200003c8
   14340:	00020618 	.word	0x00020618

00014344 <hci_rx_thread>:
{
   14344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14348:	4f3b      	ldr	r7, [pc, #236]	; (14438 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1434a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1444c <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1434e:	4e3b      	ldr	r6, [pc, #236]	; (1443c <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14358:	4638      	mov	r0, r7
   1435a:	f00b f954 	bl	1f606 <net_buf_get>
   1435e:	7d03      	ldrb	r3, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   14360:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14362:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   14364:	d039      	beq.n	143da <hci_rx_thread+0x96>
   14366:	2b03      	cmp	r3, #3
   14368:	d120      	bne.n	143ac <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1436a:	8983      	ldrh	r3, [r0, #12]
   1436c:	2b03      	cmp	r3, #3
   1436e:	d80c      	bhi.n	1438a <hci_rx_thread+0x46>
   14370:	4933      	ldr	r1, [pc, #204]	; (14440 <hci_rx_thread+0xfc>)
   14372:	4834      	ldr	r0, [pc, #208]	; (14444 <hci_rx_thread+0x100>)
   14374:	f240 530a 	movw	r3, #1290	; 0x50a
   14378:	4632      	mov	r2, r6
   1437a:	f006 ff8e 	bl	1b29a <printk>
   1437e:	4040      	eors	r0, r0
   14380:	f380 8811 	msr	BASEPRI, r0
   14384:	f04f 0003 	mov.w	r0, #3
   14388:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1438a:	2104      	movs	r1, #4
   1438c:	f104 0008 	add.w	r0, r4, #8
   14390:	f00b f9b1 	bl	1f6f6 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14394:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   14396:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14398:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1439c:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   1439e:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   143a0:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   143a4:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   143a6:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   143a8:	d003      	beq.n	143b2 <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   143aa:	4620      	mov	r0, r4
			net_buf_unref(buf);
   143ac:	f004 fc38 	bl	18c20 <net_buf_unref>
			break;
   143b0:	e010      	b.n	143d4 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   143b2:	f001 fcb5 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   143b6:	4605      	mov	r5, r0
   143b8:	2800      	cmp	r0, #0
   143ba:	d0f6      	beq.n	143aa <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   143bc:	f001 fede 	bl	1617c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   143c0:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   143c4:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   143c6:	4621      	mov	r1, r4
   143c8:	4628      	mov	r0, r5
   143ca:	f009 fa0a 	bl	1d7e2 <bt_conn_recv>
	bt_conn_unref(conn);
   143ce:	4628      	mov	r0, r5
   143d0:	f009 fa8f 	bl	1d8f2 <bt_conn_unref>
	z_impl_k_yield();
   143d4:	f006 fb2c 	bl	1aa30 <z_impl_k_yield>
	while (1) {
   143d8:	e7ba      	b.n	14350 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   143da:	8983      	ldrh	r3, [r0, #12]
   143dc:	2b01      	cmp	r3, #1
   143de:	d80c      	bhi.n	143fa <hci_rx_thread+0xb6>
   143e0:	4917      	ldr	r1, [pc, #92]	; (14440 <hci_rx_thread+0xfc>)
   143e2:	4818      	ldr	r0, [pc, #96]	; (14444 <hci_rx_thread+0x100>)
   143e4:	f241 4359 	movw	r3, #5209	; 0x1459
   143e8:	4632      	mov	r2, r6
   143ea:	f006 ff56 	bl	1b29a <printk>
   143ee:	4040      	eors	r0, r0
   143f0:	f380 8811 	msr	BASEPRI, r0
   143f4:	f04f 0003 	mov.w	r0, #3
   143f8:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   143fa:	2102      	movs	r1, #2
   143fc:	f104 0008 	add.w	r0, r4, #8
   14400:	f00b f979 	bl	1f6f6 <net_buf_simple_pull_mem>
   14404:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14406:	7800      	ldrb	r0, [r0, #0]
   14408:	f008 fd81 	bl	1cf0e <bt_hci_evt_get_flags>
   1440c:	0783      	lsls	r3, r0, #30
   1440e:	d40c      	bmi.n	1442a <hci_rx_thread+0xe6>
   14410:	490d      	ldr	r1, [pc, #52]	; (14448 <hci_rx_thread+0x104>)
   14412:	480c      	ldr	r0, [pc, #48]	; (14444 <hci_rx_thread+0x100>)
   14414:	f241 435d 	movw	r3, #5213	; 0x145d
   14418:	4632      	mov	r2, r6
   1441a:	f006 ff3e 	bl	1b29a <printk>
   1441e:	4040      	eors	r0, r0
   14420:	f380 8811 	msr	BASEPRI, r0
   14424:	f04f 0003 	mov.w	r0, #3
   14428:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1442a:	7828      	ldrb	r0, [r5, #0]
   1442c:	2306      	movs	r3, #6
   1442e:	4642      	mov	r2, r8
   14430:	4621      	mov	r1, r4
   14432:	f008 fd7e 	bl	1cf32 <handle_event>
   14436:	e7b8      	b.n	143aa <hci_rx_thread+0x66>
   14438:	200004d4 	.word	0x200004d4
   1443c:	00020fa3 	.word	0x00020fa3
   14440:	00020fd7 	.word	0x00020fd7
   14444:	00020ff0 	.word	0x00020ff0
   14448:	0002100d 	.word	0x0002100d
   1444c:	000209e4 	.word	0x000209e4

00014450 <hci_num_completed_packets>:
{
   14450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   14454:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   14456:	6887      	ldr	r7, [r0, #8]
		k_queue_append(&work_q->queue, work);
   14458:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 14544 <hci_num_completed_packets+0xf4>
			tx->pending_no_cb = 0U;
   1445c:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1445e:	783b      	ldrb	r3, [r7, #0]
   14460:	429d      	cmp	r5, r3
   14462:	db01      	blt.n	14468 <hci_num_completed_packets+0x18>
}
   14464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14468:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   1446c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   14470:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
   14474:	f04f 0340 	mov.w	r3, #64	; 0x40
   14478:	f3ef 8a11 	mrs	sl, BASEPRI
   1447c:	f383 8811 	msr	BASEPRI, r3
   14480:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
   14484:	f001 fc4c 	bl	15d20 <bt_conn_lookup_handle>
		if (!conn) {
   14488:	4604      	mov	r4, r0
   1448a:	b928      	cbnz	r0, 14498 <hci_num_completed_packets+0x48>
	__asm__ volatile(
   1448c:	f38a 8811 	msr	BASEPRI, sl
   14490:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
   14494:	3501      	adds	r5, #1
   14496:	e7e2      	b.n	1445e <hci_num_completed_packets+0xe>
   14498:	f38a 8811 	msr	BASEPRI, sl
   1449c:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   144a0:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   144a4:	b326      	cbz	r6, 144f0 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   144a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   144aa:	f3ef 8211 	mrs	r2, BASEPRI
   144ae:	f383 8811 	msr	BASEPRI, r3
   144b2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   144b6:	69e3      	ldr	r3, [r4, #28]
   144b8:	b16b      	cbz	r3, 144d6 <hci_num_completed_packets+0x86>
				conn->pending_no_cb--;
   144ba:	3b01      	subs	r3, #1
   144bc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   144be:	f382 8811 	msr	BASEPRI, r2
   144c2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   144c6:	4620      	mov	r0, r4
   144c8:	f001 facc 	bl	15a64 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   144cc:	3e01      	subs	r6, #1
   144ce:	f006 fb23 	bl	1ab18 <z_impl_k_sem_give>
   144d2:	b2b6      	uxth	r6, r6
   144d4:	e7e6      	b.n	144a4 <hci_num_completed_packets+0x54>
Z_GENLIST_IS_EMPTY(slist)
   144d6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   144d8:	b12b      	cbz	r3, 144e6 <hci_num_completed_packets+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   144da:	69a1      	ldr	r1, [r4, #24]
   144dc:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   144de:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   144e0:	428b      	cmp	r3, r1
	list->tail = node;
   144e2:	bf08      	it	eq
   144e4:	61a0      	streq	r0, [r4, #24]
   144e6:	f382 8811 	msr	BASEPRI, r2
   144ea:	f3bf 8f6f 	isb	sy
			if (!node) {
   144ee:	b91b      	cbnz	r3, 144f8 <hci_num_completed_packets+0xa8>
		bt_conn_unref(conn);
   144f0:	4620      	mov	r0, r4
   144f2:	f009 f9fe 	bl	1d8f2 <bt_conn_unref>
   144f6:	e7cd      	b.n	14494 <hci_num_completed_packets+0x44>
	__asm__ volatile(
   144f8:	f04f 0240 	mov.w	r2, #64	; 0x40
   144fc:	f3ef 8111 	mrs	r1, BASEPRI
   14500:	f382 8811 	msr	BASEPRI, r2
   14504:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   14508:	68da      	ldr	r2, [r3, #12]
   1450a:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   1450c:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   14510:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   14512:	f8c3 800c 	str.w	r8, [r3, #12]
   14516:	b98a      	cbnz	r2, 1453c <hci_num_completed_packets+0xec>
	list->head = node;
   14518:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1451c:	f381 8811 	msr	BASEPRI, r1
   14520:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14524:	2101      	movs	r1, #1
   14526:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1452a:	f008 fd41 	bl	1cfb0 <atomic_or>
   1452e:	07c3      	lsls	r3, r0, #31
   14530:	d4c9      	bmi.n	144c6 <hci_num_completed_packets+0x76>
		k_queue_append(&work_q->queue, work);
   14532:	4651      	mov	r1, sl
   14534:	4648      	mov	r0, r9
   14536:	f00b fb9f 	bl	1fc78 <k_queue_append>
   1453a:	e7c4      	b.n	144c6 <hci_num_completed_packets+0x76>
	parent->next = child;
   1453c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1453e:	6263      	str	r3, [r4, #36]	; 0x24
}
   14540:	e7ec      	b.n	1451c <hci_num_completed_packets+0xcc>
   14542:	bf00      	nop
   14544:	200025a8 	.word	0x200025a8

00014548 <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   14548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1454a:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1454c:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   1454e:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14550:	f004 faaa 	bl	18aa8 <net_buf_pool_get>
   14554:	4b19      	ldr	r3, [pc, #100]	; (145bc <hci_cmd_done.isra.0+0x74>)
   14556:	4283      	cmp	r3, r0
   14558:	d12e      	bne.n	145b8 <hci_cmd_done.isra.0+0x70>
	if (cmd(buf)->opcode != opcode) {
   1455a:	4620      	mov	r0, r4
   1455c:	f004 faac 	bl	18ab8 <net_buf_id>
	if (cmd(buf)->state && !status) {
   14560:	4620      	mov	r0, r4
   14562:	f004 faa9 	bl	18ab8 <net_buf_id>
   14566:	4d16      	ldr	r5, [pc, #88]	; (145c0 <hci_cmd_done.isra.0+0x78>)
   14568:	270c      	movs	r7, #12
   1456a:	fb07 5300 	mla	r3, r7, r0, r5
   1456e:	685b      	ldr	r3, [r3, #4]
   14570:	b15b      	cbz	r3, 1458a <hci_cmd_done.isra.0+0x42>
   14572:	b956      	cbnz	r6, 1458a <hci_cmd_done.isra.0+0x42>
		struct cmd_state_set *update = cmd(buf)->state;
   14574:	4620      	mov	r0, r4
   14576:	f004 fa9f 	bl	18ab8 <net_buf_id>
   1457a:	fb07 5000 	mla	r0, r7, r0, r5
   1457e:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   14580:	e9d3 0100 	ldrd	r0, r1, [r3]
   14584:	7a1a      	ldrb	r2, [r3, #8]
   14586:	f008 fd22 	bl	1cfce <atomic_set_bit_to>
	if (cmd(buf)->sync) {
   1458a:	4620      	mov	r0, r4
   1458c:	f004 fa94 	bl	18ab8 <net_buf_id>
   14590:	270c      	movs	r7, #12
   14592:	fb07 5000 	mla	r0, r7, r0, r5
   14596:	6883      	ldr	r3, [r0, #8]
   14598:	b173      	cbz	r3, 145b8 <hci_cmd_done.isra.0+0x70>
		cmd(buf)->status = status;
   1459a:	4620      	mov	r0, r4
   1459c:	f004 fa8c 	bl	18ab8 <net_buf_id>
   145a0:	4378      	muls	r0, r7
   145a2:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   145a4:	4620      	mov	r0, r4
   145a6:	f004 fa87 	bl	18ab8 <net_buf_id>
   145aa:	fb07 5500 	mla	r5, r7, r0, r5
   145ae:	68a8      	ldr	r0, [r5, #8]
}
   145b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   145b4:	f006 bab0 	b.w	1ab18 <z_impl_k_sem_give>
   145b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145ba:	bf00      	nop
   145bc:	2000090c 	.word	0x2000090c
   145c0:	20002770 	.word	0x20002770

000145c4 <hci_cmd_complete>:
{
   145c4:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   145c6:	2103      	movs	r1, #3
{
   145c8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   145ca:	3008      	adds	r0, #8
   145cc:	f00b f893 	bl	1f6f6 <net_buf_simple_pull_mem>
	status = buf->data[0];
   145d0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   145d2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   145d4:	7818      	ldrb	r0, [r3, #0]
   145d6:	4621      	mov	r1, r4
   145d8:	f7ff ffb6 	bl	14548 <hci_cmd_done.isra.0>
	if (ncmd) {
   145dc:	b125      	cbz	r5, 145e8 <hci_cmd_complete+0x24>
   145de:	4803      	ldr	r0, [pc, #12]	; (145ec <hci_cmd_complete+0x28>)
}
   145e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   145e4:	f006 ba98 	b.w	1ab18 <z_impl_k_sem_give>
   145e8:	bd38      	pop	{r3, r4, r5, pc}
   145ea:	bf00      	nop
   145ec:	200004b8 	.word	0x200004b8

000145f0 <hci_tx_thread>:
{
   145f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   145f4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 146fc <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
   145f8:	f8df a114 	ldr.w	sl, [pc, #276]	; 14710 <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
   145fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14600:	483d      	ldr	r0, [pc, #244]	; (146f8 <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
   14602:	f36f 3310 	bfc	r3, #12, #5
   14606:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1460a:	f001 fb21 	bl	15c50 <bt_conn_prepare_events>
   1460e:	1c45      	adds	r5, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   14610:	483a      	ldr	r0, [pc, #232]	; (146fc <hci_tx_thread+0x10c>)
   14612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1461a:	4629      	mov	r1, r5
   1461c:	f006 fd78 	bl	1b110 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   14620:	b160      	cbz	r0, 1463c <hci_tx_thread+0x4c>
   14622:	4937      	ldr	r1, [pc, #220]	; (14700 <hci_tx_thread+0x110>)
   14624:	4837      	ldr	r0, [pc, #220]	; (14704 <hci_tx_thread+0x114>)
   14626:	f241 43cf 	movw	r3, #5327	; 0x14cf
   1462a:	4652      	mov	r2, sl
   1462c:	f006 fe35 	bl	1b29a <printk>
   14630:	4040      	eors	r0, r0
   14632:	f380 8811 	msr	BASEPRI, r0
   14636:	f04f 0003 	mov.w	r0, #3
   1463a:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1463c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 14714 <hci_tx_thread+0x124>
{
   14640:	4e2e      	ldr	r6, [pc, #184]	; (146fc <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
   14642:	f5a9 7792 	sub.w	r7, r9, #292	; 0x124
   14646:	f1a9 0b34 	sub.w	fp, r9, #52	; 0x34
	for (; count; ev++, count--) {
   1464a:	b915      	cbnz	r5, 14652 <hci_tx_thread+0x62>
	z_impl_k_yield();
   1464c:	f006 f9f0 	bl	1aa30 <z_impl_k_yield>
	while (1) {
   14650:	e7d4      	b.n	145fc <hci_tx_thread+0xc>
		switch (ev->state) {
   14652:	68f3      	ldr	r3, [r6, #12]
   14654:	f3c3 3304 	ubfx	r3, r3, #12, #5
   14658:	2b04      	cmp	r3, #4
   1465a:	d142      	bne.n	146e2 <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1465c:	7b33      	ldrb	r3, [r6, #12]
   1465e:	2b00      	cmp	r3, #0
   14660:	d142      	bne.n	146e8 <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14662:	2200      	movs	r2, #0
   14664:	2300      	movs	r3, #0
   14666:	4648      	mov	r0, r9
   14668:	f00a ffcd 	bl	1f606 <net_buf_get>
	BT_ASSERT(buf);
   1466c:	4604      	mov	r4, r0
   1466e:	b960      	cbnz	r0, 1468a <hci_tx_thread+0x9a>
   14670:	4925      	ldr	r1, [pc, #148]	; (14708 <hci_tx_thread+0x118>)
   14672:	4824      	ldr	r0, [pc, #144]	; (14704 <hci_tx_thread+0x114>)
   14674:	f241 436c 	movw	r3, #5228	; 0x146c
   14678:	4652      	mov	r2, sl
   1467a:	f006 fe0e 	bl	1b29a <printk>
   1467e:	4040      	eors	r0, r0
   14680:	f380 8811 	msr	BASEPRI, r0
   14684:	f04f 0003 	mov.w	r0, #3
   14688:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1468a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1468e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14692:	4658      	mov	r0, fp
   14694:	f006 fa66 	bl	1ab64 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14698:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
   1469c:	b120      	cbz	r0, 146a8 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   1469e:	f004 fabf 	bl	18c20 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   146a2:	2300      	movs	r3, #0
   146a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   146a8:	4620      	mov	r0, r4
   146aa:	f00a ffd7 	bl	1f65c <net_buf_ref>
   146ae:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		return bt_hci_ecc_send(buf);
   146b2:	4620      	mov	r0, r4
   146b4:	f7ff fc52 	bl	13f5c <bt_hci_ecc_send>
	if (err) {
   146b8:	b198      	cbz	r0, 146e2 <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
   146ba:	4814      	ldr	r0, [pc, #80]	; (1470c <hci_tx_thread+0x11c>)
   146bc:	f006 fa2c 	bl	1ab18 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   146c0:	4620      	mov	r0, r4
   146c2:	f004 f9f9 	bl	18ab8 <net_buf_id>
   146c6:	4621      	mov	r1, r4
   146c8:	201f      	movs	r0, #31
   146ca:	f7ff ff3d 	bl	14548 <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
   146ce:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
   146d2:	f004 faa5 	bl	18c20 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   146d6:	2300      	movs	r3, #0
		net_buf_unref(buf);
   146d8:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   146da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		net_buf_unref(buf);
   146de:	f004 fa9f 	bl	18c20 <net_buf_unref>
	for (; count; ev++, count--) {
   146e2:	3614      	adds	r6, #20
   146e4:	3d01      	subs	r5, #1
   146e6:	e7b0      	b.n	1464a <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   146e8:	2b01      	cmp	r3, #1
   146ea:	d1fa      	bne.n	146e2 <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
   146ec:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   146ee:	3834      	subs	r0, #52	; 0x34
   146f0:	f001 fcdc 	bl	160ac <bt_conn_process_tx>
   146f4:	e7f5      	b.n	146e2 <hci_tx_thread+0xf2>
   146f6:	bf00      	nop
   146f8:	200005b0 	.word	0x200005b0
   146fc:	2000059c 	.word	0x2000059c
   14700:	0002103b 	.word	0x0002103b
   14704:	00020ff0 	.word	0x00020ff0
   14708:	00021044 	.word	0x00021044
   1470c:	200004b8 	.word	0x200004b8
   14710:	00020fa3 	.word	0x00020fa3
   14714:	200004ec 	.word	0x200004ec

00014718 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   14718:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1471a:	4b28      	ldr	r3, [pc, #160]	; (147bc <le_adv_start_add_conn+0xa4>)
   1471c:	b085      	sub	sp, #20
   1471e:	4605      	mov	r5, r0
   14720:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
   14722:	7801      	ldrb	r1, [r0, #0]
   14724:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   14728:	f008 fc27 	bl	1cf7a <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1472c:	f010 0f40 	tst.w	r0, #64	; 0x40
   14730:	461a      	mov	r2, r3
   14732:	d008      	beq.n	14746 <le_adv_start_add_conn+0x2e>
   14734:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   14738:	f008 fc1f 	bl	1cf7a <atomic_get>
   1473c:	05c0      	lsls	r0, r0, #23
   1473e:	d502      	bpl.n	14746 <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   14740:	7e1b      	ldrb	r3, [r3, #24]
   14742:	428b      	cmp	r3, r1
   14744:	d131      	bne.n	147aa <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
   14746:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14748:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
   1474a:	f816 3b0b 	ldrb.w	r3, [r6], #11
   1474e:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14752:	4630      	mov	r0, r6
   14754:	2300      	movs	r3, #0
   14756:	9300      	str	r3, [sp, #0]
   14758:	f8cd 3003 	str.w	r3, [sp, #3]
   1475c:	f008 fc16 	bl	1cf8c <bt_addr_le_cmp>
   14760:	4604      	mov	r4, r0
   14762:	7828      	ldrb	r0, [r5, #0]
   14764:	b164      	cbz	r4, 14780 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14766:	4631      	mov	r1, r6
   14768:	f009 f8d8 	bl	1d91c <bt_conn_exists_le>
   1476c:	4604      	mov	r4, r0
   1476e:	b9f8      	cbnz	r0, 147b0 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   14770:	7828      	ldrb	r0, [r5, #0]
   14772:	4631      	mov	r1, r6
   14774:	f001 faaa 	bl	15ccc <bt_conn_add_le>
	if (!conn) {
   14778:	4605      	mov	r5, r0
   1477a:	b1e0      	cbz	r0, 147b6 <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   1477c:	2105      	movs	r1, #5
   1477e:	e00e      	b.n	1479e <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14780:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   14784:	9302      	str	r3, [sp, #8]
   14786:	a902      	add	r1, sp, #8
   14788:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1478c:	f8ad 300c 	strh.w	r3, [sp, #12]
   14790:	f88d 300e 	strb.w	r3, [sp, #14]
   14794:	f001 fa9a 	bl	15ccc <bt_conn_add_le>
		if (!conn) {
   14798:	4605      	mov	r5, r0
   1479a:	b160      	cbz	r0, 147b6 <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   1479c:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   1479e:	f001 fb0d 	bl	15dbc <bt_conn_set_state>
	*out_conn = conn;
   147a2:	603d      	str	r5, [r7, #0]
	return 0;
}
   147a4:	4620      	mov	r0, r4
   147a6:	b005      	add	sp, #20
   147a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
   147aa:	f06f 0422 	mvn.w	r4, #34	; 0x22
   147ae:	e7f9      	b.n	147a4 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
   147b0:	f06f 0415 	mvn.w	r4, #21
   147b4:	e7f6      	b.n	147a4 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
   147b6:	f06f 040b 	mvn.w	r4, #11
   147ba:	e7f3      	b.n	147a4 <le_adv_start_add_conn+0x8c>
   147bc:	200003c8 	.word	0x200003c8

000147c0 <hci_cmd_status>:
{
   147c0:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   147c2:	2104      	movs	r1, #4
{
   147c4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   147c6:	3008      	adds	r0, #8
   147c8:	f00a ff95 	bl	1f6f6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   147cc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   147ce:	7800      	ldrb	r0, [r0, #0]
   147d0:	4621      	mov	r1, r4
   147d2:	f7ff feb9 	bl	14548 <hci_cmd_done.isra.0>
	if (ncmd) {
   147d6:	b125      	cbz	r5, 147e2 <hci_cmd_status+0x22>
   147d8:	4802      	ldr	r0, [pc, #8]	; (147e4 <hci_cmd_status+0x24>)
}
   147da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   147de:	f006 b99b 	b.w	1ab18 <z_impl_k_sem_give>
   147e2:	bd38      	pop	{r3, r4, r5, pc}
   147e4:	200004b8 	.word	0x200004b8

000147e8 <bt_hci_cmd_create>:
{
   147e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   147ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   147f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   147f4:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   147f6:	4816      	ldr	r0, [pc, #88]	; (14850 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   147f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 14854 <bt_hci_cmd_create+0x6c>
{
   147fc:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   147fe:	f00a fefd 	bl	1f5fc <net_buf_alloc_fixed>
   14802:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
   14804:	f100 0b08 	add.w	fp, r0, #8
   14808:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
   1480a:	2700      	movs	r7, #0
   1480c:	4658      	mov	r0, fp
   1480e:	f00a ff14 	bl	1f63a <net_buf_simple_reserve>
   14812:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   14814:	4620      	mov	r0, r4
   14816:	f004 f94f 	bl	18ab8 <net_buf_id>
   1481a:	f04f 0a0c 	mov.w	sl, #12
   1481e:	fb0a 8000 	mla	r0, sl, r0, r8
   14822:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   14824:	4620      	mov	r0, r4
   14826:	f004 f947 	bl	18ab8 <net_buf_id>
   1482a:	fb0a 8000 	mla	r0, sl, r0, r8
   1482e:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   14830:	4620      	mov	r0, r4
   14832:	f004 f941 	bl	18ab8 <net_buf_id>
   14836:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
   1483a:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
   1483c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1483e:	4658      	mov	r0, fp
   14840:	f00a ff32 	bl	1f6a8 <net_buf_simple_add>
	hdr->param_len = param_len;
   14844:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   14846:	8005      	strh	r5, [r0, #0]
}
   14848:	4620      	mov	r0, r4
   1484a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1484e:	bf00      	nop
   14850:	2000090c 	.word	0x2000090c
   14854:	20002770 	.word	0x20002770

00014858 <bt_hci_cmd_send>:
{
   14858:	b538      	push	{r3, r4, r5, lr}
   1485a:	4605      	mov	r5, r0
	if (!buf) {
   1485c:	460c      	mov	r4, r1
   1485e:	b919      	cbnz	r1, 14868 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   14860:	f7ff ffc2 	bl	147e8 <bt_hci_cmd_create>
		if (!buf) {
   14864:	4604      	mov	r4, r0
   14866:	b198      	cbz	r0, 14890 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14868:	f640 4335 	movw	r3, #3125	; 0xc35
   1486c:	429d      	cmp	r5, r3
   1486e:	d109      	bne.n	14884 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   14870:	4620      	mov	r0, r4
   14872:	f7ff fb73 	bl	13f5c <bt_hci_ecc_send>
		if (err) {
   14876:	4605      	mov	r5, r0
   14878:	b110      	cbz	r0, 14880 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   1487a:	4620      	mov	r0, r4
   1487c:	f004 f9d0 	bl	18c20 <net_buf_unref>
}
   14880:	4628      	mov	r0, r5
   14882:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14884:	4804      	ldr	r0, [pc, #16]	; (14898 <bt_hci_cmd_send+0x40>)
   14886:	4621      	mov	r1, r4
   14888:	f00a fedb 	bl	1f642 <net_buf_put>
	return 0;
   1488c:	2500      	movs	r5, #0
   1488e:	e7f7      	b.n	14880 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   14890:	f06f 0536 	mvn.w	r5, #54	; 0x36
   14894:	e7f4      	b.n	14880 <bt_hci_cmd_send+0x28>
   14896:	bf00      	nop
   14898:	200004ec 	.word	0x200004ec

0001489c <bt_hci_cmd_send_sync>:
{
   1489c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1489e:	4615      	mov	r5, r2
   148a0:	b087      	sub	sp, #28
	if (!buf) {
   148a2:	460c      	mov	r4, r1
   148a4:	b921      	cbnz	r1, 148b0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   148a6:	f7ff ff9f 	bl	147e8 <bt_hci_cmd_create>
		if (!buf) {
   148aa:	4604      	mov	r4, r0
   148ac:	2800      	cmp	r0, #0
   148ae:	d048      	beq.n	14942 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   148b0:	2201      	movs	r2, #1
   148b2:	2100      	movs	r1, #0
   148b4:	4668      	mov	r0, sp
   148b6:	f00b fb0b 	bl	1fed0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   148ba:	4620      	mov	r0, r4
   148bc:	f004 f8fc 	bl	18ab8 <net_buf_id>
   148c0:	4e21      	ldr	r6, [pc, #132]	; (14948 <bt_hci_cmd_send_sync+0xac>)
   148c2:	230c      	movs	r3, #12
   148c4:	fb03 6000 	mla	r0, r3, r0, r6
   148c8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   148cc:	4620      	mov	r0, r4
   148ce:	f00a fec5 	bl	1f65c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   148d2:	481e      	ldr	r0, [pc, #120]	; (1494c <bt_hci_cmd_send_sync+0xb0>)
   148d4:	4621      	mov	r1, r4
   148d6:	f00a feb4 	bl	1f642 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   148da:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   148de:	2300      	movs	r3, #0
   148e0:	4668      	mov	r0, sp
   148e2:	f006 f93f 	bl	1ab64 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   148e6:	4607      	mov	r7, r0
   148e8:	b180      	cbz	r0, 1490c <bt_hci_cmd_send_sync+0x70>
   148ea:	4a19      	ldr	r2, [pc, #100]	; (14950 <bt_hci_cmd_send_sync+0xb4>)
   148ec:	4919      	ldr	r1, [pc, #100]	; (14954 <bt_hci_cmd_send_sync+0xb8>)
   148ee:	481a      	ldr	r0, [pc, #104]	; (14958 <bt_hci_cmd_send_sync+0xbc>)
   148f0:	f44f 73bb 	mov.w	r3, #374	; 0x176
   148f4:	f006 fcd1 	bl	1b29a <printk>
   148f8:	4818      	ldr	r0, [pc, #96]	; (1495c <bt_hci_cmd_send_sync+0xc0>)
   148fa:	4639      	mov	r1, r7
   148fc:	f006 fccd 	bl	1b29a <printk>
   14900:	4040      	eors	r0, r0
   14902:	f380 8811 	msr	BASEPRI, r0
   14906:	f04f 0003 	mov.w	r0, #3
   1490a:	df02      	svc	2
	status = cmd(buf)->status;
   1490c:	4620      	mov	r0, r4
   1490e:	f004 f8d3 	bl	18ab8 <net_buf_id>
   14912:	230c      	movs	r3, #12
   14914:	4343      	muls	r3, r0
   14916:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   14918:	b156      	cbz	r6, 14930 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   1491a:	4620      	mov	r0, r4
   1491c:	f004 f980 	bl	18c20 <net_buf_unref>
			return -EIO;
   14920:	2e09      	cmp	r6, #9
   14922:	bf0c      	ite	eq
   14924:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
   14928:	f06f 0004 	mvnne.w	r0, #4
}
   1492c:	b007      	add	sp, #28
   1492e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   14930:	b115      	cbz	r5, 14938 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   14932:	602c      	str	r4, [r5, #0]
	return 0;
   14934:	4630      	mov	r0, r6
   14936:	e7f9      	b.n	1492c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   14938:	4620      	mov	r0, r4
   1493a:	f004 f971 	bl	18c20 <net_buf_unref>
	return 0;
   1493e:	4628      	mov	r0, r5
   14940:	e7f4      	b.n	1492c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   14942:	f06f 0036 	mvn.w	r0, #54	; 0x36
   14946:	e7f1      	b.n	1492c <bt_hci_cmd_send_sync+0x90>
   14948:	20002770 	.word	0x20002770
   1494c:	200004ec 	.word	0x200004ec
   14950:	00020fa3 	.word	0x00020fa3
   14954:	0002103b 	.word	0x0002103b
   14958:	00020ff0 	.word	0x00020ff0
   1495c:	00021048 	.word	0x00021048

00014960 <set_random_address>:
{
   14960:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
   14962:	4e15      	ldr	r6, [pc, #84]	; (149b8 <set_random_address+0x58>)
   14964:	2206      	movs	r2, #6
   14966:	f106 0131 	add.w	r1, r6, #49	; 0x31
   1496a:	4605      	mov	r5, r0
   1496c:	f008 f9b5 	bl	1ccda <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14970:	4604      	mov	r4, r0
   14972:	b1e0      	cbz	r0, 149ae <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14974:	2106      	movs	r1, #6
   14976:	f242 0005 	movw	r0, #8197	; 0x2005
   1497a:	f7ff ff35 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1497e:	4604      	mov	r4, r0
   14980:	b1b8      	cbz	r0, 149b2 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
   14982:	2206      	movs	r2, #6
   14984:	4629      	mov	r1, r5
   14986:	3008      	adds	r0, #8
   14988:	f00a fe94 	bl	1f6b4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1498c:	4621      	mov	r1, r4
   1498e:	2200      	movs	r2, #0
   14990:	f242 0005 	movw	r0, #8197	; 0x2005
   14994:	f7ff ff82 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   14998:	4604      	mov	r4, r0
   1499a:	b940      	cbnz	r0, 149ae <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   1499c:	2206      	movs	r2, #6
   1499e:	4629      	mov	r1, r5
   149a0:	f106 0031 	add.w	r0, r6, #49	; 0x31
   149a4:	f008 f9a9 	bl	1ccfa <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   149a8:	2301      	movs	r3, #1
   149aa:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   149ae:	4620      	mov	r0, r4
   149b0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   149b2:	f06f 0436 	mvn.w	r4, #54	; 0x36
   149b6:	e7fa      	b.n	149ae <set_random_address+0x4e>
   149b8:	200003c8 	.word	0x200003c8

000149bc <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   149bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   149c0:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   149c2:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   149c6:	460e      	mov	r6, r1
   149c8:	4690      	mov	r8, r2
   149ca:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   149cc:	d027      	beq.n	14a1e <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   149ce:	4f27      	ldr	r7, [pc, #156]	; (14a6c <le_adv_set_random_addr.isra.0+0xb0>)
   149d0:	b12a      	cbz	r2, 149de <le_adv_set_random_addr.isra.0+0x22>
   149d2:	0688      	lsls	r0, r1, #26
   149d4:	d503      	bpl.n	149de <le_adv_set_random_addr.isra.0+0x22>
   149d6:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   149da:	0659      	lsls	r1, r3, #25
   149dc:	d542      	bpl.n	14a64 <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   149de:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   149e2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   149e6:	5cfb      	ldrb	r3, [r7, r3]
   149e8:	2b01      	cmp	r3, #1
   149ea:	d008      	beq.n	149fe <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
   149ec:	eba9 0404 	sub.w	r4, r9, r4
   149f0:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   149f2:	f1b8 0f00 	cmp.w	r8, #0
   149f6:	d10d      	bne.n	14a14 <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   149f8:	702b      	strb	r3, [r5, #0]
	return 0;
   149fa:	2000      	movs	r0, #0
   149fc:	e007      	b.n	14a0e <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
   149fe:	2007      	movs	r0, #7
   14a00:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   14a04:	4438      	add	r0, r7
   14a06:	f7ff ffab 	bl	14960 <set_random_address>
				if (err) {
   14a0a:	2800      	cmp	r0, #0
   14a0c:	d0ee      	beq.n	149ec <le_adv_set_random_addr.isra.0+0x30>
}
   14a0e:	b003      	add	sp, #12
   14a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14a14:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14a16:	bf48      	it	mi
   14a18:	f043 0302 	orrmi.w	r3, r3, #2
   14a1c:	e7ec      	b.n	149f8 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14a1e:	074b      	lsls	r3, r1, #29
   14a20:	d510      	bpl.n	14a44 <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14a22:	4e12      	ldr	r6, [pc, #72]	; (14a6c <le_adv_set_random_addr.isra.0+0xb0>)
   14a24:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   14a28:	00e7      	lsls	r7, r4, #3
   14a2a:	5cf3      	ldrb	r3, [r6, r3]
   14a2c:	2b01      	cmp	r3, #1
   14a2e:	d105      	bne.n	14a3c <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
   14a30:	2007      	movs	r0, #7
   14a32:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   14a36:	4430      	add	r0, r6
   14a38:	f7ff ff92 	bl	14960 <set_random_address>
			*own_addr_type = id_addr->type;
   14a3c:	1b3c      	subs	r4, r7, r4
   14a3e:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14a40:	702b      	strb	r3, [r5, #0]
		if (err) {
   14a42:	e7e4      	b.n	14a0e <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   14a44:	2106      	movs	r1, #6
   14a46:	4668      	mov	r0, sp
   14a48:	f005 f8ba 	bl	19bc0 <bt_rand>
	if (err) {
   14a4c:	b940      	cbnz	r0, 14a60 <le_adv_set_random_addr.isra.0+0xa4>
	nrpa.val[5] &= 0x3f;
   14a4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   14a52:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   14a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14a58:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   14a5c:	f7ff ff80 	bl	14960 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14a60:	2301      	movs	r3, #1
   14a62:	e7ed      	b.n	14a40 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
   14a64:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14a68:	e7d1      	b.n	14a0e <le_adv_set_random_addr.isra.0+0x52>
   14a6a:	bf00      	nop
   14a6c:	200003c8 	.word	0x200003c8

00014a70 <set_le_adv_enable_legacy>:
{
   14a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14a72:	4606      	mov	r6, r0
   14a74:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   14a76:	f242 000a 	movw	r0, #8202	; 0x200a
   14a7a:	2101      	movs	r1, #1
   14a7c:	f7ff feb4 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   14a80:	4604      	mov	r4, r0
   14a82:	b1e8      	cbz	r0, 14ac0 <set_le_adv_enable_legacy+0x50>
	if (enable) {
   14a84:	3008      	adds	r0, #8
   14a86:	b1cd      	cbz	r5, 14abc <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
   14a88:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   14a8a:	f00a fe1c 	bl	1f6c6 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
   14a8e:	3614      	adds	r6, #20
	state->bit = bit;
   14a90:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
   14a92:	4620      	mov	r0, r4
	state->bit = bit;
   14a94:	9302      	str	r3, [sp, #8]
	state->target = target;
   14a96:	9601      	str	r6, [sp, #4]
	state->val = val;
   14a98:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
   14a9c:	f004 f80c 	bl	18ab8 <net_buf_id>
   14aa0:	4b09      	ldr	r3, [pc, #36]	; (14ac8 <set_le_adv_enable_legacy+0x58>)
   14aa2:	220c      	movs	r2, #12
   14aa4:	fb02 3000 	mla	r0, r2, r0, r3
   14aa8:	ab01      	add	r3, sp, #4
   14aaa:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   14aac:	2200      	movs	r2, #0
   14aae:	4621      	mov	r1, r4
   14ab0:	f242 000a 	movw	r0, #8202	; 0x200a
   14ab4:	f7ff fef2 	bl	1489c <bt_hci_cmd_send_sync>
}
   14ab8:	b004      	add	sp, #16
   14aba:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   14abc:	4629      	mov	r1, r5
   14abe:	e7e4      	b.n	14a8a <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
   14ac0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   14ac4:	e7f8      	b.n	14ab8 <set_le_adv_enable_legacy+0x48>
   14ac6:	bf00      	nop
   14ac8:	20002770 	.word	0x20002770

00014acc <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   14acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ad0:	b087      	sub	sp, #28
   14ad2:	4606      	mov	r6, r0
   14ad4:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   14ad8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   14adc:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   14ae0:	460c      	mov	r4, r1
   14ae2:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   14ae4:	2100      	movs	r1, #0
   14ae6:	2210      	movs	r2, #16
   14ae8:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   14aea:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
   14aec:	f008 f930 	bl	1cd50 <memset>
	if (use_name) {
   14af0:	f1b8 0f00 	cmp.w	r8, #0
   14af4:	d00e      	beq.n	14b14 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
   14af6:	bbb4      	cbnz	r4, 14b66 <le_adv_update.constprop.0+0x9a>
   14af8:	2d00      	cmp	r5, #0
   14afa:	d13f      	bne.n	14b7c <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
   14afc:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 14bb0 <le_adv_update.constprop.0+0xe4>
   14b00:	4658      	mov	r0, fp
   14b02:	f008 f8d7 	bl	1ccb4 <strlen>
   14b06:	2309      	movs	r3, #9
   14b08:	f88d 3000 	strb.w	r3, [sp]
   14b0c:	f88d 0001 	strb.w	r0, [sp, #1]
   14b10:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   14b14:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   14b18:	f1b8 0f00 	cmp.w	r8, #0
   14b1c:	d030      	beq.n	14b80 <le_adv_update.constprop.0+0xb4>
   14b1e:	f1ba 0f00 	cmp.w	sl, #0
   14b22:	d12d      	bne.n	14b80 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
   14b24:	2301      	movs	r3, #1
			d[1].data = &data;
   14b26:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   14b2a:	9305      	str	r3, [sp, #20]
			d_len = 2;
   14b2c:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   14b2e:	a902      	add	r1, sp, #8
   14b30:	f242 0008 	movw	r0, #8200	; 0x2008
   14b34:	f008 fc32 	bl	1d39c <hci_set_ad>
		if (err) {
   14b38:	4604      	mov	r4, r0
   14b3a:	b938      	cbnz	r0, 14b4c <le_adv_update.constprop.0+0x80>
	if (scannable) {
   14b3c:	f1ba 0f00 	cmp.w	sl, #0
   14b40:	d120      	bne.n	14b84 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14b42:	2104      	movs	r1, #4
   14b44:	f106 0014 	add.w	r0, r6, #20
   14b48:	f008 fa32 	bl	1cfb0 <atomic_or>
}
   14b4c:	4620      	mov	r0, r4
   14b4e:	b007      	add	sp, #28
   14b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   14b54:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   14b58:	3a08      	subs	r2, #8
   14b5a:	2a01      	cmp	r2, #1
   14b5c:	d925      	bls.n	14baa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   14b5e:	3301      	adds	r3, #1
   14b60:	429f      	cmp	r7, r3
   14b62:	d1f7      	bne.n	14b54 <le_adv_update.constprop.0+0x88>
   14b64:	e7c8      	b.n	14af8 <le_adv_update.constprop.0+0x2c>
   14b66:	2300      	movs	r3, #0
   14b68:	e7fa      	b.n	14b60 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   14b6a:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   14b6e:	3a08      	subs	r2, #8
   14b70:	2a01      	cmp	r2, #1
   14b72:	d91a      	bls.n	14baa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   14b74:	3301      	adds	r3, #1
   14b76:	4599      	cmp	r9, r3
   14b78:	d1f7      	bne.n	14b6a <le_adv_update.constprop.0+0x9e>
   14b7a:	e7bf      	b.n	14afc <le_adv_update.constprop.0+0x30>
   14b7c:	2300      	movs	r3, #0
   14b7e:	e7fa      	b.n	14b76 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
   14b80:	2201      	movs	r2, #1
   14b82:	e7d4      	b.n	14b2e <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
   14b84:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
   14b88:	2201      	movs	r2, #1
   14b8a:	f1b8 0f00 	cmp.w	r8, #0
   14b8e:	d003      	beq.n	14b98 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
   14b90:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   14b92:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   14b96:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   14b98:	a902      	add	r1, sp, #8
   14b9a:	f242 0009 	movw	r0, #8201	; 0x2009
   14b9e:	f008 fbfd 	bl	1d39c <hci_set_ad>
		if (err) {
   14ba2:	2800      	cmp	r0, #0
   14ba4:	d0cd      	beq.n	14b42 <le_adv_update.constprop.0+0x76>
   14ba6:	4604      	mov	r4, r0
   14ba8:	e7d0      	b.n	14b4c <le_adv_update.constprop.0+0x80>
			return -EINVAL;
   14baa:	f06f 0415 	mvn.w	r4, #21
   14bae:	e7cd      	b.n	14b4c <le_adv_update.constprop.0+0x80>
   14bb0:	00020e21 	.word	0x00020e21

00014bb4 <conn_auto_initiate>:
{
   14bb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   14bb6:	7b43      	ldrb	r3, [r0, #13]
   14bb8:	2b07      	cmp	r3, #7
{
   14bba:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14bbc:	d11e      	bne.n	14bfc <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14bbe:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14bc0:	4630      	mov	r0, r6
   14bc2:	f008 f9da 	bl	1cf7a <atomic_get>
   14bc6:	0483      	lsls	r3, r0, #18
   14bc8:	d41a      	bmi.n	14c00 <conn_auto_initiate+0x4c>
   14bca:	78e3      	ldrb	r3, [r4, #3]
   14bcc:	b123      	cbz	r3, 14bd8 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   14bce:	4b25      	ldr	r3, [pc, #148]	; (14c64 <conn_auto_initiate+0xb0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   14bd0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   14bd4:	071d      	lsls	r5, r3, #28
   14bd6:	d513      	bpl.n	14c00 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   14bd8:	2102      	movs	r1, #2
   14bda:	f242 0016 	movw	r0, #8214	; 0x2016
   14bde:	f7ff fe03 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   14be2:	4605      	mov	r5, r0
   14be4:	b160      	cbz	r0, 14c00 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
   14be6:	2102      	movs	r1, #2
   14be8:	3008      	adds	r0, #8
   14bea:	f00a fd5d 	bl	1f6a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   14bee:	8823      	ldrh	r3, [r4, #0]
   14bf0:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   14bf2:	4629      	mov	r1, r5
   14bf4:	f242 0016 	movw	r0, #8214	; 0x2016
   14bf8:	f7ff fe2e 	bl	14858 <bt_hci_cmd_send>
}
   14bfc:	b004      	add	sp, #16
   14bfe:	bd70      	pop	{r4, r5, r6, pc}
   14c00:	4630      	mov	r0, r6
   14c02:	f008 f9ba 	bl	1cf7a <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   14c06:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   14c0a:	4d16      	ldr	r5, [pc, #88]	; (14c64 <conn_auto_initiate+0xb0>)
   14c0c:	f3c0 3100 	ubfx	r1, r0, #12, #1
   14c10:	d10f      	bne.n	14c32 <conn_auto_initiate+0x7e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   14c12:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   14c16:	07d8      	lsls	r0, r3, #31
   14c18:	d50b      	bpl.n	14c32 <conn_auto_initiate+0x7e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   14c1a:	2302      	movs	r3, #2
   14c1c:	9100      	str	r1, [sp, #0]
   14c1e:	461a      	mov	r2, r3
   14c20:	4620      	mov	r0, r4
   14c22:	f008 fc5b 	bl	1d4dc <bt_le_set_phy>
		if (!err) {
   14c26:	b920      	cbnz	r0, 14c32 <conn_auto_initiate+0x7e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14c28:	2180      	movs	r1, #128	; 0x80
   14c2a:	4630      	mov	r0, r6
   14c2c:	f008 f9c0 	bl	1cfb0 <atomic_or>
			return;
   14c30:	e7e4      	b.n	14bfc <conn_auto_initiate+0x48>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   14c32:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   14c36:	069a      	lsls	r2, r3, #26
   14c38:	d5e0      	bpl.n	14bfc <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14c3a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   14c3e:	689b      	ldr	r3, [r3, #8]
   14c40:	079b      	lsls	r3, r3, #30
   14c42:	d5db      	bpl.n	14bfc <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14c44:	f10d 010e 	add.w	r1, sp, #14
   14c48:	a803      	add	r0, sp, #12
   14c4a:	f008 fb21 	bl	1d290 <hci_le_read_max_data_len>
			if (!err) {
   14c4e:	2800      	cmp	r0, #0
   14c50:	d1d4      	bne.n	14bfc <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
   14c52:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   14c56:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   14c5a:	4620      	mov	r0, r4
   14c5c:	f008 fc21 	bl	1d4a2 <bt_le_set_data_len>
		}
   14c60:	e7cc      	b.n	14bfc <conn_auto_initiate+0x48>
   14c62:	bf00      	nop
   14c64:	200003c8 	.word	0x200003c8

00014c68 <bt_id_add>:
{
   14c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14c6a:	4f42      	ldr	r7, [pc, #264]	; (14d74 <bt_id_add+0x10c>)
   14c6c:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   14c70:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   14c74:	4604      	mov	r4, r0
   14c76:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14c78:	b10a      	cbz	r2, 14c7e <bt_id_add+0x16>
   14c7a:	429a      	cmp	r2, r3
   14c7c:	d208      	bcs.n	14c90 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   14c7e:	3301      	adds	r3, #1
   14c80:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   14c84:	7a23      	ldrb	r3, [r4, #8]
   14c86:	f043 0304 	orr.w	r3, r3, #4
   14c8a:	7223      	strb	r3, [r4, #8]
}
   14c8c:	b003      	add	sp, #12
   14c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   14c90:	2100      	movs	r1, #0
   14c92:	2206      	movs	r2, #6
   14c94:	4608      	mov	r0, r1
   14c96:	f001 f86b 	bl	15d70 <bt_conn_lookup_state_le>
	if (conn) {
   14c9a:	4606      	mov	r6, r0
   14c9c:	b168      	cbz	r0, 14cba <bt_id_add+0x52>
   14c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14ca2:	f107 0098 	add.w	r0, r7, #152	; 0x98
   14ca6:	f008 f983 	bl	1cfb0 <atomic_or>
	keys->state |= flag;
   14caa:	7a23      	ldrb	r3, [r4, #8]
   14cac:	f043 0301 	orr.w	r3, r3, #1
   14cb0:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   14cb2:	4630      	mov	r0, r6
   14cb4:	f008 fe1d 	bl	1d8f2 <bt_conn_unref>
		return;
   14cb8:	e7e8      	b.n	14c8c <bt_id_add+0x24>
	func(&bt_dev.adv, data);
   14cba:	4601      	mov	r1, r0
   14cbc:	f107 0018 	add.w	r0, r7, #24
   14cc0:	f008 fafe 	bl	1d2c0 <adv_pause_enabled>
	if (bt_dev.le.rl_entries) {
   14cc4:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
   14cc8:	b9b3      	cbnz	r3, 14cf8 <bt_id_add+0x90>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   14cca:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   14cce:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   14cd2:	429a      	cmp	r2, r3
   14cd4:	d11d      	bne.n	14d12 <bt_id_add+0xaa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   14cd6:	2200      	movs	r2, #0
   14cd8:	4611      	mov	r1, r2
   14cda:	f242 0029 	movw	r0, #8233	; 0x2029
   14cde:	f7ff fddd 	bl	1489c <bt_hci_cmd_send_sync>
		if (err) {
   14ce2:	b970      	cbnz	r0, 14d02 <bt_id_add+0x9a>
		bt_dev.le.rl_entries++;
   14ce4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14ce8:	3301      	adds	r3, #1
   14cea:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   14cee:	7a23      	ldrb	r3, [r4, #8]
   14cf0:	f043 0304 	orr.w	r3, r3, #4
   14cf4:	7223      	strb	r3, [r4, #8]
		goto done;
   14cf6:	e004      	b.n	14d02 <bt_id_add+0x9a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   14cf8:	4630      	mov	r0, r6
   14cfa:	f008 fb37 	bl	1d36c <addr_res_enable>
		if (err) {
   14cfe:	2800      	cmp	r0, #0
   14d00:	d0e3      	beq.n	14cca <bt_id_add+0x62>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   14d02:	2001      	movs	r0, #1
   14d04:	f008 fb32 	bl	1d36c <addr_res_enable>
	func(&bt_dev.adv, data);
   14d08:	481b      	ldr	r0, [pc, #108]	; (14d78 <bt_id_add+0x110>)
   14d0a:	2100      	movs	r1, #0
   14d0c:	f008 faed 	bl	1d2ea <adv_unpause_enabled>
}
   14d10:	e7bc      	b.n	14c8c <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   14d12:	1c67      	adds	r7, r4, #1
   14d14:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   14d18:	4638      	mov	r0, r7
   14d1a:	f008 faf6 	bl	1d30a <hci_id_add.isra.0>
	if (err) {
   14d1e:	4606      	mov	r6, r0
   14d20:	2800      	cmp	r0, #0
   14d22:	d1ee      	bne.n	14d02 <bt_id_add+0x9a>
	bt_dev.le.rl_entries++;
   14d24:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14d28:	3301      	adds	r3, #1
   14d2a:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   14d2e:	7a23      	ldrb	r3, [r4, #8]
   14d30:	f043 0304 	orr.w	r3, r3, #4
   14d34:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   14d36:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
   14d3a:	075b      	lsls	r3, r3, #29
   14d3c:	d5e1      	bpl.n	14d02 <bt_id_add+0x9a>
	bt_addr_le_copy(&cp.id_addr, addr);
   14d3e:	4639      	mov	r1, r7
   14d40:	4668      	mov	r0, sp
   14d42:	f008 f920 	bl	1cf86 <bt_addr_le_copy>
	cp.mode = mode;
   14d46:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   14d48:	2108      	movs	r1, #8
   14d4a:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   14d4e:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   14d52:	f7ff fd49 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   14d56:	4604      	mov	r4, r0
   14d58:	2800      	cmp	r0, #0
   14d5a:	d0d2      	beq.n	14d02 <bt_id_add+0x9a>
	net_buf_add_mem(buf, &cp, sizeof(cp));
   14d5c:	2208      	movs	r2, #8
   14d5e:	4669      	mov	r1, sp
   14d60:	4410      	add	r0, r2
   14d62:	f00a fca7 	bl	1f6b4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   14d66:	4632      	mov	r2, r6
   14d68:	4621      	mov	r1, r4
   14d6a:	f242 004e 	movw	r0, #8270	; 0x204e
   14d6e:	f7ff fd95 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   14d72:	e7c6      	b.n	14d02 <bt_id_add+0x9a>
   14d74:	200003c8 	.word	0x200003c8
   14d78:	200003e0 	.word	0x200003e0

00014d7c <bt_id_del>:
{
   14d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   14d80:	4f3a      	ldr	r7, [pc, #232]	; (14e6c <bt_id_del+0xf0>)
   14d82:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   14d86:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   14d8a:	4604      	mov	r4, r0
   14d8c:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
   14d8e:	b112      	cbz	r2, 14d96 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   14d90:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   14d92:	4293      	cmp	r3, r2
   14d94:	dd08      	ble.n	14da8 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   14d96:	3b01      	subs	r3, #1
   14d98:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   14d9c:	7a23      	ldrb	r3, [r4, #8]
   14d9e:	f023 0304 	bic.w	r3, r3, #4
   14da2:	7223      	strb	r3, [r4, #8]
}
   14da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   14da8:	2100      	movs	r1, #0
   14daa:	2206      	movs	r2, #6
   14dac:	4608      	mov	r0, r1
   14dae:	f000 ffdf 	bl	15d70 <bt_conn_lookup_state_le>
	if (conn) {
   14db2:	4606      	mov	r6, r0
   14db4:	b170      	cbz	r0, 14dd4 <bt_id_del+0x58>
   14db6:	f107 0098 	add.w	r0, r7, #152	; 0x98
   14dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14dbe:	f008 f8f7 	bl	1cfb0 <atomic_or>
	keys->state |= flag;
   14dc2:	7a23      	ldrb	r3, [r4, #8]
   14dc4:	f043 0302 	orr.w	r3, r3, #2
   14dc8:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   14dca:	4630      	mov	r0, r6
}
   14dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   14dd0:	f008 bd8f 	b.w	1d8f2 <bt_conn_unref>
	func(&bt_dev.adv, data);
   14dd4:	4601      	mov	r1, r0
   14dd6:	f107 0018 	add.w	r0, r7, #24
   14dda:	f008 fa71 	bl	1d2c0 <adv_pause_enabled>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   14dde:	4630      	mov	r0, r6
   14de0:	f008 fac4 	bl	1d36c <addr_res_enable>
	if (err) {
   14de4:	4607      	mov	r7, r0
   14de6:	b988      	cbnz	r0, 14e0c <bt_id_del+0x90>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14de8:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14dec:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   14df0:	429a      	cmp	r2, r3
   14df2:	d217      	bcs.n	14e24 <bt_id_del+0xa8>
		bt_dev.le.rl_entries--;
   14df4:	3b01      	subs	r3, #1
   14df6:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   14dfa:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   14dfc:	491c      	ldr	r1, [pc, #112]	; (14e70 <bt_id_del+0xf4>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   14dfe:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   14e02:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   14e04:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   14e06:	2002      	movs	r0, #2
   14e08:	f003 fde0 	bl	189cc <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   14e0c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14e10:	b113      	cbz	r3, 14e18 <bt_id_del+0x9c>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   14e12:	2001      	movs	r0, #1
   14e14:	f008 faaa 	bl	1d36c <addr_res_enable>
}
   14e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	func(&bt_dev.adv, data);
   14e1c:	4815      	ldr	r0, [pc, #84]	; (14e74 <bt_id_del+0xf8>)
   14e1e:	2100      	movs	r1, #0
   14e20:	f008 ba63 	b.w	1d2ea <adv_unpause_enabled>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   14e24:	2107      	movs	r1, #7
   14e26:	f242 0028 	movw	r0, #8232	; 0x2028
   14e2a:	f7ff fcdd 	bl	147e8 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   14e2e:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   14e32:	4606      	mov	r6, r0
   14e34:	2800      	cmp	r0, #0
   14e36:	d0e9      	beq.n	14e0c <bt_id_del+0x90>
	cp = net_buf_add(buf, sizeof(*cp));
   14e38:	2107      	movs	r1, #7
   14e3a:	3008      	adds	r0, #8
   14e3c:	f00a fc34 	bl	1f6a8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   14e40:	4641      	mov	r1, r8
   14e42:	f008 f8a0 	bl	1cf86 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   14e46:	463a      	mov	r2, r7
   14e48:	4631      	mov	r1, r6
   14e4a:	f242 0028 	movw	r0, #8232	; 0x2028
   14e4e:	f7ff fd25 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   14e52:	2800      	cmp	r0, #0
   14e54:	d1da      	bne.n	14e0c <bt_id_del+0x90>
	bt_dev.le.rl_entries--;
   14e56:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14e5a:	3b01      	subs	r3, #1
   14e5c:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   14e60:	7a23      	ldrb	r3, [r4, #8]
   14e62:	f023 0304 	bic.w	r3, r3, #4
   14e66:	7223      	strb	r3, [r4, #8]
   14e68:	e7d0      	b.n	14e0c <bt_id_del+0x90>
   14e6a:	bf00      	nop
   14e6c:	200003c8 	.word	0x200003c8
   14e70:	0001d35b 	.word	0x0001d35b
   14e74:	200003e0 	.word	0x200003e0

00014e78 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14e78:	b530      	push	{r4, r5, lr}
   14e7a:	4d13      	ldr	r5, [pc, #76]	; (14ec8 <id_create.isra.0+0x50>)
   14e7c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14e80:	b085      	sub	sp, #20
   14e82:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14e84:	460c      	mov	r4, r1
   14e86:	b171      	cbz	r1, 14ea6 <id_create.isra.0+0x2e>
   14e88:	2300      	movs	r3, #0
   14e8a:	4669      	mov	r1, sp
   14e8c:	4620      	mov	r0, r4
   14e8e:	9300      	str	r3, [sp, #0]
   14e90:	f8cd 3003 	str.w	r3, [sp, #3]
   14e94:	f008 f87a 	bl	1cf8c <bt_addr_le_cmp>
   14e98:	b128      	cbz	r0, 14ea6 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14e9a:	4621      	mov	r1, r4
   14e9c:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14e9e:	f008 f872 	bl	1cf86 <bt_addr_le_copy>
}
   14ea2:	b005      	add	sp, #20
   14ea4:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   14ea6:	a802      	add	r0, sp, #8
   14ea8:	f008 fba9 	bl	1d5fe <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   14eac:	a802      	add	r0, sp, #8
   14eae:	f7ff f94f 	bl	14150 <id_find>
   14eb2:	2800      	cmp	r0, #0
   14eb4:	daf7      	bge.n	14ea6 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14eb6:	a902      	add	r1, sp, #8
   14eb8:	4628      	mov	r0, r5
   14eba:	f008 f864 	bl	1cf86 <bt_addr_le_copy>
		if (addr) {
   14ebe:	2c00      	cmp	r4, #0
   14ec0:	d0ef      	beq.n	14ea2 <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14ec2:	4629      	mov	r1, r5
   14ec4:	4620      	mov	r0, r4
   14ec6:	e7ea      	b.n	14e9e <id_create.isra.0+0x26>
   14ec8:	200003c8 	.word	0x200003c8

00014ecc <hci_event_prio>:
{
   14ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ed0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   14ed2:	f100 0608 	add.w	r6, r0, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   14ed6:	4630      	mov	r0, r6
   14ed8:	f00a fc1d 	bl	1f716 <net_buf_simple_headroom>
	state->len = buf->len;
   14edc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14ee0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   14ee4:	4605      	mov	r5, r0
   14ee6:	d80c      	bhi.n	14f02 <hci_event_prio+0x36>
   14ee8:	4a1c      	ldr	r2, [pc, #112]	; (14f5c <hci_event_prio+0x90>)
   14eea:	491d      	ldr	r1, [pc, #116]	; (14f60 <hci_event_prio+0x94>)
   14eec:	481d      	ldr	r0, [pc, #116]	; (14f64 <hci_event_prio+0x98>)
   14eee:	f641 1326 	movw	r3, #6438	; 0x1926
   14ef2:	f006 f9d2 	bl	1b29a <printk>
   14ef6:	4040      	eors	r0, r0
   14ef8:	f380 8811 	msr	BASEPRI, r0
   14efc:	f04f 0003 	mov.w	r0, #3
   14f00:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   14f02:	2102      	movs	r1, #2
   14f04:	4630      	mov	r0, r6
   14f06:	f00a fbf6 	bl	1f6f6 <net_buf_simple_pull_mem>
   14f0a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14f0c:	7800      	ldrb	r0, [r0, #0]
   14f0e:	f007 fffe 	bl	1cf0e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14f12:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14f14:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14f16:	d40c      	bmi.n	14f32 <hci_event_prio+0x66>
   14f18:	4a10      	ldr	r2, [pc, #64]	; (14f5c <hci_event_prio+0x90>)
   14f1a:	4913      	ldr	r1, [pc, #76]	; (14f68 <hci_event_prio+0x9c>)
   14f1c:	4811      	ldr	r0, [pc, #68]	; (14f64 <hci_event_prio+0x98>)
   14f1e:	f641 132a 	movw	r3, #6442	; 0x192a
   14f22:	f006 f9ba 	bl	1b29a <printk>
   14f26:	4040      	eors	r0, r0
   14f28:	f380 8811 	msr	BASEPRI, r0
   14f2c:	f04f 0003 	mov.w	r0, #3
   14f30:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14f32:	2305      	movs	r3, #5
   14f34:	4a0d      	ldr	r2, [pc, #52]	; (14f6c <hci_event_prio+0xa0>)
   14f36:	7838      	ldrb	r0, [r7, #0]
   14f38:	4621      	mov	r1, r4
   14f3a:	f007 fffa 	bl	1cf32 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14f3e:	07b3      	lsls	r3, r6, #30
   14f40:	d507      	bpl.n	14f52 <hci_event_prio+0x86>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   14f42:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14f44:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14f48:	fa10 f585 	uxtah	r5, r0, r5
   14f4c:	60a5      	str	r5, [r4, #8]
}
   14f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14f52:	4620      	mov	r0, r4
}
   14f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   14f58:	f003 be62 	b.w	18c20 <net_buf_unref>
   14f5c:	00020fa3 	.word	0x00020fa3
   14f60:	00020fd7 	.word	0x00020fd7
   14f64:	00020ff0 	.word	0x00020ff0
   14f68:	00021068 	.word	0x00021068
   14f6c:	00020a14 	.word	0x00020a14

00014f70 <bt_recv>:
{
   14f70:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   14f72:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   14f74:	2b01      	cmp	r3, #1
{
   14f76:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   14f78:	d007      	beq.n	14f8a <bt_recv+0x1a>
   14f7a:	2b03      	cmp	r3, #3
   14f7c:	d113      	bne.n	14fa6 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   14f7e:	480c      	ldr	r0, [pc, #48]	; (14fb0 <bt_recv+0x40>)
   14f80:	4629      	mov	r1, r5
   14f82:	f00a fb5e 	bl	1f642 <net_buf_put>
		return 0;
   14f86:	2000      	movs	r0, #0
   14f88:	e00c      	b.n	14fa4 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14f8a:	6883      	ldr	r3, [r0, #8]
   14f8c:	7818      	ldrb	r0, [r3, #0]
   14f8e:	f007 ffbe 	bl	1cf0e <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14f92:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14f94:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14f96:	d502      	bpl.n	14f9e <bt_recv+0x2e>
			hci_event_prio(buf);
   14f98:	4628      	mov	r0, r5
   14f9a:	f7ff ff97 	bl	14ecc <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14f9e:	f014 0002 	ands.w	r0, r4, #2
   14fa2:	d1ec      	bne.n	14f7e <bt_recv+0xe>
}
   14fa4:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   14fa6:	f003 fe3b 	bl	18c20 <net_buf_unref>
		return -EINVAL;
   14faa:	f06f 0015 	mvn.w	r0, #21
   14fae:	e7f9      	b.n	14fa4 <bt_recv+0x34>
   14fb0:	200004d4 	.word	0x200004d4

00014fb4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14fb4:	4a08      	ldr	r2, [pc, #32]	; (14fd8 <bt_hci_driver_register+0x24>)
{
   14fb6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   14fb8:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
   14fbc:	b930      	cbnz	r0, 14fcc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   14fbe:	68d9      	ldr	r1, [r3, #12]
   14fc0:	b139      	cbz	r1, 14fd2 <bt_hci_driver_register+0x1e>
   14fc2:	6919      	ldr	r1, [r3, #16]
   14fc4:	b129      	cbz	r1, 14fd2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   14fc6:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	return 0;
   14fca:	4770      	bx	lr
		return -EALREADY;
   14fcc:	f06f 0044 	mvn.w	r0, #68	; 0x44
   14fd0:	4770      	bx	lr
		return -EINVAL;
   14fd2:	f06f 0015 	mvn.w	r0, #21
}
   14fd6:	4770      	bx	lr
   14fd8:	200003c8 	.word	0x200003c8

00014fdc <bt_finalize_init>:
   14fdc:	4801      	ldr	r0, [pc, #4]	; (14fe4 <bt_finalize_init+0x8>)
   14fde:	2102      	movs	r1, #2
   14fe0:	f007 bfe6 	b.w	1cfb0 <atomic_or>
   14fe4:	20000460 	.word	0x20000460

00014fe8 <bt_get_name>:
}
   14fe8:	4800      	ldr	r0, [pc, #0]	; (14fec <bt_get_name+0x4>)
   14fea:	4770      	bx	lr
   14fec:	00020e21 	.word	0x00020e21

00014ff0 <bt_id_create>:
{
   14ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14ff2:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14ff4:	4605      	mov	r5, r0
   14ff6:	b918      	cbnz	r0, 15000 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14ff8:	b1ec      	cbz	r4, 15036 <bt_id_create+0x46>
		return -EINVAL;
   14ffa:	f06f 0415 	mvn.w	r4, #21
   14ffe:	e017      	b.n	15030 <bt_id_create+0x40>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15000:	2300      	movs	r3, #0
   15002:	4669      	mov	r1, sp
   15004:	9300      	str	r3, [sp, #0]
   15006:	f8cd 3003 	str.w	r3, [sp, #3]
   1500a:	f007 ffbf 	bl	1cf8c <bt_addr_le_cmp>
   1500e:	2800      	cmp	r0, #0
   15010:	d0f2      	beq.n	14ff8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15012:	782b      	ldrb	r3, [r5, #0]
   15014:	2b01      	cmp	r3, #1
   15016:	d1f0      	bne.n	14ffa <bt_id_create+0xa>
   15018:	79ab      	ldrb	r3, [r5, #6]
   1501a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1501e:	2bc0      	cmp	r3, #192	; 0xc0
   15020:	d1eb      	bne.n	14ffa <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   15022:	4628      	mov	r0, r5
   15024:	f7ff f894 	bl	14150 <id_find>
   15028:	2800      	cmp	r0, #0
   1502a:	dbe5      	blt.n	14ff8 <bt_id_create+0x8>
			return -EALREADY;
   1502c:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   15030:	4620      	mov	r0, r4
   15032:	b003      	add	sp, #12
   15034:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   15036:	4b07      	ldr	r3, [pc, #28]	; (15054 <bt_id_create+0x64>)
   15038:	79dc      	ldrb	r4, [r3, #7]
   1503a:	2c01      	cmp	r4, #1
   1503c:	d006      	beq.n	1504c <bt_id_create+0x5c>
	new_id = bt_dev.id_count++;
   1503e:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   15040:	4629      	mov	r1, r5
   15042:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   15044:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   15046:	f7ff ff17 	bl	14e78 <id_create.isra.0>
	return new_id;
   1504a:	e7f1      	b.n	15030 <bt_id_create+0x40>
		return -ENOMEM;
   1504c:	f06f 040b 	mvn.w	r4, #11
   15050:	e7ee      	b.n	15030 <bt_id_create+0x40>
   15052:	bf00      	nop
   15054:	200003c8 	.word	0x200003c8

00015058 <bt_setup_public_id_addr>:
{
   15058:	b570      	push	{r4, r5, r6, lr}
   1505a:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1505c:	aa01      	add	r2, sp, #4
   1505e:	2100      	movs	r1, #0
   15060:	f241 0009 	movw	r0, #4105	; 0x1009
   15064:	f7ff fc1a 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   15068:	4e1a      	ldr	r6, [pc, #104]	; (150d4 <bt_setup_public_id_addr+0x7c>)
   1506a:	4604      	mov	r4, r0
   1506c:	b118      	cbz	r0, 15076 <bt_setup_public_id_addr+0x1e>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1506e:	2300      	movs	r3, #0
   15070:	71f3      	strb	r3, [r6, #7]
}
   15072:	b006      	add	sp, #24
   15074:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15076:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15078:	689d      	ldr	r5, [r3, #8]
   1507a:	9004      	str	r0, [sp, #16]
   1507c:	3501      	adds	r5, #1
   1507e:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
   15082:	2206      	movs	r2, #6
   15084:	a904      	add	r1, sp, #16
   15086:	4628      	mov	r0, r5
   15088:	f007 fe27 	bl	1ccda <memcmp>
   1508c:	b918      	cbnz	r0, 15096 <bt_setup_public_id_addr+0x3e>
		net_buf_unref(rsp);
   1508e:	9801      	ldr	r0, [sp, #4]
   15090:	f003 fdc6 	bl	18c20 <net_buf_unref>
   15094:	e7eb      	b.n	1506e <bt_setup_public_id_addr+0x16>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   15096:	4b10      	ldr	r3, [pc, #64]	; (150d8 <bt_setup_public_id_addr+0x80>)
   15098:	6818      	ldr	r0, [r3, #0]
   1509a:	9002      	str	r0, [sp, #8]
   1509c:	889b      	ldrh	r3, [r3, #4]
   1509e:	f8ad 300c 	strh.w	r3, [sp, #12]
   150a2:	2206      	movs	r2, #6
   150a4:	a902      	add	r1, sp, #8
   150a6:	4628      	mov	r0, r5
   150a8:	f007 fe17 	bl	1ccda <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   150ac:	2800      	cmp	r0, #0
   150ae:	d0ee      	beq.n	1508e <bt_setup_public_id_addr+0x36>
	memcpy(dst, src, sizeof(*dst));
   150b0:	4629      	mov	r1, r5
   150b2:	2206      	movs	r2, #6
   150b4:	f10d 0011 	add.w	r0, sp, #17
   150b8:	f007 fe1f 	bl	1ccfa <memcpy>
	net_buf_unref(rsp);
   150bc:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   150be:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   150c2:	f003 fdad 	bl	18c20 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   150c6:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   150c8:	a904      	add	r1, sp, #16
   150ca:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
   150cc:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   150ce:	f7ff fed3 	bl	14e78 <id_create.isra.0>
   150d2:	e7ce      	b.n	15072 <bt_setup_public_id_addr+0x1a>
   150d4:	200003c8 	.word	0x200003c8
   150d8:	0002061f 	.word	0x0002061f

000150dc <bt_read_static_addr>:
{
   150dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   150e0:	4b15      	ldr	r3, [pc, #84]	; (15138 <bt_read_static_addr+0x5c>)
   150e2:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
   150e6:	f014 0401 	ands.w	r4, r4, #1
{
   150ea:	4607      	mov	r7, r0
   150ec:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   150ee:	d015      	beq.n	1511c <bt_read_static_addr+0x40>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   150f0:	aa01      	add	r2, sp, #4
   150f2:	2100      	movs	r1, #0
   150f4:	f64f 4009 	movw	r0, #64521	; 0xfc09
   150f8:	f7ff fbd0 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   150fc:	4605      	mov	r5, r0
   150fe:	b9c8      	cbnz	r0, 15134 <bt_read_static_addr+0x58>
	rp = (void *)rsp->data;
   15100:	9b01      	ldr	r3, [sp, #4]
   15102:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   15104:	785c      	ldrb	r4, [r3, #1]
   15106:	42b4      	cmp	r4, r6
   15108:	bf28      	it	cs
   1510a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1510c:	f04f 0816 	mov.w	r8, #22
   15110:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   15112:	42a5      	cmp	r5, r4
   15114:	db06      	blt.n	15124 <bt_read_static_addr+0x48>
	net_buf_unref(rsp);
   15116:	9801      	ldr	r0, [sp, #4]
   15118:	f003 fd82 	bl	18c20 <net_buf_unref>
}
   1511c:	4620      	mov	r0, r4
   1511e:	b002      	add	sp, #8
   15120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   15124:	fb08 7005 	mla	r0, r8, r5, r7
   15128:	2216      	movs	r2, #22
   1512a:	4631      	mov	r1, r6
   1512c:	f007 fde5 	bl	1ccfa <memcpy>
	for (i = 0; i < cnt; i++) {
   15130:	3501      	adds	r5, #1
   15132:	e7ee      	b.n	15112 <bt_read_static_addr+0x36>
		return 0;
   15134:	2400      	movs	r4, #0
   15136:	e7f1      	b.n	1511c <bt_read_static_addr+0x40>
   15138:	200003c8 	.word	0x200003c8

0001513c <bt_setup_random_id_addr>:
{
   1513c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   1513e:	4d14      	ldr	r5, [pc, #80]	; (15190 <bt_setup_random_id_addr+0x54>)
   15140:	79ec      	ldrb	r4, [r5, #7]
{
   15142:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   15144:	b9f4      	cbnz	r4, 15184 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   15146:	2101      	movs	r1, #1
   15148:	a802      	add	r0, sp, #8
   1514a:	f7ff ffc7 	bl	150dc <bt_read_static_addr>
   1514e:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   15150:	b1c0      	cbz	r0, 15184 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   15152:	2716      	movs	r7, #22
   15154:	e00f      	b.n	15176 <bt_setup_random_id_addr+0x3a>
   15156:	ab02      	add	r3, sp, #8
   15158:	fb07 3106 	mla	r1, r7, r6, r3
   1515c:	2206      	movs	r2, #6
   1515e:	f10d 0001 	add.w	r0, sp, #1
   15162:	f007 fdca 	bl	1ccfa <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   15166:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   15168:	4669      	mov	r1, sp
   1516a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   1516c:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   15170:	f7ff fe82 	bl	14e78 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15174:	3401      	adds	r4, #1
   15176:	79eb      	ldrb	r3, [r5, #7]
   15178:	b2e6      	uxtb	r6, r4
   1517a:	42b3      	cmp	r3, r6
   1517c:	d8eb      	bhi.n	15156 <bt_setup_random_id_addr+0x1a>
			return 0;
   1517e:	2000      	movs	r0, #0
}
   15180:	b009      	add	sp, #36	; 0x24
   15182:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   15184:	2100      	movs	r1, #0
   15186:	4608      	mov	r0, r1
   15188:	f7ff ff32 	bl	14ff0 <bt_id_create>
   1518c:	e7f8      	b.n	15180 <bt_setup_random_id_addr+0x44>
   1518e:	bf00      	nop
   15190:	200003c8 	.word	0x200003c8

00015194 <bt_enable>:
{
   15194:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   15198:	4d33      	ldr	r5, [pc, #204]	; (15268 <bt_enable+0xd4>)
   1519a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
{
   1519e:	b088      	sub	sp, #32
   151a0:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   151a2:	2b00      	cmp	r3, #0
   151a4:	d059      	beq.n	1525a <bt_enable+0xc6>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   151a6:	2101      	movs	r1, #1
   151a8:	f105 0098 	add.w	r0, r5, #152	; 0x98
   151ac:	f007 ff00 	bl	1cfb0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   151b0:	f010 0401 	ands.w	r4, r0, #1
   151b4:	d154      	bne.n	15260 <bt_enable+0xcc>
	ready_cb = cb;
   151b6:	4b2d      	ldr	r3, [pc, #180]	; (1526c <bt_enable+0xd8>)
   151b8:	f04f 0800 	mov.w	r8, #0
   151bc:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   151be:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   151c2:	f06f 0308 	mvn.w	r3, #8
   151c6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   151ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
   151ce:	e9cd 4400 	strd	r4, r4, [sp]
   151d2:	4b27      	ldr	r3, [pc, #156]	; (15270 <bt_enable+0xdc>)
   151d4:	4927      	ldr	r1, [pc, #156]	; (15274 <bt_enable+0xe0>)
   151d6:	9404      	str	r4, [sp, #16]
   151d8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   151dc:	4826      	ldr	r0, [pc, #152]	; (15278 <bt_enable+0xe4>)
   151de:	f005 fd35 	bl	1ac4c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   151e2:	4926      	ldr	r1, [pc, #152]	; (1527c <bt_enable+0xe8>)
   151e4:	4824      	ldr	r0, [pc, #144]	; (15278 <bt_enable+0xe4>)
   151e6:	f00a fe8d 	bl	1ff04 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   151ea:	f06f 0307 	mvn.w	r3, #7
   151ee:	e9cd 4302 	strd	r4, r3, [sp, #8]
   151f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   151f6:	e9cd 4400 	strd	r4, r4, [sp]
   151fa:	4b21      	ldr	r3, [pc, #132]	; (15280 <bt_enable+0xec>)
   151fc:	4921      	ldr	r1, [pc, #132]	; (15284 <bt_enable+0xf0>)
   151fe:	9404      	str	r4, [sp, #16]
   15200:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15204:	4820      	ldr	r0, [pc, #128]	; (15288 <bt_enable+0xf4>)
   15206:	f005 fd21 	bl	1ac4c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1520a:	4920      	ldr	r1, [pc, #128]	; (1528c <bt_enable+0xf8>)
   1520c:	481e      	ldr	r0, [pc, #120]	; (15288 <bt_enable+0xf4>)
   1520e:	f00a fe79 	bl	1ff04 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   15212:	f7fe ff2b 	bl	1406c <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   15216:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   1521a:	68db      	ldr	r3, [r3, #12]
   1521c:	4798      	blx	r3
	if (err) {
   1521e:	4604      	mov	r4, r0
   15220:	b950      	cbnz	r0, 15238 <bt_enable+0xa4>
	if (!cb) {
   15222:	b96e      	cbnz	r6, 15240 <bt_enable+0xac>
	err = hci_init();
   15224:	f7fc fea4 	bl	11f70 <hci_init>
	if (err) {
   15228:	4604      	mov	r4, r0
   1522a:	b928      	cbnz	r0, 15238 <bt_enable+0xa4>
		err = bt_conn_init();
   1522c:	f000 ffb2 	bl	16194 <bt_conn_init>
		if (err) {
   15230:	4604      	mov	r4, r0
   15232:	b908      	cbnz	r0, 15238 <bt_enable+0xa4>
	bt_finalize_init();
   15234:	f7ff fed2 	bl	14fdc <bt_finalize_init>
}
   15238:	4620      	mov	r0, r4
   1523a:	b008      	add	sp, #32
   1523c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   15240:	2101      	movs	r1, #1
   15242:	f105 0094 	add.w	r0, r5, #148	; 0x94
   15246:	f007 feb3 	bl	1cfb0 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1524a:	07c3      	lsls	r3, r0, #31
   1524c:	d4f4      	bmi.n	15238 <bt_enable+0xa4>
		k_queue_append(&work_q->queue, work);
   1524e:	4810      	ldr	r0, [pc, #64]	; (15290 <bt_enable+0xfc>)
   15250:	f105 018c 	add.w	r1, r5, #140	; 0x8c
   15254:	f00a fd10 	bl	1fc78 <k_queue_append>
   15258:	e7ee      	b.n	15238 <bt_enable+0xa4>
		return -ENODEV;
   1525a:	f06f 0412 	mvn.w	r4, #18
   1525e:	e7eb      	b.n	15238 <bt_enable+0xa4>
		return -EALREADY;
   15260:	f06f 0444 	mvn.w	r4, #68	; 0x44
   15264:	e7e8      	b.n	15238 <bt_enable+0xa4>
   15266:	bf00      	nop
   15268:	200003c8 	.word	0x200003c8
   1526c:	20002790 	.word	0x20002790
   15270:	000145f1 	.word	0x000145f1
   15274:	20003b00 	.word	0x20003b00
   15278:	20001f30 	.word	0x20001f30
   1527c:	00021081 	.word	0x00021081
   15280:	00014345 	.word	0x00014345
   15284:	200036e0 	.word	0x200036e0
   15288:	20001ea8 	.word	0x20001ea8
   1528c:	00021087 	.word	0x00021087
   15290:	200025a8 	.word	0x200025a8

00015294 <init_work>:
{
   15294:	b510      	push	{r4, lr}
	err = hci_init();
   15296:	f7fc fe6b 	bl	11f70 <hci_init>
	if (err) {
   1529a:	4604      	mov	r4, r0
   1529c:	b928      	cbnz	r0, 152aa <init_work+0x16>
		err = bt_conn_init();
   1529e:	f000 ff79 	bl	16194 <bt_conn_init>
		if (err) {
   152a2:	4604      	mov	r4, r0
   152a4:	b908      	cbnz	r0, 152aa <init_work+0x16>
	bt_finalize_init();
   152a6:	f7ff fe99 	bl	14fdc <bt_finalize_init>
	if (ready_cb) {
   152aa:	4b04      	ldr	r3, [pc, #16]	; (152bc <init_work+0x28>)
   152ac:	681b      	ldr	r3, [r3, #0]
   152ae:	b11b      	cbz	r3, 152b8 <init_work+0x24>
		ready_cb(err);
   152b0:	4620      	mov	r0, r4
}
   152b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   152b6:	4718      	bx	r3
}
   152b8:	bd10      	pop	{r4, pc}
   152ba:	bf00      	nop
   152bc:	20002790 	.word	0x20002790

000152c0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   152c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   152c4:	690d      	ldr	r5, [r1, #16]
{
   152c6:	b08f      	sub	sp, #60	; 0x3c
   152c8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   152ca:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   152cc:	ebb5 0b03 	subs.w	fp, r5, r3
{
   152d0:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   152d2:	487e      	ldr	r0, [pc, #504]	; (154cc <bt_le_adv_start_legacy+0x20c>)
	struct bt_conn *conn = NULL;
   152d4:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   152d6:	bf18      	it	ne
   152d8:	f04f 0b01 	movne.w	fp, #1
{
   152dc:	460c      	mov	r4, r1
   152de:	4691      	mov	r9, r2
   152e0:	f007 fe4b 	bl	1cf7a <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   152e4:	0787      	lsls	r7, r0, #30
   152e6:	f140 80e3 	bpl.w	154b0 <bt_le_adv_start_legacy+0x1f0>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   152ea:	4608      	mov	r0, r1
   152ec:	f7fe ff48 	bl	14180 <valid_adv_param>
   152f0:	4607      	mov	r7, r0
   152f2:	2800      	cmp	r0, #0
   152f4:	f000 80df 	beq.w	154b6 <bt_le_adv_start_legacy+0x1f6>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   152f8:	f106 0814 	add.w	r8, r6, #20
   152fc:	4640      	mov	r0, r8
   152fe:	f007 fe3c 	bl	1cf7a <atomic_get>
   15302:	f3c0 1180 	ubfx	r1, r0, #6, #1
   15306:	0640      	lsls	r0, r0, #25
   15308:	f100 80d8 	bmi.w	154bc <bt_le_adv_start_legacy+0x1fc>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   1530c:	220f      	movs	r2, #15
   1530e:	a80a      	add	r0, sp, #40	; 0x28
   15310:	9105      	str	r1, [sp, #20]
   15312:	f007 fd1d 	bl	1cd50 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15316:	68a3      	ldr	r3, [r4, #8]
   15318:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   1531c:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1531e:	68e3      	ldr	r3, [r4, #12]
   15320:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   15324:	f007 fe1a 	bl	1cf5c <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   15328:	7832      	ldrb	r2, [r6, #0]
   1532a:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   1532c:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1532e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   15332:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   15334:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   15338:	d004      	beq.n	15344 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1533a:	4864      	ldr	r0, [pc, #400]	; (154cc <bt_le_adv_start_legacy+0x20c>)
   1533c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   15340:	f007 fe27 	bl	1cf92 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
   15344:	4b62      	ldr	r3, [pc, #392]	; (154d0 <bt_le_adv_start_legacy+0x210>)
	adv->id = param->id;
   15346:	7820      	ldrb	r0, [r4, #0]
   15348:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1534a:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   1534e:	465a      	mov	r2, fp
   15350:	6861      	ldr	r1, [r4, #4]
   15352:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   15356:	f7ff fb31 	bl	149bc <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   1535a:	4683      	mov	fp, r0
   1535c:	2800      	cmp	r0, #0
   1535e:	d166      	bne.n	1542e <bt_le_adv_start_legacy+0x16e>
		return err;
	}

	if (dir_adv) {
   15360:	f106 000b 	add.w	r0, r6, #11
   15364:	2d00      	cmp	r5, #0
   15366:	d03f      	beq.n	153e8 <bt_le_adv_start_legacy+0x128>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   15368:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1536a:	f007 fe0c 	bl	1cf86 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1536e:	6860      	ldr	r0, [r4, #4]
   15370:	07c1      	lsls	r1, r0, #31
   15372:	d541      	bpl.n	153f8 <bt_le_adv_start_legacy+0x138>
		scannable = true;

		if (dir_adv) {
   15374:	2d00      	cmp	r5, #0
   15376:	d03c      	beq.n	153f2 <bt_le_adv_start_legacy+0x132>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   15378:	f010 0f10 	tst.w	r0, #16
   1537c:	bf14      	ite	ne
   1537e:	2304      	movne	r3, #4
   15380:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   15382:	6921      	ldr	r1, [r4, #16]
   15384:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15388:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1538c:	f007 fdfb 	bl	1cf86 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   15390:	210f      	movs	r1, #15
   15392:	f242 0006 	movw	r0, #8198	; 0x2006
   15396:	f7ff fa27 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1539a:	4683      	mov	fp, r0
   1539c:	2800      	cmp	r0, #0
   1539e:	f000 8090 	beq.w	154c2 <bt_le_adv_start_legacy+0x202>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
   153a2:	220f      	movs	r2, #15
   153a4:	a90a      	add	r1, sp, #40	; 0x28
   153a6:	3008      	adds	r0, #8
   153a8:	f00a f984 	bl	1f6b4 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   153ac:	2200      	movs	r2, #0
   153ae:	4659      	mov	r1, fp
   153b0:	f242 0006 	movw	r0, #8198	; 0x2006
   153b4:	f7ff fa72 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   153b8:	2800      	cmp	r0, #0
   153ba:	f040 8085 	bne.w	154c8 <bt_le_adv_start_legacy+0x208>
		return err;
	}

	if (!dir_adv) {
   153be:	b335      	cbz	r5, 1540e <bt_le_adv_start_legacy+0x14e>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   153c0:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   153c2:	07da      	lsls	r2, r3, #31
   153c4:	d437      	bmi.n	15436 <bt_le_adv_start_legacy+0x176>
	return set_le_adv_enable_legacy(adv, enable);
   153c6:	2101      	movs	r1, #1
   153c8:	4630      	mov	r0, r6
   153ca:	f7ff fb51 	bl	14a70 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   153ce:	4683      	mov	fp, r0
   153d0:	9807      	ldr	r0, [sp, #28]
   153d2:	f1bb 0f00 	cmp.w	fp, #0
   153d6:	d065      	beq.n	154a4 <bt_le_adv_start_legacy+0x1e4>
		BT_ERR("Failed to start advertiser");
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   153d8:	b348      	cbz	r0, 1542e <bt_le_adv_start_legacy+0x16e>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   153da:	2100      	movs	r1, #0
   153dc:	f000 fcee 	bl	15dbc <bt_conn_set_state>
			bt_conn_unref(conn);
   153e0:	9807      	ldr	r0, [sp, #28]
   153e2:	f008 fa86 	bl	1d8f2 <bt_conn_unref>
   153e6:	e022      	b.n	1542e <bt_le_adv_start_legacy+0x16e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   153e8:	9508      	str	r5, [sp, #32]
   153ea:	a908      	add	r1, sp, #32
   153ec:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   153f0:	e7bb      	b.n	1536a <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
   153f2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   153f6:	e7cb      	b.n	15390 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   153f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   153fa:	b933      	cbnz	r3, 1540a <bt_le_adv_start_legacy+0x14a>
   153fc:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   15400:	f1c7 0303 	rsb	r3, r7, #3
   15404:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15408:	e7c2      	b.n	15390 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   1540a:	2701      	movs	r7, #1
   1540c:	e7f8      	b.n	15400 <bt_le_adv_start_legacy+0x140>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1540e:	6863      	ldr	r3, [r4, #4]
   15410:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   15414:	e9cd 7301 	strd	r7, r3, [sp, #4]
   15418:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1541a:	9300      	str	r3, [sp, #0]
   1541c:	4652      	mov	r2, sl
   1541e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15420:	4649      	mov	r1, r9
   15422:	4630      	mov	r0, r6
   15424:	f7ff fb52 	bl	14acc <le_adv_update.constprop.0>
		if (err) {
   15428:	4683      	mov	fp, r0
   1542a:	2800      	cmp	r0, #0
   1542c:	d0c8      	beq.n	153c0 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1542e:	4658      	mov	r0, fp
   15430:	b00f      	add	sp, #60	; 0x3c
   15432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   15436:	a907      	add	r1, sp, #28
   15438:	4630      	mov	r0, r6
   1543a:	f7ff f96d 	bl	14718 <le_adv_start_add_conn>
		if (err) {
   1543e:	4683      	mov	fp, r0
   15440:	2800      	cmp	r0, #0
   15442:	d0c0      	beq.n	153c6 <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
   15444:	f110 0f0c 	cmn.w	r0, #12
   15448:	d1f1      	bne.n	1542e <bt_le_adv_start_legacy+0x16e>
   1544a:	2d00      	cmp	r5, #0
   1544c:	d1ef      	bne.n	1542e <bt_le_adv_start_legacy+0x16e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1544e:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   15450:	079b      	lsls	r3, r3, #30
   15452:	d4ec      	bmi.n	1542e <bt_le_adv_start_legacy+0x16e>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15454:	6860      	ldr	r0, [r4, #4]
   15456:	f080 0002 	eor.w	r0, r0, #2
   1545a:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   1545e:	f00b 0201 	and.w	r2, fp, #1
   15462:	210c      	movs	r1, #12
   15464:	4640      	mov	r0, r8
   15466:	f007 fdb2 	bl	1cfce <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   1546a:	6862      	ldr	r2, [r4, #4]
   1546c:	2107      	movs	r1, #7
   1546e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   15472:	4640      	mov	r0, r8
   15474:	f007 fdab 	bl	1cfce <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   15478:	6862      	ldr	r2, [r4, #4]
   1547a:	2108      	movs	r1, #8
   1547c:	f002 0201 	and.w	r2, r2, #1
   15480:	4640      	mov	r0, r8
   15482:	f007 fda4 	bl	1cfce <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   15486:	463a      	mov	r2, r7
   15488:	2109      	movs	r1, #9
   1548a:	4640      	mov	r0, r8
   1548c:	f007 fd9f 	bl	1cfce <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   15490:	6862      	ldr	r2, [r4, #4]
   15492:	210b      	movs	r1, #11
   15494:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15498:	4640      	mov	r0, r8
   1549a:	f007 fd98 	bl	1cfce <atomic_set_bit_to>
	return 0;
   1549e:	f04f 0b00 	mov.w	fp, #0
   154a2:	e7c4      	b.n	1542e <bt_le_adv_start_legacy+0x16e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   154a4:	b108      	cbz	r0, 154aa <bt_le_adv_start_legacy+0x1ea>
		bt_conn_unref(conn);
   154a6:	f008 fa24 	bl	1d8f2 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   154aa:	2d00      	cmp	r5, #0
   154ac:	d1d7      	bne.n	1545e <bt_le_adv_start_legacy+0x19e>
   154ae:	e7d1      	b.n	15454 <bt_le_adv_start_legacy+0x194>
		return -EAGAIN;
   154b0:	f06f 0b0a 	mvn.w	fp, #10
   154b4:	e7bb      	b.n	1542e <bt_le_adv_start_legacy+0x16e>
		return -EINVAL;
   154b6:	f06f 0b15 	mvn.w	fp, #21
   154ba:	e7b8      	b.n	1542e <bt_le_adv_start_legacy+0x16e>
		return -EALREADY;
   154bc:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   154c0:	e7b5      	b.n	1542e <bt_le_adv_start_legacy+0x16e>
		return -ENOBUFS;
   154c2:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   154c6:	e7b2      	b.n	1542e <bt_le_adv_start_legacy+0x16e>
   154c8:	4683      	mov	fp, r0
   154ca:	e7b0      	b.n	1542e <bt_le_adv_start_legacy+0x16e>
   154cc:	20000460 	.word	0x20000460
   154d0:	200003c8 	.word	0x200003c8

000154d4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   154d4:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   154d6:	9c04      	ldr	r4, [sp, #16]
   154d8:	e9cd 3400 	strd	r3, r4, [sp]
   154dc:	4613      	mov	r3, r2
   154de:	460a      	mov	r2, r1
   154e0:	4601      	mov	r1, r0
   154e2:	4802      	ldr	r0, [pc, #8]	; (154ec <bt_le_adv_start+0x18>)
   154e4:	f7ff feec 	bl	152c0 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   154e8:	b002      	add	sp, #8
   154ea:	bd10      	pop	{r4, pc}
   154ec:	200003e0 	.word	0x200003e0

000154f0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   154f0:	b530      	push	{r4, r5, lr}
   154f2:	4c22      	ldr	r4, [pc, #136]	; (1557c <bt_le_adv_stop+0x8c>)
   154f4:	b085      	sub	sp, #20
   154f6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   154fa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   154fe:	f007 fd48 	bl	1cf92 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15502:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   15506:	f007 fd38 	bl	1cf7a <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1550a:	0642      	lsls	r2, r0, #25
   1550c:	f3c0 1380 	ubfx	r3, r0, #6, #1
   15510:	d531      	bpl.n	15576 <bt_le_adv_stop+0x86>
   15512:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   15516:	f007 fd30 	bl	1cf7a <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1551a:	05c3      	lsls	r3, r0, #23
   1551c:	d521      	bpl.n	15562 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1551e:	2300      	movs	r3, #0
   15520:	4669      	mov	r1, sp
   15522:	f104 0023 	add.w	r0, r4, #35	; 0x23
   15526:	9300      	str	r3, [sp, #0]
   15528:	f8cd 3003 	str.w	r3, [sp, #3]
   1552c:	f007 fd2e 	bl	1cf8c <bt_addr_le_cmp>
   15530:	7e25      	ldrb	r5, [r4, #24]
   15532:	b9e0      	cbnz	r0, 1556e <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   15534:	4b12      	ldr	r3, [pc, #72]	; (15580 <bt_le_adv_stop+0x90>)
   15536:	889a      	ldrh	r2, [r3, #4]
   15538:	6818      	ldr	r0, [r3, #0]
   1553a:	799b      	ldrb	r3, [r3, #6]
   1553c:	f8ad 200c 	strh.w	r2, [sp, #12]
   15540:	9002      	str	r0, [sp, #8]
   15542:	f88d 300e 	strb.w	r3, [sp, #14]
   15546:	2204      	movs	r2, #4
   15548:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1554a:	4628      	mov	r0, r5
   1554c:	f000 fc10 	bl	15d70 <bt_conn_lookup_state_le>
   15550:	4604      	mov	r4, r0
	if (conn) {
   15552:	b130      	cbz	r0, 15562 <bt_le_adv_stop+0x72>
		conn->err = status;
   15554:	2100      	movs	r1, #0
   15556:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15558:	f000 fc30 	bl	15dbc <bt_conn_set_state>
		bt_conn_unref(conn);
   1555c:	4620      	mov	r0, r4
   1555e:	f008 f9c8 	bl	1d8f2 <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
   15562:	4808      	ldr	r0, [pc, #32]	; (15584 <bt_le_adv_stop+0x94>)
   15564:	2100      	movs	r1, #0
   15566:	f7ff fa83 	bl	14a70 <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1556a:	b005      	add	sp, #20
   1556c:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1556e:	2205      	movs	r2, #5
   15570:	f104 0123 	add.w	r1, r4, #35	; 0x23
   15574:	e7e9      	b.n	1554a <bt_le_adv_stop+0x5a>
		return 0;
   15576:	4618      	mov	r0, r3
   15578:	e7f7      	b.n	1556a <bt_le_adv_stop+0x7a>
   1557a:	bf00      	nop
   1557c:	200003c8 	.word	0x200003c8
   15580:	00020618 	.word	0x00020618
   15584:	200003e0 	.word	0x200003e0

00015588 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   15588:	b513      	push	{r0, r1, r4, lr}
   1558a:	4818      	ldr	r0, [pc, #96]	; (155ec <bt_le_adv_resume+0x64>)
   1558c:	f007 fcf5 	bl	1cf7a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   15590:	04c1      	lsls	r1, r0, #19
   15592:	d529      	bpl.n	155e8 <bt_le_adv_resume+0x60>
   15594:	4815      	ldr	r0, [pc, #84]	; (155ec <bt_le_adv_resume+0x64>)
   15596:	f007 fcf0 	bl	1cf7a <atomic_get>
   1559a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1559c:	f3c0 1480 	ubfx	r4, r0, #6, #1
   155a0:	d422      	bmi.n	155e8 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   155a2:	4812      	ldr	r0, [pc, #72]	; (155ec <bt_le_adv_resume+0x64>)
   155a4:	f007 fce9 	bl	1cf7a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   155a8:	05c3      	lsls	r3, r0, #23
   155aa:	d51d      	bpl.n	155e8 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   155ac:	4810      	ldr	r0, [pc, #64]	; (155f0 <bt_le_adv_resume+0x68>)
   155ae:	a901      	add	r1, sp, #4
   155b0:	f7ff f8b2 	bl	14718 <le_adv_start_add_conn>
	if (err) {
   155b4:	b9c0      	cbnz	r0, 155e8 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   155b6:	480e      	ldr	r0, [pc, #56]	; (155f0 <bt_le_adv_resume+0x68>)
   155b8:	2101      	movs	r1, #1
   155ba:	f7ff fa59 	bl	14a70 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   155be:	b150      	cbz	r0, 155d6 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   155c0:	4621      	mov	r1, r4
   155c2:	9801      	ldr	r0, [sp, #4]
   155c4:	f000 fbfa 	bl	15dbc <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   155c8:	4808      	ldr	r0, [pc, #32]	; (155ec <bt_le_adv_resume+0x64>)
   155ca:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   155ce:	f007 fce0 	bl	1cf92 <atomic_and>
	return (old & mask) != 0;
   155d2:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   155d6:	9801      	ldr	r0, [sp, #4]
   155d8:	f008 f98b 	bl	1d8f2 <bt_conn_unref>
	if (persist_paused) {
   155dc:	b124      	cbz	r4, 155e8 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   155de:	4803      	ldr	r0, [pc, #12]	; (155ec <bt_le_adv_resume+0x64>)
   155e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   155e4:	f007 fce4 	bl	1cfb0 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   155e8:	b002      	add	sp, #8
   155ea:	bd10      	pop	{r4, pc}
   155ec:	200003f4 	.word	0x200003f4
   155f0:	200003e0 	.word	0x200003e0

000155f4 <enh_conn_complete>:
{
   155f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   155f8:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
   155fc:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   155fe:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   15602:	4851      	ldr	r0, [pc, #324]	; (15748 <enh_conn_complete+0x154>)
   15604:	f007 fcc5 	bl	1cf92 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   15608:	0443      	lsls	r3, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1560a:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1560e:	d504      	bpl.n	1561a <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   15610:	494e      	ldr	r1, [pc, #312]	; (1574c <enh_conn_complete+0x158>)
   15612:	2200      	movs	r2, #0
   15614:	2002      	movs	r0, #2
   15616:	f003 f9d9 	bl	189cc <bt_keys_foreach>
	if (evt->status) {
   1561a:	7825      	ldrb	r5, [r4, #0]
   1561c:	b19d      	cbz	r5, 15646 <enh_conn_complete+0x52>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1561e:	2d3c      	cmp	r5, #60	; 0x3c
   15620:	d13e      	bne.n	156a0 <enh_conn_complete+0xac>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15622:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15626:	484a      	ldr	r0, [pc, #296]	; (15750 <enh_conn_complete+0x15c>)
   15628:	f007 fcb3 	bl	1cf92 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1562c:	2000      	movs	r0, #0
   1562e:	f7fe fe6b 	bl	14308 <find_pending_connect.part.0>
		if (!conn) {
   15632:	4604      	mov	r4, r0
   15634:	b3a0      	cbz	r0, 156a0 <enh_conn_complete+0xac>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   15636:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15638:	2100      	movs	r1, #0
   1563a:	f000 fbbf 	bl	15dbc <bt_conn_set_state>
		bt_conn_unref(conn);
   1563e:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   15640:	f008 f957 	bl	1d8f2 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15644:	e02c      	b.n	156a0 <enh_conn_complete+0xac>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15646:	7923      	ldrb	r3, [r4, #4]
   15648:	3b02      	subs	r3, #2
   1564a:	2b01      	cmp	r3, #1
   1564c:	f104 0604 	add.w	r6, r4, #4
   15650:	d829      	bhi.n	156a6 <enh_conn_complete+0xb2>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15652:	4631      	mov	r1, r6
   15654:	a802      	add	r0, sp, #8
   15656:	f007 fc96 	bl	1cf86 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1565a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1565e:	2206      	movs	r2, #6
   15660:	3b02      	subs	r3, #2
   15662:	f104 0111 	add.w	r1, r4, #17
   15666:	f10d 0001 	add.w	r0, sp, #1
   1566a:	f88d 3008 	strb.w	r3, [sp, #8]
   1566e:	f007 fb44 	bl	1ccfa <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15672:	2301      	movs	r3, #1
   15674:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   15678:	78e3      	ldrb	r3, [r4, #3]
   1567a:	2b01      	cmp	r3, #1
   1567c:	d10c      	bne.n	15698 <enh_conn_complete+0xa4>
   1567e:	a802      	add	r0, sp, #8
   15680:	f7fe fe42 	bl	14308 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15684:	78e3      	ldrb	r3, [r4, #3]
   15686:	2b01      	cmp	r3, #1
   15688:	4605      	mov	r5, r0
   1568a:	d104      	bne.n	15696 <enh_conn_complete+0xa2>
   1568c:	4830      	ldr	r0, [pc, #192]	; (15750 <enh_conn_complete+0x15c>)
   1568e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15692:	f007 fc7e 	bl	1cf92 <atomic_and>
	if (!conn) {
   15696:	b9cd      	cbnz	r5, 156cc <enh_conn_complete+0xd8>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15698:	211f      	movs	r1, #31
   1569a:	4640      	mov	r0, r8
   1569c:	f007 fee7 	bl	1d46e <bt_hci_disconnect>
}
   156a0:	b004      	add	sp, #16
   156a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   156a6:	78e3      	ldrb	r3, [r4, #3]
   156a8:	2b01      	cmp	r3, #1
   156aa:	bf04      	itt	eq
   156ac:	4b29      	ldreq	r3, [pc, #164]	; (15754 <enh_conn_complete+0x160>)
   156ae:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
   156b2:	4631      	mov	r1, r6
   156b4:	4628      	mov	r0, r5
   156b6:	f007 fed2 	bl	1d45e <bt_lookup_id_addr>
   156ba:	4601      	mov	r1, r0
   156bc:	a802      	add	r0, sp, #8
   156be:	f007 fc62 	bl	1cf86 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   156c2:	4631      	mov	r1, r6
   156c4:	4668      	mov	r0, sp
   156c6:	f007 fc5e 	bl	1cf86 <bt_addr_le_copy>
   156ca:	e7d5      	b.n	15678 <enh_conn_complete+0x84>
	conn->handle = handle;
   156cc:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   156ce:	a902      	add	r1, sp, #8
	conn->handle = handle;
   156d0:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   156d4:	f007 fc57 	bl	1cf86 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   156d8:	7e22      	ldrb	r2, [r4, #24]
   156da:	7de3      	ldrb	r3, [r4, #23]
   156dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   156e0:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   156e4:	7ea2      	ldrb	r2, [r4, #26]
   156e6:	7e63      	ldrb	r3, [r4, #25]
   156e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   156ec:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   156f0:	7ee3      	ldrb	r3, [r4, #27]
   156f2:	7f22      	ldrb	r2, [r4, #28]
   156f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   156f8:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   156fc:	78e3      	ldrb	r3, [r4, #3]
   156fe:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   15700:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15702:	2b01      	cmp	r3, #1
	conn->err = 0U;
   15704:	732c      	strb	r4, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15706:	d116      	bne.n	15736 <enh_conn_complete+0x142>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   15708:	4669      	mov	r1, sp
   1570a:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   1570e:	f007 fc3a 	bl	1cf86 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   15712:	7a29      	ldrb	r1, [r5, #8]
   15714:	4e0f      	ldr	r6, [pc, #60]	; (15754 <enh_conn_complete+0x160>)
   15716:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   1571a:	4431      	add	r1, r6
   1571c:	f105 0096 	add.w	r0, r5, #150	; 0x96
   15720:	f007 fc31 	bl	1cf86 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   15724:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
   15728:	4622      	mov	r2, r4
   1572a:	f001 0340 	and.w	r3, r1, #64	; 0x40
   1572e:	4313      	orrs	r3, r2
   15730:	d001      	beq.n	15736 <enh_conn_complete+0x142>
			bt_le_adv_resume();
   15732:	f7ff ff29 	bl	15588 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15736:	2107      	movs	r1, #7
   15738:	4628      	mov	r0, r5
   1573a:	f000 fb3f 	bl	15dbc <bt_conn_set_state>
	conn_auto_initiate(conn);
   1573e:	4628      	mov	r0, r5
   15740:	f7ff fa38 	bl	14bb4 <conn_auto_initiate>
	bt_conn_unref(conn);
   15744:	4628      	mov	r0, r5
   15746:	e77b      	b.n	15640 <enh_conn_complete+0x4c>
   15748:	20000460 	.word	0x20000460
   1574c:	0001d5df 	.word	0x0001d5df
   15750:	200003f4 	.word	0x200003f4
   15754:	200003c8 	.word	0x200003c8

00015758 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15758:	b538      	push	{r3, r4, r5, lr}
   1575a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
   1575c:	4805      	ldr	r0, [pc, #20]	; (15774 <bt_buf_get_rx+0x1c>)
   1575e:	f009 ff4d 	bl	1f5fc <net_buf_alloc_fixed>
#endif

	if (buf) {
   15762:	4604      	mov	r4, r0
   15764:	b120      	cbz	r0, 15770 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
   15766:	2100      	movs	r1, #0
   15768:	3008      	adds	r0, #8
   1576a:	f009 ff66 	bl	1f63a <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
   1576e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15770:	4620      	mov	r0, r4
   15772:	bd38      	pop	{r3, r4, r5, pc}
   15774:	20000934 	.word	0x20000934

00015778 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15778:	b570      	push	{r4, r5, r6, lr}
   1577a:	4602      	mov	r2, r0
   1577c:	460b      	mov	r3, r1
	__asm__ volatile(
   1577e:	f04f 0140 	mov.w	r1, #64	; 0x40
   15782:	f3ef 8511 	mrs	r5, BASEPRI
   15786:	f381 8811 	msr	BASEPRI, r1
   1578a:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   1578e:	480c      	ldr	r0, [pc, #48]	; (157c0 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   15790:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   15792:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   15796:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
   1579a:	f385 8811 	msr	BASEPRI, r5
   1579e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   157a2:	b924      	cbnz	r4, 157ae <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   157a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   157a8:	2001      	movs	r0, #1
   157aa:	f7ff bfd5 	b.w	15758 <bt_buf_get_rx>
   157ae:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
   157b0:	f104 0008 	add.w	r0, r4, #8
   157b4:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   157b6:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
   157b8:	f009 ff3f 	bl	1f63a <net_buf_simple_reserve>
}
   157bc:	4620      	mov	r0, r4
   157be:	bd70      	pop	{r4, r5, r6, pc}
   157c0:	200003c8 	.word	0x200003c8

000157c4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
   157c4:	b570      	push	{r4, r5, r6, lr}
   157c6:	4604      	mov	r4, r0
	switch (evt) {
   157c8:	2c0f      	cmp	r4, #15
{
   157ca:	460d      	mov	r5, r1
   157cc:	4610      	mov	r0, r2
   157ce:	4619      	mov	r1, r3
	switch (evt) {
   157d0:	d805      	bhi.n	157de <bt_buf_get_evt+0x1a>
   157d2:	2c0d      	cmp	r4, #13
   157d4:	d912      	bls.n	157fc <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   157d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   157da:	f7ff bfcd 	b.w	15778 <bt_buf_get_cmd_complete>
	switch (evt) {
   157de:	2c13      	cmp	r4, #19
   157e0:	d10c      	bne.n	157fc <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
   157e2:	480b      	ldr	r0, [pc, #44]	; (15810 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
   157e4:	f009 ff0a 	bl	1f5fc <net_buf_alloc_fixed>
			if (buf) {
   157e8:	4604      	mov	r4, r0
   157ea:	b128      	cbz	r0, 157f8 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
   157ec:	2100      	movs	r1, #0
   157ee:	3008      	adds	r0, #8
   157f0:	f009 ff23 	bl	1f63a <net_buf_simple_reserve>
   157f4:	2301      	movs	r3, #1
   157f6:	7523      	strb	r3, [r4, #20]
}
   157f8:	4620      	mov	r0, r4
   157fa:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
   157fc:	4602      	mov	r2, r0
   157fe:	460b      	mov	r3, r1
		if (discardable) {
   15800:	b10d      	cbz	r5, 15806 <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
   15802:	4804      	ldr	r0, [pc, #16]	; (15814 <bt_buf_get_evt+0x50>)
   15804:	e7ee      	b.n	157e4 <bt_buf_get_evt+0x20>
}
   15806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1580a:	2001      	movs	r0, #1
   1580c:	f7ff bfa4 	b.w	15758 <bt_buf_get_rx>
   15810:	2000095c 	.word	0x2000095c
   15814:	200008bc 	.word	0x200008bc

00015818 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   15818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1581a:	4e17      	ldr	r6, [pc, #92]	; (15878 <bt_pub_key_gen+0x60>)
   1581c:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
   15820:	f003 0306 	and.w	r3, r3, #6
   15824:	2b06      	cmp	r3, #6
   15826:	d122      	bne.n	1586e <bt_pub_key_gen+0x56>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
   15828:	4f14      	ldr	r7, [pc, #80]	; (1587c <bt_pub_key_gen+0x64>)
   1582a:	683b      	ldr	r3, [r7, #0]
   1582c:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
   1582e:	6038      	str	r0, [r7, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15830:	2110      	movs	r1, #16
   15832:	f106 0098 	add.w	r0, r6, #152	; 0x98
   15836:	f007 fbbb 	bl	1cfb0 <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1583a:	f010 0510 	ands.w	r5, r0, #16
   1583e:	d119      	bne.n	15874 <bt_pub_key_gen+0x5c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15840:	f06f 0108 	mvn.w	r1, #8
   15844:	f106 0098 	add.w	r0, r6, #152	; 0x98
   15848:	f007 fba3 	bl	1cf92 <atomic_and>
		return 0;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1584c:	462a      	mov	r2, r5
   1584e:	4629      	mov	r1, r5
   15850:	f242 0025 	movw	r0, #8229	; 0x2025
   15854:	f7ff f822 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   15858:	4604      	mov	r4, r0
   1585a:	b130      	cbz	r0, 1586a <bt_pub_key_gen+0x52>
   1585c:	f06f 0110 	mvn.w	r1, #16
   15860:	f106 0098 	add.w	r0, r6, #152	; 0x98
   15864:	f007 fb95 	bl	1cf92 <atomic_and>
		BT_ERR("Sending LE P256 Public Key command failed");
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
   15868:	603d      	str	r5, [r7, #0]
		return err;
	}

	return 0;
}
   1586a:	4620      	mov	r0, r4
   1586c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
   1586e:	f06f 0422 	mvn.w	r4, #34	; 0x22
   15872:	e7fa      	b.n	1586a <bt_pub_key_gen+0x52>
		return 0;
   15874:	2400      	movs	r4, #0
   15876:	e7f8      	b.n	1586a <bt_pub_key_gen+0x52>
   15878:	200003c8 	.word	0x200003c8
   1587c:	2000278c 	.word	0x2000278c

00015880 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
   15880:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15882:	4804      	ldr	r0, [pc, #16]	; (15894 <bt_pub_key_get+0x14>)
   15884:	f007 fb79 	bl	1cf7a <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   15888:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
   1588c:	4802      	ldr	r0, [pc, #8]	; (15898 <bt_pub_key_get+0x18>)
   1588e:	bf08      	it	eq
   15890:	2000      	moveq	r0, #0
   15892:	bd08      	pop	{r3, pc}
   15894:	20000460 	.word	0x20000460
   15898:	20002d9f 	.word	0x20002d9f

0001589c <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   1589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1589e:	4d1a      	ldr	r5, [pc, #104]	; (15908 <bt_dh_key_gen+0x6c>)
   158a0:	682b      	ldr	r3, [r5, #0]
{
   158a2:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   158a4:	b113      	cbz	r3, 158ac <bt_dh_key_gen+0x10>
		return -EBUSY;
   158a6:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
   158aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   158ac:	4817      	ldr	r0, [pc, #92]	; (1590c <bt_dh_key_gen+0x70>)
   158ae:	f007 fb64 	bl	1cf7a <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   158b2:	06c2      	lsls	r2, r0, #27
   158b4:	f3c0 1700 	ubfx	r7, r0, #4, #1
   158b8:	d4f5      	bmi.n	158a6 <bt_dh_key_gen+0xa>
   158ba:	4814      	ldr	r0, [pc, #80]	; (1590c <bt_dh_key_gen+0x70>)
   158bc:	f007 fb5d 	bl	1cf7a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   158c0:	0703      	lsls	r3, r0, #28
   158c2:	d51d      	bpl.n	15900 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
   158c4:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   158c6:	f242 0026 	movw	r0, #8230	; 0x2026
   158ca:	2140      	movs	r1, #64	; 0x40
   158cc:	f7fe ff8c 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   158d0:	4604      	mov	r4, r0
   158d2:	b918      	cbnz	r0, 158dc <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
   158d4:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
   158d6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   158da:	e7e6      	b.n	158aa <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
   158dc:	2140      	movs	r1, #64	; 0x40
   158de:	3008      	adds	r0, #8
   158e0:	f009 fee2 	bl	1f6a8 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   158e4:	2240      	movs	r2, #64	; 0x40
   158e6:	4631      	mov	r1, r6
   158e8:	f007 fa07 	bl	1ccfa <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   158ec:	463a      	mov	r2, r7
   158ee:	4621      	mov	r1, r4
   158f0:	f242 0026 	movw	r0, #8230	; 0x2026
   158f4:	f7fe ffd2 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   158f8:	2800      	cmp	r0, #0
   158fa:	d0d6      	beq.n	158aa <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
   158fc:	602f      	str	r7, [r5, #0]
		return err;
   158fe:	e7d4      	b.n	158aa <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
   15900:	f06f 0030 	mvn.w	r0, #48	; 0x30
   15904:	e7d1      	b.n	158aa <bt_dh_key_gen+0xe>
   15906:	bf00      	nop
   15908:	20002788 	.word	0x20002788
   1590c:	20000460 	.word	0x20000460

00015910 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   15910:	2300      	movs	r3, #0
	tx->user_data = NULL;
   15912:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   15916:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   15918:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1591a:	4801      	ldr	r0, [pc, #4]	; (15920 <tx_free+0x10>)
   1591c:	f00a b9ac 	b.w	1fc78 <k_queue_append>
   15920:	2000087c 	.word	0x2000087c

00015924 <notify_connected>:
{
   15924:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   15926:	4b09      	ldr	r3, [pc, #36]	; (1594c <notify_connected+0x28>)
   15928:	681d      	ldr	r5, [r3, #0]
{
   1592a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1592c:	7b21      	ldrb	r1, [r4, #12]
   1592e:	b92d      	cbnz	r5, 1593c <notify_connected+0x18>
	if (!conn->err) {
   15930:	b951      	cbnz	r1, 15948 <notify_connected+0x24>
		bt_gatt_connected(conn);
   15932:	4620      	mov	r0, r4
}
   15934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   15938:	f001 bf7e 	b.w	17838 <bt_gatt_connected>
		if (cb->connected) {
   1593c:	682b      	ldr	r3, [r5, #0]
   1593e:	b10b      	cbz	r3, 15944 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   15940:	4620      	mov	r0, r4
   15942:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15944:	69ad      	ldr	r5, [r5, #24]
   15946:	e7f1      	b.n	1592c <notify_connected+0x8>
}
   15948:	bd38      	pop	{r3, r4, r5, pc}
   1594a:	bf00      	nop
   1594c:	20002798 	.word	0x20002798

00015950 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   15950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   15954:	694d      	ldr	r5, [r1, #20]
{
   15956:	4604      	mov	r4, r0
   15958:	460e      	mov	r6, r1
   1595a:	4690      	mov	r8, r2
   1595c:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1595e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15962:	483f      	ldr	r0, [pc, #252]	; (15a60 <send_frag+0x110>)
   15964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15968:	f005 f8fc 	bl	1ab64 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   1596c:	7b63      	ldrb	r3, [r4, #13]
   1596e:	2b07      	cmp	r3, #7
   15970:	d146      	bne.n	15a00 <send_frag+0xb0>
	__asm__ volatile(
   15972:	f04f 0340 	mov.w	r3, #64	; 0x40
   15976:	f3ef 8211 	mrs	r2, BASEPRI
   1597a:	f383 8811 	msr	BASEPRI, r3
   1597e:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   15982:	2d00      	cmp	r5, #0
   15984:	d04e      	beq.n	15a24 <send_frag+0xd4>
	parent->next = child;
   15986:	2300      	movs	r3, #0
   15988:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1598a:	69a3      	ldr	r3, [r4, #24]
   1598c:	2b00      	cmp	r3, #0
   1598e:	d146      	bne.n	15a1e <send_frag+0xce>
	list->head = node;
   15990:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   15994:	f382 8811 	msr	BASEPRI, r2
   15998:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
   1599c:	2104      	movs	r1, #4
   1599e:	f106 0008 	add.w	r0, r6, #8
   159a2:	f009 fe98 	bl	1f6d6 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   159a6:	8823      	ldrh	r3, [r4, #0]
   159a8:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   159ac:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   159b0:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   159b2:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   159b6:	3b04      	subs	r3, #4
   159b8:	8043      	strh	r3, [r0, #2]
   159ba:	2302      	movs	r3, #2
   159bc:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   159be:	4630      	mov	r0, r6
   159c0:	f007 fe2b 	bl	1d61a <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   159c4:	2800      	cmp	r0, #0
   159c6:	d049      	beq.n	15a5c <send_frag+0x10c>
	__asm__ volatile(
   159c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   159cc:	f3ef 8111 	mrs	r1, BASEPRI
   159d0:	f383 8811 	msr	BASEPRI, r3
   159d4:	f3bf 8f6f 	isb	sy
		BT_ERR("Unable to send to driver (err %d)", err);
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   159d8:	2d00      	cmp	r5, #0
   159da:	d039      	beq.n	15a50 <send_frag+0x100>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   159dc:	6963      	ldr	r3, [r4, #20]
   159de:	2200      	movs	r2, #0
   159e0:	b153      	cbz	r3, 159f8 <send_frag+0xa8>
   159e2:	429d      	cmp	r5, r3
   159e4:	d131      	bne.n	15a4a <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   159e6:	682b      	ldr	r3, [r5, #0]
   159e8:	bb4a      	cbnz	r2, 15a3e <send_frag+0xee>
   159ea:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   159ec:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   159ee:	4295      	cmp	r5, r2
   159f0:	d100      	bne.n	159f4 <send_frag+0xa4>
	list->tail = node;
   159f2:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   159f4:	2300      	movs	r3, #0
   159f6:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   159f8:	f381 8811 	msr	BASEPRI, r1
   159fc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   15a00:	4817      	ldr	r0, [pc, #92]	; (15a60 <send_frag+0x110>)
   15a02:	f005 f889 	bl	1ab18 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   15a06:	b115      	cbz	r5, 15a0e <send_frag+0xbe>
		tx_free(tx);
   15a08:	4628      	mov	r0, r5
   15a0a:	f7ff ff81 	bl	15910 <tx_free>
	}

	if (always_consume) {
   15a0e:	b11f      	cbz	r7, 15a18 <send_frag+0xc8>
		net_buf_unref(buf);
   15a10:	4630      	mov	r0, r6
   15a12:	f003 f905 	bl	18c20 <net_buf_unref>
	}
	return false;
   15a16:	2700      	movs	r7, #0
}
   15a18:	4638      	mov	r0, r7
   15a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15a1e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15a20:	61a5      	str	r5, [r4, #24]
}
   15a22:	e7b7      	b.n	15994 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   15a24:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   15a26:	b133      	cbz	r3, 15a36 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   15a28:	f103 090c 	add.w	r9, r3, #12
   15a2c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   15a2e:	3301      	adds	r3, #1
   15a30:	f8c9 3000 	str.w	r3, [r9]
   15a34:	e7ae      	b.n	15994 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15a36:	69e3      	ldr	r3, [r4, #28]
   15a38:	f104 091c 	add.w	r9, r4, #28
   15a3c:	e7f7      	b.n	15a2e <send_frag+0xde>
	parent->next = child;
   15a3e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   15a40:	69a3      	ldr	r3, [r4, #24]
   15a42:	429d      	cmp	r5, r3
	list->tail = node;
   15a44:	bf08      	it	eq
   15a46:	61a2      	streq	r2, [r4, #24]
}
   15a48:	e7d4      	b.n	159f4 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15a4a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15a4c:	681b      	ldr	r3, [r3, #0]
   15a4e:	e7c7      	b.n	159e0 <send_frag+0x90>
			(*pending_no_cb)--;
   15a50:	f8d9 3000 	ldr.w	r3, [r9]
   15a54:	3b01      	subs	r3, #1
   15a56:	f8c9 3000 	str.w	r3, [r9]
   15a5a:	e7cd      	b.n	159f8 <send_frag+0xa8>
	return true;
   15a5c:	2701      	movs	r7, #1
   15a5e:	e7db      	b.n	15a18 <send_frag+0xc8>
   15a60:	20000498 	.word	0x20000498

00015a64 <bt_conn_get_pkts>:
}
   15a64:	4800      	ldr	r0, [pc, #0]	; (15a68 <bt_conn_get_pkts+0x4>)
   15a66:	4770      	bx	lr
   15a68:	20000498 	.word	0x20000498

00015a6c <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15a6c:	1d03      	adds	r3, r0, #4
{
   15a6e:	b570      	push	{r4, r5, r6, lr}
   15a70:	4604      	mov	r4, r0
   15a72:	4618      	mov	r0, r3
   15a74:	f007 fe17 	bl	1d6a6 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15a78:	0582      	lsls	r2, r0, #22
   15a7a:	d519      	bpl.n	15ab0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   15a7c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15a80:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   15a84:	4291      	cmp	r1, r2
   15a86:	d813      	bhi.n	15ab0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   15a88:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   15a8c:	4291      	cmp	r1, r2
   15a8e:	d30f      	bcc.n	15ab0 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
   15a90:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   15a94:	4291      	cmp	r1, r2
   15a96:	d10b      	bne.n	15ab0 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15a98:	f3bf 8f5b 	dmb	ish
   15a9c:	e853 2f00 	ldrex	r2, [r3]
   15aa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   15aa4:	e843 2100 	strex	r1, r2, [r3]
   15aa8:	2900      	cmp	r1, #0
   15aaa:	d1f7      	bne.n	15a9c <notify_le_param_updated+0x30>
   15aac:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   15ab0:	4b07      	ldr	r3, [pc, #28]	; (15ad0 <notify_le_param_updated+0x64>)
   15ab2:	681d      	ldr	r5, [r3, #0]
   15ab4:	b905      	cbnz	r5, 15ab8 <notify_le_param_updated+0x4c>
}
   15ab6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   15ab8:	68ee      	ldr	r6, [r5, #12]
   15aba:	b13e      	cbz	r6, 15acc <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
   15abc:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   15ac0:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   15ac4:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15ac8:	4620      	mov	r0, r4
   15aca:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   15acc:	69ad      	ldr	r5, [r5, #24]
   15ace:	e7f1      	b.n	15ab4 <notify_le_param_updated+0x48>
   15ad0:	20002798 	.word	0x20002798

00015ad4 <le_param_req>:
{
   15ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ad6:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   15ad8:	4608      	mov	r0, r1
{
   15ada:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15adc:	f007 fd5f 	bl	1d59e <bt_le_conn_params_valid>
   15ae0:	4604      	mov	r4, r0
   15ae2:	b910      	cbnz	r0, 15aea <le_param_req+0x16>
		return false;
   15ae4:	2400      	movs	r4, #0
}
   15ae6:	4620      	mov	r0, r4
   15ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   15aea:	4b09      	ldr	r3, [pc, #36]	; (15b10 <le_param_req+0x3c>)
   15aec:	681e      	ldr	r6, [r3, #0]
   15aee:	2e00      	cmp	r6, #0
   15af0:	d0f9      	beq.n	15ae6 <le_param_req+0x12>
		if (!cb->le_param_req) {
   15af2:	68b3      	ldr	r3, [r6, #8]
   15af4:	b90b      	cbnz	r3, 15afa <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   15af6:	69b6      	ldr	r6, [r6, #24]
   15af8:	e7f9      	b.n	15aee <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   15afa:	4629      	mov	r1, r5
   15afc:	4638      	mov	r0, r7
   15afe:	4798      	blx	r3
   15b00:	2800      	cmp	r0, #0
   15b02:	d0ef      	beq.n	15ae4 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   15b04:	4628      	mov	r0, r5
   15b06:	f007 fd4a 	bl	1d59e <bt_le_conn_params_valid>
   15b0a:	2800      	cmp	r0, #0
   15b0c:	d1f3      	bne.n	15af6 <le_param_req+0x22>
   15b0e:	e7e9      	b.n	15ae4 <le_param_req+0x10>
   15b10:	20002798 	.word	0x20002798

00015b14 <bt_conn_identity_resolved>:
{
   15b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   15b16:	78c3      	ldrb	r3, [r0, #3]
{
   15b18:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   15b1a:	b93b      	cbnz	r3, 15b2c <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   15b1c:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   15b20:	4b08      	ldr	r3, [pc, #32]	; (15b44 <bt_conn_identity_resolved+0x30>)
   15b22:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15b24:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   15b28:	b91d      	cbnz	r5, 15b32 <bt_conn_identity_resolved+0x1e>
}
   15b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   15b2c:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   15b30:	e7f6      	b.n	15b20 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   15b32:	692b      	ldr	r3, [r5, #16]
   15b34:	b11b      	cbz	r3, 15b3e <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15b36:	463a      	mov	r2, r7
   15b38:	4631      	mov	r1, r6
   15b3a:	4620      	mov	r0, r4
   15b3c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15b3e:	69ad      	ldr	r5, [r5, #24]
   15b40:	e7f2      	b.n	15b28 <bt_conn_identity_resolved+0x14>
   15b42:	bf00      	nop
   15b44:	20002798 	.word	0x20002798

00015b48 <bt_conn_security_changed>:
{
   15b48:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   15b4a:	7a43      	ldrb	r3, [r0, #9]
   15b4c:	7283      	strb	r3, [r0, #10]
{
   15b4e:	4604      	mov	r4, r0
   15b50:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   15b52:	f007 ffad 	bl	1dab0 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   15b56:	4b06      	ldr	r3, [pc, #24]	; (15b70 <bt_conn_security_changed+0x28>)
   15b58:	681d      	ldr	r5, [r3, #0]
   15b5a:	b905      	cbnz	r5, 15b5e <bt_conn_security_changed+0x16>
}
   15b5c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   15b5e:	696b      	ldr	r3, [r5, #20]
   15b60:	b11b      	cbz	r3, 15b6a <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   15b62:	7a61      	ldrb	r1, [r4, #9]
   15b64:	4632      	mov	r2, r6
   15b66:	4620      	mov	r0, r4
   15b68:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15b6a:	69ad      	ldr	r5, [r5, #24]
   15b6c:	e7f5      	b.n	15b5a <bt_conn_security_changed+0x12>
   15b6e:	bf00      	nop
   15b70:	20002798 	.word	0x20002798

00015b74 <bt_conn_cb_register>:
	cb->_next = callback_list;
   15b74:	4b02      	ldr	r3, [pc, #8]	; (15b80 <bt_conn_cb_register+0xc>)
   15b76:	681a      	ldr	r2, [r3, #0]
   15b78:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   15b7a:	6018      	str	r0, [r3, #0]
}
   15b7c:	4770      	bx	lr
   15b7e:	bf00      	nop
   15b80:	20002798 	.word	0x20002798

00015b84 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   15b84:	b570      	push	{r4, r5, r6, lr}
   15b86:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   15b88:	f100 0634 	add.w	r6, r0, #52	; 0x34
   15b8c:	2200      	movs	r2, #0
   15b8e:	2300      	movs	r3, #0
   15b90:	4630      	mov	r0, r6
   15b92:	f009 fd38 	bl	1f606 <net_buf_get>
   15b96:	4605      	mov	r5, r0
   15b98:	b958      	cbnz	r0, 15bb2 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
   15b9a:	4620      	mov	r0, r4
   15b9c:	f007 fe18 	bl	1d7d0 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15ba0:	f104 0158 	add.w	r1, r4, #88	; 0x58
   15ba4:	4807      	ldr	r0, [pc, #28]	; (15bc4 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   15ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15baa:	2200      	movs	r2, #0
   15bac:	2300      	movs	r3, #0
   15bae:	f005 b911 	b.w	1add4 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   15bb2:	6968      	ldr	r0, [r5, #20]
   15bb4:	b108      	cbz	r0, 15bba <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
   15bb6:	f7ff feab 	bl	15910 <tx_free>
		net_buf_unref(buf);
   15bba:	4628      	mov	r0, r5
   15bbc:	f003 f830 	bl	18c20 <net_buf_unref>
   15bc0:	e7e4      	b.n	15b8c <conn_cleanup+0x8>
   15bc2:	bf00      	nop
   15bc4:	200025a8 	.word	0x200025a8

00015bc8 <bt_conn_send_cb>:
{
   15bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bcc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   15bce:	7b43      	ldrb	r3, [r0, #13]
   15bd0:	2b07      	cmp	r3, #7
{
   15bd2:	4606      	mov	r6, r0
   15bd4:	460d      	mov	r5, r1
   15bd6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   15bd8:	d005      	beq.n	15be6 <bt_conn_send_cb+0x1e>
		net_buf_unref(buf);
   15bda:	4608      	mov	r0, r1
   15bdc:	f003 f820 	bl	18c20 <net_buf_unref>
			return -ENOTCONN;
   15be0:	f06f 0038 	mvn.w	r0, #56	; 0x38
   15be4:	e015      	b.n	15c12 <bt_conn_send_cb+0x4a>
	if (cb) {
   15be6:	b362      	cbz	r2, 15c42 <bt_conn_send_cb+0x7a>
	return z_impl_k_current_get();
   15be8:	f004 ff90 	bl	1ab0c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   15bec:	4b16      	ldr	r3, [pc, #88]	; (15c48 <bt_conn_send_cb+0x80>)
   15bee:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   15bf0:	4816      	ldr	r0, [pc, #88]	; (15c4c <bt_conn_send_cb+0x84>)
   15bf2:	bf07      	ittee	eq
   15bf4:	2200      	moveq	r2, #0
   15bf6:	2300      	moveq	r3, #0
   15bf8:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   15bfc:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   15c00:	f004 fc0a 	bl	1a418 <z_impl_k_queue_get>
   15c04:	4604      	mov	r4, r0
		if (!tx) {
   15c06:	b930      	cbnz	r0, 15c16 <bt_conn_send_cb+0x4e>
			net_buf_unref(buf);
   15c08:	4628      	mov	r0, r5
   15c0a:	f003 f809 	bl	18c20 <net_buf_unref>
			return -ENOBUFS;
   15c0e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   15c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   15c16:	7b73      	ldrb	r3, [r6, #13]
   15c18:	2b07      	cmp	r3, #7
   15c1a:	d006      	beq.n	15c2a <bt_conn_send_cb+0x62>
			net_buf_unref(buf);
   15c1c:	4628      	mov	r0, r5
   15c1e:	f002 ffff 	bl	18c20 <net_buf_unref>
			tx_free(tx);
   15c22:	4620      	mov	r0, r4
   15c24:	f7ff fe74 	bl	15910 <tx_free>
   15c28:	e7da      	b.n	15be0 <bt_conn_send_cb+0x18>
		tx->pending_no_cb = 0U;
   15c2a:	2300      	movs	r3, #0
		tx->user_data = user_data;
   15c2c:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   15c30:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   15c32:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   15c34:	f106 0034 	add.w	r0, r6, #52	; 0x34
   15c38:	4629      	mov	r1, r5
   15c3a:	f009 fd02 	bl	1f642 <net_buf_put>
	return 0;
   15c3e:	2000      	movs	r0, #0
   15c40:	e7e7      	b.n	15c12 <bt_conn_send_cb+0x4a>
		tx_data(buf)->tx = NULL;
   15c42:	614a      	str	r2, [r1, #20]
   15c44:	e7f6      	b.n	15c34 <bt_conn_send_cb+0x6c>
   15c46:	bf00      	nop
   15c48:	200025c0 	.word	0x200025c0
   15c4c:	2000087c 	.word	0x2000087c

00015c50 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   15c50:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   15c52:	4b1b      	ldr	r3, [pc, #108]	; (15cc0 <bt_conn_prepare_events+0x70>)
   15c54:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15c56:	2101      	movs	r1, #1
{
   15c58:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   15c5a:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15c5c:	f00a fb77 	bl	2034e <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   15c60:	4b18      	ldr	r3, [pc, #96]	; (15cc4 <bt_conn_prepare_events+0x74>)
   15c62:	f103 0054 	add.w	r0, r3, #84	; 0x54
   15c66:	f007 fd1e 	bl	1d6a6 <atomic_get>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   15c6a:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   15c6e:	4619      	mov	r1, r3
   15c70:	b908      	cbnz	r0, 15c76 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   15c72:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   15c74:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15c76:	7b5a      	ldrb	r2, [r3, #13]
   15c78:	b99a      	cbnz	r2, 15ca2 <bt_conn_prepare_events+0x52>
   15c7a:	f3bf 8f5b 	dmb	ish
   15c7e:	1d1a      	adds	r2, r3, #4
   15c80:	e852 0f00 	ldrex	r0, [r2]
   15c84:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   15c88:	e842 ce00 	strex	lr, ip, [r2]
   15c8c:	f1be 0f00 	cmp.w	lr, #0
   15c90:	d1f6      	bne.n	15c80 <bt_conn_prepare_events+0x30>
   15c92:	f3bf 8f5b 	dmb	ish
   15c96:	0642      	lsls	r2, r0, #25
   15c98:	d503      	bpl.n	15ca2 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   15c9a:	4618      	mov	r0, r3
   15c9c:	f7ff ff72 	bl	15b84 <conn_cleanup>
   15ca0:	e7e7      	b.n	15c72 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   15ca2:	7b4b      	ldrb	r3, [r1, #13]
   15ca4:	2b07      	cmp	r3, #7
   15ca6:	d1e4      	bne.n	15c72 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   15ca8:	4b07      	ldr	r3, [pc, #28]	; (15cc8 <bt_conn_prepare_events+0x78>)
   15caa:	4628      	mov	r0, r5
   15cac:	2200      	movs	r2, #0
   15cae:	2104      	movs	r1, #4
   15cb0:	f00a fb4d 	bl	2034e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   15cb4:	2301      	movs	r3, #1
   15cb6:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   15cba:	2002      	movs	r0, #2
	return ev_count;
   15cbc:	e7da      	b.n	15c74 <bt_conn_prepare_events+0x24>
   15cbe:	bf00      	nop
   15cc0:	200005d8 	.word	0x200005d8
   15cc4:	20001fb8 	.word	0x20001fb8
   15cc8:	20001fec 	.word	0x20001fec

00015ccc <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15ccc:	b570      	push	{r4, r5, r6, lr}
   15cce:	4606      	mov	r6, r0
   15cd0:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15cd2:	480f      	ldr	r0, [pc, #60]	; (15d10 <bt_conn_add_le+0x44>)
   15cd4:	2101      	movs	r1, #1
   15cd6:	f007 fd1f 	bl	1d718 <bt_conn_new>
	if (!conn) {
   15cda:	4604      	mov	r4, r0
   15cdc:	b1b0      	cbz	r0, 15d0c <bt_conn_add_le+0x40>
	k_delayed_work_init(&conn->deferred_work, deferred_work);
   15cde:	490d      	ldr	r1, [pc, #52]	; (15d14 <bt_conn_add_le+0x48>)
   15ce0:	3058      	adds	r0, #88	; 0x58
   15ce2:	f00a f975 	bl	1ffd0 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   15ce6:	4a0c      	ldr	r2, [pc, #48]	; (15d18 <bt_conn_add_le+0x4c>)

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   15ce8:	7226      	strb	r6, [r4, #8]
   15cea:	2300      	movs	r3, #0
   15cec:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   15cf0:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   15cf2:	2207      	movs	r2, #7
   15cf4:	4629      	mov	r1, r5
   15cf6:	f104 0088 	add.w	r0, r4, #136	; 0x88
   15cfa:	f006 fffe 	bl	1ccfa <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   15cfe:	2301      	movs	r3, #1
   15d00:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   15d02:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   15d04:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   15d06:	4b05      	ldr	r3, [pc, #20]	; (15d1c <bt_conn_add_le+0x50>)
   15d08:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15d0c:	4620      	mov	r0, r4
   15d0e:	bd70      	pop	{r4, r5, r6, pc}
   15d10:	20001fb8 	.word	0x20001fb8
   15d14:	00015f75 	.word	0x00015f75
   15d18:	0001d713 	.word	0x0001d713
   15d1c:	00280018 	.word	0x00280018

00015d20 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   15d20:	4602      	mov	r2, r0
   15d22:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   15d24:	2101      	movs	r1, #1
   15d26:	4803      	ldr	r0, [pc, #12]	; (15d34 <bt_conn_lookup_handle+0x14>)
   15d28:	f007 fda2 	bl	1d870 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   15d2c:	2800      	cmp	r0, #0
   15d2e:	bf38      	it	cc
   15d30:	2000      	movcc	r0, #0
   15d32:	bd08      	pop	{r3, pc}
   15d34:	20001fb8 	.word	0x20001fb8

00015d38 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   15d38:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		if (!atomic_get(&acl_conns[i].ref)) {
   15d3a:	4c0c      	ldr	r4, [pc, #48]	; (15d6c <bt_conn_lookup_addr_le+0x34>)
{
   15d3c:	4603      	mov	r3, r0
		if (!atomic_get(&acl_conns[i].ref)) {
   15d3e:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
   15d42:	460a      	mov	r2, r1
		if (!atomic_get(&acl_conns[i].ref)) {
   15d44:	f007 fcaf 	bl	1d6a6 <atomic_get>
   15d48:	b908      	cbnz	r0, 15d4e <bt_conn_lookup_addr_le+0x16>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
   15d4a:	2000      	movs	r0, #0
}
   15d4c:	bd10      	pop	{r4, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
   15d4e:	78a1      	ldrb	r1, [r4, #2]
   15d50:	2901      	cmp	r1, #1
   15d52:	d1fa      	bne.n	15d4a <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   15d54:	4619      	mov	r1, r3
   15d56:	4620      	mov	r0, r4
   15d58:	f007 fdab 	bl	1d8b2 <bt_conn_is_peer_addr_le>
   15d5c:	2800      	cmp	r0, #0
   15d5e:	d0f4      	beq.n	15d4a <bt_conn_lookup_addr_le+0x12>
#endif /* defined(CONFIG_BT_ISO) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
   15d60:	f104 0054 	add.w	r0, r4, #84	; 0x54
   15d64:	f007 fca5 	bl	1d6b2 <atomic_inc>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   15d68:	4620      	mov	r0, r4
			return bt_conn_ref(&acl_conns[i]);
   15d6a:	e7ef      	b.n	15d4c <bt_conn_lookup_addr_le+0x14>
   15d6c:	20001fb8 	.word	0x20001fb8

00015d70 <bt_conn_lookup_state_le>:
{
   15d70:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&acl_conns[i].ref)) {
   15d72:	4c10      	ldr	r4, [pc, #64]	; (15db4 <bt_conn_lookup_state_le+0x44>)
{
   15d74:	4605      	mov	r5, r0
		if (!atomic_get(&acl_conns[i].ref)) {
   15d76:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
   15d7a:	4616      	mov	r6, r2
		if (!atomic_get(&acl_conns[i].ref)) {
   15d7c:	f007 fc93 	bl	1d6a6 <atomic_get>
   15d80:	b908      	cbnz	r0, 15d86 <bt_conn_lookup_state_le+0x16>
	return NULL;
   15d82:	2000      	movs	r0, #0
}
   15d84:	bd70      	pop	{r4, r5, r6, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
   15d86:	78a3      	ldrb	r3, [r4, #2]
   15d88:	2b01      	cmp	r3, #1
   15d8a:	d1fa      	bne.n	15d82 <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   15d8c:	b951      	cbnz	r1, 15da4 <bt_conn_lookup_state_le+0x34>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
   15d8e:	7b63      	ldrb	r3, [r4, #13]
   15d90:	42b3      	cmp	r3, r6
   15d92:	d1f6      	bne.n	15d82 <bt_conn_lookup_state_le+0x12>
   15d94:	7a23      	ldrb	r3, [r4, #8]
   15d96:	42ab      	cmp	r3, r5
   15d98:	d1f3      	bne.n	15d82 <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
   15d9a:	4807      	ldr	r0, [pc, #28]	; (15db8 <bt_conn_lookup_state_le+0x48>)
   15d9c:	f007 fc89 	bl	1d6b2 <atomic_inc>
			return bt_conn_ref(&acl_conns[i]);
   15da0:	4804      	ldr	r0, [pc, #16]	; (15db4 <bt_conn_lookup_state_le+0x44>)
   15da2:	e7ef      	b.n	15d84 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   15da4:	460a      	mov	r2, r1
   15da6:	4620      	mov	r0, r4
   15da8:	4629      	mov	r1, r5
   15daa:	f007 fd82 	bl	1d8b2 <bt_conn_is_peer_addr_le>
   15dae:	2800      	cmp	r0, #0
   15db0:	d1ed      	bne.n	15d8e <bt_conn_lookup_state_le+0x1e>
   15db2:	e7e6      	b.n	15d82 <bt_conn_lookup_state_le+0x12>
   15db4:	20001fb8 	.word	0x20001fb8
   15db8:	2000200c 	.word	0x2000200c

00015dbc <bt_conn_set_state>:
{
   15dbc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   15dbe:	7b45      	ldrb	r5, [r0, #13]
   15dc0:	428d      	cmp	r5, r1
{
   15dc2:	4604      	mov	r4, r0
	if (conn->state == state) {
   15dc4:	f000 80a1 	beq.w	15f0a <bt_conn_set_state+0x14e>
	conn->state = state;
   15dc8:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   15dca:	b915      	cbnz	r5, 15dd2 <bt_conn_set_state+0x16>
	atomic_val_t old = atomic_inc(&conn->ref);
   15dcc:	3054      	adds	r0, #84	; 0x54
   15dce:	f007 fc70 	bl	1d6b2 <atomic_inc>
	switch (conn->state) {
   15dd2:	7b63      	ldrb	r3, [r4, #13]
   15dd4:	2b01      	cmp	r3, #1
   15dd6:	d116      	bne.n	15e06 <bt_conn_set_state+0x4a>
	z_impl_k_sem_give(sem);
   15dd8:	4d4c      	ldr	r5, [pc, #304]	; (15f0c <bt_conn_set_state+0x150>)
		tx->pending_no_cb = 0U;
   15dda:	2600      	movs	r6, #0
	__asm__ volatile(
   15ddc:	f04f 0340 	mov.w	r3, #64	; 0x40
   15de0:	f3ef 8211 	mrs	r2, BASEPRI
   15de4:	f383 8811 	msr	BASEPRI, r3
   15de8:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   15dec:	69e3      	ldr	r3, [r4, #28]
   15dee:	2b00      	cmp	r3, #0
   15df0:	d06c      	beq.n	15ecc <bt_conn_set_state+0x110>
			conn->pending_no_cb--;
   15df2:	3b01      	subs	r3, #1
   15df4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15df6:	f382 8811 	msr	BASEPRI, r2
   15dfa:	f3bf 8f6f 	isb	sy
   15dfe:	4628      	mov	r0, r5
   15e00:	f004 fe8a 	bl	1ab18 <z_impl_k_sem_give>
}
   15e04:	e7ea      	b.n	15ddc <bt_conn_set_state+0x20>
	switch (conn->state) {
   15e06:	2b07      	cmp	r3, #7
   15e08:	d009      	beq.n	15e1e <bt_conn_set_state+0x62>
   15e0a:	2b00      	cmp	r3, #0
   15e0c:	d17d      	bne.n	15f0a <bt_conn_set_state+0x14e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15e0e:	78a3      	ldrb	r3, [r4, #2]
   15e10:	2b04      	cmp	r3, #4
   15e12:	d125      	bne.n	15e60 <bt_conn_set_state+0xa4>
			bt_conn_unref(conn);
   15e14:	4620      	mov	r0, r4
}
   15e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   15e1a:	f007 bd6a 	b.w	1d8f2 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15e1e:	78a3      	ldrb	r3, [r4, #2]
   15e20:	2b04      	cmp	r3, #4
   15e22:	d072      	beq.n	15f0a <bt_conn_set_state+0x14e>
	z_impl_k_queue_init(queue);
   15e24:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15e28:	f009 ff1a 	bl	1fc60 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   15e2c:	2100      	movs	r1, #0
   15e2e:	4838      	ldr	r0, [pc, #224]	; (15f10 <bt_conn_set_state+0x154>)
   15e30:	f005 f9ca 	bl	1b1c8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15e34:	2300      	movs	r3, #0
	list->tail = NULL;
   15e36:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
   15e3a:	4620      	mov	r0, r4
   15e3c:	f000 f9d8 	bl	161f0 <bt_l2cap_connected>
		notify_connected(conn);
   15e40:	4620      	mov	r0, r4
   15e42:	f7ff fd6f 	bl	15924 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e46:	78e3      	ldrb	r3, [r4, #3]
   15e48:	2b01      	cmp	r3, #1
   15e4a:	d15e      	bne.n	15f0a <bt_conn_set_state+0x14e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15e4c:	f104 0158 	add.w	r1, r4, #88	; 0x58
   15e50:	4830      	ldr	r0, [pc, #192]	; (15f14 <bt_conn_set_state+0x158>)
}
   15e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15e56:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   15e5a:	2300      	movs	r3, #0
   15e5c:	f004 bfba 	b.w	1add4 <k_delayed_work_submit_to_queue>
		switch (old_state) {
   15e60:	3d01      	subs	r5, #1
   15e62:	2d05      	cmp	r5, #5
   15e64:	d851      	bhi.n	15f0a <bt_conn_set_state+0x14e>
   15e66:	a301      	add	r3, pc, #4	; (adr r3, 15e6c <bt_conn_set_state+0xb0>)
   15e68:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   15e6c:	00015e85 	.word	0x00015e85
   15e70:	00015ebf 	.word	0x00015ebf
   15e74:	00015e15 	.word	0x00015e15
   15e78:	00015e15 	.word	0x00015e15
   15e7c:	00015ebf 	.word	0x00015ebf
   15e80:	00015ebf 	.word	0x00015ebf
			tx_notify(conn);
   15e84:	4620      	mov	r0, r4
   15e86:	f007 fc21 	bl	1d6cc <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   15e8a:	78a3      	ldrb	r3, [r4, #2]
   15e8c:	2b01      	cmp	r3, #1
   15e8e:	d103      	bne.n	15e98 <bt_conn_set_state+0xdc>
				k_delayed_work_cancel(&conn->deferred_work);
   15e90:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15e94:	f00a f8a4 	bl	1ffe0 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15e98:	f3bf 8f5b 	dmb	ish
   15e9c:	3404      	adds	r4, #4
   15e9e:	e854 3f00 	ldrex	r3, [r4]
   15ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15ea6:	e844 3200 	strex	r2, r3, [r4]
   15eaa:	2a00      	cmp	r2, #0
   15eac:	d1f7      	bne.n	15e9e <bt_conn_set_state+0xe2>
   15eae:	f3bf 8f5b 	dmb	ish
   15eb2:	4817      	ldr	r0, [pc, #92]	; (15f10 <bt_conn_set_state+0x154>)
}
   15eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15eb8:	2100      	movs	r1, #0
   15eba:	f005 b985 	b.w	1b1c8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   15ebe:	7b23      	ldrb	r3, [r4, #12]
   15ec0:	2b00      	cmp	r3, #0
   15ec2:	d0a7      	beq.n	15e14 <bt_conn_set_state+0x58>
				notify_connected(conn);
   15ec4:	4620      	mov	r0, r4
   15ec6:	f7ff fd2d 	bl	15924 <notify_connected>
   15eca:	e7a3      	b.n	15e14 <bt_conn_set_state+0x58>
Z_GENLIST_IS_EMPTY(slist)
   15ecc:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   15ece:	b128      	cbz	r0, 15edc <bt_conn_set_state+0x120>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15ed0:	69a1      	ldr	r1, [r4, #24]
   15ed2:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   15ed4:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15ed6:	4288      	cmp	r0, r1
	list->tail = node;
   15ed8:	bf08      	it	eq
   15eda:	61a3      	streq	r3, [r4, #24]
   15edc:	f382 8811 	msr	BASEPRI, r2
   15ee0:	f3bf 8f6f 	isb	sy
		if (!node) {
   15ee4:	b188      	cbz	r0, 15f0a <bt_conn_set_state+0x14e>
	__asm__ volatile(
   15ee6:	f04f 0240 	mov.w	r2, #64	; 0x40
   15eea:	f3ef 8311 	mrs	r3, BASEPRI
   15eee:	f382 8811 	msr	BASEPRI, r2
   15ef2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   15ef6:	68c2      	ldr	r2, [r0, #12]
   15ef8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   15efa:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   15efc:	f383 8811 	msr	BASEPRI, r3
   15f00:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   15f04:	f7ff fd04 	bl	15910 <tx_free>
   15f08:	e779      	b.n	15dfe <bt_conn_set_state+0x42>
}
   15f0a:	bd70      	pop	{r4, r5, r6, pc}
   15f0c:	20000498 	.word	0x20000498
   15f10:	200005d8 	.word	0x200005d8
   15f14:	200025a8 	.word	0x200025a8

00015f18 <send_conn_le_param_update>:
{
   15f18:	b538      	push	{r3, r4, r5, lr}
   15f1a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15f1c:	4608      	mov	r0, r1
{
   15f1e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15f20:	f007 fb3d 	bl	1d59e <bt_le_conn_params_valid>
   15f24:	b308      	cbz	r0, 15f6a <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15f26:	4b12      	ldr	r3, [pc, #72]	; (15f70 <send_conn_le_param_update+0x58>)
   15f28:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   15f2c:	0799      	lsls	r1, r3, #30
   15f2e:	d407      	bmi.n	15f40 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   15f30:	78e3      	ldrb	r3, [r4, #3]
   15f32:	b173      	cbz	r3, 15f52 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   15f34:	4629      	mov	r1, r5
   15f36:	4620      	mov	r0, r4
}
   15f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15f3c:	f000 b9b4 	b.w	162a8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15f40:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   15f44:	079a      	lsls	r2, r3, #30
   15f46:	d5f3      	bpl.n	15f30 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15f48:	1d20      	adds	r0, r4, #4
   15f4a:	f007 fbac 	bl	1d6a6 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   15f4e:	0543      	lsls	r3, r0, #21
   15f50:	d4ee      	bmi.n	15f30 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   15f52:	4629      	mov	r1, r5
   15f54:	4620      	mov	r0, r4
   15f56:	f007 fd12 	bl	1d97e <bt_conn_le_conn_update>
		if (rc == 0) {
   15f5a:	b928      	cbnz	r0, 15f68 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   15f5c:	88ab      	ldrh	r3, [r5, #4]
   15f5e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   15f62:	88eb      	ldrh	r3, [r5, #6]
   15f64:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   15f68:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15f6a:	f06f 0015 	mvn.w	r0, #21
   15f6e:	e7fb      	b.n	15f68 <send_conn_le_param_update+0x50>
   15f70:	200003c8 	.word	0x200003c8

00015f74 <deferred_work>:
{
   15f74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   15f76:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   15f7a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   15f7c:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   15f80:	b993      	cbnz	r3, 15fa8 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   15f82:	4630      	mov	r0, r6
   15f84:	f007 fd7e 	bl	1da84 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15f88:	4b1f      	ldr	r3, [pc, #124]	; (16008 <deferred_work+0x94>)
   15f8a:	681d      	ldr	r5, [r3, #0]
   15f8c:	b925      	cbnz	r5, 15f98 <deferred_work+0x24>
		bt_conn_unref(conn);
   15f8e:	4630      	mov	r0, r6
   15f90:	f007 fcaf 	bl	1d8f2 <bt_conn_unref>
}
   15f94:	b002      	add	sp, #8
   15f96:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   15f98:	686b      	ldr	r3, [r5, #4]
   15f9a:	b11b      	cbz	r3, 15fa4 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   15f9c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   15fa0:	4630      	mov	r0, r6
   15fa2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15fa4:	69ad      	ldr	r5, [r5, #24]
   15fa6:	e7f1      	b.n	15f8c <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   15fa8:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   15fac:	2b01      	cmp	r3, #1
   15fae:	d1f1      	bne.n	15f94 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15fb0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   15fb4:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   15fb8:	e855 3f00 	ldrex	r3, [r5]
   15fbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   15fc0:	e845 2100 	strex	r1, r2, [r5]
   15fc4:	2900      	cmp	r1, #0
   15fc6:	d1f7      	bne.n	15fb8 <deferred_work+0x44>
   15fc8:	f3bf 8f5b 	dmb	ish
   15fcc:	059b      	lsls	r3, r3, #22
   15fce:	d514      	bpl.n	15ffa <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15fd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15fd2:	9300      	str	r3, [sp, #0]
   15fd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   15fd6:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   15fd8:	4669      	mov	r1, sp
   15fda:	4630      	mov	r0, r6
   15fdc:	f7ff ff9c 	bl	15f18 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15fe0:	f3bf 8f5b 	dmb	ish
   15fe4:	e855 3f00 	ldrex	r3, [r5]
   15fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15fec:	e845 3200 	strex	r2, r3, [r5]
   15ff0:	2a00      	cmp	r2, #0
   15ff2:	d1f7      	bne.n	15fe4 <deferred_work+0x70>
   15ff4:	f3bf 8f5b 	dmb	ish
   15ff8:	e7cc      	b.n	15f94 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   15ffa:	4a04      	ldr	r2, [pc, #16]	; (1600c <deferred_work+0x98>)
   15ffc:	6810      	ldr	r0, [r2, #0]
   15ffe:	6851      	ldr	r1, [r2, #4]
   16000:	466b      	mov	r3, sp
   16002:	c303      	stmia	r3!, {r0, r1}
   16004:	e7e8      	b.n	15fd8 <deferred_work+0x64>
   16006:	bf00      	nop
   16008:	20002798 	.word	0x20002798
   1600c:	00020610 	.word	0x00020610

00016010 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   16010:	b538      	push	{r3, r4, r5, lr}
   16012:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
   16014:	4906      	ldr	r1, [pc, #24]	; (16030 <bt_conn_create_pdu_timeout+0x20>)
   16016:	2800      	cmp	r0, #0
   16018:	bf08      	it	eq
   1601a:	4608      	moveq	r0, r1
   1601c:	f009 faee 	bl	1f5fc <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
   16020:	4604      	mov	r4, r0
   16022:	b118      	cbz	r0, 1602c <bt_conn_create_pdu_timeout+0x1c>
		BT_WARN("Unable to allocate buffer within timeout");
		return NULL;
	}

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);
   16024:	1d29      	adds	r1, r5, #4
   16026:	3008      	adds	r0, #8
   16028:	f009 fb07 	bl	1f63a <net_buf_simple_reserve>

	return buf;
}
   1602c:	4620      	mov	r0, r4
   1602e:	bd38      	pop	{r3, r4, r5, pc}
   16030:	20000894 	.word	0x20000894

00016034 <bt_conn_create_frag_timeout>:
{
   16034:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   16036:	4801      	ldr	r0, [pc, #4]	; (1603c <bt_conn_create_frag_timeout+0x8>)
   16038:	f7ff bfea 	b.w	16010 <bt_conn_create_pdu_timeout>
   1603c:	200008e4 	.word	0x200008e4

00016040 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   16040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16044:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   16046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1604a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1604e:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   16050:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   16052:	f7ff ffef 	bl	16034 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   16056:	7833      	ldrb	r3, [r6, #0]
   16058:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1605a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1605c:	f04f 0600 	mov.w	r6, #0
   16060:	d005      	beq.n	1606e <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   16062:	f002 fddd 	bl	18c20 <net_buf_unref>
		return NULL;
   16066:	4635      	mov	r5, r6
}
   16068:	4628      	mov	r0, r5
   1606a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1606e:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16070:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   16074:	4e0c      	ldr	r6, [pc, #48]	; (160a8 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16076:	4638      	mov	r0, r7
   16078:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   1607c:	f009 fb4f 	bl	1f71e <net_buf_simple_tailroom>
   16080:	4580      	cmp	r8, r0
   16082:	d20c      	bcs.n	1609e <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   16084:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	net_buf_add_mem(frag, buf->data, frag_len);
   16088:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1608c:	4632      	mov	r2, r6
   1608e:	4638      	mov	r0, r7
   16090:	f009 fb10 	bl	1f6b4 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
   16094:	4631      	mov	r1, r6
   16096:	4620      	mov	r0, r4
   16098:	f009 fb25 	bl	1f6e6 <net_buf_simple_pull>
	return frag;
   1609c:	e7e4      	b.n	16068 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1609e:	4638      	mov	r0, r7
   160a0:	f009 fb3d 	bl	1f71e <net_buf_simple_tailroom>
   160a4:	b286      	uxth	r6, r0
   160a6:	e7ef      	b.n	16088 <create_frag.isra.0+0x48>
   160a8:	200003c8 	.word	0x200003c8

000160ac <bt_conn_process_tx>:
{
   160ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   160ae:	7b43      	ldrb	r3, [r0, #13]
{
   160b0:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   160b2:	b993      	cbnz	r3, 160da <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   160b4:	f3bf 8f5b 	dmb	ish
   160b8:	1d03      	adds	r3, r0, #4
   160ba:	e853 2f00 	ldrex	r2, [r3]
   160be:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   160c2:	e843 1400 	strex	r4, r1, [r3]
   160c6:	2c00      	cmp	r4, #0
   160c8:	d1f7      	bne.n	160ba <bt_conn_process_tx+0xe>
   160ca:	f3bf 8f5b 	dmb	ish
   160ce:	0653      	lsls	r3, r2, #25
   160d0:	d503      	bpl.n	160da <bt_conn_process_tx+0x2e>
}
   160d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   160d6:	f7ff bd55 	b.w	15b84 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   160da:	2200      	movs	r2, #0
   160dc:	2300      	movs	r3, #0
   160de:	f105 0034 	add.w	r0, r5, #52	; 0x34
   160e2:	f009 fa90 	bl	1f606 <net_buf_get>
	BT_ASSERT(buf);
   160e6:	4604      	mov	r4, r0
   160e8:	b960      	cbnz	r0, 16104 <bt_conn_process_tx+0x58>
   160ea:	4a20      	ldr	r2, [pc, #128]	; (1616c <bt_conn_process_tx+0xc0>)
   160ec:	4920      	ldr	r1, [pc, #128]	; (16170 <bt_conn_process_tx+0xc4>)
   160ee:	4821      	ldr	r0, [pc, #132]	; (16174 <bt_conn_process_tx+0xc8>)
   160f0:	f240 5355 	movw	r3, #1365	; 0x555
   160f4:	f005 f8d1 	bl	1b29a <printk>
   160f8:	4040      	eors	r0, r0
   160fa:	f380 8811 	msr	BASEPRI, r0
   160fe:	f04f 0003 	mov.w	r0, #3
   16102:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   16104:	4f1c      	ldr	r7, [pc, #112]	; (16178 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   16106:	89a1      	ldrh	r1, [r4, #12]
   16108:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   1610c:	4291      	cmp	r1, r2
   1610e:	d807      	bhi.n	16120 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   16110:	2300      	movs	r3, #0
   16112:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   16114:	4621      	mov	r1, r4
   16116:	4628      	mov	r0, r5
   16118:	f7ff fc1a 	bl	15950 <send_frag>
	if (!send_buf(conn, buf)) {
   1611c:	b140      	cbz	r0, 16130 <bt_conn_process_tx+0x84>
}
   1611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   16120:	f105 060d 	add.w	r6, r5, #13
   16124:	4621      	mov	r1, r4
   16126:	4630      	mov	r0, r6
   16128:	f7ff ff8a 	bl	16040 <create_frag.isra.0>
	if (!frag) {
   1612c:	4601      	mov	r1, r0
   1612e:	b920      	cbnz	r0, 1613a <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   16130:	4620      	mov	r0, r4
}
   16132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   16136:	f002 bd73 	b.w	18c20 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1613a:	2301      	movs	r3, #1
   1613c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1613e:	4628      	mov	r0, r5
   16140:	f7ff fc06 	bl	15950 <send_frag>
   16144:	2800      	cmp	r0, #0
   16146:	d0f3      	beq.n	16130 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   16148:	89a2      	ldrh	r2, [r4, #12]
   1614a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   1614e:	429a      	cmp	r2, r3
   16150:	d802      	bhi.n	16158 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   16152:	2300      	movs	r3, #0
   16154:	2203      	movs	r2, #3
   16156:	e7dd      	b.n	16114 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   16158:	4621      	mov	r1, r4
   1615a:	4630      	mov	r0, r6
   1615c:	f7ff ff70 	bl	16040 <create_frag.isra.0>
		if (!frag) {
   16160:	4601      	mov	r1, r0
   16162:	2800      	cmp	r0, #0
   16164:	d0e4      	beq.n	16130 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16166:	2301      	movs	r3, #1
   16168:	461a      	mov	r2, r3
   1616a:	e7e8      	b.n	1613e <bt_conn_process_tx+0x92>
   1616c:	000210b7 	.word	0x000210b7
   16170:	00021044 	.word	0x00021044
   16174:	00020ff0 	.word	0x00020ff0
   16178:	200003c8 	.word	0x200003c8

0001617c <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   1617c:	4b03      	ldr	r3, [pc, #12]	; (1618c <bt_conn_index+0x10>)
   1617e:	1ac0      	subs	r0, r0, r3
   16180:	4b03      	ldr	r3, [pc, #12]	; (16190 <bt_conn_index+0x14>)
   16182:	10c0      	asrs	r0, r0, #3
   16184:	4358      	muls	r0, r3
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
   16186:	b2c0      	uxtb	r0, r0
   16188:	4770      	bx	lr
   1618a:	bf00      	nop
   1618c:	20001fb8 	.word	0x20001fb8
   16190:	e9bd37a7 	.word	0xe9bd37a7

00016194 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
   16194:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   16196:	490b      	ldr	r1, [pc, #44]	; (161c4 <bt_conn_init+0x30>)
   16198:	480b      	ldr	r0, [pc, #44]	; (161c8 <bt_conn_init+0x34>)
   1619a:	f009 fd6d 	bl	1fc78 <k_queue_append>
   1619e:	490b      	ldr	r1, [pc, #44]	; (161cc <bt_conn_init+0x38>)
   161a0:	4809      	ldr	r0, [pc, #36]	; (161c8 <bt_conn_init+0x34>)
   161a2:	f009 fd69 	bl	1fc78 <k_queue_append>
   161a6:	490a      	ldr	r1, [pc, #40]	; (161d0 <bt_conn_init+0x3c>)
   161a8:	4807      	ldr	r0, [pc, #28]	; (161c8 <bt_conn_init+0x34>)
   161aa:	f009 fd65 	bl	1fc78 <k_queue_append>
	}

	bt_att_init();
   161ae:	f008 f8ea 	bl	1e386 <bt_att_init>

	err = bt_smp_init();
   161b2:	f002 fbcd 	bl	18950 <bt_smp_init>
	if (err) {
   161b6:	4604      	mov	r4, r0
   161b8:	b908      	cbnz	r0, 161be <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   161ba:	f007 fd17 	bl	1dbec <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
   161be:	4620      	mov	r0, r4
   161c0:	bd10      	pop	{r4, pc}
   161c2:	bf00      	nop
   161c4:	2000279c 	.word	0x2000279c
   161c8:	2000087c 	.word	0x2000087c
   161cc:	200027ac 	.word	0x200027ac
   161d0:	200027bc 	.word	0x200027bc

000161d4 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   161d4:	4b04      	ldr	r3, [pc, #16]	; (161e8 <l2cap_accept+0x14>)
   161d6:	6818      	ldr	r0, [r3, #0]
   161d8:	b918      	cbnz	r0, 161e2 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   161da:	4a04      	ldr	r2, [pc, #16]	; (161ec <l2cap_accept+0x18>)
   161dc:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   161de:	600b      	str	r3, [r1, #0]

		return 0;
   161e0:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   161e2:	f06f 000b 	mvn.w	r0, #11
}
   161e6:	4770      	bx	lr
   161e8:	20002070 	.word	0x20002070
   161ec:	00020a5c 	.word	0x00020a5c

000161f0 <bt_l2cap_connected>:
{
   161f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   161f4:	4e29      	ldr	r6, [pc, #164]	; (1629c <bt_l2cap_connected+0xac>)
   161f6:	4f2a      	ldr	r7, [pc, #168]	; (162a0 <bt_l2cap_connected+0xb0>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   161f8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 162a4 <bt_l2cap_connected+0xb4>
{
   161fc:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   161fe:	42be      	cmp	r6, r7
   16200:	d302      	bcc.n	16208 <bt_l2cap_connected+0x18>
}
   16202:	b003      	add	sp, #12
   16204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   16208:	6873      	ldr	r3, [r6, #4]
   1620a:	a901      	add	r1, sp, #4
   1620c:	4620      	mov	r0, r4
   1620e:	4798      	blx	r3
   16210:	2800      	cmp	r0, #0
   16212:	db3d      	blt.n	16290 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   16214:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   16216:	8833      	ldrh	r3, [r6, #0]
   16218:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   1621c:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   16220:	4641      	mov	r1, r8
   16222:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   16226:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   1622a:	f009 fed1 	bl	1ffd0 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1622e:	f3bf 8f5b 	dmb	ish
   16232:	f105 0340 	add.w	r3, r5, #64	; 0x40
   16236:	2200      	movs	r2, #0
   16238:	e853 1f00 	ldrex	r1, [r3]
   1623c:	e843 2000 	strex	r0, r2, [r3]
   16240:	2800      	cmp	r0, #0
   16242:	d1f9      	bne.n	16238 <bt_l2cap_connected+0x48>
   16244:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   16248:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   1624a:	6d22      	ldr	r2, [r4, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
   1624c:	f105 0308 	add.w	r3, r5, #8
   16250:	bb02      	cbnz	r2, 16294 <bt_l2cap_connected+0xa4>
	list->head = node;
   16252:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		if (chan->ops->connected) {
   16256:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   16258:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1625a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1625c:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   16260:	681b      	ldr	r3, [r3, #0]
   16262:	b103      	cbz	r3, 16266 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   16264:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16266:	9b01      	ldr	r3, [sp, #4]
   16268:	f3bf 8f5b 	dmb	ish
   1626c:	3340      	adds	r3, #64	; 0x40
   1626e:	e853 2f00 	ldrex	r2, [r3]
   16272:	f042 0201 	orr.w	r2, r2, #1
   16276:	e843 2100 	strex	r1, r2, [r3]
   1627a:	2900      	cmp	r1, #0
   1627c:	d1f7      	bne.n	1626e <bt_l2cap_connected+0x7e>
   1627e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   16282:	9801      	ldr	r0, [sp, #4]
   16284:	6843      	ldr	r3, [r0, #4]
   16286:	699b      	ldr	r3, [r3, #24]
   16288:	b113      	cbz	r3, 16290 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   1628a:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1628e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16290:	360c      	adds	r6, #12
   16292:	e7b4      	b.n	161fe <bt_l2cap_connected+0xe>
	parent->next = child;
   16294:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16296:	6523      	str	r3, [r4, #80]	; 0x50
}
   16298:	e7dd      	b.n	16256 <bt_l2cap_connected+0x66>
   1629a:	bf00      	nop
   1629c:	00020584 	.word	0x00020584
   162a0:	000205a8 	.word	0x000205a8
   162a4:	0001da6d 	.word	0x0001da6d

000162a8 <bt_l2cap_update_conn_param>:
{
   162a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   162aa:	4b15      	ldr	r3, [pc, #84]	; (16300 <bt_l2cap_update_conn_param+0x58>)
   162ac:	781a      	ldrb	r2, [r3, #0]
   162ae:	3201      	adds	r2, #1
	if (!ident) {
   162b0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   162b4:	bf08      	it	eq
   162b6:	2201      	moveq	r2, #1
   162b8:	701a      	strb	r2, [r3, #0]
{
   162ba:	4605      	mov	r5, r0
   162bc:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   162be:	2208      	movs	r2, #8
   162c0:	7819      	ldrb	r1, [r3, #0]
   162c2:	2012      	movs	r0, #18
   162c4:	f007 fb84 	bl	1d9d0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   162c8:	4606      	mov	r6, r0
   162ca:	b1b0      	cbz	r0, 162fa <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
   162cc:	2108      	movs	r1, #8
   162ce:	4408      	add	r0, r1
   162d0:	f009 f9ea 	bl	1f6a8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   162d4:	8822      	ldrh	r2, [r4, #0]
   162d6:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   162d8:	8862      	ldrh	r2, [r4, #2]
   162da:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   162dc:	88a2      	ldrh	r2, [r4, #4]
   162de:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   162e0:	88e2      	ldrh	r2, [r4, #6]
   162e2:	80c2      	strh	r2, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   162e4:	2400      	movs	r4, #0
   162e6:	9400      	str	r4, [sp, #0]
   162e8:	4623      	mov	r3, r4
   162ea:	4632      	mov	r2, r6
   162ec:	2105      	movs	r1, #5
   162ee:	4628      	mov	r0, r5
   162f0:	f007 fbfb 	bl	1daea <bt_l2cap_send_cb>
	return 0;
   162f4:	4620      	mov	r0, r4
}
   162f6:	b002      	add	sp, #8
   162f8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   162fa:	f06f 000b 	mvn.w	r0, #11
   162fe:	e7fa      	b.n	162f6 <bt_l2cap_update_conn_param+0x4e>
   16300:	20002ddf 	.word	0x20002ddf

00016304 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   16304:	4b02      	ldr	r3, [pc, #8]	; (16310 <att_cfm_sent+0xc>)
   16306:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   1630a:	f007 bc9d 	b.w	1dc48 <att_sent>
   1630e:	bf00      	nop
   16310:	0001dfff 	.word	0x0001dfff

00016314 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   16314:	4b02      	ldr	r3, [pc, #8]	; (16320 <att_rsp_sent+0xc>)
   16316:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   1631a:	f007 bc95 	b.w	1dc48 <att_sent>
   1631e:	bf00      	nop
   16320:	0001dfe3 	.word	0x0001dfe3

00016324 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   16324:	4b02      	ldr	r3, [pc, #8]	; (16330 <att_req_sent+0xc>)
   16326:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   1632a:	f007 bc8d 	b.w	1dc48 <att_sent>
   1632e:	bf00      	nop
   16330:	000164a1 	.word	0x000164a1

00016334 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   16334:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   16336:	3808      	subs	r0, #8
   16338:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1633a:	a901      	add	r1, sp, #4
   1633c:	4802      	ldr	r0, [pc, #8]	; (16348 <bt_att_released+0x14>)
   1633e:	f004 f841 	bl	1a3c4 <k_mem_slab_free>
}
   16342:	b003      	add	sp, #12
   16344:	f85d fb04 	ldr.w	pc, [sp], #4
   16348:	200007cc 	.word	0x200007cc

0001634c <read_group_cb>:
{
   1634c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16350:	4606      	mov	r6, r0
   16352:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16354:	f04f 0800 	mov.w	r8, #0
   16358:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1635c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1635e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16360:	f88d 8008 	strb.w	r8, [sp, #8]
   16364:	a902      	add	r1, sp, #8
{
   16366:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16368:	f8ad 300a 	strh.w	r3, [sp, #10]
   1636c:	f006 fd7d 	bl	1ce6a <bt_uuid_cmp>
   16370:	b1a0      	cbz	r0, 1639c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16372:	f642 0301 	movw	r3, #10241	; 0x2801
   16376:	6830      	ldr	r0, [r6, #0]
   16378:	f88d 800c 	strb.w	r8, [sp, #12]
   1637c:	a903      	add	r1, sp, #12
   1637e:	f8ad 300e 	strh.w	r3, [sp, #14]
   16382:	f006 fd72 	bl	1ce6a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16386:	b148      	cbz	r0, 1639c <read_group_cb+0x50>
		if (data->group &&
   16388:	6923      	ldr	r3, [r4, #16]
   1638a:	b11b      	cbz	r3, 16394 <read_group_cb+0x48>
   1638c:	885a      	ldrh	r2, [r3, #2]
   1638e:	42aa      	cmp	r2, r5
   16390:	d200      	bcs.n	16394 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16392:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16394:	2001      	movs	r0, #1
}
   16396:	b004      	add	sp, #16
   16398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1639c:	6861      	ldr	r1, [r4, #4]
   1639e:	6830      	ldr	r0, [r6, #0]
   163a0:	f006 fd63 	bl	1ce6a <bt_uuid_cmp>
   163a4:	b110      	cbz	r0, 163ac <read_group_cb+0x60>
		data->group = NULL;
   163a6:	2300      	movs	r3, #0
   163a8:	6123      	str	r3, [r4, #16]
   163aa:	e7f3      	b.n	16394 <read_group_cb+0x48>
	if (data->rsp->len &&
   163ac:	68e3      	ldr	r3, [r4, #12]
   163ae:	68a0      	ldr	r0, [r4, #8]
   163b0:	781a      	ldrb	r2, [r3, #0]
   163b2:	b13a      	cbz	r2, 163c4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   163b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   163b8:	8981      	ldrh	r1, [r0, #12]
   163ba:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   163bc:	4293      	cmp	r3, r2
   163be:	da01      	bge.n	163c4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   163c0:	2000      	movs	r0, #0
   163c2:	e7e8      	b.n	16396 <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   163c4:	2104      	movs	r1, #4
   163c6:	3008      	adds	r0, #8
   163c8:	f009 f96e 	bl	1f6a8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   163cc:	4b09      	ldr	r3, [pc, #36]	; (163f4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   163ce:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   163d0:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   163d2:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   163d4:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   163d6:	4631      	mov	r1, r6
   163d8:	9300      	str	r3, [sp, #0]
   163da:	9401      	str	r4, [sp, #4]
   163dc:	2300      	movs	r3, #0
   163de:	4638      	mov	r0, r7
   163e0:	f007 fc82 	bl	1dce8 <att_chan_read>
	if (read < 0) {
   163e4:	2800      	cmp	r0, #0
   163e6:	dbeb      	blt.n	163c0 <read_group_cb+0x74>
	if (!data->group) {
   163e8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   163ea:	3800      	subs	r0, #0
   163ec:	bf18      	it	ne
   163ee:	2001      	movne	r0, #1
   163f0:	e7d1      	b.n	16396 <read_group_cb+0x4a>
   163f2:	bf00      	nop
   163f4:	0001dfbf 	.word	0x0001dfbf

000163f8 <read_type_cb>:
{
   163f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   163fc:	f8d2 8000 	ldr.w	r8, [r2]
{
   16400:	4606      	mov	r6, r0
   16402:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16404:	6800      	ldr	r0, [r0, #0]
   16406:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   16408:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   1640c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1640e:	f006 fd2c 	bl	1ce6a <bt_uuid_cmp>
   16412:	4607      	mov	r7, r0
   16414:	2800      	cmp	r0, #0
   16416:	d13e      	bne.n	16496 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16418:	4628      	mov	r0, r5
   1641a:	2215      	movs	r2, #21
   1641c:	4631      	mov	r1, r6
   1641e:	f008 fba3 	bl	1eb68 <bt_gatt_check_perm>
   16422:	4605      	mov	r5, r0
   16424:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16426:	b148      	cbz	r0, 1643c <read_type_cb+0x44>
		if (data->rsp->len) {
   16428:	68e3      	ldr	r3, [r4, #12]
   1642a:	781b      	ldrb	r3, [r3, #0]
   1642c:	b923      	cbnz	r3, 16438 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1642e:	2500      	movs	r5, #0
}
   16430:	4628      	mov	r0, r5
   16432:	b003      	add	sp, #12
   16434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   16438:	7527      	strb	r7, [r4, #20]
   1643a:	e7f8      	b.n	1642e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1643c:	68a0      	ldr	r0, [r4, #8]
   1643e:	f009 f911 	bl	1f664 <net_buf_frag_last>
   16442:	2102      	movs	r1, #2
   16444:	3008      	adds	r0, #8
   16446:	f009 f92f 	bl	1f6a8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1644a:	4b14      	ldr	r3, [pc, #80]	; (1649c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1644c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1644e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   16450:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16454:	4631      	mov	r1, r6
   16456:	9300      	str	r3, [sp, #0]
   16458:	9401      	str	r4, [sp, #4]
   1645a:	462b      	mov	r3, r5
   1645c:	4640      	mov	r0, r8
   1645e:	f007 fc43 	bl	1dce8 <att_chan_read>
	if (read < 0) {
   16462:	2800      	cmp	r0, #0
   16464:	da07      	bge.n	16476 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   16466:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1646a:	bf26      	itte	cs
   1646c:	4240      	negcs	r0, r0
   1646e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   16470:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   16472:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16474:	e7dc      	b.n	16430 <read_type_cb+0x38>
	if (!data->item) {
   16476:	6923      	ldr	r3, [r4, #16]
   16478:	2b00      	cmp	r3, #0
   1647a:	d0d8      	beq.n	1642e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1647c:	68a0      	ldr	r0, [r4, #8]
   1647e:	f007 fbdb 	bl	1dc38 <net_buf_frags_len>
   16482:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16486:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16488:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1648a:	7818      	ldrb	r0, [r3, #0]
   1648c:	4285      	cmp	r5, r0
   1648e:	bf94      	ite	ls
   16490:	2500      	movls	r5, #0
   16492:	2501      	movhi	r5, #1
   16494:	e7cc      	b.n	16430 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16496:	2501      	movs	r5, #1
   16498:	e7ca      	b.n	16430 <read_type_cb+0x38>
   1649a:	bf00      	nop
   1649c:	0001dc55 	.word	0x0001dc55

000164a0 <chan_req_sent>:
	if (chan->req) {
   164a0:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   164a4:	b13b      	cbz	r3, 164b6 <chan_req_sent+0x16>
   164a6:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   164aa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   164ae:	4802      	ldr	r0, [pc, #8]	; (164b8 <chan_req_sent+0x18>)
   164b0:	2300      	movs	r3, #0
   164b2:	f004 bc8f 	b.w	1add4 <k_delayed_work_submit_to_queue>
}
   164b6:	4770      	bx	lr
   164b8:	200025a8 	.word	0x200025a8

000164bc <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   164bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   164be:	2300      	movs	r3, #0
{
   164c0:	4607      	mov	r7, r0
   164c2:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   164c4:	4822      	ldr	r0, [pc, #136]	; (16550 <bt_att_accept+0x94>)
   164c6:	2200      	movs	r2, #0
   164c8:	4669      	mov	r1, sp
   164ca:	f003 ff49 	bl	1a360 <k_mem_slab_alloc>
   164ce:	4604      	mov	r4, r0
   164d0:	b120      	cbz	r0, 164dc <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   164d2:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   164d6:	4620      	mov	r0, r4
   164d8:	b003      	add	sp, #12
   164da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   164dc:	4601      	mov	r1, r0
   164de:	222c      	movs	r2, #44	; 0x2c
   164e0:	9800      	ldr	r0, [sp, #0]
   164e2:	f006 fc35 	bl	1cd50 <memset>
	att->conn = conn;
   164e6:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   164e8:	481a      	ldr	r0, [pc, #104]	; (16554 <bt_att_accept+0x98>)
	list->tail = NULL;
   164ea:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   164ec:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   164f0:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   164f4:	2200      	movs	r2, #0
   164f6:	2300      	movs	r3, #0
   164f8:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   164fa:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   164fc:	f003 ff30 	bl	1a360 <k_mem_slab_alloc>
   16500:	4604      	mov	r4, r0
   16502:	2800      	cmp	r0, #0
   16504:	d1e5      	bne.n	164d2 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   16506:	4601      	mov	r1, r0
   16508:	f44f 7298 	mov.w	r2, #304	; 0x130
   1650c:	9801      	ldr	r0, [sp, #4]
   1650e:	f006 fc1f 	bl	1cd50 <memset>
	chan->chan.chan.ops = &ops;
   16512:	9801      	ldr	r0, [sp, #4]
   16514:	4b10      	ldr	r3, [pc, #64]	; (16558 <bt_att_accept+0x9c>)
   16516:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   16518:	30c8      	adds	r0, #200	; 0xc8
   1651a:	f009 fba1 	bl	1fc60 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   1651e:	9801      	ldr	r0, [sp, #4]
   16520:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
   16524:	2203      	movs	r2, #3
   16526:	4611      	mov	r1, r2
   16528:	f009 fcd2 	bl	1fed0 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1652c:	9b01      	ldr	r3, [sp, #4]
   1652e:	f3bf 8f5b 	dmb	ish
   16532:	33c0      	adds	r3, #192	; 0xc0
   16534:	e853 2f00 	ldrex	r2, [r3]
   16538:	e843 4100 	strex	r1, r4, [r3]
   1653c:	2900      	cmp	r1, #0
   1653e:	d1f9      	bne.n	16534 <bt_att_accept+0x78>
   16540:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   16544:	9b01      	ldr	r3, [sp, #4]
   16546:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1654a:	6033      	str	r3, [r6, #0]
	return 0;
   1654c:	e7c3      	b.n	164d6 <bt_att_accept+0x1a>
   1654e:	bf00      	nop
   16550:	200007b0 	.word	0x200007b0
   16554:	200007cc 	.word	0x200007cc
   16558:	200005e8 	.word	0x200005e8

0001655c <bt_att_connected>:
{
   1655c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1655e:	2104      	movs	r1, #4
{
   16560:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   16562:	6800      	ldr	r0, [r0, #0]
   16564:	f007 fb07 	bl	1db76 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   16568:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   1656c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1656e:	b91b      	cbnz	r3, 16578 <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
   16570:	f105 000c 	add.w	r0, r5, #12
   16574:	f009 fb74 	bl	1fc60 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   16578:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   1657a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
   1657e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   16580:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
   16584:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   16586:	b902      	cbnz	r2, 1658a <bt_att_connected+0x2e>
	list->tail = node;
   16588:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1658a:	f3bf 8f5b 	dmb	ish
   1658e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   16592:	4908      	ldr	r1, [pc, #32]	; (165b4 <bt_att_connected+0x58>)
   16594:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   16598:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1659a:	bf5e      	ittt	pl
   1659c:	2317      	movpl	r3, #23
   1659e:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   165a2:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   165a6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
}
   165aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   165ae:	f009 bd0f 	b.w	1ffd0 <k_delayed_work_init>
   165b2:	bf00      	nop
   165b4:	0001e429 	.word	0x0001e429

000165b8 <chan_send>:
{
   165b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   165bc:	688b      	ldr	r3, [r1, #8]
   165be:	781b      	ldrb	r3, [r3, #0]
   165c0:	2bd2      	cmp	r3, #210	; 0xd2
{
   165c2:	4605      	mov	r5, r0
   165c4:	460c      	mov	r4, r1
   165c6:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   165c8:	d10c      	bne.n	165e4 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   165ca:	6803      	ldr	r3, [r0, #0]
   165cc:	6818      	ldr	r0, [r3, #0]
   165ce:	f008 ff78 	bl	1f4c2 <bt_smp_sign>
		if (err) {
   165d2:	4606      	mov	r6, r0
   165d4:	b130      	cbz	r0, 165e4 <chan_send+0x2c>
		net_buf_unref(buf);
   165d6:	4620      	mov	r0, r4
   165d8:	f002 fb22 	bl	18c20 <net_buf_unref>
}
   165dc:	4630      	mov	r0, r6
   165de:	b003      	add	sp, #12
   165e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   165e4:	f104 0008 	add.w	r0, r4, #8
   165e8:	f009 f895 	bl	1f716 <net_buf_simple_headroom>
	state->len = buf->len;
   165ec:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   165f0:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   165f2:	f1b9 0f00 	cmp.w	r9, #0
   165f6:	d10a      	bne.n	1660e <chan_send+0x56>
	switch (att_op_get_type(buf->data[0])) {
   165f8:	68a3      	ldr	r3, [r4, #8]
   165fa:	7818      	ldrb	r0, [r3, #0]
   165fc:	f007 fb3c 	bl	1dc78 <att_op_get_type>
   16600:	1e43      	subs	r3, r0, #1
   16602:	b2db      	uxtb	r3, r3
   16604:	2b04      	cmp	r3, #4
   16606:	bf9c      	itt	ls
   16608:	4a16      	ldrls	r2, [pc, #88]	; (16664 <chan_send+0xac>)
   1660a:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1660e:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   16610:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16614:	4620      	mov	r0, r4
   16616:	681e      	ldr	r6, [r3, #0]
   16618:	f009 f820 	bl	1f65c <net_buf_ref>
   1661c:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
   16620:	4b11      	ldr	r3, [pc, #68]	; (16668 <chan_send+0xb0>)
   16622:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16624:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   16626:	d019      	beq.n	1665c <chan_send+0xa4>
	} else if (cb == chan_cfm_sent) {
   16628:	4b10      	ldr	r3, [pc, #64]	; (1666c <chan_send+0xb4>)
   1662a:	4299      	cmp	r1, r3
   1662c:	d018      	beq.n	16660 <chan_send+0xa8>
		return att_sent;
   1662e:	f8df c050 	ldr.w	ip, [pc, #80]	; 16680 <chan_send+0xc8>
   16632:	4b0f      	ldr	r3, [pc, #60]	; (16670 <chan_send+0xb8>)
   16634:	480f      	ldr	r0, [pc, #60]	; (16674 <chan_send+0xbc>)
   16636:	4561      	cmp	r1, ip
   16638:	bf18      	it	ne
   1663a:	4603      	movne	r3, r0
				&chan->chan.chan);
   1663c:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1663e:	4630      	mov	r0, r6
   16640:	9500      	str	r5, [sp, #0]
   16642:	2104      	movs	r1, #4
   16644:	f007 fa51 	bl	1daea <bt_l2cap_send_cb>
	if (!err) {
   16648:	4606      	mov	r6, r0
   1664a:	2800      	cmp	r0, #0
   1664c:	d0c3      	beq.n	165d6 <chan_send+0x1e>
	buf->data = buf->__buf + state->offset;
   1664e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16650:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16654:	fa10 f787 	uxtah	r7, r0, r7
   16658:	60a7      	str	r7, [r4, #8]
}
   1665a:	e7bf      	b.n	165dc <chan_send+0x24>
		return att_rsp_sent;
   1665c:	4b06      	ldr	r3, [pc, #24]	; (16678 <chan_send+0xc0>)
   1665e:	e7ed      	b.n	1663c <chan_send+0x84>
		return att_cfm_sent;
   16660:	4b06      	ldr	r3, [pc, #24]	; (1667c <chan_send+0xc4>)
   16662:	e7eb      	b.n	1663c <chan_send+0x84>
   16664:	00020a7c 	.word	0x00020a7c
   16668:	0001dfe3 	.word	0x0001dfe3
   1666c:	0001dfff 	.word	0x0001dfff
   16670:	00016325 	.word	0x00016325
   16674:	0001dc49 	.word	0x0001dc49
   16678:	00016315 	.word	0x00016315
   1667c:	00016305 	.word	0x00016305
   16680:	000164a1 	.word	0x000164a1

00016684 <att_write_cmd>:
{
   16684:	b5f0      	push	{r4, r5, r6, r7, lr}
   16686:	4604      	mov	r4, r0
   16688:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
   1668a:	f101 0008 	add.w	r0, r1, #8
{
   1668e:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
   16690:	f009 f839 	bl	1f706 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16694:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   16696:	68af      	ldr	r7, [r5, #8]
   16698:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
   1669a:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1669c:	2100      	movs	r1, #0
   1669e:	6818      	ldr	r0, [r3, #0]
   166a0:	f008 fa8d 	bl	1ebbe <bt_gatt_change_aware>
   166a4:	b328      	cbz	r0, 166f2 <att_write_cmd+0x6e>
	if (!handle) {
   166a6:	b336      	cbz	r6, 166f6 <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   166a8:	2218      	movs	r2, #24
   166aa:	2100      	movs	r1, #0
   166ac:	4668      	mov	r0, sp
   166ae:	f006 fb4f 	bl	1cd50 <memset>
	data.conn = chan->att->conn;
   166b2:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   166b4:	4a11      	ldr	r2, [pc, #68]	; (166fc <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   166b6:	681b      	ldr	r3, [r3, #0]
   166b8:	9300      	str	r3, [sp, #0]
	data.req = req;
   166ba:	2300      	movs	r3, #0
   166bc:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   166c0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   166c4:	2301      	movs	r3, #1
   166c6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   166ca:	4631      	mov	r1, r6
   166cc:	466b      	mov	r3, sp
   166ce:	4630      	mov	r0, r6
	data.value = value;
   166d0:	9703      	str	r7, [sp, #12]
	data.len = len;
   166d2:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   166d6:	f007 fafc 	bl	1dcd2 <bt_gatt_foreach_attr>
	if (data.err) {
   166da:	f89d 3014 	ldrb.w	r3, [sp, #20]
   166de:	b92b      	cbnz	r3, 166ec <att_write_cmd+0x68>
	if (data.buf) {
   166e0:	9901      	ldr	r1, [sp, #4]
   166e2:	b119      	cbz	r1, 166ec <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   166e4:	4a06      	ldr	r2, [pc, #24]	; (16700 <att_write_cmd+0x7c>)
   166e6:	4620      	mov	r0, r4
   166e8:	f007 fd7f 	bl	1e1ea <bt_att_chan_send_rsp>
   166ec:	2000      	movs	r0, #0
}
   166ee:	b007      	add	sp, #28
   166f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   166f2:	2012      	movs	r0, #18
   166f4:	e7fb      	b.n	166ee <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   166f6:	2001      	movs	r0, #1
   166f8:	e7f9      	b.n	166ee <att_write_cmd+0x6a>
   166fa:	bf00      	nop
   166fc:	0001e047 	.word	0x0001e047
   16700:	0001dfe3 	.word	0x0001dfe3

00016704 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   16704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16708:	4688      	mov	r8, r1
   1670a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1670c:	2101      	movs	r1, #1
   1670e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   16710:	4605      	mov	r5, r0
   16712:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   16714:	f007 fdd2 	bl	1e2bc <bt_att_chan_create_pdu>
	if (!buf) {
   16718:	4604      	mov	r4, r0
   1671a:	b178      	cbz	r0, 1673c <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
   1671c:	2104      	movs	r1, #4
   1671e:	3008      	adds	r0, #8
   16720:	f008 ffc2 	bl	1f6a8 <net_buf_simple_add>
	rsp->request = req;
   16724:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   16728:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1672a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1672e:	4621      	mov	r1, r4
   16730:	4628      	mov	r0, r5
   16732:	4a03      	ldr	r2, [pc, #12]	; (16740 <send_err_rsp.part.0+0x3c>)
}
   16734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   16738:	f007 bd57 	b.w	1e1ea <bt_att_chan_send_rsp>
}
   1673c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16740:	0001dfe3 	.word	0x0001dfe3

00016744 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   16744:	898b      	ldrh	r3, [r1, #12]
{
   16746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1674a:	4604      	mov	r4, r0
   1674c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1674e:	2b00      	cmp	r3, #0
   16750:	d05a      	beq.n	16808 <bt_att_recv+0xc4>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   16752:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16754:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   16758:	f105 0008 	add.w	r0, r5, #8
   1675c:	f008 ffcb 	bl	1f6f6 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
   16760:	4a2d      	ldr	r2, [pc, #180]	; (16818 <bt_att_recv+0xd4>)
   16762:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   16764:	4607      	mov	r7, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16766:	2300      	movs	r3, #0
   16768:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1676a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1676e:	4288      	cmp	r0, r1
   16770:	d11a      	bne.n	167a8 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   16772:	00d9      	lsls	r1, r3, #3
   16774:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16778:	f893 8002 	ldrb.w	r8, [r3, #2]
   1677c:	f1b8 0f01 	cmp.w	r8, #1
   16780:	d020      	beq.n	167c4 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
   16782:	f1b8 0f05 	cmp.w	r8, #5
   16786:	d12d      	bne.n	167e4 <bt_att_recv+0xa0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16788:	f3bf 8f5b 	dmb	ish
   1678c:	34b8      	adds	r4, #184	; 0xb8
   1678e:	e854 2f00 	ldrex	r2, [r4]
   16792:	f042 0302 	orr.w	r3, r2, #2
   16796:	e844 3000 	strex	r0, r3, [r4]
   1679a:	2800      	cmp	r0, #0
   1679c:	d1f7      	bne.n	1678e <bt_att_recv+0x4a>
   1679e:	f3bf 8f5b 	dmb	ish
   167a2:	f012 0f02 	tst.w	r2, #2
   167a6:	e01c      	b.n	167e2 <bt_att_recv+0x9e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   167a8:	3301      	adds	r3, #1
   167aa:	2b0d      	cmp	r3, #13
   167ac:	d1dd      	bne.n	1676a <bt_att_recv+0x26>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   167ae:	4608      	mov	r0, r1
   167b0:	f007 fa62 	bl	1dc78 <att_op_get_type>
   167b4:	b340      	cbz	r0, 16808 <bt_att_recv+0xc4>
	if (!req) {
   167b6:	b339      	cbz	r1, 16808 <bt_att_recv+0xc4>
   167b8:	2306      	movs	r3, #6
   167ba:	2200      	movs	r2, #0
   167bc:	4630      	mov	r0, r6
   167be:	f7ff ffa1 	bl	16704 <send_err_rsp.part.0>
   167c2:	e021      	b.n	16808 <bt_att_recv+0xc4>
   167c4:	34b8      	adds	r4, #184	; 0xb8
   167c6:	f3bf 8f5b 	dmb	ish
   167ca:	e854 3f00 	ldrex	r3, [r4]
   167ce:	f043 0201 	orr.w	r2, r3, #1
   167d2:	e844 2000 	strex	r0, r2, [r4]
   167d6:	2800      	cmp	r0, #0
   167d8:	d1f7      	bne.n	167ca <bt_att_recv+0x86>
   167da:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   167de:	f013 0f01 	tst.w	r3, #1
   167e2:	d111      	bne.n	16808 <bt_att_recv+0xc4>
	if (buf->len < handler->expect_len) {
   167e4:	eb0c 0301 	add.w	r3, ip, r1
   167e8:	89a9      	ldrh	r1, [r5, #12]
   167ea:	785a      	ldrb	r2, [r3, #1]
   167ec:	4291      	cmp	r1, r2
   167ee:	d30e      	bcc.n	1680e <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
   167f0:	685b      	ldr	r3, [r3, #4]
   167f2:	4629      	mov	r1, r5
   167f4:	4630      	mov	r0, r6
   167f6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   167f8:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   167fc:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   167fe:	d103      	bne.n	16808 <bt_att_recv+0xc4>
   16800:	b110      	cbz	r0, 16808 <bt_att_recv+0xc4>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16802:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   16804:	2900      	cmp	r1, #0
   16806:	d1d8      	bne.n	167ba <bt_att_recv+0x76>
}
   16808:	2000      	movs	r0, #0
   1680a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   1680e:	f1b8 0f01 	cmp.w	r8, #1
   16812:	d1f9      	bne.n	16808 <bt_att_recv+0xc4>
		err = BT_ATT_ERR_INVALID_PDU;
   16814:	2304      	movs	r3, #4
   16816:	e7f4      	b.n	16802 <bt_att_recv+0xbe>
   16818:	00020a90 	.word	0x00020a90

0001681c <att_write_req>:
{
   1681c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16820:	4604      	mov	r4, r0
   16822:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
   16824:	f101 0008 	add.w	r0, r1, #8
{
   16828:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
   1682a:	f008 ff6c 	bl	1f706 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1682e:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   16830:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   16834:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
   16836:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16838:	2101      	movs	r1, #1
   1683a:	6818      	ldr	r0, [r3, #0]
   1683c:	f008 f9bf 	bl	1ebbe <bt_gatt_change_aware>
   16840:	2800      	cmp	r0, #0
   16842:	d040      	beq.n	168c6 <att_write_req+0xaa>
	if (!handle) {
   16844:	2e00      	cmp	r6, #0
   16846:	d040      	beq.n	168ca <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   16848:	2218      	movs	r2, #24
   1684a:	2100      	movs	r1, #0
   1684c:	4668      	mov	r0, sp
   1684e:	f006 fa7f 	bl	1cd50 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16852:	2200      	movs	r2, #0
   16854:	2113      	movs	r1, #19
   16856:	4620      	mov	r0, r4
   16858:	f007 fd30 	bl	1e2bc <bt_att_chan_create_pdu>
   1685c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1685e:	b380      	cbz	r0, 168c2 <att_write_req+0xa6>
	data.conn = chan->att->conn;
   16860:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16862:	4a1b      	ldr	r2, [pc, #108]	; (168d0 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   16864:	681b      	ldr	r3, [r3, #0]
   16866:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16868:	2301      	movs	r3, #1
   1686a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   1686e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   16872:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16874:	466b      	mov	r3, sp
   16876:	4631      	mov	r1, r6
   16878:	4630      	mov	r0, r6
	data.len = len;
   1687a:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   1687e:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   16882:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   16886:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1688a:	f007 fa22 	bl	1dcd2 <bt_gatt_foreach_attr>
	if (data.err) {
   1688e:	f89d 5014 	ldrb.w	r5, [sp, #20]
   16892:	b175      	cbz	r5, 168b2 <att_write_req+0x96>
			net_buf_unref(data.buf);
   16894:	9801      	ldr	r0, [sp, #4]
   16896:	f002 f9c3 	bl	18c20 <net_buf_unref>
	if (!req) {
   1689a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1689e:	4632      	mov	r2, r6
   168a0:	4641      	mov	r1, r8
   168a2:	4620      	mov	r0, r4
   168a4:	f7ff ff2e 	bl	16704 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   168a8:	463d      	mov	r5, r7
}
   168aa:	4628      	mov	r0, r5
   168ac:	b007      	add	sp, #28
   168ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   168b2:	9901      	ldr	r1, [sp, #4]
   168b4:	2900      	cmp	r1, #0
   168b6:	d0f8      	beq.n	168aa <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   168b8:	4a06      	ldr	r2, [pc, #24]	; (168d4 <att_write_req+0xb8>)
   168ba:	4620      	mov	r0, r4
   168bc:	f007 fc95 	bl	1e1ea <bt_att_chan_send_rsp>
   168c0:	e7f3      	b.n	168aa <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   168c2:	250e      	movs	r5, #14
   168c4:	e7f1      	b.n	168aa <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   168c6:	2512      	movs	r5, #18
   168c8:	e7ef      	b.n	168aa <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   168ca:	2501      	movs	r5, #1
   168cc:	e7ed      	b.n	168aa <att_write_req+0x8e>
   168ce:	bf00      	nop
   168d0:	0001e047 	.word	0x0001e047
   168d4:	0001dfe3 	.word	0x0001dfe3

000168d8 <att_read_group_req>:
{
   168d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   168dc:	7b0c      	ldrb	r4, [r1, #12]
   168de:	3c04      	subs	r4, #4
   168e0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   168e2:	2c02      	cmp	r4, #2
{
   168e4:	4605      	mov	r5, r0
   168e6:	b08c      	sub	sp, #48	; 0x30
   168e8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   168ea:	d001      	beq.n	168f0 <att_read_group_req+0x18>
   168ec:	2c10      	cmp	r4, #16
   168ee:	d16f      	bne.n	169d0 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
   168f0:	2104      	movs	r1, #4
   168f2:	3008      	adds	r0, #8
   168f4:	f008 feff 	bl	1f6f6 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   168f8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   168fc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   168fe:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16900:	1d01      	adds	r1, r0, #4
   16902:	4622      	mov	r2, r4
   16904:	4640      	mov	r0, r8
   16906:	f006 fada 	bl	1cebe <bt_uuid_create>
   1690a:	2800      	cmp	r0, #0
   1690c:	d062      	beq.n	169d4 <att_read_group_req+0xfc>
	if (!start || !end) {
   1690e:	2e00      	cmp	r6, #0
   16910:	d03a      	beq.n	16988 <att_read_group_req+0xb0>
   16912:	2400      	movs	r4, #0
   16914:	2f00      	cmp	r7, #0
   16916:	d036      	beq.n	16986 <att_read_group_req+0xae>
	if (start > end) {
   16918:	42be      	cmp	r6, r7
   1691a:	d835      	bhi.n	16988 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1691c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16920:	a901      	add	r1, sp, #4
   16922:	4640      	mov	r0, r8
   16924:	f88d 4004 	strb.w	r4, [sp, #4]
   16928:	f8ad 3006 	strh.w	r3, [sp, #6]
   1692c:	f006 fa9d 	bl	1ce6a <bt_uuid_cmp>
   16930:	2800      	cmp	r0, #0
   16932:	d134      	bne.n	1699e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   16934:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   16936:	2214      	movs	r2, #20
   16938:	2100      	movs	r1, #0
   1693a:	a807      	add	r0, sp, #28
   1693c:	f006 fa08 	bl	1cd50 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16940:	2201      	movs	r2, #1
   16942:	2111      	movs	r1, #17
   16944:	4620      	mov	r0, r4
   16946:	f007 fcde 	bl	1e306 <bt_att_create_pdu>
   1694a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1694c:	2800      	cmp	r0, #0
   1694e:	d041      	beq.n	169d4 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16950:	2101      	movs	r1, #1
   16952:	3008      	adds	r0, #8
	data.uuid = uuid;
   16954:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16958:	f008 fea6 	bl	1f6a8 <net_buf_simple_add>
	data.rsp->len = 0U;
   1695c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16960:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16962:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   16964:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16968:	4a1b      	ldr	r2, [pc, #108]	; (169d8 <att_read_group_req+0x100>)
	data.group = NULL;
   1696a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1696e:	4639      	mov	r1, r7
   16970:	4630      	mov	r0, r6
   16972:	f007 f9ae 	bl	1dcd2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   16976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16978:	781c      	ldrb	r4, [r3, #0]
   1697a:	bb1c      	cbnz	r4, 169c4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   1697c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1697e:	f002 f94f 	bl	18c20 <net_buf_unref>
	if (!req) {
   16982:	230a      	movs	r3, #10
   16984:	e018      	b.n	169b8 <att_read_group_req+0xe0>
			*err = 0U;
   16986:	463e      	mov	r6, r7
	if (!req) {
   16988:	2301      	movs	r3, #1
   1698a:	4632      	mov	r2, r6
   1698c:	2110      	movs	r1, #16
   1698e:	4628      	mov	r0, r5
   16990:	f7ff feb8 	bl	16704 <send_err_rsp.part.0>
		return 0;
   16994:	2400      	movs	r4, #0
}
   16996:	4620      	mov	r0, r4
   16998:	b00c      	add	sp, #48	; 0x30
   1699a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1699e:	f642 0301 	movw	r3, #10241	; 0x2801
   169a2:	a907      	add	r1, sp, #28
   169a4:	4640      	mov	r0, r8
   169a6:	f88d 401c 	strb.w	r4, [sp, #28]
   169aa:	f8ad 301e 	strh.w	r3, [sp, #30]
   169ae:	f006 fa5c 	bl	1ce6a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   169b2:	2800      	cmp	r0, #0
   169b4:	d0be      	beq.n	16934 <att_read_group_req+0x5c>
	if (!req) {
   169b6:	2310      	movs	r3, #16
   169b8:	4632      	mov	r2, r6
   169ba:	2110      	movs	r1, #16
   169bc:	4628      	mov	r0, r5
   169be:	f7ff fea1 	bl	16704 <send_err_rsp.part.0>
		return 0;
   169c2:	e7e8      	b.n	16996 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   169c4:	4a05      	ldr	r2, [pc, #20]	; (169dc <att_read_group_req+0x104>)
   169c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   169c8:	4628      	mov	r0, r5
   169ca:	f007 fc0e 	bl	1e1ea <bt_att_chan_send_rsp>
	return 0;
   169ce:	e7e1      	b.n	16994 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   169d0:	2404      	movs	r4, #4
   169d2:	e7e0      	b.n	16996 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   169d4:	240e      	movs	r4, #14
   169d6:	e7de      	b.n	16996 <att_read_group_req+0xbe>
   169d8:	0001634d 	.word	0x0001634d
   169dc:	0001dfe3 	.word	0x0001dfe3

000169e0 <att_read_mult_req>:
{
   169e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   169e4:	6886      	ldr	r6, [r0, #8]
{
   169e6:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   169e8:	2210      	movs	r2, #16
{
   169ea:	4604      	mov	r4, r0
   169ec:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   169ee:	4668      	mov	r0, sp
   169f0:	2100      	movs	r1, #0
   169f2:	f006 f9ad 	bl	1cd50 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   169f6:	2200      	movs	r2, #0
   169f8:	210f      	movs	r1, #15
   169fa:	4630      	mov	r0, r6
   169fc:	f007 fc83 	bl	1e306 <bt_att_create_pdu>
   16a00:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16a02:	b360      	cbz	r0, 16a5e <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16a04:	f8df 9060 	ldr.w	r9, [pc, #96]	; 16a68 <att_read_mult_req+0x88>
	data.chan = chan;
   16a08:	9400      	str	r4, [sp, #0]
		handle = net_buf_pull_le16(buf);
   16a0a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16a0e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   16a12:	89ab      	ldrh	r3, [r5, #12]
   16a14:	2b01      	cmp	r3, #1
   16a16:	d805      	bhi.n	16a24 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16a18:	4a12      	ldr	r2, [pc, #72]	; (16a64 <att_read_mult_req+0x84>)
   16a1a:	9902      	ldr	r1, [sp, #8]
   16a1c:	4620      	mov	r0, r4
   16a1e:	f007 fbe4 	bl	1e1ea <bt_att_chan_send_rsp>
   16a22:	e018      	b.n	16a56 <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
   16a24:	4638      	mov	r0, r7
   16a26:	f008 fe6e 	bl	1f706 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16a2a:	466b      	mov	r3, sp
   16a2c:	464a      	mov	r2, r9
   16a2e:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
   16a30:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16a32:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16a36:	f007 f94c 	bl	1dcd2 <bt_gatt_foreach_attr>
		if (data.err) {
   16a3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16a3e:	2b00      	cmp	r3, #0
   16a40:	d0e7      	beq.n	16a12 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   16a42:	9802      	ldr	r0, [sp, #8]
   16a44:	f002 f8ec 	bl	18c20 <net_buf_unref>
	if (!req) {
   16a48:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16a4c:	4632      	mov	r2, r6
   16a4e:	210e      	movs	r1, #14
   16a50:	4620      	mov	r0, r4
   16a52:	f7ff fe57 	bl	16704 <send_err_rsp.part.0>
	return 0;
   16a56:	2000      	movs	r0, #0
}
   16a58:	b005      	add	sp, #20
   16a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   16a5e:	200e      	movs	r0, #14
   16a60:	e7fa      	b.n	16a58 <att_read_mult_req+0x78>
   16a62:	bf00      	nop
   16a64:	0001dfe3 	.word	0x0001dfe3
   16a68:	0001e0a3 	.word	0x0001e0a3

00016a6c <att_read_rsp>:
{
   16a6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16a70:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   16a74:	4605      	mov	r5, r0
   16a76:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16a78:	4640      	mov	r0, r8
   16a7a:	2101      	movs	r1, #1
{
   16a7c:	4614      	mov	r4, r2
   16a7e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   16a80:	f008 f89d 	bl	1ebbe <bt_gatt_change_aware>
   16a84:	b390      	cbz	r0, 16aec <att_read_rsp+0x80>
	if (!handle) {
   16a86:	b39e      	cbz	r6, 16af0 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   16a88:	2210      	movs	r2, #16
   16a8a:	2100      	movs	r1, #0
   16a8c:	4668      	mov	r0, sp
   16a8e:	f006 f95f 	bl	1cd50 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   16a92:	2200      	movs	r2, #0
   16a94:	4621      	mov	r1, r4
   16a96:	4640      	mov	r0, r8
   16a98:	f007 fc35 	bl	1e306 <bt_att_create_pdu>
   16a9c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16a9e:	b348      	cbz	r0, 16af4 <att_read_rsp+0x88>
	data.offset = offset;
   16aa0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16aa4:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16aa8:	2301      	movs	r3, #1
   16aaa:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16aae:	4a12      	ldr	r2, [pc, #72]	; (16af8 <att_read_rsp+0x8c>)
	data.chan = chan;
   16ab0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16ab2:	466b      	mov	r3, sp
   16ab4:	4631      	mov	r1, r6
   16ab6:	4630      	mov	r0, r6
   16ab8:	f007 f90b 	bl	1dcd2 <bt_gatt_foreach_attr>
	if (data.err) {
   16abc:	f89d 400c 	ldrb.w	r4, [sp, #12]
   16ac0:	b174      	cbz	r4, 16ae0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   16ac2:	9802      	ldr	r0, [sp, #8]
   16ac4:	f002 f8ac 	bl	18c20 <net_buf_unref>
	if (!req) {
   16ac8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16acc:	4632      	mov	r2, r6
   16ace:	4639      	mov	r1, r7
   16ad0:	4628      	mov	r0, r5
   16ad2:	f7ff fe17 	bl	16704 <send_err_rsp.part.0>
		return 0;
   16ad6:	2400      	movs	r4, #0
}
   16ad8:	4620      	mov	r0, r4
   16ada:	b004      	add	sp, #16
   16adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16ae0:	4a06      	ldr	r2, [pc, #24]	; (16afc <att_read_rsp+0x90>)
   16ae2:	9902      	ldr	r1, [sp, #8]
   16ae4:	4628      	mov	r0, r5
   16ae6:	f007 fb80 	bl	1e1ea <bt_att_chan_send_rsp>
	return 0;
   16aea:	e7f5      	b.n	16ad8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16aec:	2412      	movs	r4, #18
   16aee:	e7f3      	b.n	16ad8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16af0:	2401      	movs	r4, #1
   16af2:	e7f1      	b.n	16ad8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   16af4:	240e      	movs	r4, #14
   16af6:	e7ef      	b.n	16ad8 <att_read_rsp+0x6c>
   16af8:	0001e0a3 	.word	0x0001e0a3
   16afc:	0001dfe3 	.word	0x0001dfe3

00016b00 <att_read_type_req>:
{
   16b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16b04:	7b0c      	ldrb	r4, [r1, #12]
   16b06:	3c04      	subs	r4, #4
   16b08:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   16b0a:	2c02      	cmp	r4, #2
{
   16b0c:	4605      	mov	r5, r0
   16b0e:	b08c      	sub	sp, #48	; 0x30
   16b10:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16b12:	d001      	beq.n	16b18 <att_read_type_req+0x18>
   16b14:	2c10      	cmp	r4, #16
   16b16:	d150      	bne.n	16bba <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
   16b18:	2104      	movs	r1, #4
   16b1a:	3008      	adds	r0, #8
   16b1c:	f008 fdeb 	bl	1f6f6 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16b20:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   16b24:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16b26:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16b28:	1d01      	adds	r1, r0, #4
   16b2a:	4622      	mov	r2, r4
   16b2c:	4640      	mov	r0, r8
   16b2e:	f006 f9c6 	bl	1cebe <bt_uuid_create>
   16b32:	b188      	cbz	r0, 16b58 <att_read_type_req+0x58>
	if (!start || !end) {
   16b34:	b19e      	cbz	r6, 16b5e <att_read_type_req+0x5e>
   16b36:	b18f      	cbz	r7, 16b5c <att_read_type_req+0x5c>
	if (start > end) {
   16b38:	42b7      	cmp	r7, r6
   16b3a:	d310      	bcc.n	16b5e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   16b3c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   16b3e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   16b40:	2100      	movs	r1, #0
   16b42:	eb0d 0002 	add.w	r0, sp, r2
   16b46:	f006 f903 	bl	1cd50 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   16b4a:	2201      	movs	r2, #1
   16b4c:	2109      	movs	r1, #9
   16b4e:	4620      	mov	r0, r4
   16b50:	f007 fbd9 	bl	1e306 <bt_att_create_pdu>
   16b54:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   16b56:	b968      	cbnz	r0, 16b74 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   16b58:	240e      	movs	r4, #14
   16b5a:	e007      	b.n	16b6c <att_read_type_req+0x6c>
			*err = 0U;
   16b5c:	463e      	mov	r6, r7
	if (!req) {
   16b5e:	2301      	movs	r3, #1
   16b60:	4632      	mov	r2, r6
   16b62:	2108      	movs	r1, #8
   16b64:	4628      	mov	r0, r5
   16b66:	f7ff fdcd 	bl	16704 <send_err_rsp.part.0>
		return 0;
   16b6a:	2400      	movs	r4, #0
}
   16b6c:	4620      	mov	r0, r4
   16b6e:	b00c      	add	sp, #48	; 0x30
   16b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16b74:	2101      	movs	r1, #1
   16b76:	3008      	adds	r0, #8
	data.uuid = uuid;
   16b78:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16b7c:	f008 fd94 	bl	1f6a8 <net_buf_simple_add>
	data.rsp->len = 0U;
   16b80:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16b84:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16b86:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16b88:	4a0d      	ldr	r2, [pc, #52]	; (16bc0 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   16b8a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16b8e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16b90:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16b94:	4630      	mov	r0, r6
   16b96:	ab06      	add	r3, sp, #24
   16b98:	f007 f89b 	bl	1dcd2 <bt_gatt_foreach_attr>
	if (data.err) {
   16b9c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   16ba0:	b12c      	cbz	r4, 16bae <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   16ba2:	9808      	ldr	r0, [sp, #32]
   16ba4:	f002 f83c 	bl	18c20 <net_buf_unref>
	if (!req) {
   16ba8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16bac:	e7d8      	b.n	16b60 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16bae:	4a05      	ldr	r2, [pc, #20]	; (16bc4 <att_read_type_req+0xc4>)
   16bb0:	9908      	ldr	r1, [sp, #32]
   16bb2:	4628      	mov	r0, r5
   16bb4:	f007 fb19 	bl	1e1ea <bt_att_chan_send_rsp>
	return 0;
   16bb8:	e7d8      	b.n	16b6c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   16bba:	2404      	movs	r4, #4
   16bbc:	e7d6      	b.n	16b6c <att_read_type_req+0x6c>
   16bbe:	bf00      	nop
   16bc0:	000163f9 	.word	0x000163f9
   16bc4:	0001dfe3 	.word	0x0001dfe3

00016bc8 <att_find_type_req>:
{
   16bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bcc:	4688      	mov	r8, r1
   16bce:	b086      	sub	sp, #24
   16bd0:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
   16bd2:	2106      	movs	r1, #6
   16bd4:	f108 0008 	add.w	r0, r8, #8
   16bd8:	f008 fd8d 	bl	1f6f6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16bdc:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   16bde:	b317      	cbz	r7, 16c26 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   16be0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   16be4:	f1b9 0f00 	cmp.w	r9, #0
   16be8:	d01c      	beq.n	16c24 <att_find_type_req+0x5c>
	if (start > end) {
   16bea:	454f      	cmp	r7, r9
   16bec:	d81b      	bhi.n	16c26 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   16bee:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16bf0:	f8ad 3002 	strh.w	r3, [sp, #2]
   16bf4:	2400      	movs	r4, #0
   16bf6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16bfa:	a901      	add	r1, sp, #4
   16bfc:	4668      	mov	r0, sp
	value = buf->data;
   16bfe:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16c02:	f88d 4000 	strb.w	r4, [sp]
   16c06:	f88d 4004 	strb.w	r4, [sp, #4]
   16c0a:	f8ad 3006 	strh.w	r3, [sp, #6]
   16c0e:	f006 f92c 	bl	1ce6a <bt_uuid_cmp>
   16c12:	4606      	mov	r6, r0
   16c14:	b190      	cbz	r0, 16c3c <att_find_type_req+0x74>
	if (!req) {
   16c16:	230a      	movs	r3, #10
   16c18:	463a      	mov	r2, r7
   16c1a:	2106      	movs	r1, #6
   16c1c:	4628      	mov	r0, r5
   16c1e:	f7ff fd71 	bl	16704 <send_err_rsp.part.0>
		return 0;
   16c22:	e007      	b.n	16c34 <att_find_type_req+0x6c>
			*err = 0U;
   16c24:	464f      	mov	r7, r9
	if (!req) {
   16c26:	2301      	movs	r3, #1
   16c28:	463a      	mov	r2, r7
   16c2a:	2106      	movs	r1, #6
   16c2c:	4628      	mov	r0, r5
   16c2e:	f7ff fd69 	bl	16704 <send_err_rsp.part.0>
		return 0;
   16c32:	2400      	movs	r4, #0
}
   16c34:	4620      	mov	r0, r4
   16c36:	b006      	add	sp, #24
   16c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16c3c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   16c40:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   16c44:	4601      	mov	r1, r0
   16c46:	2214      	movs	r2, #20
   16c48:	a801      	add	r0, sp, #4
   16c4a:	f006 f881 	bl	1cd50 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   16c4e:	4632      	mov	r2, r6
   16c50:	2107      	movs	r1, #7
   16c52:	4640      	mov	r0, r8
   16c54:	f007 fb57 	bl	1e306 <bt_att_create_pdu>
   16c58:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16c5a:	b1e0      	cbz	r0, 16c96 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16c5c:	230a      	movs	r3, #10
   16c5e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16c62:	4a0e      	ldr	r2, [pc, #56]	; (16c9c <att_find_type_req+0xd4>)
	data.value_len = value_len;
   16c64:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16c68:	ab01      	add	r3, sp, #4
   16c6a:	4649      	mov	r1, r9
   16c6c:	4638      	mov	r0, r7
	data.value = value;
   16c6e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   16c72:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16c74:	f007 f82d 	bl	1dcd2 <bt_gatt_foreach_attr>
	if (data.err) {
   16c78:	f89d 4015 	ldrb.w	r4, [sp, #21]
   16c7c:	b12c      	cbz	r4, 16c8a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   16c7e:	9802      	ldr	r0, [sp, #8]
   16c80:	f001 ffce 	bl	18c20 <net_buf_unref>
	if (!req) {
   16c84:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16c88:	e7ce      	b.n	16c28 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16c8a:	4a05      	ldr	r2, [pc, #20]	; (16ca0 <att_find_type_req+0xd8>)
   16c8c:	9902      	ldr	r1, [sp, #8]
   16c8e:	4628      	mov	r0, r5
   16c90:	f007 faab 	bl	1e1ea <bt_att_chan_send_rsp>
	return 0;
   16c94:	e7ce      	b.n	16c34 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   16c96:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16c98:	e7cc      	b.n	16c34 <att_find_type_req+0x6c>
   16c9a:	bf00      	nop
   16c9c:	0001ddff 	.word	0x0001ddff
   16ca0:	0001dfe3 	.word	0x0001dfe3

00016ca4 <att_find_info_req>:
{
   16ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16ca6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   16ca8:	881e      	ldrh	r6, [r3, #0]
{
   16caa:	b085      	sub	sp, #20
   16cac:	4605      	mov	r5, r0
	if (!start || !end) {
   16cae:	b19e      	cbz	r6, 16cd8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   16cb0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   16cb2:	b184      	cbz	r4, 16cd6 <att_find_info_req+0x32>
	if (start > end) {
   16cb4:	42b4      	cmp	r4, r6
   16cb6:	d30f      	bcc.n	16cd8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16cb8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   16cba:	2210      	movs	r2, #16
   16cbc:	2100      	movs	r1, #0
   16cbe:	4668      	mov	r0, sp
   16cc0:	f006 f846 	bl	1cd50 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16cc4:	2200      	movs	r2, #0
   16cc6:	2105      	movs	r1, #5
   16cc8:	4638      	mov	r0, r7
   16cca:	f007 fb1c 	bl	1e306 <bt_att_create_pdu>
   16cce:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16cd0:	b958      	cbnz	r0, 16cea <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16cd2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16cd4:	e007      	b.n	16ce6 <att_find_info_req+0x42>
			*err = 0U;
   16cd6:	4626      	mov	r6, r4
	if (!req) {
   16cd8:	2301      	movs	r3, #1
   16cda:	4632      	mov	r2, r6
   16cdc:	2104      	movs	r1, #4
   16cde:	4628      	mov	r0, r5
   16ce0:	f7ff fd10 	bl	16704 <send_err_rsp.part.0>
	return 0;
   16ce4:	2000      	movs	r0, #0
}
   16ce6:	b005      	add	sp, #20
   16ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16cea:	4621      	mov	r1, r4
   16cec:	4a09      	ldr	r2, [pc, #36]	; (16d14 <att_find_info_req+0x70>)
	data.chan = chan;
   16cee:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16cf0:	466b      	mov	r3, sp
   16cf2:	4630      	mov	r0, r6
   16cf4:	f006 ffed 	bl	1dcd2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16cf8:	9c02      	ldr	r4, [sp, #8]
   16cfa:	b924      	cbnz	r4, 16d06 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   16cfc:	9801      	ldr	r0, [sp, #4]
   16cfe:	f001 ff8f 	bl	18c20 <net_buf_unref>
	if (!req) {
   16d02:	230a      	movs	r3, #10
   16d04:	e7e9      	b.n	16cda <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16d06:	4a04      	ldr	r2, [pc, #16]	; (16d18 <att_find_info_req+0x74>)
   16d08:	9901      	ldr	r1, [sp, #4]
   16d0a:	4628      	mov	r0, r5
   16d0c:	f007 fa6d 	bl	1e1ea <bt_att_chan_send_rsp>
   16d10:	e7e8      	b.n	16ce4 <att_find_info_req+0x40>
   16d12:	bf00      	nop
   16d14:	0001df27 	.word	0x0001df27
   16d18:	0001dfe3 	.word	0x0001dfe3

00016d1c <att_mtu_req>:
{
   16d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   16d1e:	6803      	ldr	r3, [r0, #0]
{
   16d20:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   16d22:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16d24:	f3bf 8f5b 	dmb	ish
   16d28:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   16d2c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   16d30:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   16d34:	071b      	lsls	r3, r3, #28
   16d36:	d41e      	bmi.n	16d76 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   16d38:	688b      	ldr	r3, [r1, #8]
   16d3a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   16d3c:	2e16      	cmp	r6, #22
   16d3e:	d91c      	bls.n	16d7a <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   16d40:	2202      	movs	r2, #2
   16d42:	2103      	movs	r1, #3
   16d44:	f007 fadf 	bl	1e306 <bt_att_create_pdu>
	if (!pdu) {
   16d48:	4607      	mov	r7, r0
   16d4a:	b1c0      	cbz	r0, 16d7e <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
   16d4c:	2102      	movs	r1, #2
   16d4e:	3008      	adds	r0, #8
   16d50:	f008 fcaa 	bl	1f6a8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   16d54:	2341      	movs	r3, #65	; 0x41
   16d56:	7003      	strb	r3, [r0, #0]
   16d58:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   16d5a:	4a0a      	ldr	r2, [pc, #40]	; (16d84 <att_mtu_req+0x68>)
   16d5c:	4628      	mov	r0, r5
   16d5e:	4639      	mov	r1, r7
   16d60:	f007 fa43 	bl	1e1ea <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   16d64:	2e41      	cmp	r6, #65	; 0x41
   16d66:	bf28      	it	cs
   16d68:	2641      	movcs	r6, #65	; 0x41
   16d6a:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   16d6e:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   16d72:	4620      	mov	r0, r4
}
   16d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   16d76:	2006      	movs	r0, #6
   16d78:	e7fc      	b.n	16d74 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   16d7a:	2004      	movs	r0, #4
   16d7c:	e7fa      	b.n	16d74 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   16d7e:	200e      	movs	r0, #14
   16d80:	e7f8      	b.n	16d74 <att_mtu_req+0x58>
   16d82:	bf00      	nop
   16d84:	0001dfe3 	.word	0x0001dfe3

00016d88 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   16d88:	b513      	push	{r0, r1, r4, lr}
   16d8a:	4602      	mov	r2, r0
   16d8c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16d8e:	4808      	ldr	r0, [pc, #32]	; (16db0 <bt_att_req_alloc+0x28>)
   16d90:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   16d92:	2400      	movs	r4, #0
   16d94:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16d96:	f003 fae3 	bl	1a360 <k_mem_slab_alloc>
   16d9a:	4601      	mov	r1, r0
   16d9c:	b930      	cbnz	r0, 16dac <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16d9e:	9801      	ldr	r0, [sp, #4]
   16da0:	221c      	movs	r2, #28
   16da2:	f005 ffd5 	bl	1cd50 <memset>

	return req;
   16da6:	9801      	ldr	r0, [sp, #4]
}
   16da8:	b002      	add	sp, #8
   16daa:	bd10      	pop	{r4, pc}
		return NULL;
   16dac:	4620      	mov	r0, r4
   16dae:	e7fb      	b.n	16da8 <bt_att_req_alloc+0x20>
   16db0:	200007e8 	.word	0x200007e8

00016db4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16db4:	b507      	push	{r0, r1, r2, lr}
   16db6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   16db8:	a901      	add	r1, sp, #4
   16dba:	4803      	ldr	r0, [pc, #12]	; (16dc8 <bt_att_req_free+0x14>)
   16dbc:	f003 fb02 	bl	1a3c4 <k_mem_slab_free>
}
   16dc0:	b003      	add	sp, #12
   16dc2:	f85d fb04 	ldr.w	pc, [sp], #4
   16dc6:	bf00      	nop
   16dc8:	200007e8 	.word	0x200007e8

00016dcc <att_handle_rsp>:
{
   16dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd0:	4604      	mov	r4, r0
   16dd2:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
   16dd4:	30e0      	adds	r0, #224	; 0xe0
{
   16dd6:	4689      	mov	r9, r1
   16dd8:	4692      	mov	sl, r2
   16dda:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
   16ddc:	f009 f900 	bl	1ffe0 <k_delayed_work_cancel>
	if (!chan->req) {
   16de0:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
   16de4:	2600      	movs	r6, #0
   16de6:	b12d      	cbz	r5, 16df4 <att_handle_rsp+0x28>
	if (chan->req == &cancel) {
   16de8:	4b2b      	ldr	r3, [pc, #172]	; (16e98 <att_handle_rsp+0xcc>)
   16dea:	429d      	cmp	r5, r3
   16dec:	d123      	bne.n	16e36 <att_handle_rsp+0x6a>
		chan->req = NULL;
   16dee:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
	bt_att_func_t func = NULL;
   16df2:	4635      	mov	r5, r6
	att_process(chan->att);
   16df4:	f8d4 b000 	ldr.w	fp, [r4]
	node = sys_slist_get(&att->reqs);
   16df8:	f10b 0004 	add.w	r0, fp, #4
   16dfc:	f006 fef7 	bl	1dbee <sys_slist_get>
	if (!node) {
   16e00:	4607      	mov	r7, r0
   16e02:	b380      	cbz	r0, 16e66 <att_handle_rsp+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e04:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
   16e08:	b152      	cbz	r2, 16e20 <att_handle_rsp+0x54>
   16e0a:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
   16e0e:	d007      	beq.n	16e20 <att_handle_rsp+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16e10:	6816      	ldr	r6, [r2, #0]
   16e12:	b10e      	cbz	r6, 16e18 <att_handle_rsp+0x4c>
   16e14:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   16e18:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
   16e1c:	b1f2      	cbz	r2, 16e5c <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e1e:	bb7e      	cbnz	r6, 16e80 <att_handle_rsp+0xb4>
Z_GENLIST_PREPEND(slist, snode)
   16e20:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
   16e24:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   16e26:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
   16e2a:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
   16e2e:	b9d2      	cbnz	r2, 16e66 <att_handle_rsp+0x9a>
	list->tail = node;
   16e30:	f8cb 7008 	str.w	r7, [fp, #8]
}
   16e34:	e017      	b.n	16e66 <att_handle_rsp+0x9a>
	if (chan->req->buf) {
   16e36:	6928      	ldr	r0, [r5, #16]
   16e38:	b120      	cbz	r0, 16e44 <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
   16e3a:	f001 fef1 	bl	18c20 <net_buf_unref>
		chan->req->buf = NULL;
   16e3e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   16e42:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
   16e44:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
	chan->req->func = NULL;
   16e48:	2600      	movs	r6, #0
	func = chan->req->func;
   16e4a:	6845      	ldr	r5, [r0, #4]
	params = chan->req->user_data;
   16e4c:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
   16e4e:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   16e50:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
   16e52:	f007 fa9a 	bl	1e38a <att_req_destroy>
	chan->req = NULL;
   16e56:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
   16e5a:	e7cb      	b.n	16df4 <att_handle_rsp+0x28>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   16e5c:	4639      	mov	r1, r7
   16e5e:	f007 f970 	bl	1e142 <bt_att_chan_req_send>
   16e62:	2800      	cmp	r0, #0
   16e64:	dbdb      	blt.n	16e1e <att_handle_rsp+0x52>
	if (func) {
   16e66:	b13d      	cbz	r5, 16e78 <att_handle_rsp+0xac>
		func(chan->att->conn, err, pdu, len, params);
   16e68:	9b03      	ldr	r3, [sp, #12]
   16e6a:	6820      	ldr	r0, [r4, #0]
   16e6c:	9300      	str	r3, [sp, #0]
   16e6e:	6800      	ldr	r0, [r0, #0]
   16e70:	4653      	mov	r3, sl
   16e72:	464a      	mov	r2, r9
   16e74:	4641      	mov	r1, r8
   16e76:	47a8      	blx	r5
}
   16e78:	2000      	movs	r0, #0
   16e7a:	b005      	add	sp, #20
   16e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   16e80:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
   16e84:	d004      	beq.n	16e90 <att_handle_rsp+0xc4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16e86:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e8a:	b10a      	cbz	r2, 16e90 <att_handle_rsp+0xc4>
   16e8c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
   16e90:	4630      	mov	r0, r6
   16e92:	4616      	mov	r6, r2
   16e94:	e7c0      	b.n	16e18 <att_handle_rsp+0x4c>
   16e96:	bf00      	nop
   16e98:	200027cc 	.word	0x200027cc

00016e9c <bt_att_encrypt_change>:
{
   16e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ea0:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16ea2:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
   16ea6:	460d      	mov	r5, r1
   16ea8:	b161      	cbz	r1, 16ec4 <bt_att_encrypt_change+0x28>
		if (att_chan->req && att_chan->req->retrying) {
   16eaa:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   16eae:	b34b      	cbz	r3, 16f04 <bt_att_encrypt_change+0x68>
   16eb0:	7d1b      	ldrb	r3, [r3, #20]
   16eb2:	b33b      	cbz	r3, 16f04 <bt_att_encrypt_change+0x68>
			att_handle_rsp(att_chan, NULL, 0,
   16eb4:	2200      	movs	r2, #0
   16eb6:	4630      	mov	r0, r6
   16eb8:	2305      	movs	r3, #5
}
   16eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
   16ebe:	4611      	mov	r1, r2
   16ec0:	f7ff bf84 	b.w	16dcc <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   16ec4:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
   16ec6:	4638      	mov	r0, r7
   16ec8:	f000 fcd0 	bl	1786c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   16ecc:	7a7b      	ldrb	r3, [r7, #9]
   16ece:	2b01      	cmp	r3, #1
   16ed0:	d018      	beq.n	16f04 <bt_att_encrypt_change+0x68>
	if (!(att_chan->req && att_chan->req->retrying)) {
   16ed2:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   16ed6:	b1ab      	cbz	r3, 16f04 <bt_att_encrypt_change+0x68>
   16ed8:	7d1a      	ldrb	r2, [r3, #20]
   16eda:	b19a      	cbz	r2, 16f04 <bt_att_encrypt_change+0x68>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   16edc:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
   16ede:	688b      	ldr	r3, [r1, #8]
   16ee0:	7818      	ldrb	r0, [r3, #0]
   16ee2:	f006 fec9 	bl	1dc78 <att_op_get_type>
   16ee6:	3801      	subs	r0, #1
   16ee8:	b2c0      	uxtb	r0, r0
   16eea:	2804      	cmp	r0, #4
   16eec:	bf96      	itet	ls
   16eee:	4b06      	ldrls	r3, [pc, #24]	; (16f08 <bt_att_encrypt_change+0x6c>)
   16ef0:	462a      	movhi	r2, r5
   16ef2:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   16ef6:	4630      	mov	r0, r6
   16ef8:	f007 f977 	bl	1e1ea <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
   16efc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   16f00:	2200      	movs	r2, #0
   16f02:	611a      	str	r2, [r3, #16]
}
   16f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16f08:	00020a7c 	.word	0x00020a7c

00016f0c <att_reset>:
{
   16f0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   16f0e:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16f10:	9803      	ldr	r0, [sp, #12]
   16f12:	2200      	movs	r2, #0
   16f14:	2300      	movs	r3, #0
   16f16:	300c      	adds	r0, #12
   16f18:	f008 fb75 	bl	1f606 <net_buf_get>
   16f1c:	b948      	cbnz	r0, 16f32 <att_reset+0x26>
	att->conn = NULL;
   16f1e:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   16f20:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
   16f22:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   16f24:	b945      	cbnz	r5, 16f38 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   16f26:	4811      	ldr	r0, [pc, #68]	; (16f6c <att_reset+0x60>)
   16f28:	a903      	add	r1, sp, #12
   16f2a:	f003 fa4b 	bl	1a3c4 <k_mem_slab_free>
}
   16f2e:	b004      	add	sp, #16
   16f30:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   16f32:	f001 fe75 	bl	18c20 <net_buf_unref>
   16f36:	e7eb      	b.n	16f10 <att_reset+0x4>
	return node->next;
   16f38:	682c      	ldr	r4, [r5, #0]
   16f3a:	2c00      	cmp	r4, #0
   16f3c:	bf38      	it	cc
   16f3e:	2400      	movcc	r4, #0
		if (req->func) {
   16f40:	686e      	ldr	r6, [r5, #4]
   16f42:	b136      	cbz	r6, 16f52 <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16f44:	69ab      	ldr	r3, [r5, #24]
   16f46:	9300      	str	r3, [sp, #0]
   16f48:	2300      	movs	r3, #0
   16f4a:	461a      	mov	r2, r3
   16f4c:	210e      	movs	r1, #14
   16f4e:	4618      	mov	r0, r3
   16f50:	47b0      	blx	r6
		att_req_destroy(req);
   16f52:	4628      	mov	r0, r5
   16f54:	f007 fa19 	bl	1e38a <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   16f58:	2c00      	cmp	r4, #0
   16f5a:	d0e4      	beq.n	16f26 <att_reset+0x1a>
   16f5c:	6823      	ldr	r3, [r4, #0]
   16f5e:	2b00      	cmp	r3, #0
   16f60:	bf38      	it	cc
   16f62:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16f64:	4625      	mov	r5, r4
   16f66:	461c      	mov	r4, r3
   16f68:	e7ea      	b.n	16f40 <att_reset+0x34>
   16f6a:	bf00      	nop
   16f6c:	200007b0 	.word	0x200007b0

00016f70 <find_sc_cfg>:
#endif
static struct gatt_sc_cfg sc_cfg[SC_CFG_MAX];
BUILD_ASSERT(sizeof(struct sc_data) == sizeof(sc_cfg[0].data));

static struct gatt_sc_cfg *find_sc_cfg(uint8_t id, bt_addr_le_t *addr)
{
   16f70:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("id: %u, addr: %s", id, bt_addr_le_str(addr));

	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
		if (id == sc_cfg[i].id &&
   16f72:	4c0e      	ldr	r4, [pc, #56]	; (16fac <find_sc_cfg+0x3c>)
   16f74:	7823      	ldrb	r3, [r4, #0]
   16f76:	4283      	cmp	r3, r0
{
   16f78:	4605      	mov	r5, r0
   16f7a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   16f7c:	d00a      	beq.n	16f94 <find_sc_cfg+0x24>
   16f7e:	7b23      	ldrb	r3, [r4, #12]
   16f80:	42ab      	cmp	r3, r5
   16f82:	d111      	bne.n	16fa8 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   16f84:	480a      	ldr	r0, [pc, #40]	; (16fb0 <find_sc_cfg+0x40>)
   16f86:	2207      	movs	r2, #7
   16f88:	4631      	mov	r1, r6
   16f8a:	f005 fea6 	bl	1ccda <memcmp>
   16f8e:	b958      	cbnz	r0, 16fa8 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16f90:	2001      	movs	r0, #1
   16f92:	e005      	b.n	16fa0 <find_sc_cfg+0x30>
   16f94:	2207      	movs	r2, #7
   16f96:	1c60      	adds	r0, r4, #1
   16f98:	f005 fe9f 	bl	1ccda <memcmp>
		if (id == sc_cfg[i].id &&
   16f9c:	2800      	cmp	r0, #0
   16f9e:	d1ee      	bne.n	16f7e <find_sc_cfg+0xe>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
			return &sc_cfg[i];
   16fa0:	230c      	movs	r3, #12
   16fa2:	fb03 4000 	mla	r0, r3, r0, r4
   16fa6:	e000      	b.n	16faa <find_sc_cfg+0x3a>
		}
	}

	return NULL;
   16fa8:	2000      	movs	r0, #0
}
   16faa:	bd70      	pop	{r4, r5, r6, pc}
   16fac:	20002912 	.word	0x20002912
   16fb0:	2000291f 	.word	0x2000291f

00016fb4 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16fb6:	4c16      	ldr	r4, [pc, #88]	; (17010 <find_cf_cfg+0x5c>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16fb8:	4605      	mov	r5, r0
   16fba:	b140      	cbz	r0, 16fce <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16fbc:	4622      	mov	r2, r4
   16fbe:	f812 1b01 	ldrb.w	r1, [r2], #1
   16fc2:	f006 fc76 	bl	1d8b2 <bt_conn_is_peer_addr_le>
   16fc6:	b1c0      	cbz	r0, 16ffa <find_cf_cfg+0x46>
			return cfg;
		}
	}

	return NULL;
}
   16fc8:	4620      	mov	r0, r4
   16fca:	b003      	add	sp, #12
   16fcc:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16fce:	9000      	str	r0, [sp, #0]
   16fd0:	2207      	movs	r2, #7
   16fd2:	f8cd 0003 	str.w	r0, [sp, #3]
   16fd6:	4669      	mov	r1, sp
   16fd8:	1c60      	adds	r0, r4, #1
   16fda:	f005 fe7e 	bl	1ccda <memcmp>
   16fde:	2800      	cmp	r0, #0
   16fe0:	d0f2      	beq.n	16fc8 <find_cf_cfg+0x14>
   16fe2:	2207      	movs	r2, #7
   16fe4:	4669      	mov	r1, sp
   16fe6:	f104 0011 	add.w	r0, r4, #17
   16fea:	9500      	str	r5, [sp, #0]
   16fec:	f8cd 5003 	str.w	r5, [sp, #3]
   16ff0:	f005 fe73 	bl	1ccda <memcmp>
   16ff4:	b948      	cbnz	r0, 1700a <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16ff6:	3410      	adds	r4, #16
   16ff8:	e7e6      	b.n	16fc8 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16ffa:	7c21      	ldrb	r1, [r4, #16]
   16ffc:	f104 0211 	add.w	r2, r4, #17
   17000:	4628      	mov	r0, r5
   17002:	f006 fc56 	bl	1d8b2 <bt_conn_is_peer_addr_le>
   17006:	2800      	cmp	r0, #0
   17008:	d1f5      	bne.n	16ff6 <find_cf_cfg+0x42>
	return NULL;
   1700a:	2400      	movs	r4, #0
   1700c:	e7dc      	b.n	16fc8 <find_cf_cfg+0x14>
   1700e:	bf00      	nop
   17010:	200027e8 	.word	0x200027e8

00017014 <sc_indicate_rsp>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static void sc_indicate_rsp(struct bt_conn *conn,
			    struct bt_gatt_indicate_params *params, uint8_t err)
{
   17014:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17016:	4915      	ldr	r1, [pc, #84]	; (1706c <sc_indicate_rsp+0x58>)
   17018:	f3bf 8f5b 	dmb	ish
   1701c:	4604      	mov	r4, r0
   1701e:	f101 0350 	add.w	r3, r1, #80	; 0x50
   17022:	e853 2f00 	ldrex	r2, [r3]
   17026:	f022 0202 	bic.w	r2, r2, #2
   1702a:	e843 2000 	strex	r0, r2, [r3]
   1702e:	2800      	cmp	r0, #0
   17030:	d1f7      	bne.n	17022 <sc_indicate_rsp+0xe>
   17032:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17036:	f3bf 8f5b 	dmb	ish
   1703a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1703c:	f3bf 8f5b 	dmb	ish
	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	/* Check if there is new change in the meantime */
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17040:	07da      	lsls	r2, r3, #31
   17042:	d505      	bpl.n	17050 <sc_indicate_rsp+0x3c>
   17044:	480a      	ldr	r0, [pc, #40]	; (17070 <sc_indicate_rsp+0x5c>)
   17046:	2200      	movs	r2, #0
   17048:	2300      	movs	r3, #0
   1704a:	3120      	adds	r1, #32
   1704c:	f003 fec2 	bl	1add4 <k_delayed_work_submit_to_queue>
	/* BLUETOOTH CORE SPECIFICATION Version 5.1 | Vol 3, Part G page 2347:
	 * 2.5.2.1 Robust Caching
	 * A connected client becomes change-aware when...
	 * The client receives and confirms a Service Changed indication.
	 */
	cfg = find_cf_cfg(conn);
   17050:	4620      	mov	r0, r4
   17052:	f7ff ffaf 	bl	16fb4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   17056:	b140      	cbz	r0, 1706a <sc_indicate_rsp+0x56>
   17058:	7a03      	ldrb	r3, [r0, #8]
   1705a:	07db      	lsls	r3, r3, #31
   1705c:	d505      	bpl.n	1706a <sc_indicate_rsp+0x56>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
		BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
	}
#endif
}
   1705e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17062:	2100      	movs	r1, #0
   17064:	300c      	adds	r0, #12
   17066:	f007 baeb 	b.w	1e640 <atomic_set_bit>
}
   1706a:	bd10      	pop	{r4, pc}
   1706c:	20002158 	.word	0x20002158
   17070:	200025a8 	.word	0x200025a8

00017074 <read_ppcp>:
{
   17074:	b513      	push	{r0, r1, r4, lr}
   17076:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1707a:	4c0b      	ldr	r4, [pc, #44]	; (170a8 <read_ppcp+0x34>)
{
   1707c:	4610      	mov	r0, r2
			  void *buf, uint16_t buf_len, uint16_t offset,
			  const void *value, uint16_t value_len)
{
	uint16_t len;

	if (offset > value_len) {
   1707e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   17080:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   17084:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   17088:	d80b      	bhi.n	170a2 <read_ppcp+0x2e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	len = MIN(buf_len, value_len - offset);
   1708a:	f1c1 0408 	rsb	r4, r1, #8
   1708e:	429c      	cmp	r4, r3
   17090:	bfa8      	it	ge
   17092:	461c      	movge	r4, r3

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, (uint8_t *)value + offset, len);
   17094:	4622      	mov	r2, r4
   17096:	4469      	add	r1, sp
   17098:	f005 fe2f 	bl	1ccfa <memcpy>
}
   1709c:	4620      	mov	r0, r4
   1709e:	b002      	add	sp, #8
   170a0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   170a2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   170a6:	e7f9      	b.n	1709c <read_ppcp+0x28>
   170a8:	00280018 	.word	0x00280018

000170ac <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
   170ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   170b0:	4615      	mov	r5, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
   170b2:	8a92      	ldrh	r2, [r2, #20]
{
   170b4:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   170b6:	3202      	adds	r2, #2
   170b8:	211d      	movs	r1, #29
{
   170ba:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   170bc:	f007 f923 	bl	1e306 <bt_att_create_pdu>
	if (!buf) {
   170c0:	4606      	mov	r6, r0
   170c2:	b308      	cbz	r0, 17108 <gatt_indicate+0x5c>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
   170c4:	f100 0808 	add.w	r8, r0, #8
   170c8:	2102      	movs	r1, #2
   170ca:	4640      	mov	r0, r8
   170cc:	f008 faec 	bl	1f6a8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   170d0:	4604      	mov	r4, r0

	net_buf_add(buf, params->len);
   170d2:	8aa9      	ldrh	r1, [r5, #20]
	ind->handle = sys_cpu_to_le16(handle);
   170d4:	f824 9b02 	strh.w	r9, [r4], #2
	net_buf_add(buf, params->len);
   170d8:	4640      	mov	r0, r8
   170da:	f008 fae5 	bl	1f6a8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   170de:	8aaa      	ldrh	r2, [r5, #20]
   170e0:	6929      	ldr	r1, [r5, #16]
   170e2:	4620      	mov	r0, r4
   170e4:	f005 fe09 	bl	1ccfa <memcpy>

	if (!params->func) {
   170e8:	68ab      	ldr	r3, [r5, #8]
   170ea:	b933      	cbnz	r3, 170fa <gatt_indicate+0x4e>
		err = bt_att_send(conn, buf, NULL, NULL);
   170ec:	4631      	mov	r1, r6
   170ee:	4638      	mov	r0, r7
   170f0:	461a      	mov	r2, r3
		return gatt_send(conn, buf, NULL, NULL, NULL);
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
   170f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = bt_att_send(conn, buf, NULL, NULL);
   170f6:	f007 b9a9 	b.w	1e44c <bt_att_send>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   170fa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   170fe:	2100      	movs	r1, #0
   17100:	f7ff fe42 	bl	16d88 <bt_att_req_alloc>
		if (!req) {
   17104:	4604      	mov	r4, r0
   17106:	b910      	cbnz	r0, 1710e <gatt_indicate+0x62>
		return -ENOMEM;
   17108:	f06f 050b 	mvn.w	r5, #11
   1710c:	e00e      	b.n	1712c <gatt_indicate+0x80>
		req->func = func;
   1710e:	4b09      	ldr	r3, [pc, #36]	; (17134 <gatt_indicate+0x88>)
   17110:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
   17112:	2300      	movs	r3, #0
		req->user_data = params;
   17114:	6185      	str	r5, [r0, #24]
		req->buf = buf;
   17116:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
   17118:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   1711a:	4601      	mov	r1, r0
   1711c:	4638      	mov	r0, r7
   1711e:	f007 f9df 	bl	1e4e0 <bt_att_req_send>
		if (err) {
   17122:	4605      	mov	r5, r0
   17124:	b110      	cbz	r0, 1712c <gatt_indicate+0x80>
			bt_att_req_free(req);
   17126:	4620      	mov	r0, r4
   17128:	f7ff fe44 	bl	16db4 <bt_att_req_free>
}
   1712c:	4628      	mov	r0, r5
   1712e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17132:	bf00      	nop
   17134:	0001e569 	.word	0x0001e569

00017138 <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
   17138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1713c:	4b38      	ldr	r3, [pc, #224]	; (17220 <notify_cb+0xe8>)
{
   1713e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17140:	6882      	ldr	r2, [r0, #8]
   17142:	429a      	cmp	r2, r3
{
   17144:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17146:	d003      	beq.n	17150 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   17148:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
   1714a:	b003      	add	sp, #12
   1714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   17150:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17154:	4b33      	ldr	r3, [pc, #204]	; (17224 <notify_cb+0xec>)
   17156:	4599      	cmp	r9, r3
   17158:	d01a      	beq.n	17190 <notify_cb+0x58>
   1715a:	f109 0701 	add.w	r7, r9, #1
   1715e:	f109 0a15 	add.w	sl, r9, #21
   17162:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
   17166:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   1716a:	89a3      	ldrh	r3, [r4, #12]
   1716c:	429a      	cmp	r2, r3
   1716e:	d10b      	bne.n	17188 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17170:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   17174:	4639      	mov	r1, r7
   17176:	f7fe fddf 	bl	15d38 <bt_conn_lookup_addr_le>
		if (!conn) {
   1717a:	4605      	mov	r5, r0
   1717c:	b120      	cbz	r0, 17188 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   1717e:	7b43      	ldrb	r3, [r0, #13]
   17180:	2b07      	cmp	r3, #7
   17182:	d029      	beq.n	171d8 <notify_cb+0xa0>
			bt_conn_unref(conn);
   17184:	f006 fbb5 	bl	1d8f2 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17188:	370a      	adds	r7, #10
   1718a:	4557      	cmp	r7, sl
   1718c:	d0dc      	beq.n	17148 <notify_cb+0x10>
   1718e:	e7ea      	b.n	17166 <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17190:	2600      	movs	r6, #0
   17192:	4d25      	ldr	r5, [pc, #148]	; (17228 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17194:	4637      	mov	r7, r6
   17196:	2207      	movs	r2, #7
   17198:	4669      	mov	r1, sp
   1719a:	4628      	mov	r0, r5
   1719c:	9700      	str	r7, [sp, #0]
   1719e:	f8cd 7003 	str.w	r7, [sp, #3]
   171a2:	f005 fd9a 	bl	1ccda <memcmp>
   171a6:	b178      	cbz	r0, 171c8 <notify_cb+0x90>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   171a8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   171ac:	2207      	movs	r2, #7
   171ae:	4629      	mov	r1, r5
   171b0:	f7fe fdde 	bl	15d70 <bt_conn_lookup_state_le>
			if (!conn) {
   171b4:	b968      	cbnz	r0, 171d2 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   171b6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   171b8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   171bc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   171be:	4629      	mov	r1, r5
   171c0:	8853      	ldrh	r3, [r2, #2]
   171c2:	8812      	ldrh	r2, [r2, #0]
   171c4:	f007 fbb8 	bl	1e938 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   171c8:	350c      	adds	r5, #12
   171ca:	2e00      	cmp	r6, #0
   171cc:	d1c5      	bne.n	1715a <notify_cb+0x22>
   171ce:	2601      	movs	r6, #1
   171d0:	e7e1      	b.n	17196 <notify_cb+0x5e>
			bt_conn_unref(conn);
   171d2:	f006 fb8e 	bl	1d8f2 <bt_conn_unref>
   171d6:	e7f7      	b.n	171c8 <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   171d8:	f8d9 3020 	ldr.w	r3, [r9, #32]
   171dc:	b123      	cbz	r3, 171e8 <notify_cb+0xb0>
   171de:	4641      	mov	r1, r8
   171e0:	4798      	blx	r3
   171e2:	b908      	cbnz	r0, 171e8 <notify_cb+0xb0>
			bt_conn_unref(conn);
   171e4:	4628      	mov	r0, r5
   171e6:	e7cd      	b.n	17184 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   171e8:	89a3      	ldrh	r3, [r4, #12]
   171ea:	88a1      	ldrh	r1, [r4, #4]
   171ec:	6922      	ldr	r2, [r4, #16]
   171ee:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   171f0:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   171f2:	d10f      	bne.n	17214 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   171f4:	f7ff ff5a 	bl	170ac <gatt_indicate>
			if (err == 0) {
   171f8:	4606      	mov	r6, r0
   171fa:	b918      	cbnz	r0, 17204 <notify_cb+0xcc>
				data->ind_params->_ref++;
   171fc:	6922      	ldr	r2, [r4, #16]
   171fe:	7d93      	ldrb	r3, [r2, #22]
   17200:	3301      	adds	r3, #1
   17202:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17204:	4628      	mov	r0, r5
   17206:	f006 fb74 	bl	1d8f2 <bt_conn_unref>
		if (err < 0) {
   1720a:	2e00      	cmp	r6, #0
   1720c:	db06      	blt.n	1721c <notify_cb+0xe4>
		data->err = 0;
   1720e:	f8c4 b008 	str.w	fp, [r4, #8]
   17212:	e7b9      	b.n	17188 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17214:	f007 fa22 	bl	1e65c <gatt_notify>
   17218:	4606      	mov	r6, r0
   1721a:	e7f3      	b.n	17204 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   1721c:	2000      	movs	r0, #0
   1721e:	e794      	b.n	1714a <notify_cb+0x12>
   17220:	0001e9cf 	.word	0x0001e9cf
   17224:	20000638 	.word	0x20000638
   17228:	20002913 	.word	0x20002913

0001722c <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1722c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17230:	4b2c      	ldr	r3, [pc, #176]	; (172e4 <disconnected_cb+0xb8>)
{
   17232:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17234:	6882      	ldr	r2, [r0, #8]
   17236:	429a      	cmp	r2, r3
{
   17238:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1723a:	d12f      	bne.n	1729c <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1723c:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1723e:	8aab      	ldrh	r3, [r5, #20]
   17240:	b363      	cbz	r3, 1729c <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
   17242:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 172e8 <disconnected_cb+0xbc>
   17246:	1c6c      	adds	r4, r5, #1
   17248:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
   1724c:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17250:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   17254:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   17258:	b19b      	cbz	r3, 17282 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1725a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1725e:	4622      	mov	r2, r4
   17260:	4630      	mov	r0, r6
   17262:	f006 fb26 	bl	1d8b2 <bt_conn_is_peer_addr_le>
   17266:	b9e8      	cbnz	r0, 172a4 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17268:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1726c:	4621      	mov	r1, r4
   1726e:	f7fe fd63 	bl	15d38 <bt_conn_lookup_addr_le>
			if (tmp) {
   17272:	b130      	cbz	r0, 17282 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   17274:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   17276:	2b07      	cmp	r3, #7
   17278:	bf08      	it	eq
   1727a:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   1727e:	f006 fb38 	bl	1d8f2 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17282:	340a      	adds	r4, #10
   17284:	4554      	cmp	r4, sl
   17286:	d1e5      	bne.n	17254 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   17288:	f1b8 0f00 	cmp.w	r8, #0
   1728c:	d106      	bne.n	1729c <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1728e:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   17290:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   17294:	b113      	cbz	r3, 1729c <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   17296:	4641      	mov	r1, r8
   17298:	4638      	mov	r0, r7
   1729a:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1729c:	2001      	movs	r0, #1
   1729e:	b003      	add	sp, #12
   172a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   172a4:	7a30      	ldrb	r0, [r6, #8]
   172a6:	4649      	mov	r1, r9
   172a8:	f006 f9b9 	bl	1d61e <bt_addr_le_is_bonded>
   172ac:	b998      	cbnz	r0, 172d6 <disconnected_cb+0xaa>
				if (ccc == &sc_ccc) {
   172ae:	455d      	cmp	r5, fp
   172b0:	d102      	bne.n	172b8 <disconnected_cb+0x8c>
					sc_clear(conn);
   172b2:	4630      	mov	r0, r6
   172b4:	f007 fb68 	bl	1e988 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   172b8:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   172ba:	2207      	movs	r2, #7
   172bc:	4669      	mov	r1, sp
   172be:	4620      	mov	r0, r4
   172c0:	9300      	str	r3, [sp, #0]
   172c2:	f8cd 3003 	str.w	r3, [sp, #3]
   172c6:	f005 fd18 	bl	1ccfa <memcpy>
	cfg->id = 0U;
   172ca:	2300      	movs	r3, #0
   172cc:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   172d0:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   172d4:	e7d5      	b.n	17282 <disconnected_cb+0x56>
   172d6:	2207      	movs	r2, #7
   172d8:	4649      	mov	r1, r9
   172da:	4620      	mov	r0, r4
   172dc:	f005 fd0d 	bl	1ccfa <memcpy>
}
   172e0:	e7cf      	b.n	17282 <disconnected_cb+0x56>
   172e2:	bf00      	nop
   172e4:	0001e9cf 	.word	0x0001e9cf
   172e8:	20000638 	.word	0x20000638

000172ec <bt_gatt_init>:
{
   172ec:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   172ee:	4b1f      	ldr	r3, [pc, #124]	; (1736c <bt_gatt_init+0x80>)
   172f0:	f3bf 8f5b 	dmb	ish
   172f4:	2201      	movs	r2, #1
   172f6:	e853 1f00 	ldrex	r1, [r3]
   172fa:	2900      	cmp	r1, #0
   172fc:	d103      	bne.n	17306 <bt_gatt_init+0x1a>
   172fe:	e843 2000 	strex	r0, r2, [r3]
   17302:	2800      	cmp	r0, #0
   17304:	d1f7      	bne.n	172f6 <bt_gatt_init+0xa>
   17306:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1730a:	d12d      	bne.n	17368 <bt_gatt_init+0x7c>
   1730c:	f3bf 8f5b 	dmb	ish
   17310:	4b17      	ldr	r3, [pc, #92]	; (17370 <bt_gatt_init+0x84>)
   17312:	e853 1f00 	ldrex	r1, [r3]
   17316:	2900      	cmp	r1, #0
   17318:	d103      	bne.n	17322 <bt_gatt_init+0x36>
   1731a:	e843 2000 	strex	r0, r2, [r3]
   1731e:	2800      	cmp	r0, #0
   17320:	d1f7      	bne.n	17312 <bt_gatt_init+0x26>
   17322:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   17326:	d108      	bne.n	1733a <bt_gatt_init+0x4e>
   17328:	4a12      	ldr	r2, [pc, #72]	; (17374 <bt_gatt_init+0x88>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1732a:	4913      	ldr	r1, [pc, #76]	; (17378 <bt_gatt_init+0x8c>)
   1732c:	8813      	ldrh	r3, [r2, #0]
   1732e:	4c13      	ldr	r4, [pc, #76]	; (1737c <bt_gatt_init+0x90>)
	if (!atomic_cas(&service_init, 0, 1)) {
   17330:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17332:	42a1      	cmp	r1, r4
   17334:	d312      	bcc.n	1735c <bt_gatt_init+0x70>
   17336:	b100      	cbz	r0, 1733a <bt_gatt_init+0x4e>
   17338:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
   1733a:	4911      	ldr	r1, [pc, #68]	; (17380 <bt_gatt_init+0x94>)
   1733c:	4811      	ldr	r0, [pc, #68]	; (17384 <bt_gatt_init+0x98>)
   1733e:	f008 fe47 	bl	1ffd0 <k_delayed_work_init>
   17342:	4910      	ldr	r1, [pc, #64]	; (17384 <bt_gatt_init+0x98>)
   17344:	4810      	ldr	r0, [pc, #64]	; (17388 <bt_gatt_init+0x9c>)
   17346:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1734a:	2300      	movs	r3, #0
   1734c:	f003 fd42 	bl	1add4 <k_delayed_work_submit_to_queue>
}
   17350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
   17354:	490d      	ldr	r1, [pc, #52]	; (1738c <bt_gatt_init+0xa0>)
   17356:	480e      	ldr	r0, [pc, #56]	; (17390 <bt_gatt_init+0xa4>)
   17358:	f008 be3a 	b.w	1ffd0 <k_delayed_work_init>
		last_static_handle += svc->attr_count;
   1735c:	6848      	ldr	r0, [r1, #4]
   1735e:	4403      	add	r3, r0
   17360:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17362:	3108      	adds	r1, #8
   17364:	2001      	movs	r0, #1
   17366:	e7e4      	b.n	17332 <bt_gatt_init+0x46>
}
   17368:	bd10      	pop	{r4, pc}
   1736a:	bf00      	nop
   1736c:	20002808 	.word	0x20002808
   17370:	20002824 	.word	0x20002824
   17374:	20002910 	.word	0x20002910
   17378:	000205a8 	.word	0x000205a8
   1737c:	000205d0 	.word	0x000205d0
   17380:	0001eb65 	.word	0x0001eb65
   17384:	20002128 	.word	0x20002128
   17388:	200025a8 	.word	0x200025a8
   1738c:	000176e1 	.word	0x000176e1
   17390:	20002178 	.word	0x20002178

00017394 <bt_gatt_attr_get_handle>:
{
   17394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   17398:	4603      	mov	r3, r0
   1739a:	b148      	cbz	r0, 173b0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1739c:	8a00      	ldrh	r0, [r0, #16]
   1739e:	b938      	cbnz	r0, 173b0 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   173a0:	4912      	ldr	r1, [pc, #72]	; (173ec <bt_gatt_attr_get_handle+0x58>)
   173a2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 173f0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   173a6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   173a8:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   173ac:	4571      	cmp	r1, lr
   173ae:	d301      	bcc.n	173b4 <bt_gatt_attr_get_handle+0x20>
}
   173b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   173b4:	e9d1 7600 	ldrd	r7, r6, [r1]
   173b8:	42bb      	cmp	r3, r7
   173ba:	d304      	bcc.n	173c6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   173bc:	fb0c 7206 	mla	r2, ip, r6, r7
   173c0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   173c2:	4293      	cmp	r3, r2
   173c4:	d90e      	bls.n	173e4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   173c6:	19a2      	adds	r2, r4, r6
   173c8:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   173ca:	3108      	adds	r1, #8
   173cc:	4614      	mov	r4, r2
   173ce:	e7ed      	b.n	173ac <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   173d0:	fb0c 7805 	mla	r8, ip, r5, r7
   173d4:	4543      	cmp	r3, r8
   173d6:	d007      	beq.n	173e8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   173d8:	3501      	adds	r5, #1
   173da:	1962      	adds	r2, r4, r5
   173dc:	42b5      	cmp	r5, r6
   173de:	b292      	uxth	r2, r2
   173e0:	d1f6      	bne.n	173d0 <bt_gatt_attr_get_handle+0x3c>
   173e2:	e7f2      	b.n	173ca <bt_gatt_attr_get_handle+0x36>
   173e4:	2500      	movs	r5, #0
   173e6:	e7f8      	b.n	173da <bt_gatt_attr_get_handle+0x46>
   173e8:	4610      	mov	r0, r2
   173ea:	e7e1      	b.n	173b0 <bt_gatt_attr_get_handle+0x1c>
   173ec:	000205a8 	.word	0x000205a8
   173f0:	000205d0 	.word	0x000205d0

000173f4 <bt_gatt_foreach_attr_type>:
{
   173f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173f8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   173fc:	9100      	str	r1, [sp, #0]
   173fe:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   17400:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17404:	2d00      	cmp	r5, #0
   17406:	bf08      	it	eq
   17408:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1740a:	4b24      	ldr	r3, [pc, #144]	; (1749c <bt_gatt_foreach_attr_type+0xa8>)
   1740c:	881b      	ldrh	r3, [r3, #0]
   1740e:	4283      	cmp	r3, r0
{
   17410:	4607      	mov	r7, r0
   17412:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   17414:	d23c      	bcs.n	17490 <bt_gatt_foreach_attr_type+0x9c>
}
   17416:	b003      	add	sp, #12
   17418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1741c:	6873      	ldr	r3, [r6, #4]
   1741e:	4423      	add	r3, r4
   17420:	42bb      	cmp	r3, r7
   17422:	d232      	bcs.n	1748a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   17424:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17426:	3608      	adds	r6, #8
   17428:	4b1d      	ldr	r3, [pc, #116]	; (174a0 <bt_gatt_foreach_attr_type+0xac>)
   1742a:	429e      	cmp	r6, r3
   1742c:	d3f6      	bcc.n	1741c <bt_gatt_foreach_attr_type+0x28>
   1742e:	e7f2      	b.n	17416 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17430:	5889      	ldr	r1, [r1, r2]
   17432:	9301      	str	r3, [sp, #4]
   17434:	4640      	mov	r0, r8
   17436:	f005 fd18 	bl	1ce6a <bt_uuid_cmp>
   1743a:	9b01      	ldr	r3, [sp, #4]
   1743c:	b190      	cbz	r0, 17464 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1743e:	3401      	adds	r4, #1
   17440:	f10a 0a01 	add.w	sl, sl, #1
   17444:	b2a4      	uxth	r4, r4
   17446:	6873      	ldr	r3, [r6, #4]
   17448:	4553      	cmp	r3, sl
   1744a:	d9ec      	bls.n	17426 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1744c:	9b00      	ldr	r3, [sp, #0]
   1744e:	429c      	cmp	r4, r3
   17450:	d8e1      	bhi.n	17416 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   17452:	42bc      	cmp	r4, r7
   17454:	d3f3      	bcc.n	1743e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17456:	6831      	ldr	r1, [r6, #0]
   17458:	fb0b f20a 	mul.w	r2, fp, sl
   1745c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1745e:	f1b8 0f00 	cmp.w	r8, #0
   17462:	d1e5      	bne.n	17430 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   17464:	f1b9 0f00 	cmp.w	r9, #0
   17468:	d10b      	bne.n	17482 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1746a:	3d01      	subs	r5, #1
   1746c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1746e:	4618      	mov	r0, r3
   17470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17474:	4621      	mov	r1, r4
   17476:	4798      	blx	r3
	if (!*num_matches) {
   17478:	2d00      	cmp	r5, #0
   1747a:	d0cc      	beq.n	17416 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1747c:	2800      	cmp	r0, #0
   1747e:	d1de      	bne.n	1743e <bt_gatt_foreach_attr_type+0x4a>
   17480:	e7c9      	b.n	17416 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17482:	68da      	ldr	r2, [r3, #12]
   17484:	4591      	cmp	r9, r2
   17486:	d1da      	bne.n	1743e <bt_gatt_foreach_attr_type+0x4a>
   17488:	e7ef      	b.n	1746a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1748a:	f04f 0a00 	mov.w	sl, #0
   1748e:	e7da      	b.n	17446 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17490:	4e04      	ldr	r6, [pc, #16]	; (174a4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   17492:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17494:	f04f 0b14 	mov.w	fp, #20
   17498:	e7c6      	b.n	17428 <bt_gatt_foreach_attr_type+0x34>
   1749a:	bf00      	nop
   1749c:	20002910 	.word	0x20002910
   174a0:	000205d0 	.word	0x000205d0
   174a4:	000205a8 	.word	0x000205a8

000174a8 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   174a8:	b510      	push	{r4, lr}
   174aa:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   174ac:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   174ae:	aa1c      	add	r2, sp, #112	; 0x70
   174b0:	4669      	mov	r1, sp
   174b2:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   174b4:	e9cd 3300 	strd	r3, r3, [sp]
   174b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   174bc:	f005 fb13 	bl	1cae6 <tc_cmac_setup>
   174c0:	b1b8      	cbz	r0, 174f2 <db_hash_gen.isra.0+0x4a>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   174c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   174c6:	2001      	movs	r0, #1
   174c8:	4a0b      	ldr	r2, [pc, #44]	; (174f8 <db_hash_gen.isra.0+0x50>)
   174ca:	ab04      	add	r3, sp, #16
   174cc:	f007 fb3f 	bl	1eb4e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   174d0:	480a      	ldr	r0, [pc, #40]	; (174fc <db_hash_gen.isra.0+0x54>)
   174d2:	a904      	add	r1, sp, #16
   174d4:	f005 fb9e 	bl	1cc14 <tc_cmac_final>
   174d8:	b158      	cbz	r0, 174f2 <db_hash_gen.isra.0+0x4a>
   174da:	4b08      	ldr	r3, [pc, #32]	; (174fc <db_hash_gen.isra.0+0x54>)
   174dc:	2208      	movs	r2, #8
   174de:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   174e2:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   174e4:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   174e8:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   174ec:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   174ee:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   174f0:	d1f7      	bne.n	174e2 <db_hash_gen.isra.0+0x3a>
}
   174f2:	b048      	add	sp, #288	; 0x120
   174f4:	bd10      	pop	{r4, pc}
   174f6:	bf00      	nop
   174f8:	0001e595 	.word	0x0001e595
   174fc:	20002de0 	.word	0x20002de0

00017500 <bt_gatt_notify_cb>:
{
   17500:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17502:	4b37      	ldr	r3, [pc, #220]	; (175e0 <bt_gatt_notify_cb+0xe0>)
   17504:	f3bf 8f5b 	dmb	ish
   17508:	681b      	ldr	r3, [r3, #0]
   1750a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1750e:	079a      	lsls	r2, r3, #30
{
   17510:	b08b      	sub	sp, #44	; 0x2c
   17512:	4604      	mov	r4, r0
   17514:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17516:	d55d      	bpl.n	175d4 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   17518:	6848      	ldr	r0, [r1, #4]
   1751a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1751c:	b114      	cbz	r4, 17524 <bt_gatt_notify_cb+0x24>
   1751e:	7b63      	ldrb	r3, [r4, #13]
   17520:	2b07      	cmp	r3, #7
   17522:	d15a      	bne.n	175da <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17524:	f7ff ff36 	bl	17394 <bt_gatt_attr_get_handle>
   17528:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1752c:	b918      	cbnz	r0, 17536 <bt_gatt_notify_cb+0x36>
		return -ENOENT;
   1752e:	f06f 0001 	mvn.w	r0, #1
}
   17532:	b00b      	add	sp, #44	; 0x2c
   17534:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   17536:	682a      	ldr	r2, [r5, #0]
   17538:	b9aa      	cbnz	r2, 17566 <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1753a:	9b05      	ldr	r3, [sp, #20]
   1753c:	6818      	ldr	r0, [r3, #0]
   1753e:	2300      	movs	r3, #0
   17540:	f88d 3010 	strb.w	r3, [sp, #16]
   17544:	a904      	add	r1, sp, #16
   17546:	f642 0303 	movw	r3, #10243	; 0x2803
   1754a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1754e:	f005 fc8c 	bl	1ce6a <bt_uuid_cmp>
   17552:	b1c0      	cbz	r0, 17586 <bt_gatt_notify_cb+0x86>
	if (conn) {
   17554:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   17558:	b314      	cbz	r4, 175a0 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   1755a:	4601      	mov	r1, r0
   1755c:	462a      	mov	r2, r5
   1755e:	4620      	mov	r0, r4
   17560:	f007 f87c 	bl	1e65c <gatt_notify>
   17564:	e7e5      	b.n	17532 <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17566:	a905      	add	r1, sp, #20
   17568:	9102      	str	r1, [sp, #8]
   1756a:	491e      	ldr	r1, [pc, #120]	; (175e4 <bt_gatt_notify_cb+0xe4>)
   1756c:	9101      	str	r1, [sp, #4]
   1756e:	2101      	movs	r1, #1
	found->attr = NULL;
   17570:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17572:	9100      	str	r1, [sp, #0]
   17574:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17578:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1757a:	f7ff ff3b 	bl	173f4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1757e:	9b05      	ldr	r3, [sp, #20]
   17580:	2b00      	cmp	r3, #0
   17582:	d1da      	bne.n	1753a <bt_gatt_notify_cb+0x3a>
   17584:	e7d3      	b.n	1752e <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17586:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   17588:	68c3      	ldr	r3, [r0, #12]
   1758a:	799b      	ldrb	r3, [r3, #6]
   1758c:	06db      	lsls	r3, r3, #27
   1758e:	d402      	bmi.n	17596 <bt_gatt_notify_cb+0x96>
			return -EINVAL;
   17590:	f06f 0015 	mvn.w	r0, #21
   17594:	e7cd      	b.n	17532 <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17596:	f007 fa8c 	bl	1eab2 <bt_gatt_attr_value_handle>
   1759a:	f8ad 0018 	strh.w	r0, [sp, #24]
   1759e:	e7d9      	b.n	17554 <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   175a0:	f642 1202 	movw	r2, #10498	; 0x2902
   175a4:	f8ad 2012 	strh.w	r2, [sp, #18]
   175a8:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   175aa:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   175ae:	9202      	str	r2, [sp, #8]
   175b0:	4a0d      	ldr	r2, [pc, #52]	; (175e8 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   175b2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   175b4:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   175b6:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   175ba:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   175be:	aa04      	add	r2, sp, #16
   175c0:	4623      	mov	r3, r4
   175c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   175c6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   175c8:	f88d 4010 	strb.w	r4, [sp, #16]
   175cc:	f7ff ff12 	bl	173f4 <bt_gatt_foreach_attr_type>
	return data.err;
   175d0:	9807      	ldr	r0, [sp, #28]
   175d2:	e7ae      	b.n	17532 <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
   175d4:	f06f 000a 	mvn.w	r0, #10
   175d8:	e7ab      	b.n	17532 <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
   175da:	f06f 0038 	mvn.w	r0, #56	; 0x38
   175de:	e7a8      	b.n	17532 <bt_gatt_notify_cb+0x32>
   175e0:	20000460 	.word	0x20000460
   175e4:	0001e58d 	.word	0x0001e58d
   175e8:	00017139 	.word	0x00017139

000175ec <bt_gatt_indicate>:
{
   175ec:	b530      	push	{r4, r5, lr}
   175ee:	4b39      	ldr	r3, [pc, #228]	; (176d4 <bt_gatt_indicate+0xe8>)
   175f0:	f3bf 8f5b 	dmb	ish
   175f4:	681b      	ldr	r3, [r3, #0]
   175f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   175fa:	079a      	lsls	r2, r3, #30
{
   175fc:	b08b      	sub	sp, #44	; 0x2c
   175fe:	4604      	mov	r4, r0
   17600:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17602:	d561      	bpl.n	176c8 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   17604:	6848      	ldr	r0, [r1, #4]
   17606:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17608:	b114      	cbz	r4, 17610 <bt_gatt_indicate+0x24>
   1760a:	7b63      	ldrb	r3, [r4, #13]
   1760c:	2b07      	cmp	r3, #7
   1760e:	d15e      	bne.n	176ce <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17610:	f7ff fec0 	bl	17394 <bt_gatt_attr_get_handle>
   17614:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   17618:	b918      	cbnz	r0, 17622 <bt_gatt_indicate+0x36>
		return -ENOENT;
   1761a:	f06f 0001 	mvn.w	r0, #1
}
   1761e:	b00b      	add	sp, #44	; 0x2c
   17620:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   17622:	682a      	ldr	r2, [r5, #0]
   17624:	b9ba      	cbnz	r2, 17656 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17626:	9b05      	ldr	r3, [sp, #20]
   17628:	6818      	ldr	r0, [r3, #0]
   1762a:	2300      	movs	r3, #0
   1762c:	f88d 3010 	strb.w	r3, [sp, #16]
   17630:	a904      	add	r1, sp, #16
   17632:	f642 0303 	movw	r3, #10243	; 0x2803
   17636:	f8ad 3012 	strh.w	r3, [sp, #18]
   1763a:	f005 fc16 	bl	1ce6a <bt_uuid_cmp>
   1763e:	b1d0      	cbz	r0, 17676 <bt_gatt_indicate+0x8a>
	if (conn) {
   17640:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   17644:	b324      	cbz	r4, 17690 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   17646:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   17648:	4601      	mov	r1, r0
		params->_ref = 1;
   1764a:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1764c:	462a      	mov	r2, r5
   1764e:	4620      	mov	r0, r4
   17650:	f7ff fd2c 	bl	170ac <gatt_indicate>
   17654:	e7e3      	b.n	1761e <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17656:	a905      	add	r1, sp, #20
   17658:	9102      	str	r1, [sp, #8]
   1765a:	491f      	ldr	r1, [pc, #124]	; (176d8 <bt_gatt_indicate+0xec>)
   1765c:	9101      	str	r1, [sp, #4]
   1765e:	2101      	movs	r1, #1
	found->attr = NULL;
   17660:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17662:	9100      	str	r1, [sp, #0]
   17664:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17668:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1766a:	f7ff fec3 	bl	173f4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1766e:	9b05      	ldr	r3, [sp, #20]
   17670:	2b00      	cmp	r3, #0
   17672:	d1d8      	bne.n	17626 <bt_gatt_indicate+0x3a>
   17674:	e7d1      	b.n	1761a <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17676:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17678:	68c3      	ldr	r3, [r0, #12]
   1767a:	799b      	ldrb	r3, [r3, #6]
   1767c:	069b      	lsls	r3, r3, #26
   1767e:	d402      	bmi.n	17686 <bt_gatt_indicate+0x9a>
			return -EINVAL;
   17680:	f06f 0015 	mvn.w	r0, #21
   17684:	e7cb      	b.n	1761e <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17686:	f007 fa14 	bl	1eab2 <bt_gatt_attr_value_handle>
   1768a:	f8ad 0018 	strh.w	r0, [sp, #24]
   1768e:	e7d7      	b.n	17640 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
   17690:	f06f 0338 	mvn.w	r3, #56	; 0x38
   17694:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17696:	2302      	movs	r3, #2
   17698:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1769c:	f642 1302 	movw	r3, #10498	; 0x2902
   176a0:	f8ad 3012 	strh.w	r3, [sp, #18]
   176a4:	ab05      	add	r3, sp, #20
   176a6:	9302      	str	r3, [sp, #8]
   176a8:	4b0c      	ldr	r3, [pc, #48]	; (176dc <bt_gatt_indicate+0xf0>)
   176aa:	9301      	str	r3, [sp, #4]
   176ac:	2301      	movs	r3, #1
   176ae:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   176b0:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   176b2:	4623      	mov	r3, r4
   176b4:	aa04      	add	r2, sp, #16
   176b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   176ba:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   176bc:	f88d 4010 	strb.w	r4, [sp, #16]
   176c0:	f7ff fe98 	bl	173f4 <bt_gatt_foreach_attr_type>
	return data.err;
   176c4:	9807      	ldr	r0, [sp, #28]
   176c6:	e7aa      	b.n	1761e <bt_gatt_indicate+0x32>
		return -EAGAIN;
   176c8:	f06f 000a 	mvn.w	r0, #10
   176cc:	e7a7      	b.n	1761e <bt_gatt_indicate+0x32>
		return -ENOTCONN;
   176ce:	f06f 0038 	mvn.w	r0, #56	; 0x38
   176d2:	e7a4      	b.n	1761e <bt_gatt_indicate+0x32>
   176d4:	20000460 	.word	0x20000460
   176d8:	0001e58d 	.word	0x0001e58d
   176dc:	00017139 	.word	0x00017139

000176e0 <sc_process>:
{
   176e0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   176e2:	f850 2c08 	ldr.w	r2, [r0, #-8]
   176e6:	9201      	str	r2, [sp, #4]
{
   176e8:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   176ea:	f1a0 0120 	sub.w	r1, r0, #32
   176ee:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   176f2:	f3bf 8f5b 	dmb	ish
   176f6:	e854 2f00 	ldrex	r2, [r4]
   176fa:	f022 0201 	bic.w	r2, r2, #1
   176fe:	e844 2000 	strex	r0, r2, [r4]
   17702:	2800      	cmp	r0, #0
   17704:	d1f7      	bne.n	176f6 <sc_process+0x16>
   17706:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1770a:	4a0d      	ldr	r2, [pc, #52]	; (17740 <sc_process+0x60>)
   1770c:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   17710:	4a0c      	ldr	r2, [pc, #48]	; (17744 <sc_process+0x64>)
   17712:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   17716:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   17718:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1771a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1771e:	2204      	movs	r2, #4
	sc->start = 0U;
   17720:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   17724:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   17728:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1772c:	f7ff ff5e 	bl	175ec <bt_gatt_indicate>
   17730:	b918      	cbnz	r0, 1773a <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   17732:	2101      	movs	r1, #1
   17734:	4620      	mov	r0, r4
   17736:	f006 ff83 	bl	1e640 <atomic_set_bit>
}
   1773a:	b002      	add	sp, #8
   1773c:	bd10      	pop	{r4, pc}
   1773e:	bf00      	nop
   17740:	00020b20 	.word	0x00020b20
   17744:	00017015 	.word	0x00017015

00017748 <update_ccc>:
{
   17748:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1774c:	4b35      	ldr	r3, [pc, #212]	; (17824 <update_ccc+0xdc>)
{
   1774e:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17750:	6882      	ldr	r2, [r0, #8]
   17752:	429a      	cmp	r2, r3
{
   17754:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17756:	d160      	bne.n	1781a <update_ccc+0xd2>
	ccc = attr->user_data;
   17758:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   1775c:	683c      	ldr	r4, [r7, #0]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1775e:	f108 0501 	add.w	r5, r8, #1
   17762:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   17766:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1776a:	b1f3      	cbz	r3, 177aa <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1776c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   17770:	462a      	mov	r2, r5
   17772:	4620      	mov	r0, r4
   17774:	f006 f89d 	bl	1d8b2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17778:	b1b8      	cbz	r0, 177aa <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1777a:	222a      	movs	r2, #42	; 0x2a
   1777c:	4631      	mov	r1, r6
   1777e:	4620      	mov	r0, r4
   17780:	f007 f9f2 	bl	1eb68 <bt_gatt_check_perm>
		if (err) {
   17784:	b1a8      	cbz	r0, 177b2 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17786:	2803      	cmp	r0, #3
   17788:	d00f      	beq.n	177aa <update_ccc+0x62>
				sec = BT_SECURITY_L3;
   1778a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1778c:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1778e:	bf14      	ite	ne
   17790:	f04f 0a02 	movne.w	sl, #2
   17794:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
   17798:	f006 f818 	bl	1d7cc <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1779c:	4582      	cmp	sl, r0
   1779e:	d908      	bls.n	177b2 <update_ccc+0x6a>
				if (data->sec < sec) {
   177a0:	793b      	ldrb	r3, [r7, #4]
   177a2:	4553      	cmp	r3, sl
   177a4:	d201      	bcs.n	177aa <update_ccc+0x62>
					data->sec = sec;
   177a6:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   177aa:	350a      	adds	r5, #10
   177ac:	454d      	cmp	r5, r9
   177ae:	d034      	beq.n	1781a <update_ccc+0xd2>
   177b0:	e7d9      	b.n	17766 <update_ccc+0x1e>
		gatt_ccc_changed(attr, ccc);
   177b2:	4641      	mov	r1, r8
   177b4:	4630      	mov	r0, r6
   177b6:	f006 fec9 	bl	1e54c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   177ba:	4b1b      	ldr	r3, [pc, #108]	; (17828 <update_ccc+0xe0>)
   177bc:	4598      	cmp	r8, r3
   177be:	d12c      	bne.n	1781a <update_ccc+0xd2>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   177c0:	7a20      	ldrb	r0, [r4, #8]
   177c2:	f104 0188 	add.w	r1, r4, #136	; 0x88
   177c6:	f7ff fbd3 	bl	16f70 <find_sc_cfg>
	if (!cfg) {
   177ca:	4605      	mov	r5, r0
   177cc:	b328      	cbz	r0, 1781a <update_ccc+0xd2>
	if (!(cfg->data.start || cfg->data.end)) {
   177ce:	8902      	ldrh	r2, [r0, #8]
   177d0:	8943      	ldrh	r3, [r0, #10]
   177d2:	ea52 0103 	orrs.w	r1, r2, r3
   177d6:	d020      	beq.n	1781a <update_ccc+0xd2>
	index = bt_conn_index(conn);
   177d8:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   177da:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   177de:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   177e2:	f7fe fccb 	bl	1617c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   177e6:	4911      	ldr	r1, [pc, #68]	; (1782c <update_ccc+0xe4>)
   177e8:	4a11      	ldr	r2, [pc, #68]	; (17830 <update_ccc+0xe8>)
   177ea:	2318      	movs	r3, #24
   177ec:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].len = sizeof(sc_range);
   177f0:	2604      	movs	r6, #4
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   177f2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   177f4:	4a0f      	ldr	r2, [pc, #60]	; (17834 <update_ccc+0xec>)
   177f6:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   177f8:	aa01      	add	r2, sp, #4
   177fa:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   177fc:	829e      	strh	r6, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   177fe:	b203      	sxth	r3, r0
   17800:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17804:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   17808:	4620      	mov	r0, r4
   1780a:	f7ff feef 	bl	175ec <bt_gatt_indicate>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1780e:	4632      	mov	r2, r6
   17810:	2100      	movs	r1, #0
   17812:	f105 0008 	add.w	r0, r5, #8
   17816:	f005 fa9b 	bl	1cd50 <memset>
}
   1781a:	2001      	movs	r0, #1
   1781c:	b002      	add	sp, #8
   1781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17822:	bf00      	nop
   17824:	0001e9cf 	.word	0x0001e9cf
   17828:	20000638 	.word	0x20000638
   1782c:	2000280c 	.word	0x2000280c
   17830:	00020b20 	.word	0x00020b20
   17834:	0001e78f 	.word	0x0001e78f

00017838 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   17838:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1783a:	4a0b      	ldr	r2, [pc, #44]	; (17868 <bt_gatt_connected+0x30>)
	data.conn = conn;
   1783c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1783e:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
   17842:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17844:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   17846:	2001      	movs	r0, #1
   17848:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1784c:	f007 f97f 	bl	1eb4e <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
   17850:	4620      	mov	r0, r4
   17852:	f005 ffbb 	bl	1d7cc <bt_conn_get_security>
   17856:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1785a:	4288      	cmp	r0, r1
   1785c:	d202      	bcs.n	17864 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
   1785e:	4620      	mov	r0, r4
   17860:	f005 ff81 	bl	1d766 <bt_conn_set_security>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   17864:	b002      	add	sp, #8
   17866:	bd10      	pop	{r4, pc}
   17868:	00017749 	.word	0x00017749

0001786c <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   1786c:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1786e:	4a06      	ldr	r2, [pc, #24]	; (17888 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   17870:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17872:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   17874:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17876:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1787a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1787e:	f007 f966 	bl	1eb4e <bt_gatt_foreach_attr>
}
   17882:	b003      	add	sp, #12
   17884:	f85d fb04 	ldr.w	pc, [sp], #4
   17888:	00017749 	.word	0x00017749

0001788c <db_hash_read>:
{
   1788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1788e:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   17890:	480f      	ldr	r0, [pc, #60]	; (178d0 <db_hash_read+0x44>)
{
   17892:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   17896:	4615      	mov	r5, r2
   17898:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
   1789a:	f008 fba1 	bl	1ffe0 <k_delayed_work_cancel>
	if (!err) {
   1789e:	b908      	cbnz	r0, 178a4 <db_hash_read+0x18>
		db_hash_gen(true);
   178a0:	f7ff fe02 	bl	174a8 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   178a4:	2101      	movs	r1, #1
   178a6:	4620      	mov	r0, r4
   178a8:	f007 f989 	bl	1ebbe <bt_gatt_change_aware>
	if (offset > value_len) {
   178ac:	2e10      	cmp	r6, #16
   178ae:	d80c      	bhi.n	178ca <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
   178b0:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   178b4:	4907      	ldr	r1, [pc, #28]	; (178d4 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
   178b6:	42bc      	cmp	r4, r7
   178b8:	bfa8      	it	ge
   178ba:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   178bc:	4622      	mov	r2, r4
   178be:	4431      	add	r1, r6
   178c0:	4628      	mov	r0, r5
   178c2:	f005 fa1a 	bl	1ccfa <memcpy>
}
   178c6:	4620      	mov	r0, r4
   178c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   178ca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   178ce:	e7fa      	b.n	178c6 <db_hash_read+0x3a>
   178d0:	20002128 	.word	0x20002128
   178d4:	20002de0 	.word	0x20002de0

000178d8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   178d8:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   178da:	4603      	mov	r3, r0
   178dc:	4a15      	ldr	r2, [pc, #84]	; (17934 <bt_gatt_disconnected+0x5c>)
{
   178de:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   178e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   178e4:	2001      	movs	r0, #1
   178e6:	f007 f932 	bl	1eb4e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   178ea:	4628      	mov	r0, r5
   178ec:	f7ff fb62 	bl	16fb4 <find_cf_cfg>
	if (!cfg) {
   178f0:	4604      	mov	r4, r0
   178f2:	b1e8      	cbz	r0, 17930 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   178f4:	f105 0688 	add.w	r6, r5, #136	; 0x88
   178f8:	7a28      	ldrb	r0, [r5, #8]
   178fa:	4631      	mov	r1, r6
   178fc:	f005 fe8f 	bl	1d61e <bt_addr_le_is_bonded>
   17900:	b920      	cbnz	r0, 1790c <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   17902:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   17904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   17908:	f006 bed2 	b.w	1e6b0 <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
   1790c:	1c60      	adds	r0, r4, #1
   1790e:	2207      	movs	r2, #7
   17910:	4631      	mov	r1, r6
   17912:	340c      	adds	r4, #12
   17914:	f005 f9f1 	bl	1ccfa <memcpy>
   17918:	f3bf 8f5b 	dmb	ish
   1791c:	e854 3f00 	ldrex	r3, [r4]
   17920:	f023 0302 	bic.w	r3, r3, #2
   17924:	e844 3200 	strex	r2, r3, [r4]
   17928:	2a00      	cmp	r2, #0
   1792a:	d1f7      	bne.n	1791c <bt_gatt_disconnected+0x44>
   1792c:	f3bf 8f5b 	dmb	ish
}
   17930:	bd70      	pop	{r4, r5, r6, pc}
   17932:	bf00      	nop
   17934:	0001722d 	.word	0x0001722d

00017938 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   17938:	4b10      	ldr	r3, [pc, #64]	; (1797c <get_io_capa+0x44>)
   1793a:	681b      	ldr	r3, [r3, #0]
   1793c:	b1bb      	cbz	r3, 1796e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1793e:	681a      	ldr	r2, [r3, #0]
   17940:	b142      	cbz	r2, 17954 <get_io_capa+0x1c>
   17942:	6859      	ldr	r1, [r3, #4]
   17944:	b131      	cbz	r1, 17954 <get_io_capa+0x1c>
   17946:	6899      	ldr	r1, [r3, #8]
   17948:	b911      	cbnz	r1, 17950 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1794a:	490d      	ldr	r1, [pc, #52]	; (17980 <get_io_capa+0x48>)
   1794c:	7809      	ldrb	r1, [r1, #0]
   1794e:	b939      	cbnz	r1, 17960 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   17950:	2004      	movs	r0, #4
   17952:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   17954:	490a      	ldr	r1, [pc, #40]	; (17980 <get_io_capa+0x48>)
   17956:	7809      	ldrb	r1, [r1, #0]
   17958:	b111      	cbz	r1, 17960 <get_io_capa+0x28>
   1795a:	b10a      	cbz	r2, 17960 <get_io_capa+0x28>
   1795c:	6899      	ldr	r1, [r3, #8]
   1795e:	b941      	cbnz	r1, 17972 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   17960:	685b      	ldr	r3, [r3, #4]
   17962:	b943      	cbnz	r3, 17976 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   17964:	2a00      	cmp	r2, #0
   17966:	bf0c      	ite	eq
   17968:	2003      	moveq	r0, #3
   1796a:	2000      	movne	r0, #0
   1796c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1796e:	2003      	movs	r0, #3
   17970:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   17972:	2001      	movs	r0, #1
   17974:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   17976:	2002      	movs	r0, #2
	}
}
   17978:	4770      	bx	lr
   1797a:	bf00      	nop
   1797c:	20002794 	.word	0x20002794
   17980:	20002df1 	.word	0x20002df1

00017984 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   17984:	4b04      	ldr	r3, [pc, #16]	; (17998 <bt_smp_accept+0x14>)
   17986:	6818      	ldr	r0, [r3, #0]
   17988:	b918      	cbnz	r0, 17992 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1798a:	4a04      	ldr	r2, [pc, #16]	; (1799c <bt_smp_accept+0x18>)
   1798c:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
   1798e:	600b      	str	r3, [r1, #0]

		return 0;
   17990:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   17992:	f06f 000b 	mvn.w	r0, #11
}
   17996:	4770      	bx	lr
   17998:	200021b0 	.word	0x200021b0
   1799c:	00020c94 	.word	0x00020c94

000179a0 <get_auth.isra.0>:
	if (sc_supported) {
   179a0:	4b0c      	ldr	r3, [pc, #48]	; (179d4 <get_auth.isra.0+0x34>)
   179a2:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   179a4:	b510      	push	{r4, lr}
	if (sc_supported) {
   179a6:	b17b      	cbz	r3, 179c8 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   179a8:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   179ac:	f7ff ffc4 	bl	17938 <get_io_capa>
	if (bondable) {
   179b0:	4b09      	ldr	r3, [pc, #36]	; (179d8 <get_auth.isra.0+0x38>)
   179b2:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   179b4:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   179b6:	bf0c      	ite	eq
   179b8:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   179bc:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   179c0:	b12b      	cbz	r3, 179ce <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   179c2:	f044 0001 	orr.w	r0, r4, #1
}
   179c6:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   179c8:	f000 0407 	and.w	r4, r0, #7
   179cc:	e7ee      	b.n	179ac <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   179ce:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   179d2:	e7f8      	b.n	179c6 <get_auth.isra.0+0x26>
   179d4:	20002df1 	.word	0x20002df1
   179d8:	20000758 	.word	0x20000758

000179dc <smp_init>:
{
   179dc:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   179de:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
   179e2:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   179e4:	22f0      	movs	r2, #240	; 0xf0
   179e6:	2100      	movs	r1, #0
   179e8:	4628      	mov	r0, r5
   179ea:	f005 f9b1 	bl	1cd50 <memset>
	if (bt_rand(smp->prnd, 16)) {
   179ee:	f104 00df 	add.w	r0, r4, #223	; 0xdf
   179f2:	2110      	movs	r1, #16
   179f4:	f002 f8e4 	bl	19bc0 <bt_rand>
   179f8:	4604      	mov	r4, r0
   179fa:	b948      	cbnz	r0, 17a10 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   179fc:	2105      	movs	r1, #5
   179fe:	4628      	mov	r0, r5
   17a00:	f007 f923 	bl	1ec4a <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   17a04:	f7fd ff3c 	bl	15880 <bt_pub_key_get>
   17a08:	4b02      	ldr	r3, [pc, #8]	; (17a14 <smp_init+0x38>)
   17a0a:	6018      	str	r0, [r3, #0]
}
   17a0c:	4620      	mov	r0, r4
   17a0e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   17a10:	2408      	movs	r4, #8
   17a12:	e7fb      	b.n	17a0c <smp_init+0x30>
   17a14:	20002828 	.word	0x20002828

00017a18 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   17a18:	b513      	push	{r0, r1, r4, lr}
   17a1a:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   17a1c:	2200      	movs	r2, #0
   17a1e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   17a20:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   17a22:	460a      	mov	r2, r1
   17a24:	6800      	ldr	r0, [r0, #0]
   17a26:	2106      	movs	r1, #6
   17a28:	f006 f85f 	bl	1daea <bt_l2cap_send_cb>
   17a2c:	4805      	ldr	r0, [pc, #20]	; (17a44 <smp_send.isra.0+0x2c>)
   17a2e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   17a32:	2300      	movs	r3, #0
   17a34:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
   17a38:	b002      	add	sp, #8
   17a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17a3e:	f003 b9c9 	b.w	1add4 <k_delayed_work_submit_to_queue>
   17a42:	bf00      	nop
   17a44:	200025a8 	.word	0x200025a8

00017a48 <compute_and_check_and_send_slave_dhcheck>:
{
   17a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   17a4c:	2210      	movs	r2, #16
{
   17a4e:	b0a3      	sub	sp, #140	; 0x8c
   17a50:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   17a52:	2100      	movs	r1, #0
   17a54:	eb0d 0002 	add.w	r0, sp, r2
   17a58:	f005 f97a 	bl	1cd50 <memset>
	switch (smp->method) {
   17a5c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   17a60:	2b05      	cmp	r3, #5
   17a62:	d87e      	bhi.n	17b62 <compute_and_check_and_send_slave_dhcheck+0x11a>
   17a64:	e8df f003 	tbb	[pc, r3]
   17a68:	09030309 	.word	0x09030309
   17a6c:	7f7d      	.short	0x7f7d
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   17a6e:	2204      	movs	r2, #4
   17a70:	f504 71c8 	add.w	r1, r4, #400	; 0x190
   17a74:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   17a76:	f005 f940 	bl	1ccfa <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   17a7a:	4b63      	ldr	r3, [pc, #396]	; (17c08 <compute_and_check_and_send_slave_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
   17a7c:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
   17a80:	aa14      	add	r2, sp, #80	; 0x50
   17a82:	f103 0630 	add.w	r6, r3, #48	; 0x30
   17a86:	6818      	ldr	r0, [r3, #0]
   17a88:	6859      	ldr	r1, [r3, #4]
   17a8a:	4615      	mov	r5, r2
   17a8c:	c503      	stmia	r5!, {r0, r1}
   17a8e:	3308      	adds	r3, #8
   17a90:	42b3      	cmp	r3, r6
   17a92:	462a      	mov	r2, r5
   17a94:	d1f7      	bne.n	17a86 <compute_and_check_and_send_slave_dhcheck+0x3e>
   17a96:	6818      	ldr	r0, [r3, #0]
   17a98:	791b      	ldrb	r3, [r3, #4]
   17a9a:	6028      	str	r0, [r5, #0]
   17a9c:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   17a9e:	ad0c      	add	r5, sp, #48	; 0x30
   17aa0:	2220      	movs	r2, #32
   17aa2:	f204 114f 	addw	r1, r4, #335	; 0x14f
   17aa6:	4628      	mov	r0, r5
   17aa8:	f007 f8bb 	bl	1ec22 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   17aac:	4857      	ldr	r0, [pc, #348]	; (17c0c <compute_and_check_and_send_slave_dhcheck+0x1c4>)
   17aae:	ab08      	add	r3, sp, #32
   17ab0:	2220      	movs	r2, #32
   17ab2:	4629      	mov	r1, r5
   17ab4:	f007 f8e6 	bl	1ec84 <bt_smp_aes_cmac>
	if (err) {
   17ab8:	2800      	cmp	r0, #0
   17aba:	d152      	bne.n	17b62 <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   17abc:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
   17ac0:	2210      	movs	r2, #16
   17ac2:	4639      	mov	r1, r7
   17ac4:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   17ac8:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
   17acc:	f007 f8a9 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   17ad0:	2210      	movs	r2, #16
   17ad2:	4641      	mov	r1, r8
   17ad4:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   17ad8:	f007 f8a3 	bl	1ec22 <sys_memcpy_swap>
	m[37] = a1->type;
   17adc:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   17ae0:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   17ae4:	2206      	movs	r2, #6
   17ae6:	f109 0190 	add.w	r1, r9, #144	; 0x90
   17aea:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   17aee:	f007 f898 	bl	1ec22 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   17af2:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
   17af6:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   17afa:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   17afe:	2206      	movs	r2, #6
   17b00:	f109 0197 	add.w	r1, r9, #151	; 0x97
   17b04:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   17b08:	f007 f88b 	bl	1ec22 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   17b0c:	4633      	mov	r3, r6
   17b0e:	2235      	movs	r2, #53	; 0x35
   17b10:	a914      	add	r1, sp, #80	; 0x50
   17b12:	a808      	add	r0, sp, #32
   17b14:	f007 f8b6 	bl	1ec84 <bt_smp_aes_cmac>
	if (err) {
   17b18:	bb18      	cbnz	r0, 17b62 <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
   17b1a:	4630      	mov	r0, r6
   17b1c:	f007 f8ea 	bl	1ecf4 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   17b20:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
   17b24:	2301      	movs	r3, #1
   17b26:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   17b2a:	2235      	movs	r2, #53	; 0x35
   17b2c:	464b      	mov	r3, r9
   17b2e:	a914      	add	r1, sp, #80	; 0x50
   17b30:	a808      	add	r0, sp, #32
   17b32:	f007 f8a7 	bl	1ec84 <bt_smp_aes_cmac>
	if (err) {
   17b36:	b9a0      	cbnz	r0, 17b62 <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
   17b38:	4648      	mov	r0, r9
   17b3a:	f007 f8db 	bl	1ecf4 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   17b3e:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   17b40:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
   17b42:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   17b46:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   17b48:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   17b4c:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   17b4e:	e9cd 2300 	strd	r2, r3, [sp]
   17b52:	9102      	str	r1, [sp, #8]
   17b54:	ab04      	add	r3, sp, #16
   17b56:	463a      	mov	r2, r7
   17b58:	4641      	mov	r1, r8
   17b5a:	4630      	mov	r0, r6
   17b5c:	f007 f8d8 	bl	1ed10 <smp_f6>
   17b60:	b148      	cbz	r0, 17b76 <compute_and_check_and_send_slave_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
   17b62:	2008      	movs	r0, #8
   17b64:	e048      	b.n	17bf8 <compute_and_check_and_send_slave_dhcheck+0x1b0>
		if (smp->oobd_remote) {
   17b66:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   17b6a:	2900      	cmp	r1, #0
   17b6c:	d085      	beq.n	17a7a <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   17b6e:	2210      	movs	r2, #16
   17b70:	eb0d 0002 	add.w	r0, sp, r2
   17b74:	e77f      	b.n	17a76 <compute_and_check_and_send_slave_dhcheck+0x2e>
	if (smp->method == LE_SC_OOB) {
   17b76:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   17b7a:	2b05      	cmp	r3, #5
   17b7c:	d108      	bne.n	17b90 <compute_and_check_and_send_slave_dhcheck+0x148>
		if (smp->oobd_local) {
   17b7e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
   17b82:	2210      	movs	r2, #16
   17b84:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   17b88:	2900      	cmp	r1, #0
   17b8a:	d038      	beq.n	17bfe <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   17b8c:	f005 f8b5 	bl	1ccfa <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   17b90:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   17b92:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
   17b94:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   17b98:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   17b9a:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   17b9e:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   17ba0:	e9cd 2300 	strd	r2, r3, [sp]
   17ba4:	9102      	str	r1, [sp, #8]
   17ba6:	ab04      	add	r3, sp, #16
   17ba8:	4642      	mov	r2, r8
   17baa:	4639      	mov	r1, r7
   17bac:	f007 f8b0 	bl	1ed10 <smp_f6>
   17bb0:	2800      	cmp	r0, #0
   17bb2:	d1d6      	bne.n	17b62 <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
   17bb4:	4629      	mov	r1, r5
   17bb6:	2210      	movs	r2, #16
   17bb8:	f204 106f 	addw	r0, r4, #367	; 0x16f
   17bbc:	f005 f88d 	bl	1ccda <memcmp>
   17bc0:	4605      	mov	r5, r0
   17bc2:	b9f8      	cbnz	r0, 17c04 <compute_and_check_and_send_slave_dhcheck+0x1bc>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   17bc4:	210d      	movs	r1, #13
   17bc6:	4620      	mov	r0, r4
   17bc8:	f007 f91e 	bl	1ee08 <smp_create_pdu.isra.0>
	if (!buf) {
   17bcc:	4606      	mov	r6, r0
   17bce:	2800      	cmp	r0, #0
   17bd0:	d0c7      	beq.n	17b62 <compute_and_check_and_send_slave_dhcheck+0x11a>
	req = net_buf_add(buf, sizeof(*req));
   17bd2:	2110      	movs	r1, #16
   17bd4:	3008      	adds	r0, #8
   17bd6:	f007 fd67 	bl	1f6a8 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   17bda:	2210      	movs	r2, #16
   17bdc:	a914      	add	r1, sp, #80	; 0x50
   17bde:	f005 f88c 	bl	1ccfa <memcpy>
	smp_send(smp, buf, NULL, NULL);
   17be2:	462a      	mov	r2, r5
   17be4:	4631      	mov	r1, r6
   17be6:	4620      	mov	r0, r4
   17be8:	f7ff ff16 	bl	17a18 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17bec:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   17bf0:	2101      	movs	r1, #1
   17bf2:	f007 f82a 	bl	1ec4a <atomic_set_bit>
	return 0;
   17bf6:	4628      	mov	r0, r5
}
   17bf8:	b023      	add	sp, #140	; 0x8c
   17bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   17bfe:	f005 f8a7 	bl	1cd50 <memset>
   17c02:	e7c5      	b.n	17b90 <compute_and_check_and_send_slave_dhcheck+0x148>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   17c04:	200b      	movs	r0, #11
   17c06:	e7f7      	b.n	17bf8 <compute_and_check_and_send_slave_dhcheck+0x1b0>
   17c08:	00020625 	.word	0x00020625
   17c0c:	00021127 	.word	0x00021127

00017c10 <sc_send_public_key>:
{
   17c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   17c12:	210c      	movs	r1, #12
{
   17c14:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   17c16:	f007 f8f7 	bl	1ee08 <smp_create_pdu.isra.0>
	if (!req_buf) {
   17c1a:	4604      	mov	r4, r0
   17c1c:	b1b0      	cbz	r0, 17c4c <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
   17c1e:	2140      	movs	r1, #64	; 0x40
   17c20:	3008      	adds	r0, #8
   17c22:	f007 fd41 	bl	1f6a8 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   17c26:	4f0a      	ldr	r7, [pc, #40]	; (17c50 <sc_send_public_key+0x40>)
   17c28:	2220      	movs	r2, #32
   17c2a:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
   17c2c:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
   17c2e:	f005 f864 	bl	1ccfa <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   17c32:	6839      	ldr	r1, [r7, #0]
   17c34:	2220      	movs	r2, #32
   17c36:	4411      	add	r1, r2
   17c38:	18b0      	adds	r0, r6, r2
   17c3a:	f005 f85e 	bl	1ccfa <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   17c3e:	4628      	mov	r0, r5
   17c40:	2200      	movs	r2, #0
   17c42:	4621      	mov	r1, r4
   17c44:	f7ff fee8 	bl	17a18 <smp_send.isra.0>
	return 0;
   17c48:	2000      	movs	r0, #0
}
   17c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   17c4c:	2008      	movs	r0, #8
   17c4e:	e7fc      	b.n	17c4a <sc_send_public_key+0x3a>
   17c50:	20002828 	.word	0x20002828

00017c54 <smp_send_pairing_confirm>:
{
   17c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   17c56:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
   17c5a:	2c02      	cmp	r4, #2
{
   17c5c:	4605      	mov	r5, r0
	switch (smp->method) {
   17c5e:	d824      	bhi.n	17caa <smp_send_pairing_confirm+0x56>
   17c60:	b14c      	cbz	r4, 17c76 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17c62:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
   17c66:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
   17c6a:	40dc      	lsrs	r4, r3
   17c6c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   17c70:	f064 047f 	orn	r4, r4, #127	; 0x7f
   17c74:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   17c76:	2103      	movs	r1, #3
   17c78:	4628      	mov	r0, r5
   17c7a:	f007 f8c5 	bl	1ee08 <smp_create_pdu.isra.0>
	if (!buf) {
   17c7e:	4606      	mov	r6, r0
   17c80:	b1a8      	cbz	r0, 17cae <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
   17c82:	2110      	movs	r1, #16
   17c84:	3008      	adds	r0, #8
   17c86:	f007 fd0f 	bl	1f6a8 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   17c8a:	9000      	str	r0, [sp, #0]
   17c8c:	4810      	ldr	r0, [pc, #64]	; (17cd0 <smp_send_pairing_confirm+0x7c>)
   17c8e:	4623      	mov	r3, r4
   17c90:	6800      	ldr	r0, [r0, #0]
   17c92:	f105 02df 	add.w	r2, r5, #223	; 0xdf
   17c96:	f205 110f 	addw	r1, r5, #271	; 0x10f
   17c9a:	f007 f885 	bl	1eda8 <smp_f4>
   17c9e:	4604      	mov	r4, r0
   17ca0:	b148      	cbz	r0, 17cb6 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
   17ca2:	4630      	mov	r0, r6
   17ca4:	f000 ffbc 	bl	18c20 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   17ca8:	e001      	b.n	17cae <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
   17caa:	2c03      	cmp	r4, #3
   17cac:	d001      	beq.n	17cb2 <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
   17cae:	2008      	movs	r0, #8
   17cb0:	e00c      	b.n	17ccc <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   17cb2:	2400      	movs	r4, #0
   17cb4:	e7df      	b.n	17c76 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   17cb6:	4602      	mov	r2, r0
   17cb8:	4631      	mov	r1, r6
   17cba:	4628      	mov	r0, r5
   17cbc:	f7ff feac 	bl	17a18 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   17cc0:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   17cc4:	4621      	mov	r1, r4
   17cc6:	f006 ffce 	bl	1ec66 <atomic_clear_bit>
	return 0;
   17cca:	4620      	mov	r0, r4
}
   17ccc:	b002      	add	sp, #8
   17cce:	bd70      	pop	{r4, r5, r6, pc}
   17cd0:	20002828 	.word	0x20002828

00017cd4 <smp_public_key_slave.part.0>:
static uint8_t smp_public_key_slave(struct bt_smp *smp)
   17cd4:	b538      	push	{r3, r4, r5, lr}
   17cd6:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   17cda:	4604      	mov	r4, r0
   17cdc:	2b05      	cmp	r3, #5
   17cde:	d814      	bhi.n	17d0a <smp_public_key_slave.part.0+0x36>
   17ce0:	e8df f003 	tbb	[pc, r3]
   17ce4:	030d3603 	.word	0x030d3603
   17ce8:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17cea:	30b8      	adds	r0, #184	; 0xb8
   17cec:	2104      	movs	r1, #4
   17cee:	f006 ffac 	bl	1ec4a <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   17cf2:	4620      	mov	r0, r4
   17cf4:	f7ff ffae 	bl	17c54 <smp_send_pairing_confirm>
		if (err) {
   17cf8:	2800      	cmp	r0, #0
   17cfa:	d037      	beq.n	17d6c <smp_public_key_slave.part.0+0x98>
}
   17cfc:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   17cfe:	2104      	movs	r1, #4
   17d00:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   17d04:	f001 ff5c 	bl	19bc0 <bt_rand>
   17d08:	b108      	cbz	r0, 17d0e <smp_public_key_slave.part.0+0x3a>
	switch (smp->method) {
   17d0a:	2008      	movs	r0, #8
   17d0c:	e7f6      	b.n	17cfc <smp_public_key_slave.part.0+0x28>
		smp->passkey %= 1000000;
   17d0e:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
   17d12:	4a1f      	ldr	r2, [pc, #124]	; (17d90 <smp_public_key_slave.part.0+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
   17d14:	4d1f      	ldr	r5, [pc, #124]	; (17d94 <smp_public_key_slave.part.0+0xc0>)
		smp->passkey %= 1000000;
   17d16:	fbb1 f3f2 	udiv	r3, r1, r2
   17d1a:	fb02 1313 	mls	r3, r2, r3, r1
   17d1e:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
   17d22:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   17d24:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
   17d28:	b163      	cbz	r3, 17d44 <smp_public_key_slave.part.0+0x70>
   17d2a:	681b      	ldr	r3, [r3, #0]
   17d2c:	b153      	cbz	r3, 17d44 <smp_public_key_slave.part.0+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   17d2e:	210a      	movs	r1, #10
   17d30:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   17d34:	f006 ff89 	bl	1ec4a <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   17d38:	682b      	ldr	r3, [r5, #0]
   17d3a:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
   17d3e:	681b      	ldr	r3, [r3, #0]
   17d40:	6820      	ldr	r0, [r4, #0]
   17d42:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   17d44:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17d46:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   17d4a:	f006 ff7e 	bl	1ec4a <atomic_set_bit>
		break;
   17d4e:	e00d      	b.n	17d6c <smp_public_key_slave.part.0+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   17d50:	2103      	movs	r1, #3
   17d52:	30b8      	adds	r0, #184	; 0xb8
   17d54:	f006 ff79 	bl	1ec4a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17d58:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   17d5c:	2109      	movs	r1, #9
   17d5e:	f006 ff74 	bl	1ec4a <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   17d62:	4b0c      	ldr	r3, [pc, #48]	; (17d94 <smp_public_key_slave.part.0+0xc0>)
   17d64:	6820      	ldr	r0, [r4, #0]
   17d66:	681b      	ldr	r3, [r3, #0]
   17d68:	685b      	ldr	r3, [r3, #4]
   17d6a:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
   17d6c:	490a      	ldr	r1, [pc, #40]	; (17d98 <smp_public_key_slave.part.0+0xc4>)
   17d6e:	f204 100f 	addw	r0, r4, #271	; 0x10f
   17d72:	f7fd fd93 	bl	1589c <bt_dh_key_gen>
   17d76:	4605      	mov	r5, r0
   17d78:	2800      	cmp	r0, #0
   17d7a:	d1c6      	bne.n	17d0a <smp_public_key_slave.part.0+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   17d7c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   17d80:	2107      	movs	r1, #7
   17d82:	f006 ff62 	bl	1ec4a <atomic_set_bit>
	return 0;
   17d86:	4628      	mov	r0, r5
   17d88:	e7b8      	b.n	17cfc <smp_public_key_slave.part.0+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17d8a:	2104      	movs	r1, #4
   17d8c:	e7db      	b.n	17d46 <smp_public_key_slave.part.0+0x72>
   17d8e:	bf00      	nop
   17d90:	000f4240 	.word	0x000f4240
   17d94:	20002794 	.word	0x20002794
   17d98:	00018285 	.word	0x00018285

00017d9c <smp_public_key>:
{
   17d9c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   17d9e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   17da0:	f200 140f 	addw	r4, r0, #271	; 0x10f
{
   17da4:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
   17da6:	2220      	movs	r2, #32
   17da8:	4631      	mov	r1, r6
   17daa:	4620      	mov	r0, r4
   17dac:	f004 ffa5 	bl	1ccfa <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   17db0:	2220      	movs	r2, #32
   17db2:	18b1      	adds	r1, r6, r2
   17db4:	f205 102f 	addw	r0, r5, #303	; 0x12f
   17db8:	f004 ff9f 	bl	1ccfa <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
   17dbc:	491b      	ldr	r1, [pc, #108]	; (17e2c <smp_public_key+0x90>)
   17dbe:	2240      	movs	r2, #64	; 0x40
   17dc0:	4620      	mov	r0, r4
   17dc2:	f004 ff8a 	bl	1ccda <memcmp>
   17dc6:	b148      	cbz	r0, 17ddc <smp_public_key+0x40>
	if (!sc_public_key) {
   17dc8:	4b19      	ldr	r3, [pc, #100]	; (17e30 <smp_public_key+0x94>)
   17dca:	681c      	ldr	r4, [r3, #0]
   17dcc:	bb24      	cbnz	r4, 17e18 <smp_public_key+0x7c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   17dce:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   17dd2:	2106      	movs	r1, #6
   17dd4:	f006 ff39 	bl	1ec4a <atomic_set_bit>
		return 0;
   17dd8:	4620      	mov	r0, r4
}
   17dda:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   17ddc:	210d      	movs	r1, #13
   17dde:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   17de2:	f006 ff32 	bl	1ec4a <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   17de6:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
   17de8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   17dec:	b933      	cbnz	r3, 17dfc <smp_public_key+0x60>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17dee:	7a20      	ldrb	r0, [r4, #8]
   17df0:	f104 0188 	add.w	r1, r4, #136	; 0x88
   17df4:	f000 fdc2 	bl	1897c <bt_keys_get_addr>
   17df8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   17dfc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   17e00:	2b00      	cmp	r3, #0
   17e02:	d0e1      	beq.n	17dc8 <smp_public_key+0x2c>
   17e04:	89da      	ldrh	r2, [r3, #14]
   17e06:	f002 0224 	and.w	r2, r2, #36	; 0x24
   17e0a:	2a00      	cmp	r2, #0
   17e0c:	d0dc      	beq.n	17dc8 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   17e0e:	7b5b      	ldrb	r3, [r3, #13]
   17e10:	079b      	lsls	r3, r3, #30
   17e12:	d5d9      	bpl.n	17dc8 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   17e14:	2003      	movs	r0, #3
   17e16:	e7e0      	b.n	17dda <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
   17e18:	4628      	mov	r0, r5
   17e1a:	f7ff fef9 	bl	17c10 <sc_send_public_key>
	if (err) {
   17e1e:	2800      	cmp	r0, #0
   17e20:	d1db      	bne.n	17dda <smp_public_key+0x3e>
   17e22:	4628      	mov	r0, r5
}
   17e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17e28:	f7ff bf54 	b.w	17cd4 <smp_public_key_slave.part.0>
   17e2c:	00021137 	.word	0x00021137
   17e30:	20002828 	.word	0x20002828

00017e34 <smp_pairing_req>:
{
   17e34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   17e38:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   17e3a:	78fb      	ldrb	r3, [r7, #3]
   17e3c:	3b07      	subs	r3, #7
   17e3e:	2b09      	cmp	r3, #9
{
   17e40:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   17e42:	d904      	bls.n	17e4e <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   17e44:	2706      	movs	r7, #6
}
   17e46:	4638      	mov	r0, r7
   17e48:	b002      	add	sp, #8
   17e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   17e4e:	6806      	ldr	r6, [r0, #0]
	if (!conn->le.keys) {
   17e50:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   17e54:	b163      	cbz	r3, 17e70 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   17e56:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
   17e5a:	210e      	movs	r1, #14
   17e5c:	4628      	mov	r0, r5
   17e5e:	f006 ffca 	bl	1edf6 <atomic_test_bit>
   17e62:	b980      	cbnz	r0, 17e86 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   17e64:	4620      	mov	r0, r4
   17e66:	f7ff fdb9 	bl	179dc <smp_init>
		if (ret) {
   17e6a:	b160      	cbz	r0, 17e86 <smp_pairing_req+0x52>
			return ret;
   17e6c:	b2c7      	uxtb	r7, r0
   17e6e:	e7ea      	b.n	17e46 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17e70:	7a30      	ldrb	r0, [r6, #8]
   17e72:	f106 0188 	add.w	r1, r6, #136	; 0x88
   17e76:	f000 fd81 	bl	1897c <bt_keys_get_addr>
   17e7a:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
   17e7e:	2800      	cmp	r0, #0
   17e80:	d1e9      	bne.n	17e56 <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
   17e82:	2708      	movs	r7, #8
   17e84:	e7df      	b.n	17e46 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   17e86:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   17e88:	2206      	movs	r2, #6
   17e8a:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   17e8c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
   17e90:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
   17e94:	f004 ff31 	bl	1ccfa <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   17e98:	2302      	movs	r3, #2
   17e9a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
   17e9e:	78b8      	ldrb	r0, [r7, #2]
   17ea0:	f7ff fd7e 	bl	179a0 <get_auth.isra.0>
   17ea4:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
   17ea8:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   17eaa:	f7ff fd45 	bl	17938 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   17eae:	4bb1      	ldr	r3, [pc, #708]	; (18174 <smp_pairing_req+0x340>)
	rsp->io_capability = get_io_capa();
   17eb0:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   17eb4:	781b      	ldrb	r3, [r3, #0]
   17eb6:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   17eba:	2310      	movs	r3, #16
   17ebc:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   17ec0:	793b      	ldrb	r3, [r7, #4]
   17ec2:	f003 0303 	and.w	r3, r3, #3
   17ec6:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   17eca:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   17ecc:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   17ed0:	f003 0301 	and.w	r3, r3, #1
   17ed4:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   17ed8:	d00f      	beq.n	17efa <smp_pairing_req+0xc6>
   17eda:	78bb      	ldrb	r3, [r7, #2]
   17edc:	071b      	lsls	r3, r3, #28
   17ede:	d50c      	bpl.n	17efa <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   17ee0:	2105      	movs	r1, #5
   17ee2:	4628      	mov	r0, r5
   17ee4:	f006 feb1 	bl	1ec4a <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   17ee8:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   17eec:	f003 0302 	and.w	r3, r3, #2
   17ef0:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
   17ef4:	2300      	movs	r3, #0
   17ef6:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   17efa:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   17efe:	0698      	lsls	r0, r3, #26
   17f00:	d506      	bpl.n	17f10 <smp_pairing_req+0xdc>
   17f02:	78bb      	ldrb	r3, [r7, #2]
   17f04:	0699      	lsls	r1, r3, #26
   17f06:	d503      	bpl.n	17f10 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   17f08:	2113      	movs	r1, #19
   17f0a:	4628      	mov	r0, r5
   17f0c:	f006 fe9d 	bl	1ec4a <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   17f10:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
   17f14:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
   17f18:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   17f1c:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   17f20:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   17f24:	07da      	lsls	r2, r3, #31
   17f26:	d506      	bpl.n	17f36 <smp_pairing_req+0x102>
   17f28:	78bb      	ldrb	r3, [r7, #2]
   17f2a:	07db      	lsls	r3, r3, #31
   17f2c:	d503      	bpl.n	17f36 <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   17f2e:	210c      	movs	r1, #12
   17f30:	4628      	mov	r0, r5
   17f32:	f006 fe8a 	bl	1ec4a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   17f36:	2103      	movs	r1, #3
   17f38:	4628      	mov	r0, r5
   17f3a:	f006 fe86 	bl	1ec4a <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17f3e:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   17f40:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17f42:	f006 ff58 	bl	1edf6 <atomic_test_bit>
   17f46:	f8d4 8000 	ldr.w	r8, [r4]
   17f4a:	2800      	cmp	r0, #0
   17f4c:	d151      	bne.n	17ff2 <smp_pairing_req+0x1be>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   17f4e:	2f04      	cmp	r7, #4
   17f50:	d81d      	bhi.n	17f8e <smp_pairing_req+0x15a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   17f52:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   17f56:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
   17f5a:	4013      	ands	r3, r2
   17f5c:	07d8      	lsls	r0, r3, #31
   17f5e:	d465      	bmi.n	1802c <smp_pairing_req+0x1f8>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   17f60:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
   17f64:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   17f68:	4318      	orrs	r0, r3
   17f6a:	f010 0004 	ands.w	r0, r0, #4
   17f6e:	d00e      	beq.n	17f8e <smp_pairing_req+0x15a>
	method = gen_method_legacy[remote_io][get_io_capa()];
   17f70:	f7ff fce2 	bl	17938 <get_io_capa>
   17f74:	4b80      	ldr	r3, [pc, #512]	; (18178 <smp_pairing_req+0x344>)
   17f76:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   17f7a:	441f      	add	r7, r3
   17f7c:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
   17f7e:	2804      	cmp	r0, #4
   17f80:	d105      	bne.n	17f8e <smp_pairing_req+0x15a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   17f82:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
   17f86:	2b00      	cmp	r3, #0
   17f88:	bf0c      	ite	eq
   17f8a:	2002      	moveq	r0, #2
   17f8c:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   17f8e:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   17f92:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   17f96:	b93b      	cbnz	r3, 17fa8 <smp_pairing_req+0x174>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17f98:	f898 0008 	ldrb.w	r0, [r8, #8]
   17f9c:	f108 0188 	add.w	r1, r8, #136	; 0x88
   17fa0:	f000 fcec 	bl	1897c <bt_keys_get_addr>
   17fa4:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
   17fa8:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
   17fac:	2a00      	cmp	r2, #0
   17fae:	d143      	bne.n	18038 <smp_pairing_req+0x204>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17fb0:	2105      	movs	r1, #5
   17fb2:	4628      	mov	r0, r5
   17fb4:	f006 ff1f 	bl	1edf6 <atomic_test_bit>
   17fb8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   17fbc:	2800      	cmp	r0, #0
   17fbe:	f040 80e3 	bne.w	18188 <smp_pairing_req+0x354>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17fc2:	461f      	mov	r7, r3
   17fc4:	2b00      	cmp	r3, #0
   17fc6:	d155      	bne.n	18074 <smp_pairing_req+0x240>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17fc8:	210e      	movs	r1, #14
   17fca:	4628      	mov	r0, r5
   17fcc:	f006 ff13 	bl	1edf6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17fd0:	2800      	cmp	r0, #0
   17fd2:	d14f      	bne.n	18074 <smp_pairing_req+0x240>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17fd4:	4e69      	ldr	r6, [pc, #420]	; (1817c <smp_pairing_req+0x348>)
   17fd6:	6833      	ldr	r3, [r6, #0]
   17fd8:	2b00      	cmp	r3, #0
   17fda:	d04b      	beq.n	18074 <smp_pairing_req+0x240>
	    bt_auth && bt_auth->pairing_confirm) {
   17fdc:	695b      	ldr	r3, [r3, #20]
   17fde:	2b00      	cmp	r3, #0
   17fe0:	d048      	beq.n	18074 <smp_pairing_req+0x240>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17fe2:	4628      	mov	r0, r5
   17fe4:	2109      	movs	r1, #9
   17fe6:	f006 fe30 	bl	1ec4a <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   17fea:	6833      	ldr	r3, [r6, #0]
   17fec:	6820      	ldr	r0, [r4, #0]
   17fee:	695b      	ldr	r3, [r3, #20]
   17ff0:	e0bc      	b.n	1816c <smp_pairing_req+0x338>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   17ff2:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
   17ff6:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
   17ffa:	ea00 0302 	and.w	r3, r0, r2
   17ffe:	0719      	lsls	r1, r3, #28
   18000:	d506      	bpl.n	18010 <smp_pairing_req+0x1dc>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   18002:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   18006:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
   1800a:	430b      	orrs	r3, r1
   1800c:	07db      	lsls	r3, r3, #31
   1800e:	d40f      	bmi.n	18030 <smp_pairing_req+0x1fc>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   18010:	2f04      	cmp	r7, #4
   18012:	d80f      	bhi.n	18034 <smp_pairing_req+0x200>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   18014:	4310      	orrs	r0, r2
   18016:	f010 0004 	ands.w	r0, r0, #4
   1801a:	d0b8      	beq.n	17f8e <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa()];
   1801c:	f7ff fc8c 	bl	17938 <get_io_capa>
   18020:	4b57      	ldr	r3, [pc, #348]	; (18180 <smp_pairing_req+0x34c>)
   18022:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   18026:	441f      	add	r7, r3
   18028:	5c38      	ldrb	r0, [r7, r0]
   1802a:	e7b0      	b.n	17f8e <smp_pairing_req+0x15a>
		return LEGACY_OOB;
   1802c:	2006      	movs	r0, #6
   1802e:	e7ae      	b.n	17f8e <smp_pairing_req+0x15a>
			return LE_SC_OOB;
   18030:	2005      	movs	r0, #5
   18032:	e7ac      	b.n	17f8e <smp_pairing_req+0x15a>
		return JUST_WORKS;
   18034:	2000      	movs	r0, #0
   18036:	e7aa      	b.n	17f8e <smp_pairing_req+0x15a>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   18038:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
   1803a:	f011 0f24 	tst.w	r1, #36	; 0x24
   1803e:	d0b7      	beq.n	17fb0 <smp_pairing_req+0x17c>
	return MIN(req->max_key_size, rsp->max_key_size);
   18040:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   18044:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
   18048:	7b12      	ldrb	r2, [r2, #12]
   1804a:	4283      	cmp	r3, r0
   1804c:	bf28      	it	cs
   1804e:	4603      	movcs	r3, r0
   18050:	429a      	cmp	r2, r3
   18052:	d901      	bls.n	18058 <smp_pairing_req+0x224>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18054:	2703      	movs	r7, #3
   18056:	e6f6      	b.n	17e46 <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   18058:	0689      	lsls	r1, r1, #26
   1805a:	d404      	bmi.n	18066 <smp_pairing_req+0x232>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   1805c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   18060:	2b00      	cmp	r3, #0
   18062:	d1a5      	bne.n	17fb0 <smp_pairing_req+0x17c>
   18064:	e7f6      	b.n	18054 <smp_pairing_req+0x220>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18066:	2105      	movs	r1, #5
   18068:	4628      	mov	r0, r5
   1806a:	f006 fec4 	bl	1edf6 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   1806e:	2800      	cmp	r0, #0
   18070:	d1f4      	bne.n	1805c <smp_pairing_req+0x228>
   18072:	e7ef      	b.n	18054 <smp_pairing_req+0x220>
	ret = send_pairing_rsp(smp);
   18074:	4620      	mov	r0, r4
   18076:	f006 ff00 	bl	1ee7a <send_pairing_rsp>
	if (ret) {
   1807a:	4607      	mov	r7, r0
   1807c:	2800      	cmp	r0, #0
   1807e:	f47f aee2 	bne.w	17e46 <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18082:	2103      	movs	r1, #3
   18084:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   18088:	f006 fddf 	bl	1ec4a <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1808c:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1808e:	7a30      	ldrb	r0, [r6, #8]
   18090:	f106 0188 	add.w	r1, r6, #136	; 0x88
   18094:	f000 fcf8 	bl	18a88 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   18098:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1809c:	b128      	cbz	r0, 180aa <smp_pairing_req+0x276>
   1809e:	7b42      	ldrb	r2, [r0, #13]
   180a0:	07d2      	lsls	r2, r2, #31
   180a2:	d502      	bpl.n	180aa <smp_pairing_req+0x276>
   180a4:	2b00      	cmp	r3, #0
   180a6:	f43f aeec 	beq.w	17e82 <smp_pairing_req+0x4e>
	switch (smp->method) {
   180aa:	2b06      	cmp	r3, #6
   180ac:	f63f aee9 	bhi.w	17e82 <smp_pairing_req+0x4e>
   180b0:	a201      	add	r2, pc, #4	; (adr r2, 180b8 <smp_pairing_req+0x284>)
   180b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   180b6:	bf00      	nop
   180b8:	000180d5 	.word	0x000180d5
   180bc:	0001815d 	.word	0x0001815d
   180c0:	00018101 	.word	0x00018101
   180c4:	00017e83 	.word	0x00017e83
   180c8:	00017e83 	.word	0x00017e83
   180cc:	00017e83 	.word	0x00017e83
   180d0:	000180d9 	.word	0x000180d9
   180d4:	461f      	mov	r7, r3
   180d6:	e6b6      	b.n	17e46 <smp_pairing_req+0x12>
		if (bt_auth && bt_auth->oob_data_request) {
   180d8:	4e28      	ldr	r6, [pc, #160]	; (1817c <smp_pairing_req+0x348>)
   180da:	6833      	ldr	r3, [r6, #0]
   180dc:	2b00      	cmp	r3, #0
   180de:	d047      	beq.n	18170 <smp_pairing_req+0x33c>
   180e0:	68db      	ldr	r3, [r3, #12]
   180e2:	2b00      	cmp	r3, #0
   180e4:	d044      	beq.n	18170 <smp_pairing_req+0x33c>
			struct bt_conn_oob_info info = {
   180e6:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   180e8:	4628      	mov	r0, r5
   180ea:	2109      	movs	r1, #9
			struct bt_conn_oob_info info = {
   180ec:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   180f0:	f006 fdab 	bl	1ec4a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   180f4:	6833      	ldr	r3, [r6, #0]
   180f6:	6820      	ldr	r0, [r4, #0]
   180f8:	68db      	ldr	r3, [r3, #12]
   180fa:	a901      	add	r1, sp, #4
   180fc:	4798      	blx	r3
		break;
   180fe:	e6a2      	b.n	17e46 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   18100:	2104      	movs	r1, #4
   18102:	eb0d 0001 	add.w	r0, sp, r1
   18106:	f001 fd5b 	bl	19bc0 <bt_rand>
   1810a:	2800      	cmp	r0, #0
   1810c:	f47f aeb9 	bne.w	17e82 <smp_pairing_req+0x4e>
			passkey %= 1000000;
   18110:	9901      	ldr	r1, [sp, #4]
   18112:	4a1c      	ldr	r2, [pc, #112]	; (18184 <smp_pairing_req+0x350>)
		if (bt_auth && bt_auth->passkey_display) {
   18114:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1817c <smp_pairing_req+0x348>
			passkey %= 1000000;
   18118:	fbb1 f3f2 	udiv	r3, r1, r2
   1811c:	fb02 1313 	mls	r3, r2, r3, r1
   18120:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   18122:	f8d8 3000 	ldr.w	r3, [r8]
   18126:	b15b      	cbz	r3, 18140 <smp_pairing_req+0x30c>
   18128:	681b      	ldr	r3, [r3, #0]
   1812a:	b14b      	cbz	r3, 18140 <smp_pairing_req+0x30c>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1812c:	210a      	movs	r1, #10
   1812e:	4628      	mov	r0, r5
   18130:	f006 fd8b 	bl	1ec4a <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   18134:	f8d8 3000 	ldr.w	r3, [r8]
   18138:	9901      	ldr	r1, [sp, #4]
   1813a:	681b      	ldr	r3, [r3, #0]
   1813c:	4630      	mov	r0, r6
   1813e:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   18140:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   18142:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
   18146:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1814a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1814c:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
   18150:	0a1b      	lsrs	r3, r3, #8
   18152:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
   18156:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
}
   1815a:	e674      	b.n	17e46 <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1815c:	4628      	mov	r0, r5
   1815e:	2109      	movs	r1, #9
   18160:	f006 fd73 	bl	1ec4a <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   18164:	4b05      	ldr	r3, [pc, #20]	; (1817c <smp_pairing_req+0x348>)
   18166:	681b      	ldr	r3, [r3, #0]
   18168:	685b      	ldr	r3, [r3, #4]
   1816a:	4630      	mov	r0, r6
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1816c:	4798      	blx	r3
		return 0;
   1816e:	e66a      	b.n	17e46 <smp_pairing_req+0x12>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18170:	2702      	movs	r7, #2
	return legacy_request_tk(smp);
   18172:	e668      	b.n	17e46 <smp_pairing_req+0x12>
   18174:	20002df0 	.word	0x20002df0
   18178:	000210f5 	.word	0x000210f5
   1817c:	20002794 	.word	0x20002794
   18180:	0002110e 	.word	0x0002110e
   18184:	000f4240 	.word	0x000f4240
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
   18188:	7ab2      	ldrb	r2, [r6, #10]
   1818a:	2a04      	cmp	r2, #4
   1818c:	461f      	mov	r7, r3
   1818e:	d116      	bne.n	181be <smp_pairing_req+0x38a>
	     conn->required_sec_level == BT_SECURITY_L4) &&
   18190:	2b00      	cmp	r3, #0
   18192:	f43f af5f 	beq.w	18054 <smp_pairing_req+0x220>
	return MIN(req->max_key_size, rsp->max_key_size);
   18196:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
   1819a:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
	     conn->required_sec_level == BT_SECURITY_L4) &&
   1819e:	4293      	cmp	r3, r2
   181a0:	bf28      	it	cs
   181a2:	4613      	movcs	r3, r2
   181a4:	2b10      	cmp	r3, #16
   181a6:	f47f ae4d 	bne.w	17e44 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   181aa:	210c      	movs	r1, #12
   181ac:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   181b0:	f006 fd4b 	bl	1ec4a <atomic_set_bit>
	return send_pairing_rsp(smp);
   181b4:	4620      	mov	r0, r4
   181b6:	f006 fe60 	bl	1ee7a <send_pairing_rsp>
   181ba:	4607      	mov	r7, r0
   181bc:	e643      	b.n	17e46 <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   181be:	2b00      	cmp	r3, #0
   181c0:	d1f3      	bne.n	181aa <smp_pairing_req+0x376>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   181c2:	210e      	movs	r1, #14
   181c4:	4628      	mov	r0, r5
   181c6:	f006 fe16 	bl	1edf6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   181ca:	2800      	cmp	r0, #0
   181cc:	d1ed      	bne.n	181aa <smp_pairing_req+0x376>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   181ce:	4e04      	ldr	r6, [pc, #16]	; (181e0 <smp_pairing_req+0x3ac>)
   181d0:	6833      	ldr	r3, [r6, #0]
   181d2:	2b00      	cmp	r3, #0
   181d4:	d0e9      	beq.n	181aa <smp_pairing_req+0x376>
	    bt_auth && bt_auth->pairing_confirm) {
   181d6:	695b      	ldr	r3, [r3, #20]
   181d8:	2b00      	cmp	r3, #0
   181da:	d0e6      	beq.n	181aa <smp_pairing_req+0x376>
   181dc:	e701      	b.n	17fe2 <smp_pairing_req+0x1ae>
   181de:	bf00      	nop
   181e0:	20002794 	.word	0x20002794

000181e4 <smp_pairing_complete>:
{
   181e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181e8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 18280 <smp_pairing_complete+0x9c>
   181ec:	4604      	mov	r4, r0
   181ee:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (!status) {
   181f2:	460d      	mov	r5, r1
   181f4:	b981      	cbnz	r1, 18218 <smp_pairing_complete+0x34>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   181f6:	210c      	movs	r1, #12
   181f8:	4638      	mov	r0, r7
   181fa:	f006 fdfc 	bl	1edf6 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
   181fe:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   18202:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
   18204:	b11b      	cbz	r3, 1820e <smp_pairing_complete+0x2a>
   18206:	699b      	ldr	r3, [r3, #24]
   18208:	b10b      	cbz	r3, 1820e <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   1820a:	6820      	ldr	r0, [r4, #0]
   1820c:	4798      	blx	r3
	smp_reset(smp);
   1820e:	4620      	mov	r0, r4
}
   18210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
   18214:	f006 bec9 	b.w	1efaa <smp_reset>
	switch (smp_err) {
   18218:	1e4b      	subs	r3, r1, #1
   1821a:	b2db      	uxtb	r3, r3
   1821c:	2b0d      	cmp	r3, #13
   1821e:	bf9c      	itt	ls
   18220:	4a16      	ldrls	r2, [pc, #88]	; (1827c <smp_pairing_complete+0x98>)
   18222:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
   18224:	6803      	ldr	r3, [r0, #0]
   18226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
   1822a:	bf88      	it	hi
   1822c:	2608      	movhi	r6, #8
		if (smp->chan.chan.conn->le.keys &&
   1822e:	b153      	cbz	r3, 18246 <smp_pairing_complete+0x62>
   18230:	7b1b      	ldrb	r3, [r3, #12]
   18232:	b9db      	cbnz	r3, 1826c <smp_pairing_complete+0x88>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
   18234:	6823      	ldr	r3, [r4, #0]
   18236:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   1823a:	f007 f9d0 	bl	1f5de <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
   1823e:	6823      	ldr	r3, [r4, #0]
   18240:	2200      	movs	r2, #0
   18242:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   18246:	2102      	movs	r1, #2
   18248:	4638      	mov	r0, r7
   1824a:	f006 fdd4 	bl	1edf6 <atomic_test_bit>
   1824e:	b920      	cbnz	r0, 1825a <smp_pairing_complete+0x76>
			bt_conn_security_changed(smp->chan.chan.conn, status,
   18250:	6820      	ldr	r0, [r4, #0]
   18252:	4632      	mov	r2, r6
   18254:	4629      	mov	r1, r5
   18256:	f7fd fc77 	bl	15b48 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   1825a:	f8d8 3000 	ldr.w	r3, [r8]
   1825e:	2b00      	cmp	r3, #0
   18260:	d0d5      	beq.n	1820e <smp_pairing_complete+0x2a>
   18262:	69db      	ldr	r3, [r3, #28]
   18264:	2b00      	cmp	r3, #0
   18266:	d0d2      	beq.n	1820e <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   18268:	4631      	mov	r1, r6
   1826a:	e7ce      	b.n	1820a <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1826c:	2102      	movs	r1, #2
   1826e:	4638      	mov	r0, r7
   18270:	f006 fdc1 	bl	1edf6 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
   18274:	2800      	cmp	r0, #0
   18276:	d1dd      	bne.n	18234 <smp_pairing_complete+0x50>
   18278:	e7e5      	b.n	18246 <smp_pairing_complete+0x62>
   1827a:	bf00      	nop
   1827c:	000210e7 	.word	0x000210e7
   18280:	20002794 	.word	0x20002794

00018284 <bt_smp_dhkey_ready>:
{
   18284:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
   18286:	2107      	movs	r1, #7
{
   18288:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
   1828a:	4816      	ldr	r0, [pc, #88]	; (182e4 <bt_smp_dhkey_ready+0x60>)
   1828c:	f006 fe75 	bl	1ef7a <atomic_test_and_clear_bit>
   18290:	b338      	cbz	r0, 182e2 <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
   18292:	b92c      	cbnz	r4, 182a0 <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
   18294:	210b      	movs	r1, #11
}
   18296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1829a:	4813      	ldr	r0, [pc, #76]	; (182e8 <bt_smp_dhkey_ready+0x64>)
   1829c:	f006 beb0 	b.w	1f000 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
   182a0:	4621      	mov	r1, r4
   182a2:	4812      	ldr	r0, [pc, #72]	; (182ec <bt_smp_dhkey_ready+0x68>)
   182a4:	2220      	movs	r2, #32
   182a6:	f004 fd28 	bl	1ccfa <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   182aa:	480e      	ldr	r0, [pc, #56]	; (182e4 <bt_smp_dhkey_ready+0x60>)
   182ac:	2109      	movs	r1, #9
   182ae:	f006 fda2 	bl	1edf6 <atomic_test_bit>
   182b2:	b128      	cbz	r0, 182c0 <bt_smp_dhkey_ready+0x3c>
}
   182b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   182b8:	480a      	ldr	r0, [pc, #40]	; (182e4 <bt_smp_dhkey_ready+0x60>)
   182ba:	2108      	movs	r1, #8
   182bc:	f006 bcc5 	b.w	1ec4a <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   182c0:	4808      	ldr	r0, [pc, #32]	; (182e4 <bt_smp_dhkey_ready+0x60>)
   182c2:	210f      	movs	r1, #15
   182c4:	f006 fd97 	bl	1edf6 <atomic_test_bit>
   182c8:	2800      	cmp	r0, #0
   182ca:	d1f3      	bne.n	182b4 <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   182cc:	4805      	ldr	r0, [pc, #20]	; (182e4 <bt_smp_dhkey_ready+0x60>)
   182ce:	2108      	movs	r1, #8
   182d0:	f006 fd91 	bl	1edf6 <atomic_test_bit>
   182d4:	b128      	cbz	r0, 182e2 <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
   182d6:	4804      	ldr	r0, [pc, #16]	; (182e8 <bt_smp_dhkey_ready+0x64>)
   182d8:	f7ff fbb6 	bl	17a48 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   182dc:	4601      	mov	r1, r0
   182de:	2800      	cmp	r0, #0
   182e0:	d1d9      	bne.n	18296 <bt_smp_dhkey_ready+0x12>
}
   182e2:	bd10      	pop	{r4, pc}
   182e4:	2000226c 	.word	0x2000226c
   182e8:	200021b0 	.word	0x200021b0
   182ec:	200022ff 	.word	0x200022ff

000182f0 <bt_smp_recv>:
{
   182f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   182f2:	898b      	ldrh	r3, [r1, #12]
{
   182f4:	4604      	mov	r4, r0
   182f6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   182f8:	b38b      	cbz	r3, 1835e <bt_smp_recv+0x6e>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   182fa:	2101      	movs	r1, #1
   182fc:	f105 0008 	add.w	r0, r5, #8
   18300:	f007 f9f9 	bl	1f6f6 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18304:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   18306:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18308:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1830c:	f006 fd73 	bl	1edf6 <atomic_test_bit>
   18310:	bb28      	cbnz	r0, 1835e <bt_smp_recv+0x6e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
   18312:	7831      	ldrb	r1, [r6, #0]
   18314:	290d      	cmp	r1, #13
   18316:	d803      	bhi.n	18320 <bt_smp_recv+0x30>
   18318:	4f12      	ldr	r7, [pc, #72]	; (18364 <bt_smp_recv+0x74>)
   1831a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1831e:	b923      	cbnz	r3, 1832a <bt_smp_recv+0x3a>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   18320:	2107      	movs	r1, #7
		smp_error(smp, err);
   18322:	4620      	mov	r0, r4
   18324:	f006 fe6c 	bl	1f000 <smp_error>
   18328:	e019      	b.n	1835e <bt_smp_recv+0x6e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
   1832a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1832e:	f006 fe24 	bl	1ef7a <atomic_test_and_clear_bit>
   18332:	7833      	ldrb	r3, [r6, #0]
   18334:	b918      	cbnz	r0, 1833e <bt_smp_recv+0x4e>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   18336:	2b05      	cmp	r3, #5
   18338:	d011      	beq.n	1835e <bt_smp_recv+0x6e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1833a:	2108      	movs	r1, #8
   1833c:	e7f1      	b.n	18322 <bt_smp_recv+0x32>
	if (buf->len != handlers[hdr->code].expect_len) {
   1833e:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   18342:	89a9      	ldrh	r1, [r5, #12]
   18344:	7912      	ldrb	r2, [r2, #4]
   18346:	4291      	cmp	r1, r2
   18348:	d001      	beq.n	1834e <bt_smp_recv+0x5e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1834a:	210a      	movs	r1, #10
   1834c:	e7e9      	b.n	18322 <bt_smp_recv+0x32>
	err = handlers[hdr->code].func(smp, buf);
   1834e:	4629      	mov	r1, r5
   18350:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   18354:	4620      	mov	r0, r4
   18356:	4798      	blx	r3
	if (err) {
   18358:	4601      	mov	r1, r0
   1835a:	2800      	cmp	r0, #0
   1835c:	d1e1      	bne.n	18322 <bt_smp_recv+0x32>
}
   1835e:	2000      	movs	r0, #0
   18360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18362:	bf00      	nop
   18364:	00020c24 	.word	0x00020c24

00018368 <smp_pairing_failed>:
{
   18368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1836a:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1836c:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1836e:	f855 7bbc 	ldr.w	r7, [r5], #188
{
   18372:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   18374:	2109      	movs	r1, #9
   18376:	4628      	mov	r0, r5
   18378:	f006 fdff 	bl	1ef7a <atomic_test_and_clear_bit>
   1837c:	b140      	cbz	r0, 18390 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   1837e:	4b0b      	ldr	r3, [pc, #44]	; (183ac <smp_pairing_failed+0x44>)
   18380:	681b      	ldr	r3, [r3, #0]
   18382:	b963      	cbnz	r3, 1839e <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   18384:	4620      	mov	r0, r4
   18386:	7831      	ldrb	r1, [r6, #0]
   18388:	f7ff ff2c 	bl	181e4 <smp_pairing_complete>
}
   1838c:	2000      	movs	r0, #0
   1838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   18390:	210a      	movs	r1, #10
   18392:	4628      	mov	r0, r5
   18394:	f006 fdf1 	bl	1ef7a <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   18398:	2800      	cmp	r0, #0
   1839a:	d1f0      	bne.n	1837e <smp_pairing_failed+0x16>
   1839c:	e7f2      	b.n	18384 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   1839e:	691b      	ldr	r3, [r3, #16]
   183a0:	2b00      	cmp	r3, #0
   183a2:	d0ef      	beq.n	18384 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   183a4:	4638      	mov	r0, r7
   183a6:	4798      	blx	r3
   183a8:	e7ec      	b.n	18384 <smp_pairing_failed+0x1c>
   183aa:	bf00      	nop
   183ac:	20002794 	.word	0x20002794

000183b0 <bt_smp_encrypt_change>:
{
   183b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
   183b4:	4605      	mov	r5, r0
{
   183b6:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   183b8:	f855 7bbc 	ldr.w	r7, [r5], #188
{
   183bc:	b089      	sub	sp, #36	; 0x24
   183be:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   183c0:	2101      	movs	r1, #1
   183c2:	4628      	mov	r0, r5
   183c4:	f006 fc4f 	bl	1ec66 <atomic_clear_bit>
	if (hci_status) {
   183c8:	b946      	cbnz	r6, 183dc <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
   183ca:	7afb      	ldrb	r3, [r7, #11]
   183cc:	b133      	cbz	r3, 183dc <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   183ce:	2103      	movs	r1, #3
   183d0:	f006 fd11 	bl	1edf6 <atomic_test_bit>
   183d4:	b928      	cbnz	r0, 183e2 <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
   183d6:	4620      	mov	r0, r4
   183d8:	f006 fde7 	bl	1efaa <smp_reset>
}
   183dc:	b009      	add	sp, #36	; 0x24
   183de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   183e2:	2105      	movs	r1, #5
   183e4:	4628      	mov	r0, r5
   183e6:	f006 fd06 	bl	1edf6 <atomic_test_bit>
   183ea:	b198      	cbz	r0, 18414 <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   183ec:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   183f0:	071f      	lsls	r7, r3, #28
   183f2:	d507      	bpl.n	18404 <bt_smp_encrypt_change+0x54>
   183f4:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   183f8:	071e      	lsls	r6, r3, #28
   183fa:	d503      	bpl.n	18404 <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   183fc:	2110      	movs	r1, #16
   183fe:	4628      	mov	r0, r5
   18400:	f006 fc23 	bl	1ec4a <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   18404:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
   18408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1840c:	f023 0308 	bic.w	r3, r3, #8
   18410:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   18414:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   18418:	07d8      	lsls	r0, r3, #31
   1841a:	d57a      	bpl.n	18512 <bt_smp_encrypt_change+0x162>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1841c:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1841e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   18422:	f006 fc12 	bl	1ec4a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   18426:	2102      	movs	r1, #2
   18428:	4628      	mov	r0, r5
   1842a:	f006 fc0e 	bl	1ec4a <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
   1842e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   18430:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   18434:	2b00      	cmp	r3, #0
   18436:	d0d1      	beq.n	183dc <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18438:	2105      	movs	r1, #5
   1843a:	f006 fcdc 	bl	1edf6 <atomic_test_bit>
   1843e:	4680      	mov	r8, r0
   18440:	2800      	cmp	r0, #0
   18442:	d15d      	bne.n	18500 <bt_smp_encrypt_change+0x150>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   18444:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   18448:	07db      	lsls	r3, r3, #31
   1844a:	d559      	bpl.n	18500 <bt_smp_encrypt_change+0x150>
	struct bt_keys *keys = conn->le.keys;
   1844c:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
   1844e:	211a      	movs	r1, #26
   18450:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   18452:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
   18456:	f001 fbb3 	bl	19bc0 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1845a:	2106      	movs	r1, #6
   1845c:	4620      	mov	r0, r4
   1845e:	f006 fcd3 	bl	1ee08 <smp_create_pdu.isra.0>
		if (!buf) {
   18462:	4607      	mov	r7, r0
   18464:	2800      	cmp	r0, #0
   18466:	d04b      	beq.n	18500 <bt_smp_encrypt_change+0x150>
		info = net_buf_add(buf, sizeof(*info));
   18468:	2110      	movs	r1, #16
   1846a:	3008      	adds	r0, #8
   1846c:	f007 f91c 	bl	1f6a8 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   18470:	7b32      	ldrb	r2, [r6, #12]
   18472:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
   18474:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
   18476:	f004 fc40 	bl	1ccfa <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1847a:	7b30      	ldrb	r0, [r6, #12]
   1847c:	280f      	cmp	r0, #15
   1847e:	d805      	bhi.n	1848c <bt_smp_encrypt_change+0xdc>
			(void)memset(info->ltk + keys->enc_size, 0,
   18480:	f1c0 0210 	rsb	r2, r0, #16
   18484:	4641      	mov	r1, r8
   18486:	4448      	add	r0, r9
   18488:	f004 fc62 	bl	1cd50 <memset>
		smp_send(smp, buf, NULL, NULL);
   1848c:	4639      	mov	r1, r7
   1848e:	2200      	movs	r2, #0
   18490:	4620      	mov	r0, r4
   18492:	f7ff fac1 	bl	17a18 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   18496:	2107      	movs	r1, #7
   18498:	4620      	mov	r0, r4
   1849a:	f006 fcb5 	bl	1ee08 <smp_create_pdu.isra.0>
		if (!buf) {
   1849e:	4607      	mov	r7, r0
   184a0:	b370      	cbz	r0, 18500 <bt_smp_encrypt_change+0x150>
		ident = net_buf_add(buf, sizeof(*ident));
   184a2:	210a      	movs	r1, #10
   184a4:	3008      	adds	r0, #8
   184a6:	f007 f8ff 	bl	1f6a8 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   184aa:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
   184ac:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   184ae:	a905      	add	r1, sp, #20
   184b0:	3002      	adds	r0, #2
   184b2:	f004 fc22 	bl	1ccfa <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   184b6:	2202      	movs	r2, #2
   184b8:	a907      	add	r1, sp, #28
   184ba:	4640      	mov	r0, r8
   184bc:	f004 fc1d 	bl	1ccfa <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   184c0:	4639      	mov	r1, r7
   184c2:	4620      	mov	r0, r4
   184c4:	4a17      	ldr	r2, [pc, #92]	; (18524 <bt_smp_encrypt_change+0x174>)
   184c6:	f7ff faa7 	bl	17a18 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   184ca:	210c      	movs	r1, #12
   184cc:	4628      	mov	r0, r5
   184ce:	f006 fc92 	bl	1edf6 <atomic_test_bit>
   184d2:	b1a8      	cbz	r0, 18500 <bt_smp_encrypt_change+0x150>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   184d4:	2101      	movs	r1, #1
   184d6:	4630      	mov	r0, r6
   184d8:	f007 f87d 	bl	1f5d6 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   184dc:	2210      	movs	r2, #16
   184de:	a901      	add	r1, sp, #4
   184e0:	f106 004a 	add.w	r0, r6, #74	; 0x4a
   184e4:	f004 fc09 	bl	1ccfa <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   184e8:	2208      	movs	r2, #8
   184ea:	a905      	add	r1, sp, #20
   184ec:	f106 0040 	add.w	r0, r6, #64	; 0x40
   184f0:	f004 fc03 	bl	1ccfa <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   184f4:	2202      	movs	r2, #2
   184f6:	a907      	add	r1, sp, #28
   184f8:	f106 0048 	add.w	r0, r6, #72	; 0x48
   184fc:	f004 fbfd 	bl	1ccfa <memcpy>
	if (!smp->local_dist && !smp->remote_dist) {
   18500:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   18504:	2900      	cmp	r1, #0
   18506:	f47f af69 	bne.w	183dc <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
   1850a:	4620      	mov	r0, r4
   1850c:	f7ff fe6a 	bl	181e4 <smp_pairing_complete>
   18510:	e764      	b.n	183dc <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   18512:	0799      	lsls	r1, r3, #30
   18514:	d501      	bpl.n	1851a <bt_smp_encrypt_change+0x16a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   18516:	2108      	movs	r1, #8
   18518:	e781      	b.n	1841e <bt_smp_encrypt_change+0x6e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1851a:	075a      	lsls	r2, r3, #29
   1851c:	d583      	bpl.n	18426 <bt_smp_encrypt_change+0x76>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1851e:	210a      	movs	r1, #10
   18520:	e77d      	b.n	1841e <bt_smp_encrypt_change+0x6e>
   18522:	bf00      	nop
   18524:	0001f0cf 	.word	0x0001f0cf

00018528 <bt_smp_connected>:
{
   18528:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
   1852a:	4905      	ldr	r1, [pc, #20]	; (18540 <bt_smp_connected+0x18>)
{
   1852c:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
   1852e:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   18532:	f007 fd4d 	bl	1ffd0 <k_delayed_work_init>
	smp_reset(smp);
   18536:	4620      	mov	r0, r4
}
   18538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1853c:	f006 bd35 	b.w	1efaa <smp_reset>
   18540:	0001f03d 	.word	0x0001f03d

00018544 <smp_pairing_random>:
{
   18544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18548:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1854a:	f100 07ef 	add.w	r7, r0, #239	; 0xef
   1854e:	6889      	ldr	r1, [r1, #8]
{
   18550:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   18552:	2210      	movs	r2, #16
   18554:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18556:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1855a:	f004 fbce 	bl	1ccfa <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1855e:	2105      	movs	r1, #5
   18560:	4630      	mov	r0, r6
   18562:	f006 fc48 	bl	1edf6 <atomic_test_bit>
   18566:	2800      	cmp	r0, #0
   18568:	d13d      	bne.n	185e6 <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
   1856a:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1856c:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
   1856e:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18572:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   18574:	f103 0296 	add.w	r2, r3, #150	; 0x96
   18578:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1857a:	9201      	str	r2, [sp, #4]
   1857c:	9300      	str	r3, [sp, #0]
   1857e:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
   18582:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
   18586:	4639      	mov	r1, r7
   18588:	4640      	mov	r0, r8
   1858a:	f006 fdb5 	bl	1f0f8 <smp_c1>
	if (err) {
   1858e:	b108      	cbz	r0, 18594 <smp_pairing_random+0x50>
	switch (smp->method) {
   18590:	2508      	movs	r5, #8
   18592:	e096      	b.n	186c2 <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   18594:	2210      	movs	r2, #16
   18596:	4629      	mov	r1, r5
   18598:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   1859c:	f004 fb9d 	bl	1ccda <memcmp>
   185a0:	2800      	cmp	r0, #0
   185a2:	f040 808d 	bne.w	186c0 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
   185a6:	2208      	movs	r2, #8
   185a8:	4639      	mov	r1, r7
   185aa:	4628      	mov	r0, r5
   185ac:	f004 fba5 	bl	1ccfa <memcpy>
	memcpy(out + 8, r1, 8);
   185b0:	2208      	movs	r2, #8
   185b2:	f104 01df 	add.w	r1, r4, #223	; 0xdf
   185b6:	a80c      	add	r0, sp, #48	; 0x30
   185b8:	f004 fb9f 	bl	1ccfa <memcpy>
	return bt_encrypt_le(k, out, out);
   185bc:	462a      	mov	r2, r5
   185be:	4629      	mov	r1, r5
   185c0:	4640      	mov	r0, r8
   185c2:	f007 f9c8 	bl	1f956 <bt_encrypt_le>
		if (err) {
   185c6:	2800      	cmp	r0, #0
   185c8:	d1e2      	bne.n	18590 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   185ca:	4629      	mov	r1, r5
   185cc:	2210      	movs	r2, #16
   185ce:	4640      	mov	r0, r8
   185d0:	f004 fb93 	bl	1ccfa <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   185d4:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   185d6:	4630      	mov	r0, r6
   185d8:	f006 fb37 	bl	1ec4a <atomic_set_bit>
	return smp_send_pairing_random(smp);
   185dc:	4620      	mov	r0, r4
   185de:	f006 fc33 	bl	1ee48 <smp_send_pairing_random>
   185e2:	4605      	mov	r5, r0
   185e4:	e06d      	b.n	186c2 <smp_pairing_random+0x17e>
	switch (smp->method) {
   185e6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   185ea:	2b05      	cmp	r3, #5
   185ec:	d8d0      	bhi.n	18590 <smp_pairing_random+0x4c>
   185ee:	a201      	add	r2, pc, #4	; (adr r2, 185f4 <smp_pairing_random+0xb0>)
   185f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   185f4:	0001867b 	.word	0x0001867b
   185f8:	00018689 	.word	0x00018689
   185fc:	00018689 	.word	0x00018689
   18600:	0001860d 	.word	0x0001860d
   18604:	00018591 	.word	0x00018591
   18608:	00018715 	.word	0x00018715
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1860c:	4b5a      	ldr	r3, [pc, #360]	; (18778 <smp_pairing_random+0x234>)
   1860e:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   18610:	2220      	movs	r2, #32
   18612:	f204 110f 	addw	r1, r4, #271	; 0x10f
   18616:	a80a      	add	r0, sp, #40	; 0x28
   18618:	f006 fb03 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1861c:	2220      	movs	r2, #32
   1861e:	4629      	mov	r1, r5
   18620:	a812      	add	r0, sp, #72	; 0x48
   18622:	f006 fafe 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   18626:	2210      	movs	r2, #16
   18628:	f104 01df 	add.w	r1, r4, #223	; 0xdf
   1862c:	a81a      	add	r0, sp, #104	; 0x68
   1862e:	f006 faf8 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   18632:	2210      	movs	r2, #16
   18634:	4639      	mov	r1, r7
   18636:	a806      	add	r0, sp, #24
   18638:	f006 faf3 	bl	1ec22 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1863c:	ab06      	add	r3, sp, #24
   1863e:	2250      	movs	r2, #80	; 0x50
   18640:	a90a      	add	r1, sp, #40	; 0x28
   18642:	4618      	mov	r0, r3
   18644:	f006 fb1e 	bl	1ec84 <bt_smp_aes_cmac>
	if (err) {
   18648:	2800      	cmp	r0, #0
   1864a:	d1a1      	bne.n	18590 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
   1864c:	2204      	movs	r2, #4
   1864e:	a909      	add	r1, sp, #36	; 0x24
   18650:	a805      	add	r0, sp, #20
   18652:	f004 fb52 	bl	1ccfa <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18656:	9b05      	ldr	r3, [sp, #20]
   18658:	4948      	ldr	r1, [pc, #288]	; (1877c <smp_pairing_random+0x238>)
   1865a:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1865c:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1865e:	fbb3 f2f1 	udiv	r2, r3, r1
   18662:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18666:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18668:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1866a:	f006 faee 	bl	1ec4a <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1866e:	4b44      	ldr	r3, [pc, #272]	; (18780 <smp_pairing_random+0x23c>)
   18670:	9905      	ldr	r1, [sp, #20]
   18672:	681b      	ldr	r3, [r3, #0]
   18674:	6820      	ldr	r0, [r4, #0]
   18676:	689b      	ldr	r3, [r3, #8]
   18678:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1867a:	210d      	movs	r1, #13
   1867c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   18680:	f006 fae3 	bl	1ec4a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18684:	210f      	movs	r1, #15
   18686:	e7a6      	b.n	185d6 <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18688:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   1868c:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18690:	4939      	ldr	r1, [pc, #228]	; (18778 <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18692:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18694:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18696:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1869a:	9500      	str	r5, [sp, #0]
   1869c:	6809      	ldr	r1, [r1, #0]
   1869e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   186a2:	463a      	mov	r2, r7
   186a4:	f204 100f 	addw	r0, r4, #271	; 0x10f
   186a8:	f006 fb7e 	bl	1eda8 <smp_f4>
   186ac:	2800      	cmp	r0, #0
   186ae:	f47f af6f 	bne.w	18590 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
   186b2:	2210      	movs	r2, #16
   186b4:	4629      	mov	r1, r5
   186b6:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   186ba:	f004 fb0e 	bl	1ccda <memcmp>
   186be:	b120      	cbz	r0, 186ca <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
   186c0:	2504      	movs	r5, #4
}
   186c2:	4628      	mov	r0, r5
   186c4:	b01e      	add	sp, #120	; 0x78
   186c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
   186ca:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   186ce:	2103      	movs	r1, #3
   186d0:	4638      	mov	r0, r7
   186d2:	f006 faba 	bl	1ec4a <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   186d6:	4620      	mov	r0, r4
   186d8:	f006 fbb6 	bl	1ee48 <smp_send_pairing_random>
		if (err) {
   186dc:	4605      	mov	r5, r0
   186de:	2800      	cmp	r0, #0
   186e0:	d1ef      	bne.n	186c2 <smp_pairing_random+0x17e>
		smp->passkey_round++;
   186e2:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   186e6:	3301      	adds	r3, #1
   186e8:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   186ea:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   186ec:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
   186f0:	d108      	bne.n	18704 <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   186f2:	4638      	mov	r0, r7
   186f4:	210d      	movs	r1, #13
   186f6:	f006 faa8 	bl	1ec4a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   186fa:	210f      	movs	r1, #15
   186fc:	4630      	mov	r0, r6
   186fe:	f006 faa4 	bl	1ec4a <atomic_set_bit>
			return 0;
   18702:	e7de      	b.n	186c2 <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
   18704:	2110      	movs	r1, #16
   18706:	f104 00df 	add.w	r0, r4, #223	; 0xdf
   1870a:	f001 fa59 	bl	19bc0 <bt_rand>
   1870e:	2800      	cmp	r0, #0
   18710:	d0d7      	beq.n	186c2 <smp_pairing_random+0x17e>
   18712:	e73d      	b.n	18590 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
   18714:	2110      	movs	r1, #16
   18716:	f104 00df 	add.w	r0, r4, #223	; 0xdf
   1871a:	f001 fa51 	bl	19bc0 <bt_rand>
   1871e:	2800      	cmp	r0, #0
   18720:	f47f af36 	bne.w	18590 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
   18724:	4f16      	ldr	r7, [pc, #88]	; (18780 <smp_pairing_random+0x23c>)
   18726:	683b      	ldr	r3, [r7, #0]
   18728:	b193      	cbz	r3, 18750 <smp_pairing_random+0x20c>
   1872a:	68db      	ldr	r3, [r3, #12]
   1872c:	b183      	cbz	r3, 18750 <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
   1872e:	4b15      	ldr	r3, [pc, #84]	; (18784 <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18730:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
   18734:	881b      	ldrh	r3, [r3, #0]
   18736:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1873a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1873e:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18740:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18744:	d406      	bmi.n	18754 <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
   18746:	2b00      	cmp	r3, #0
   18748:	bf0c      	ite	eq
   1874a:	2003      	moveq	r0, #3
   1874c:	2001      	movne	r0, #1
   1874e:	e004      	b.n	1875a <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18750:	2502      	movs	r5, #2
   18752:	e7b6      	b.n	186c2 <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
   18754:	2b00      	cmp	r3, #0
   18756:	bf18      	it	ne
   18758:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1875a:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1875c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   18760:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   18764:	4630      	mov	r0, r6
   18766:	210b      	movs	r1, #11
   18768:	f006 fa6f 	bl	1ec4a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1876c:	683b      	ldr	r3, [r7, #0]
   1876e:	6820      	ldr	r0, [r4, #0]
   18770:	68db      	ldr	r3, [r3, #12]
   18772:	a90a      	add	r1, sp, #40	; 0x28
   18774:	4798      	blx	r3
			return 0;
   18776:	e7a4      	b.n	186c2 <smp_pairing_random+0x17e>
   18778:	20002828 	.word	0x20002828
   1877c:	000f4240 	.word	0x000f4240
   18780:	20002794 	.word	0x20002794
   18784:	0002065a 	.word	0x0002065a

00018788 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   18788:	4b0f      	ldr	r3, [pc, #60]	; (187c8 <bt_smp_pkey_ready+0x40>)
{
   1878a:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1878c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1878e:	b1d0      	cbz	r0, 187c6 <bt_smp_pkey_ready+0x3e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18790:	4c0e      	ldr	r4, [pc, #56]	; (187cc <bt_smp_pkey_ready+0x44>)
	z_impl_k_sem_give(sem);
   18792:	480f      	ldr	r0, [pc, #60]	; (187d0 <bt_smp_pkey_ready+0x48>)
   18794:	f002 f9c0 	bl	1ab18 <z_impl_k_sem_give>
   18798:	f3bf 8f5b 	dmb	ish
   1879c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   187a0:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   187a4:	065b      	lsls	r3, r3, #25
   187a6:	d50e      	bpl.n	187c6 <bt_smp_pkey_ready+0x3e>
	err = sc_send_public_key(smp);
   187a8:	4620      	mov	r0, r4
   187aa:	f7ff fa31 	bl	17c10 <sc_send_public_key>
	if (err) {
   187ae:	4601      	mov	r1, r0
   187b0:	b920      	cbnz	r0, 187bc <bt_smp_pkey_ready+0x34>
   187b2:	4620      	mov	r0, r4
   187b4:	f7ff fa8e 	bl	17cd4 <smp_public_key_slave.part.0>
		if (err) {
   187b8:	4601      	mov	r1, r0
   187ba:	b120      	cbz	r0, 187c6 <bt_smp_pkey_ready+0x3e>
}
   187bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   187c0:	4802      	ldr	r0, [pc, #8]	; (187cc <bt_smp_pkey_ready+0x44>)
   187c2:	f006 bc1d 	b.w	1f000 <smp_error>
}
   187c6:	bd10      	pop	{r4, pc}
   187c8:	20002828 	.word	0x20002828
   187cc:	200021b0 	.word	0x200021b0
   187d0:	20000834 	.word	0x20000834

000187d4 <bt_smp_start_security>:
{
   187d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   187d8:	78c4      	ldrb	r4, [r0, #3]
   187da:	2c01      	cmp	r4, #1
{
   187dc:	4605      	mov	r5, r0
	switch (conn->role) {
   187de:	d005      	beq.n	187ec <bt_smp_start_security+0x18>
		return -EINVAL;
   187e0:	f06f 0415 	mvn.w	r4, #21
}
   187e4:	4620      	mov	r0, r4
   187e6:	b003      	add	sp, #12
   187e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   187ec:	f006 fa25 	bl	1ec3a <smp_chan_get>
	if (!smp) {
   187f0:	4606      	mov	r6, r0
   187f2:	2800      	cmp	r0, #0
   187f4:	f000 80a1 	beq.w	1893a <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   187f8:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
   187fc:	2104      	movs	r1, #4
   187fe:	4638      	mov	r0, r7
   18800:	f006 faf9 	bl	1edf6 <atomic_test_bit>
   18804:	2800      	cmp	r0, #0
   18806:	f040 809b 	bne.w	18940 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1880a:	2103      	movs	r1, #3
   1880c:	4638      	mov	r0, r7
   1880e:	f006 faf2 	bl	1edf6 <atomic_test_bit>
   18812:	b110      	cbz	r0, 1881a <bt_smp_start_security+0x46>
		return -EBUSY;
   18814:	f06f 040f 	mvn.w	r4, #15
   18818:	e7e4      	b.n	187e4 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1881a:	4621      	mov	r1, r4
   1881c:	4638      	mov	r0, r7
   1881e:	f006 faea 	bl	1edf6 <atomic_test_bit>
   18822:	2800      	cmp	r0, #0
   18824:	d1f6      	bne.n	18814 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   18826:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   18828:	2b03      	cmp	r3, #3
   1882a:	d03d      	beq.n	188a8 <bt_smp_start_security+0xd4>
   1882c:	d82c      	bhi.n	18888 <bt_smp_start_security+0xb4>
   1882e:	3b01      	subs	r3, #1
   18830:	2b01      	cmp	r3, #1
   18832:	d947      	bls.n	188c4 <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   18834:	210b      	movs	r1, #11
   18836:	1d28      	adds	r0, r5, #4
   18838:	f006 fadd 	bl	1edf6 <atomic_test_bit>
   1883c:	2800      	cmp	r0, #0
   1883e:	d1cf      	bne.n	187e0 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   18840:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   18844:	b983      	cbnz	r3, 18868 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
   18846:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1884a:	7a29      	ldrb	r1, [r5, #8]
   1884c:	4622      	mov	r2, r4
   1884e:	2020      	movs	r0, #32
   18850:	f000 f8ca 	bl	189e8 <bt_keys_find>
   18854:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   18858:	b930      	cbnz	r0, 18868 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1885a:	7a29      	ldrb	r1, [r5, #8]
   1885c:	4622      	mov	r2, r4
   1885e:	2004      	movs	r0, #4
   18860:	f000 f8c2 	bl	189e8 <bt_keys_find>
   18864:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   18868:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1886c:	2b00      	cmp	r3, #0
   1886e:	d0b7      	beq.n	187e0 <bt_smp_start_security+0xc>
   18870:	89da      	ldrh	r2, [r3, #14]
   18872:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18876:	2a00      	cmp	r2, #0
   18878:	d0b2      	beq.n	187e0 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1887a:	7aaa      	ldrb	r2, [r5, #10]
   1887c:	2a02      	cmp	r2, #2
   1887e:	d921      	bls.n	188c4 <bt_smp_start_security+0xf0>
   18880:	7b5b      	ldrb	r3, [r3, #13]
   18882:	07db      	lsls	r3, r3, #31
   18884:	d5ac      	bpl.n	187e0 <bt_smp_start_security+0xc>
   18886:	e01d      	b.n	188c4 <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
   18888:	2b04      	cmp	r3, #4
   1888a:	d1d3      	bne.n	18834 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1888c:	f7ff f854 	bl	17938 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   18890:	2803      	cmp	r0, #3
   18892:	d104      	bne.n	1889e <bt_smp_start_security+0xca>
   18894:	4b2c      	ldr	r3, [pc, #176]	; (18948 <bt_smp_start_security+0x174>)
   18896:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   18898:	b1fb      	cbz	r3, 188da <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1889a:	68dc      	ldr	r4, [r3, #12]
   1889c:	b10c      	cbz	r4, 188a2 <bt_smp_start_security+0xce>
   1889e:	4b2b      	ldr	r3, [pc, #172]	; (1894c <bt_smp_start_security+0x178>)
   188a0:	781c      	ldrb	r4, [r3, #0]
   188a2:	f004 0401 	and.w	r4, r4, #1
   188a6:	e00b      	b.n	188c0 <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   188a8:	f7ff f846 	bl	17938 <get_io_capa>
   188ac:	2803      	cmp	r0, #3
   188ae:	d107      	bne.n	188c0 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
   188b0:	4b25      	ldr	r3, [pc, #148]	; (18948 <bt_smp_start_security+0x174>)
   188b2:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   188b4:	2c00      	cmp	r4, #0
   188b6:	d0bd      	beq.n	18834 <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
   188b8:	68e4      	ldr	r4, [r4, #12]
   188ba:	3c00      	subs	r4, #0
   188bc:	bf18      	it	ne
   188be:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   188c0:	2c00      	cmp	r4, #0
   188c2:	d0b7      	beq.n	18834 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   188c4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   188c8:	b14b      	cbz	r3, 188de <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
   188ca:	4630      	mov	r0, r6
   188cc:	f7ff f886 	bl	179dc <smp_init>
   188d0:	4604      	mov	r4, r0
   188d2:	b180      	cbz	r0, 188f6 <bt_smp_start_security+0x122>
		return -ENOBUFS;
   188d4:	f06f 0436 	mvn.w	r4, #54	; 0x36
   188d8:	e784      	b.n	187e4 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   188da:	2400      	movs	r4, #0
   188dc:	e7e1      	b.n	188a2 <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   188de:	7a28      	ldrb	r0, [r5, #8]
   188e0:	f105 0188 	add.w	r1, r5, #136	; 0x88
   188e4:	f000 f84a 	bl	1897c <bt_keys_get_addr>
   188e8:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   188ec:	2800      	cmp	r0, #0
   188ee:	d1ec      	bne.n	188ca <bt_smp_start_security+0xf6>
			return -ENOMEM;
   188f0:	f06f 040b 	mvn.w	r4, #11
   188f4:	e776      	b.n	187e4 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   188f6:	210b      	movs	r1, #11
   188f8:	4630      	mov	r0, r6
   188fa:	f006 fa85 	bl	1ee08 <smp_create_pdu.isra.0>
	if (!req_buf) {
   188fe:	4680      	mov	r8, r0
   18900:	2800      	cmp	r0, #0
   18902:	d0e7      	beq.n	188d4 <bt_smp_start_security+0x100>
	req = net_buf_add(req_buf, sizeof(*req));
   18904:	2101      	movs	r1, #1
   18906:	3008      	adds	r0, #8
   18908:	f006 fece 	bl	1f6a8 <net_buf_simple_add>
   1890c:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1890e:	2009      	movs	r0, #9
   18910:	f7ff f846 	bl	179a0 <get_auth.isra.0>
   18914:	4623      	mov	r3, r4
   18916:	f889 0000 	strb.w	r0, [r9]
   1891a:	4642      	mov	r2, r8
   1891c:	9400      	str	r4, [sp, #0]
   1891e:	2106      	movs	r1, #6
   18920:	4628      	mov	r0, r5
   18922:	f005 f8e2 	bl	1daea <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   18926:	4638      	mov	r0, r7
   18928:	210e      	movs	r1, #14
   1892a:	f006 f98e 	bl	1ec4a <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1892e:	2101      	movs	r1, #1
   18930:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
   18934:	f006 f989 	bl	1ec4a <atomic_set_bit>
	return 0;
   18938:	e754      	b.n	187e4 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1893a:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1893e:	e751      	b.n	187e4 <bt_smp_start_security+0x10>
		return -EIO;
   18940:	f06f 0404 	mvn.w	r4, #4
   18944:	e74e      	b.n	187e4 <bt_smp_start_security+0x10>
   18946:	bf00      	nop
   18948:	20002794 	.word	0x20002794
   1894c:	20002df1 	.word	0x20002df1

00018950 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   18950:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18952:	4b07      	ldr	r3, [pc, #28]	; (18970 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   18954:	4807      	ldr	r0, [pc, #28]	; (18974 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18956:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1895a:	f003 0306 	and.w	r3, r3, #6
   1895e:	1f9a      	subs	r2, r3, #6
   18960:	4253      	negs	r3, r2
   18962:	4153      	adcs	r3, r2
   18964:	4a04      	ldr	r2, [pc, #16]	; (18978 <bt_smp_init+0x28>)
   18966:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   18968:	f7fc ff56 	bl	15818 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1896c:	2000      	movs	r0, #0
   1896e:	bd08      	pop	{r3, pc}
   18970:	200003c8 	.word	0x200003c8
   18974:	2000065c 	.word	0x2000065c
   18978:	20002df1 	.word	0x20002df1

0001897c <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1897c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1897e:	4c11      	ldr	r4, [pc, #68]	; (189c4 <bt_keys_get_addr+0x48>)
   18980:	7823      	ldrb	r3, [r4, #0]
   18982:	4283      	cmp	r3, r0
{
   18984:	4605      	mov	r5, r0
   18986:	460e      	mov	r6, r1
   18988:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1898a:	d00b      	beq.n	189a4 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1898c:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1898e:	480e      	ldr	r0, [pc, #56]	; (189c8 <bt_keys_get_addr+0x4c>)
   18990:	9400      	str	r4, [sp, #0]
   18992:	2207      	movs	r2, #7
   18994:	4669      	mov	r1, sp
   18996:	f8cd 4003 	str.w	r4, [sp, #3]
   1899a:	f004 f99e 	bl	1ccda <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1899e:	b140      	cbz	r0, 189b2 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   189a0:	4620      	mov	r0, r4
   189a2:	e00d      	b.n	189c0 <bt_keys_get_addr+0x44>
   189a4:	2207      	movs	r2, #7
   189a6:	1c60      	adds	r0, r4, #1
   189a8:	f004 f997 	bl	1ccda <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   189ac:	2800      	cmp	r0, #0
   189ae:	d1ed      	bne.n	1898c <bt_keys_get_addr+0x10>
   189b0:	e7f6      	b.n	189a0 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   189b2:	4805      	ldr	r0, [pc, #20]	; (189c8 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   189b4:	703d      	strb	r5, [r7, #0]
   189b6:	2207      	movs	r2, #7
   189b8:	4631      	mov	r1, r6
   189ba:	f004 f99e 	bl	1ccfa <memcpy>
		return keys;
   189be:	4801      	ldr	r0, [pc, #4]	; (189c4 <bt_keys_get_addr+0x48>)
}
   189c0:	b003      	add	sp, #12
   189c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   189c4:	2000282c 	.word	0x2000282c
   189c8:	2000282d 	.word	0x2000282d

000189cc <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   189cc:	460b      	mov	r3, r1
   189ce:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   189d0:	4a04      	ldr	r2, [pc, #16]	; (189e4 <bt_keys_foreach+0x18>)
{
   189d2:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   189d4:	89d4      	ldrh	r4, [r2, #14]
   189d6:	4204      	tst	r4, r0
   189d8:	d002      	beq.n	189e0 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   189da:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   189dc:	4610      	mov	r0, r2
   189de:	4718      	bx	r3
}
   189e0:	bc10      	pop	{r4}
   189e2:	4770      	bx	lr
   189e4:	2000282c 	.word	0x2000282c

000189e8 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   189e8:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   189ea:	4c09      	ldr	r4, [pc, #36]	; (18a10 <bt_keys_find+0x28>)
{
   189ec:	460b      	mov	r3, r1
   189ee:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   189f0:	89e2      	ldrh	r2, [r4, #14]
   189f2:	4202      	tst	r2, r0
   189f4:	d007      	beq.n	18a06 <bt_keys_find+0x1e>
   189f6:	7822      	ldrb	r2, [r4, #0]
   189f8:	429a      	cmp	r2, r3
   189fa:	d104      	bne.n	18a06 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   189fc:	2207      	movs	r2, #7
   189fe:	1c60      	adds	r0, r4, #1
   18a00:	f004 f96b 	bl	1ccda <memcmp>
   18a04:	b108      	cbz	r0, 18a0a <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   18a06:	2000      	movs	r0, #0
}
   18a08:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   18a0a:	4620      	mov	r0, r4
   18a0c:	e7fc      	b.n	18a08 <bt_keys_find+0x20>
   18a0e:	bf00      	nop
   18a10:	2000282c 	.word	0x2000282c

00018a14 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   18a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
   18a16:	780b      	ldrb	r3, [r1, #0]
   18a18:	2b01      	cmp	r3, #1
   18a1a:	4607      	mov	r7, r0
   18a1c:	460c      	mov	r4, r1
   18a1e:	d001      	beq.n	18a24 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   18a20:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   18a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   18a24:	798b      	ldrb	r3, [r1, #6]
   18a26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18a2a:	2b40      	cmp	r3, #64	; 0x40
   18a2c:	d1f8      	bne.n	18a20 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18a2e:	4d13      	ldr	r5, [pc, #76]	; (18a7c <bt_keys_find_irk+0x68>)
   18a30:	89eb      	ldrh	r3, [r5, #14]
   18a32:	f013 0f02 	tst.w	r3, #2
   18a36:	462e      	mov	r6, r5
   18a38:	d0f2      	beq.n	18a20 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   18a3a:	7833      	ldrb	r3, [r6, #0]
   18a3c:	42bb      	cmp	r3, r7
   18a3e:	d10b      	bne.n	18a58 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   18a40:	2206      	movs	r2, #6
   18a42:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   18a46:	1c60      	adds	r0, r4, #1
   18a48:	f004 f947 	bl	1ccda <memcmp>
   18a4c:	b908      	cbnz	r0, 18a52 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   18a4e:	4628      	mov	r0, r5
   18a50:	e7e7      	b.n	18a22 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18a52:	89f3      	ldrh	r3, [r6, #14]
   18a54:	079b      	lsls	r3, r3, #30
   18a56:	d5e3      	bpl.n	18a20 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   18a58:	7833      	ldrb	r3, [r6, #0]
   18a5a:	42bb      	cmp	r3, r7
   18a5c:	d1e0      	bne.n	18a20 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   18a5e:	3401      	adds	r4, #1
   18a60:	4807      	ldr	r0, [pc, #28]	; (18a80 <bt_keys_find_irk+0x6c>)
   18a62:	4621      	mov	r1, r4
   18a64:	f004 f9b9 	bl	1cdda <bt_rpa_irk_matches>
   18a68:	2800      	cmp	r0, #0
   18a6a:	d0d9      	beq.n	18a20 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   18a6c:	4805      	ldr	r0, [pc, #20]	; (18a84 <bt_keys_find_irk+0x70>)
   18a6e:	2206      	movs	r2, #6
   18a70:	4621      	mov	r1, r4
   18a72:	f004 f942 	bl	1ccfa <memcpy>
			return &key_pool[i];
   18a76:	4801      	ldr	r0, [pc, #4]	; (18a7c <bt_keys_find_irk+0x68>)
}
   18a78:	e7d3      	b.n	18a22 <bt_keys_find_irk+0xe>
   18a7a:	bf00      	nop
   18a7c:	2000282c 	.word	0x2000282c
   18a80:	20002856 	.word	0x20002856
   18a84:	20002866 	.word	0x20002866

00018a88 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18a88:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   18a8a:	4c06      	ldr	r4, [pc, #24]	; (18aa4 <bt_keys_find_addr+0x1c>)
   18a8c:	7823      	ldrb	r3, [r4, #0]
   18a8e:	4283      	cmp	r3, r0
   18a90:	d104      	bne.n	18a9c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   18a92:	2207      	movs	r2, #7
   18a94:	1c60      	adds	r0, r4, #1
   18a96:	f004 f920 	bl	1ccda <memcmp>
   18a9a:	b108      	cbz	r0, 18aa0 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   18a9c:	2000      	movs	r0, #0
}
   18a9e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   18aa0:	4620      	mov	r0, r4
   18aa2:	e7fc      	b.n	18a9e <bt_keys_find_addr+0x16>
   18aa4:	2000282c 	.word	0x2000282c

00018aa8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   18aa8:	4b02      	ldr	r3, [pc, #8]	; (18ab4 <net_buf_pool_get+0xc>)
   18aaa:	2228      	movs	r2, #40	; 0x28
   18aac:	fb02 3000 	mla	r0, r2, r0, r3
   18ab0:	4770      	bx	lr
   18ab2:	bf00      	nop
   18ab4:	20000894 	.word	0x20000894

00018ab8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18ab8:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   18aba:	4a05      	ldr	r2, [pc, #20]	; (18ad0 <net_buf_id+0x18>)
   18abc:	2128      	movs	r1, #40	; 0x28
   18abe:	fb01 2303 	mla	r3, r1, r3, r2
   18ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18ac4:	1ac0      	subs	r0, r0, r3
}
   18ac6:	4b03      	ldr	r3, [pc, #12]	; (18ad4 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   18ac8:	10c0      	asrs	r0, r0, #3
}
   18aca:	4358      	muls	r0, r3
   18acc:	4770      	bx	lr
   18ace:	bf00      	nop
   18ad0:	20000894 	.word	0x20000894
   18ad4:	aaaaaaab 	.word	0xaaaaaaab

00018ad8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   18ad8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18ada:	4a0a      	ldr	r2, [pc, #40]	; (18b04 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18adc:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18ade:	2428      	movs	r4, #40	; 0x28
   18ae0:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   18ae4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18ae6:	6a1b      	ldr	r3, [r3, #32]
   18ae8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   18aea:	6823      	ldr	r3, [r4, #0]
   18aec:	429a      	cmp	r2, r3
   18aee:	bf94      	ite	ls
   18af0:	600a      	strls	r2, [r1, #0]
   18af2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   18af4:	f7ff ffe0 	bl	18ab8 <net_buf_id>
   18af8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   18afc:	fb02 3000 	mla	r0, r2, r0, r3
   18b00:	bd10      	pop	{r4, pc}
   18b02:	bf00      	nop
   18b04:	20000894 	.word	0x20000894

00018b08 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   18b08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18b0c:	4605      	mov	r5, r0
   18b0e:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   18b10:	4610      	mov	r0, r2
   18b12:	4619      	mov	r1, r3
{
   18b14:	4616      	mov	r6, r2
   18b16:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   18b18:	f007 fabb 	bl	20092 <z_timeout_end_calc>
   18b1c:	4680      	mov	r8, r0
   18b1e:	4689      	mov	r9, r1
	__asm__ volatile(
   18b20:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b24:	f3ef 8a11 	mrs	sl, BASEPRI
   18b28:	f383 8811 	msr	BASEPRI, r3
   18b2c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   18b30:	8b6b      	ldrh	r3, [r5, #26]
   18b32:	2b00      	cmp	r3, #0
   18b34:	d054      	beq.n	18be0 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   18b36:	8b2a      	ldrh	r2, [r5, #24]
   18b38:	429a      	cmp	r2, r3
   18b3a:	d93d      	bls.n	18bb8 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   18b3c:	2200      	movs	r2, #0
   18b3e:	2300      	movs	r3, #0
   18b40:	4628      	mov	r0, r5
   18b42:	f001 fc69 	bl	1a418 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   18b46:	4604      	mov	r4, r0
   18b48:	2800      	cmp	r0, #0
   18b4a:	d035      	beq.n	18bb8 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   18b4c:	f38a 8811 	msr	BASEPRI, sl
   18b50:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   18b54:	9b01      	ldr	r3, [sp, #4]
   18b56:	2b00      	cmp	r3, #0
   18b58:	d052      	beq.n	18c00 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18b5a:	ea56 0307 	orrs.w	r3, r6, r7
   18b5e:	d010      	beq.n	18b82 <net_buf_alloc_len+0x7a>
   18b60:	1c7b      	adds	r3, r7, #1
   18b62:	bf08      	it	eq
   18b64:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   18b68:	d00b      	beq.n	18b82 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   18b6a:	f002 fab7 	bl	1b0dc <z_tick_get>
   18b6e:	ebb8 0600 	subs.w	r6, r8, r0
   18b72:	eb69 0701 	sbc.w	r7, r9, r1
   18b76:	2e00      	cmp	r6, #0
   18b78:	f177 0300 	sbcs.w	r3, r7, #0
   18b7c:	bfbc      	itt	lt
   18b7e:	2600      	movlt	r6, #0
   18b80:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18b82:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   18b84:	f8df 8090 	ldr.w	r8, [pc, #144]	; 18c18 <net_buf_alloc_len+0x110>
   18b88:	2228      	movs	r2, #40	; 0x28
   18b8a:	fb02 8303 	mla	r3, r2, r3, r8
   18b8e:	a901      	add	r1, sp, #4
   18b90:	6a1b      	ldr	r3, [r3, #32]
   18b92:	681b      	ldr	r3, [r3, #0]
   18b94:	4632      	mov	r2, r6
   18b96:	681d      	ldr	r5, [r3, #0]
   18b98:	4620      	mov	r0, r4
   18b9a:	463b      	mov	r3, r7
   18b9c:	47a8      	blx	r5
   18b9e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   18ba0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   18ba2:	bb70      	cbnz	r0, 18c02 <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   18ba4:	79a0      	ldrb	r0, [r4, #6]
   18ba6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18baa:	4621      	mov	r1, r4
   18bac:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   18bb0:	f007 f86d 	bl	1fc8e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   18bb4:	462c      	mov	r4, r5
}
   18bb6:	e01f      	b.n	18bf8 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   18bb8:	8b68      	ldrh	r0, [r5, #26]
   18bba:	1e43      	subs	r3, r0, #1
   18bbc:	836b      	strh	r3, [r5, #26]
   18bbe:	f38a 8811 	msr	BASEPRI, sl
   18bc2:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   18bc6:	8b2c      	ldrh	r4, [r5, #24]
   18bc8:	1a24      	subs	r4, r4, r0
   18bca:	6a68      	ldr	r0, [r5, #36]	; 0x24
   18bcc:	2318      	movs	r3, #24
   18bce:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   18bd2:	4811      	ldr	r0, [pc, #68]	; (18c18 <net_buf_alloc_len+0x110>)
   18bd4:	4b11      	ldr	r3, [pc, #68]	; (18c1c <net_buf_alloc_len+0x114>)
   18bd6:	1a2d      	subs	r5, r5, r0
   18bd8:	10ed      	asrs	r5, r5, #3
   18bda:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   18bdc:	71a5      	strb	r5, [r4, #6]
		goto success;
   18bde:	e7b9      	b.n	18b54 <net_buf_alloc_len+0x4c>
   18be0:	f38a 8811 	msr	BASEPRI, sl
   18be4:	f3bf 8f6f 	isb	sy
   18be8:	4632      	mov	r2, r6
   18bea:	463b      	mov	r3, r7
   18bec:	4628      	mov	r0, r5
   18bee:	f001 fc13 	bl	1a418 <z_impl_k_queue_get>
	if (!buf) {
   18bf2:	4604      	mov	r4, r0
   18bf4:	2800      	cmp	r0, #0
   18bf6:	d1ad      	bne.n	18b54 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   18bf8:	4620      	mov	r0, r4
   18bfa:	b002      	add	sp, #8
   18bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   18c00:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   18c02:	2300      	movs	r3, #0
	buf->ref   = 1U;
   18c04:	2201      	movs	r2, #1
	buf->frags = NULL;
   18c06:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   18c08:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   18c0a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   18c0c:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   18c0e:	6923      	ldr	r3, [r4, #16]
   18c10:	81e2      	strh	r2, [r4, #14]
   18c12:	60a3      	str	r3, [r4, #8]
	return buf;
   18c14:	e7f0      	b.n	18bf8 <net_buf_alloc_len+0xf0>
   18c16:	bf00      	nop
   18c18:	20000894 	.word	0x20000894
   18c1c:	cccccccd 	.word	0xcccccccd

00018c20 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   18c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c24:	4d17      	ldr	r5, [pc, #92]	; (18c84 <net_buf_unref+0x64>)
   18c26:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   18c28:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   18c2a:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   18c2c:	b90c      	cbnz	r4, 18c32 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   18c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   18c32:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   18c34:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   18c38:	3b01      	subs	r3, #1
   18c3a:	b2db      	uxtb	r3, r3
   18c3c:	7123      	strb	r3, [r4, #4]
   18c3e:	2b00      	cmp	r3, #0
   18c40:	d1f5      	bne.n	18c2e <net_buf_unref+0xe>
		if (buf->__buf) {
   18c42:	6921      	ldr	r1, [r4, #16]
   18c44:	b159      	cbz	r1, 18c5e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   18c46:	7963      	ldrb	r3, [r4, #5]
   18c48:	079b      	lsls	r3, r3, #30
   18c4a:	d407      	bmi.n	18c5c <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   18c4c:	79a3      	ldrb	r3, [r4, #6]
   18c4e:	fb07 5303 	mla	r3, r7, r3, r5
   18c52:	4620      	mov	r0, r4
   18c54:	6a1b      	ldr	r3, [r3, #32]
   18c56:	681b      	ldr	r3, [r3, #0]
   18c58:	689b      	ldr	r3, [r3, #8]
   18c5a:	4798      	blx	r3
			buf->__buf = NULL;
   18c5c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   18c5e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   18c60:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   18c62:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   18c66:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   18c68:	69db      	ldr	r3, [r3, #28]
   18c6a:	b11b      	cbz	r3, 18c74 <net_buf_unref+0x54>
			pool->destroy(buf);
   18c6c:	4620      	mov	r0, r4
   18c6e:	4798      	blx	r3
{
   18c70:	4644      	mov	r4, r8
   18c72:	e7db      	b.n	18c2c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   18c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18c78:	4621      	mov	r1, r4
   18c7a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   18c7e:	f007 f806 	bl	1fc8e <k_queue_prepend>
}
   18c82:	e7f5      	b.n	18c70 <net_buf_unref+0x50>
   18c84:	20000894 	.word	0x20000894

00018c88 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   18c88:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   18c8a:	4b09      	ldr	r3, [pc, #36]	; (18cb0 <gpio_nrfx_init+0x28>)
   18c8c:	781a      	ldrb	r2, [r3, #0]
   18c8e:	b96a      	cbnz	r2, 18cac <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   18c90:	2101      	movs	r1, #1
   18c92:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   18c94:	2006      	movs	r0, #6
   18c96:	2105      	movs	r1, #5
   18c98:	f7fa fd30 	bl	136fc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   18c9c:	2006      	movs	r0, #6
   18c9e:	f7fa fd1d 	bl	136dc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   18ca2:	4b04      	ldr	r3, [pc, #16]	; (18cb4 <gpio_nrfx_init+0x2c>)
   18ca4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18ca8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   18cac:	2000      	movs	r0, #0
   18cae:	bd08      	pop	{r3, pc}
   18cb0:	20002df2 	.word	0x20002df2
   18cb4:	40006000 	.word	0x40006000

00018cb8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18cb8:	4b2a      	ldr	r3, [pc, #168]	; (18d64 <gpio_nrfx_config+0xac>)
{
   18cba:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18cbc:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18cbe:	482a      	ldr	r0, [pc, #168]	; (18d68 <gpio_nrfx_config+0xb0>)
   18cc0:	4013      	ands	r3, r2
   18cc2:	4283      	cmp	r3, r0
   18cc4:	d03e      	beq.n	18d44 <gpio_nrfx_config+0x8c>
   18cc6:	d80d      	bhi.n	18ce4 <gpio_nrfx_config+0x2c>
   18cc8:	2b06      	cmp	r3, #6
   18cca:	d015      	beq.n	18cf8 <gpio_nrfx_config+0x40>
   18ccc:	d805      	bhi.n	18cda <gpio_nrfx_config+0x22>
   18cce:	b19b      	cbz	r3, 18cf8 <gpio_nrfx_config+0x40>
   18cd0:	2b02      	cmp	r3, #2
   18cd2:	d039      	beq.n	18d48 <gpio_nrfx_config+0x90>
   18cd4:	f06f 0015 	mvn.w	r0, #21
   18cd8:	e033      	b.n	18d42 <gpio_nrfx_config+0x8a>
   18cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   18cde:	d1f9      	bne.n	18cd4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   18ce0:	2301      	movs	r3, #1
   18ce2:	e009      	b.n	18cf8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18ce4:	4821      	ldr	r0, [pc, #132]	; (18d6c <gpio_nrfx_config+0xb4>)
   18ce6:	4283      	cmp	r3, r0
   18ce8:	d030      	beq.n	18d4c <gpio_nrfx_config+0x94>
   18cea:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   18cee:	d02f      	beq.n	18d50 <gpio_nrfx_config+0x98>
   18cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   18cf4:	d1ee      	bne.n	18cd4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   18cf6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   18cf8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   18cfa:	bf54      	ite	pl
   18cfc:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   18d00:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   18d02:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   18d06:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   18d0a:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   18d0e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   18d12:	d007      	beq.n	18d24 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   18d14:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18d18:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   18d1a:	d01b      	beq.n	18d54 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   18d1c:	2201      	movs	r2, #1
   18d1e:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   18d20:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   18d24:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   18d28:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   18d2c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18d30:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   18d34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   18d38:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18d3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   18d40:	2000      	movs	r0, #0
}
   18d42:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   18d44:	2307      	movs	r3, #7
   18d46:	e7d7      	b.n	18cf8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   18d48:	2304      	movs	r3, #4
   18d4a:	e7d5      	b.n	18cf8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   18d4c:	2305      	movs	r3, #5
   18d4e:	e7d3      	b.n	18cf8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   18d50:	2303      	movs	r3, #3
   18d52:	e7d1      	b.n	18cf8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   18d54:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   18d56:	bf42      	ittt	mi
   18d58:	2201      	movmi	r2, #1
   18d5a:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   18d5c:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   18d60:	e7e0      	b.n	18d24 <gpio_nrfx_config+0x6c>
   18d62:	bf00      	nop
   18d64:	00f00006 	.word	0x00f00006
   18d68:	00100006 	.word	0x00100006
   18d6c:	00400002 	.word	0x00400002

00018d70 <gpio_nrfx_pin_interrupt_configure>:
{
   18d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d72:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18d74:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   18d76:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18d78:	7a08      	ldrb	r0, [r1, #8]
   18d7a:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   18d7e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   18d82:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
   18d86:	d10c      	bne.n	18da2 <gpio_nrfx_pin_interrupt_configure+0x32>
    *p_pin = pin_number & 0x1F;
   18d88:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   18d8c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   18d90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   18d94:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   18d98:	07cf      	lsls	r7, r1, #31
   18d9a:	d507      	bpl.n	18dac <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   18d9c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   18da0:	e0bd      	b.n	18f1e <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   18da2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   18da6:	68f1      	ldr	r1, [r6, #12]
   18da8:	f000 80aa 	beq.w	18f00 <gpio_nrfx_pin_interrupt_configure+0x190>
   18dac:	68f0      	ldr	r0, [r6, #12]
   18dae:	2101      	movs	r1, #1
   18db0:	40a1      	lsls	r1, r4
   18db2:	4301      	orrs	r1, r0
   18db4:	6970      	ldr	r0, [r6, #20]
   18db6:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   18db8:	2101      	movs	r1, #1
   18dba:	40a1      	lsls	r1, r4
   18dbc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   18dc0:	69b2      	ldr	r2, [r6, #24]
   18dc2:	bf0c      	ite	eq
   18dc4:	4308      	orreq	r0, r1
   18dc6:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   18dc8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   18dcc:	bf0c      	ite	eq
   18dce:	430a      	orreq	r2, r1
   18dd0:	438a      	bicne	r2, r1
   18dd2:	61b2      	str	r2, [r6, #24]
   18dd4:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   18dd6:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   18dd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   18ddc:	bf0c      	ite	eq
   18dde:	4311      	orreq	r1, r2
   18de0:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   18de4:	4a54      	ldr	r2, [pc, #336]	; (18f38 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
   18de6:	6131      	str	r1, [r6, #16]
   18de8:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   18dec:	2300      	movs	r3, #0
   18dee:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   18df0:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   18df4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   18df8:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   18dfc:	4285      	cmp	r5, r0
   18dfe:	f040 8084 	bne.w	18f0a <gpio_nrfx_pin_interrupt_configure+0x19a>
		    && (intenset & BIT(i))) {
   18e02:	fa21 f003 	lsr.w	r0, r1, r3
   18e06:	07c0      	lsls	r0, r0, #31
   18e08:	d57f      	bpl.n	18f0a <gpio_nrfx_pin_interrupt_configure+0x19a>
			(void)atomic_and(mask, ~BIT(i));
   18e0a:	2101      	movs	r1, #1
   18e0c:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18e0e:	484b      	ldr	r0, [pc, #300]	; (18f3c <gpio_nrfx_pin_interrupt_configure+0x1cc>)
   18e10:	f3bf 8f5b 	dmb	ish
   18e14:	43cf      	mvns	r7, r1
   18e16:	e850 cf00 	ldrex	ip, [r0]
   18e1a:	ea0c 0c07 	and.w	ip, ip, r7
   18e1e:	e840 ce00 	strex	lr, ip, [r0]
   18e22:	f1be 0f00 	cmp.w	lr, #0
   18e26:	d1f6      	bne.n	18e16 <gpio_nrfx_pin_interrupt_configure+0xa6>
   18e28:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   18e2c:	009b      	lsls	r3, r3, #2
   18e2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18e32:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   18e36:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   18e3a:	f020 0001 	bic.w	r0, r0, #1
   18e3e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   18e42:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   18e46:	2100      	movs	r1, #0
   18e48:	4628      	mov	r0, r5
   18e4a:	f006 fc70 	bl	1f72e <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   18e4e:	68f3      	ldr	r3, [r6, #12]
   18e50:	40e3      	lsrs	r3, r4
   18e52:	f013 0301 	ands.w	r3, r3, #1
   18e56:	d051      	beq.n	18efc <gpio_nrfx_pin_interrupt_configure+0x18c>
		if (data->trig_edge & BIT(pin)) {
   18e58:	6973      	ldr	r3, [r6, #20]
   18e5a:	40e3      	lsrs	r3, r4
   18e5c:	f013 0201 	ands.w	r2, r3, #1
   18e60:	d05e      	beq.n	18f20 <gpio_nrfx_pin_interrupt_configure+0x1b0>
			if (data->double_edge & BIT(pin)) {
   18e62:	69b3      	ldr	r3, [r6, #24]
   18e64:	40e3      	lsrs	r3, r4
   18e66:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   18e68:	bf5f      	itttt	pl
   18e6a:	6931      	ldrpl	r1, [r6, #16]
   18e6c:	fa21 f404 	lsrpl.w	r4, r1, r4
   18e70:	f004 0401 	andpl.w	r4, r4, #1
   18e74:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18e78:	4930      	ldr	r1, [pc, #192]	; (18f3c <gpio_nrfx_pin_interrupt_configure+0x1cc>)
   18e7a:	bf54      	ite	pl
   18e7c:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   18e7e:	2403      	movmi	r4, #3
   18e80:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   18e82:	2701      	movs	r7, #1
   18e84:	fa07 f602 	lsl.w	r6, r7, r2
   18e88:	f3bf 8f5b 	dmb	ish
   18e8c:	e851 0f00 	ldrex	r0, [r1]
   18e90:	ea40 0306 	orr.w	r3, r0, r6
   18e94:	e841 3c00 	strex	ip, r3, [r1]
   18e98:	f1bc 0f00 	cmp.w	ip, #0
   18e9c:	d1f6      	bne.n	18e8c <gpio_nrfx_pin_interrupt_configure+0x11c>
   18e9e:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   18ea2:	40d0      	lsrs	r0, r2
   18ea4:	f010 0301 	ands.w	r3, r0, #1
   18ea8:	d134      	bne.n	18f14 <gpio_nrfx_pin_interrupt_configure+0x1a4>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   18eaa:	0091      	lsls	r1, r2, #2
   18eac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   18eb0:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   18eb4:	3240      	adds	r2, #64	; 0x40
   18eb6:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   18eba:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   18ebe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   18ec2:	0092      	lsls	r2, r2, #2
   18ec4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18ec8:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
   18eca:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18ecc:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   18ed0:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   18ed4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18ed8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18edc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   18ee0:	4305      	orrs	r5, r0
   18ee2:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18ee6:	6013      	str	r3, [r2, #0]
   18ee8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   18eea:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   18eee:	f042 0201 	orr.w	r2, r2, #1
   18ef2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   18ef6:	4a10      	ldr	r2, [pc, #64]	; (18f38 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
   18ef8:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
   18efc:	4618      	mov	r0, r3
   18efe:	e00e      	b.n	18f1e <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   18f00:	2001      	movs	r0, #1
   18f02:	40a0      	lsls	r0, r4
   18f04:	ea21 0100 	bic.w	r1, r1, r0
   18f08:	e754      	b.n	18db4 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   18f0a:	3301      	adds	r3, #1
   18f0c:	2b08      	cmp	r3, #8
   18f0e:	f47f af6f 	bne.w	18df0 <gpio_nrfx_pin_interrupt_configure+0x80>
   18f12:	e798      	b.n	18e46 <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   18f14:	3201      	adds	r2, #1
   18f16:	2a08      	cmp	r2, #8
   18f18:	d1b4      	bne.n	18e84 <gpio_nrfx_pin_interrupt_configure+0x114>
	return -ENODEV;
   18f1a:	f06f 0012 	mvn.w	r0, #18
}
   18f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   18f20:	6931      	ldr	r1, [r6, #16]
   18f22:	40e1      	lsrs	r1, r4
   18f24:	f001 0101 	and.w	r1, r1, #1
   18f28:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   18f2c:	4628      	mov	r0, r5
   18f2e:	b2c9      	uxtb	r1, r1
   18f30:	f006 fbfd 	bl	1f72e <nrf_gpio_cfg_sense_set>
	int res = 0;
   18f34:	4610      	mov	r0, r2
   18f36:	e7f2      	b.n	18f1e <gpio_nrfx_pin_interrupt_configure+0x1ae>
   18f38:	40006000 	.word	0x40006000
   18f3c:	200028a4 	.word	0x200028a4

00018f40 <gpiote_event_handler>:
{
   18f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18f44:	4d3f      	ldr	r5, [pc, #252]	; (19044 <gpiote_event_handler+0x104>)
   18f46:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
   18f48:	2e00      	cmp	r6, #0
   18f4a:	d04e      	beq.n	18fea <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
   18f4c:	4b3e      	ldr	r3, [pc, #248]	; (19048 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   18f4e:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   18f52:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   18f54:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   18f56:	4301      	orrs	r1, r0
   18f58:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
   18f5c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
   18f60:	2701      	movs	r7, #1
   18f62:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   18f66:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   18f68:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
   18f6c:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
   18f70:	bb72      	cbnz	r2, 18fd0 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18f72:	602a      	str	r2, [r5, #0]
   18f74:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   18f76:	4835      	ldr	r0, [pc, #212]	; (1904c <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   18f78:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   18f7a:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18f7c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   18f7e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   18f82:	fa05 f103 	lsl.w	r1, r5, r3
   18f86:	4211      	tst	r1, r2
   18f88:	d011      	beq.n	18fae <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18f8a:	009a      	lsls	r2, r3, #2
   18f8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18f90:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   18f94:	6811      	ldr	r1, [r2, #0]
   18f96:	b151      	cbz	r1, 18fae <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   18f98:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   18f9c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18fa0:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   18fa2:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   18fa6:	fa05 f101 	lsl.w	r1, r5, r1
   18faa:	6812      	ldr	r2, [r2, #0]
   18fac:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   18fae:	3301      	adds	r3, #1
   18fb0:	2b08      	cmp	r3, #8
   18fb2:	d1e4      	bne.n	18f7e <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   18fb4:	b9dc      	cbnz	r4, 18fee <gpiote_event_handler+0xae>
	if (port_event) {
   18fb6:	b14e      	cbz	r6, 18fcc <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
   18fb8:	4c23      	ldr	r4, [pc, #140]	; (19048 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   18fba:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   18fbe:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   18fc0:	4301      	orrs	r1, r0
   18fc2:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   18fc6:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   18fc8:	2600      	movs	r6, #0
	while (level_pins) {
   18fca:	bb42      	cbnz	r2, 1901e <gpiote_event_handler+0xde>
}
   18fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   18fd0:	423a      	tst	r2, r7
   18fd2:	d006      	beq.n	18fe2 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   18fd4:	2100      	movs	r1, #0
   18fd6:	f008 001f 	and.w	r0, r8, #31
   18fda:	f006 fba8 	bl	1f72e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   18fde:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
   18fe2:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   18fe6:	007f      	lsls	r7, r7, #1
   18fe8:	e7c2      	b.n	18f70 <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   18fea:	4634      	mov	r4, r6
   18fec:	e7c3      	b.n	18f76 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18fee:	4b16      	ldr	r3, [pc, #88]	; (19048 <gpiote_event_handler+0x108>)
   18ff0:	6859      	ldr	r1, [r3, #4]
   18ff2:	2900      	cmp	r1, #0
   18ff4:	d0df      	beq.n	18fb6 <gpiote_event_handler+0x76>
	return node->next;
   18ff6:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   18ff8:	4f15      	ldr	r7, [pc, #84]	; (19050 <gpiote_event_handler+0x110>)
   18ffa:	2d00      	cmp	r5, #0
   18ffc:	bf38      	it	cc
   18ffe:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   19000:	688a      	ldr	r2, [r1, #8]
   19002:	4022      	ands	r2, r4
   19004:	d002      	beq.n	1900c <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
   19006:	684b      	ldr	r3, [r1, #4]
   19008:	4638      	mov	r0, r7
   1900a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1900c:	2d00      	cmp	r5, #0
   1900e:	d0d2      	beq.n	18fb6 <gpiote_event_handler+0x76>
   19010:	682b      	ldr	r3, [r5, #0]
   19012:	2b00      	cmp	r3, #0
   19014:	bf38      	it	cc
   19016:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19018:	4629      	mov	r1, r5
   1901a:	461d      	mov	r5, r3
   1901c:	e7f0      	b.n	19000 <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
   1901e:	4215      	tst	r5, r2
   19020:	d00c      	beq.n	1903c <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   19022:	6921      	ldr	r1, [r4, #16]
   19024:	40f1      	lsrs	r1, r6
   19026:	f001 0101 	and.w	r1, r1, #1
   1902a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1902e:	b2c9      	uxtb	r1, r1
   19030:	f006 001f 	and.w	r0, r6, #31
   19034:	f006 fb7b 	bl	1f72e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   19038:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   1903c:	3601      	adds	r6, #1
		bit <<= 1;
   1903e:	006d      	lsls	r5, r5, #1
   19040:	e7c3      	b.n	18fca <gpiote_event_handler+0x8a>
   19042:	bf00      	nop
   19044:	4000617c 	.word	0x4000617c
   19048:	20002888 	.word	0x20002888
   1904c:	40006000 	.word	0x40006000
   19050:	2000079c 	.word	0x2000079c

00019054 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   19054:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   19056:	794b      	ldrb	r3, [r1, #5]
   19058:	2b01      	cmp	r3, #1
   1905a:	d123      	bne.n	190a4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1905c:	798b      	ldrb	r3, [r1, #6]
   1905e:	2b03      	cmp	r3, #3
   19060:	d120      	bne.n	190a4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   19062:	79ca      	ldrb	r2, [r1, #7]
   19064:	b122      	cbz	r2, 19070 <uarte_nrfx_configure+0x1c>
   19066:	2a01      	cmp	r2, #1
   19068:	d11c      	bne.n	190a4 <uarte_nrfx_configure+0x50>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1906a:	6843      	ldr	r3, [r0, #4]
   1906c:	791b      	ldrb	r3, [r3, #4]
   1906e:	b1cb      	cbz	r3, 190a4 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   19070:	790c      	ldrb	r4, [r1, #4]
   19072:	b114      	cbz	r4, 1907a <uarte_nrfx_configure+0x26>
   19074:	2c02      	cmp	r4, #2
   19076:	d115      	bne.n	190a4 <uarte_nrfx_configure+0x50>
   19078:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1907a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1907c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1907e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   19082:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   19084:	d062      	beq.n	1914c <uarte_nrfx_configure+0xf8>
   19086:	d82b      	bhi.n	190e0 <uarte_nrfx_configure+0x8c>
   19088:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1908c:	d061      	beq.n	19152 <uarte_nrfx_configure+0xfe>
   1908e:	d814      	bhi.n	190ba <uarte_nrfx_configure+0x66>
   19090:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   19094:	d05f      	beq.n	19156 <uarte_nrfx_configure+0x102>
   19096:	d808      	bhi.n	190aa <uarte_nrfx_configure+0x56>
   19098:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1909c:	d05e      	beq.n	1915c <uarte_nrfx_configure+0x108>
   1909e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   190a2:	d05e      	beq.n	19162 <uarte_nrfx_configure+0x10e>
   190a4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   190a8:	e04f      	b.n	1914a <uarte_nrfx_configure+0xf6>
   190aa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   190ae:	d05b      	beq.n	19168 <uarte_nrfx_configure+0x114>
   190b0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   190b4:	d1f6      	bne.n	190a4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   190b6:	4b37      	ldr	r3, [pc, #220]	; (19194 <uarte_nrfx_configure+0x140>)
   190b8:	e03c      	b.n	19134 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   190ba:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   190be:	d056      	beq.n	1916e <uarte_nrfx_configure+0x11a>
   190c0:	d807      	bhi.n	190d2 <uarte_nrfx_configure+0x7e>
   190c2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   190c6:	d054      	beq.n	19172 <uarte_nrfx_configure+0x11e>
   190c8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   190cc:	d1ea      	bne.n	190a4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   190ce:	4b32      	ldr	r3, [pc, #200]	; (19198 <uarte_nrfx_configure+0x144>)
   190d0:	e030      	b.n	19134 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   190d2:	f647 2612 	movw	r6, #31250	; 0x7a12
   190d6:	42b3      	cmp	r3, r6
   190d8:	d1e4      	bne.n	190a4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   190da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   190de:	e029      	b.n	19134 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   190e0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   190e4:	d047      	beq.n	19176 <uarte_nrfx_configure+0x122>
   190e6:	d813      	bhi.n	19110 <uarte_nrfx_configure+0xbc>
   190e8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   190ec:	d046      	beq.n	1917c <uarte_nrfx_configure+0x128>
   190ee:	d809      	bhi.n	19104 <uarte_nrfx_configure+0xb0>
   190f0:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   190f4:	42b3      	cmp	r3, r6
   190f6:	d043      	beq.n	19180 <uarte_nrfx_configure+0x12c>
   190f8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   190fc:	d1d2      	bne.n	190a4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   190fe:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   19102:	e017      	b.n	19134 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19104:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   19108:	d1cc      	bne.n	190a4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1910a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1910e:	e011      	b.n	19134 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19110:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   19114:	d037      	beq.n	19186 <uarte_nrfx_configure+0x132>
   19116:	d808      	bhi.n	1912a <uarte_nrfx_configure+0xd6>
   19118:	4e20      	ldr	r6, [pc, #128]	; (1919c <uarte_nrfx_configure+0x148>)
   1911a:	42b3      	cmp	r3, r6
   1911c:	d036      	beq.n	1918c <uarte_nrfx_configure+0x138>
   1911e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   19122:	d1bf      	bne.n	190a4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   19124:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   19128:	e004      	b.n	19134 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   1912a:	4e1d      	ldr	r6, [pc, #116]	; (191a0 <uarte_nrfx_configure+0x14c>)
   1912c:	42b3      	cmp	r3, r6
   1912e:	d1b9      	bne.n	190a4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   19130:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   19134:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   19138:	68c3      	ldr	r3, [r0, #12]
   1913a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1913c:	4322      	orrs	r2, r4
   1913e:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   19140:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   19144:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   19148:	2000      	movs	r0, #0
}
   1914a:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1914c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   19150:	e7f0      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   19152:	4b14      	ldr	r3, [pc, #80]	; (191a4 <uarte_nrfx_configure+0x150>)
   19154:	e7ee      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   19156:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1915a:	e7eb      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
   1915c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   19160:	e7e8      	b.n	19134 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19162:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   19166:	e7e5      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   19168:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1916c:	e7e2      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1916e:	4b0e      	ldr	r3, [pc, #56]	; (191a8 <uarte_nrfx_configure+0x154>)
   19170:	e7e0      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   19172:	4b0e      	ldr	r3, [pc, #56]	; (191ac <uarte_nrfx_configure+0x158>)
   19174:	e7de      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   19176:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1917a:	e7db      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1917c:	4b0c      	ldr	r3, [pc, #48]	; (191b0 <uarte_nrfx_configure+0x15c>)
   1917e:	e7d9      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   19180:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   19184:	e7d6      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   19186:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1918a:	e7d3      	b.n	19134 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1918c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   19190:	e7d0      	b.n	19134 <uarte_nrfx_configure+0xe0>
   19192:	bf00      	nop
   19194:	0013b000 	.word	0x0013b000
   19198:	004ea000 	.word	0x004ea000
   1919c:	0003d090 	.word	0x0003d090
   191a0:	000f4240 	.word	0x000f4240
   191a4:	00275000 	.word	0x00275000
   191a8:	0075c000 	.word	0x0075c000
   191ac:	003af000 	.word	0x003af000
   191b0:	013a9000 	.word	0x013a9000

000191b4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   191b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   191b8:	68c7      	ldr	r7, [r0, #12]
{
   191ba:	4606      	mov	r6, r0
   191bc:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   191be:	f006 fe97 	bl	1fef0 <k_is_in_isr>
   191c2:	b9b8      	cbnz	r0, 191f4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   191c4:	4b28      	ldr	r3, [pc, #160]	; (19268 <uarte_nrfx_poll_out+0xb4>)
   191c6:	781b      	ldrb	r3, [r3, #0]
   191c8:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   191cc:	6872      	ldr	r2, [r6, #4]
   191ce:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   191d0:	b193      	cbz	r3, 191f8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   191d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   191d6:	f3ef 8411 	mrs	r4, BASEPRI
   191da:	f383 8811 	msr	BASEPRI, r3
   191de:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   191e2:	4630      	mov	r0, r6
   191e4:	f006 fb32 	bl	1f84c <is_tx_ready>
   191e8:	bb38      	cbnz	r0, 1923a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   191ea:	f384 8811 	msr	BASEPRI, r4
   191ee:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   191f2:	e7ee      	b.n	191d2 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   191f4:	2301      	movs	r3, #1
   191f6:	e7e9      	b.n	191cc <uarte_nrfx_poll_out+0x18>
   191f8:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   191fa:	4630      	mov	r0, r6
   191fc:	f006 fb26 	bl	1f84c <is_tx_ready>
   19200:	b970      	cbnz	r0, 19220 <uarte_nrfx_poll_out+0x6c>
   19202:	2001      	movs	r0, #1
   19204:	f006 fc17 	bl	1fa36 <nrfx_busy_wait>
   19208:	3c01      	subs	r4, #1
   1920a:	d1f6      	bne.n	191fa <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1920c:	2100      	movs	r1, #0
   1920e:	2021      	movs	r0, #33	; 0x21
   19210:	f001 fc5c 	bl	1aacc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19214:	e7f0      	b.n	191f8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   19216:	f384 8811 	msr	BASEPRI, r4
   1921a:	f3bf 8f6f 	isb	sy
}
   1921e:	e7f5      	b.n	1920c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   19220:	f04f 0340 	mov.w	r3, #64	; 0x40
   19224:	f3ef 8411 	mrs	r4, BASEPRI
   19228:	f383 8811 	msr	BASEPRI, r3
   1922c:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
   19230:	4630      	mov	r0, r6
   19232:	f006 fb0b 	bl	1f84c <is_tx_ready>
   19236:	2800      	cmp	r0, #0
   19238:	d0ed      	beq.n	19216 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1923a:	f807 8f0c 	strb.w	r8, [r7, #12]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1923e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19240:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19242:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19246:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1924a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1924e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   19252:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   19256:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1925a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1925c:	f384 8811 	msr	BASEPRI, r4
   19260:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   19264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19268:	20003250 	.word	0x20003250

0001926c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1926e:	2200      	movs	r2, #0
   19270:	4605      	mov	r5, r0
   19272:	2101      	movs	r1, #1
   19274:	2002      	movs	r0, #2
   19276:	f7fa fa41 	bl	136fc <z_arm_irq_priority_set>
   1927a:	2002      	movs	r0, #2
   1927c:	f7fa fa2e 	bl	136dc <arch_irq_enable>
	return config->uarte_regs;
   19280:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   19282:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   19284:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   19286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1928a:	2200      	movs	r2, #0
   1928c:	2140      	movs	r1, #64	; 0x40
   1928e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.TXD = pseltxd;
   19292:	2006      	movs	r0, #6
	data->dev = dev;
   19294:	6035      	str	r5, [r6, #0]
   19296:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1929a:	2103      	movs	r1, #3
   1929c:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   192a0:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   192a4:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   192a8:	2008      	movs	r0, #8
   192aa:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
   192ae:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
   192b2:	2220      	movs	r2, #32
   192b4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   192b8:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   192bc:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RTS = pselrts;
   192be:	2305      	movs	r3, #5
   192c0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   192c4:	2307      	movs	r3, #7
   192c6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   192ca:	3104      	adds	r1, #4
   192cc:	4628      	mov	r0, r5
   192ce:	f7ff fec1 	bl	19054 <uarte_nrfx_configure>
	if (err) {
   192d2:	4607      	mov	r7, r0
   192d4:	2800      	cmp	r0, #0
   192d6:	d13c      	bne.n	19352 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   192d8:	686b      	ldr	r3, [r5, #4]
   192da:	799b      	ldrb	r3, [r3, #6]
   192dc:	b1cb      	cbz	r3, 19312 <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   192de:	f106 000e 	add.w	r0, r6, #14
   192e2:	f000 fe63 	bl	19fac <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   192e6:	4b1d      	ldr	r3, [pc, #116]	; (1935c <uarte_0_init+0xf0>)
   192e8:	4298      	cmp	r0, r3
   192ea:	d134      	bne.n	19356 <uarte_0_init+0xea>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   192ec:	7bb0      	ldrb	r0, [r6, #14]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   192ee:	00c3      	lsls	r3, r0, #3
   192f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   192f4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   192f8:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   192fc:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19300:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19304:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   19308:	4a15      	ldr	r2, [pc, #84]	; (19360 <uarte_0_init+0xf4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1930a:	2301      	movs	r3, #1
   1930c:	4083      	lsls	r3, r0
   1930e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   19312:	2308      	movs	r3, #8
   19314:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19318:	2300      	movs	r3, #0
   1931a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1931e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   19322:	f106 030d 	add.w	r3, r6, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19326:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1932a:	2301      	movs	r3, #1
   1932c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19330:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   19332:	686b      	ldr	r3, [r5, #4]
   19334:	799b      	ldrb	r3, [r3, #6]
   19336:	b91b      	cbnz	r3, 19340 <uarte_0_init+0xd4>
    p_reg->INTENSET = mask;
   19338:	f44f 7380 	mov.w	r3, #256	; 0x100
   1933c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   19340:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   19342:	360c      	adds	r6, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19344:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19348:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1934c:	2301      	movs	r3, #1
   1934e:	60a3      	str	r3, [r4, #8]
   19350:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   19352:	4638      	mov	r0, r7
   19354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
   19356:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   1935a:	e7fa      	b.n	19352 <uarte_0_init+0xe6>
   1935c:	0bad0000 	.word	0x0bad0000
   19360:	4001f000 	.word	0x4001f000

00019364 <rng_driver_isr>:
		return errcode;
	}
}

static void rng_driver_isr(void *param)
{
   19364:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	sdc_RNG_IRQHandler();
   19366:	f7f5 fbca 	bl	eafe <sdc_RNG_IRQHandler>
	z_impl_k_sem_give(sem);
   1936a:	4802      	ldr	r0, [pc, #8]	; (19374 <rng_driver_isr+0x10>)

	/* This sema wakes up the pending client buffer to fill it with new
	 * random values.
	 */
	k_sem_give(&rng_data.sem_sync);
}
   1936c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19370:	f001 bbd2 	b.w	1ab18 <z_impl_k_sem_give>
   19374:	200028a8 	.word	0x200028a8

00019378 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_SEM_DEFINE(mpsl_lock, 1, 1);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   19378:	4602      	mov	r2, r0
   1937a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1937c:	4801      	ldr	r0, [pc, #4]	; (19384 <multithreading_lock_acquire+0xc>)
   1937e:	f001 bbf1 	b.w	1ab64 <z_impl_k_sem_take>
   19382:	bf00      	nop
   19384:	2000081c 	.word	0x2000081c

00019388 <multithreading_lock_release>:
	z_impl_k_sem_give(sem);
   19388:	4801      	ldr	r0, [pc, #4]	; (19390 <multithreading_lock_release+0x8>)
   1938a:	f001 bbc5 	b.w	1ab18 <z_impl_k_sem_give>
   1938e:	bf00      	nop
   19390:	2000081c 	.word	0x2000081c

00019394 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   19394:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   19396:	4804      	ldr	r0, [pc, #16]	; (193a8 <hci_driver_init+0x14>)
   19398:	f7fb fe0c 	bl	14fb4 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1939c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   193a0:	4802      	ldr	r0, [pc, #8]	; (193ac <hci_driver_init+0x18>)
   193a2:	f7ea bba9 	b.w	3af8 <sdc_init>
   193a6:	bf00      	nop
   193a8:	00020d14 	.word	0x00020d14
   193ac:	0001f949 	.word	0x0001f949

000193b0 <recv_thread>:
{
   193b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   193b2:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   193b4:	4f34      	ldr	r7, [pc, #208]	; (19488 <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   193b6:	4c35      	ldr	r4, [pc, #212]	; (1948c <recv_thread+0xdc>)
	bool received_evt = false;
   193b8:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   193ba:	b93e      	cbnz	r6, 193cc <recv_thread+0x1c>
   193bc:	b935      	cbnz	r5, 193cc <recv_thread+0x1c>
   193be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   193c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   193c6:	4638      	mov	r0, r7
   193c8:	f001 fbcc 	bl	1ab64 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   193cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   193d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   193d4:	f7ff ffd0 	bl	19378 <multithreading_lock_acquire>
	if (!errcode) {
   193d8:	b158      	cbz	r0, 193f2 <recv_thread+0x42>
		return false;
   193da:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   193dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   193e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   193e4:	f7ff ffc8 	bl	19378 <multithreading_lock_acquire>
	if (!errcode) {
   193e8:	b380      	cbz	r0, 1944c <recv_thread+0x9c>
		return false;
   193ea:	2500      	movs	r5, #0
	z_impl_k_yield();
   193ec:	f001 fb20 	bl	1aa30 <z_impl_k_yield>
}
   193f0:	e7e3      	b.n	193ba <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   193f2:	4826      	ldr	r0, [pc, #152]	; (1948c <recv_thread+0xdc>)
   193f4:	f000 fbd2 	bl	19b9c <hci_internal_evt_get>
   193f8:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   193fa:	f7ff ffc5 	bl	19388 <multithreading_lock_release>
	if (errcode) {
   193fe:	2d00      	cmp	r5, #0
   19400:	d1eb      	bne.n	193da <recv_thread+0x2a>
	switch (hdr->evt) {
   19402:	7820      	ldrb	r0, [r4, #0]
   19404:	283e      	cmp	r0, #62	; 0x3e
   19406:	d007      	beq.n	19418 <recv_thread+0x68>
   19408:	28ff      	cmp	r0, #255	; 0xff
   1940a:	d01c      	beq.n	19446 <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1940c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19414:	2100      	movs	r1, #0
   19416:	e007      	b.n	19428 <recv_thread+0x78>
		switch (me->subevent) {
   19418:	78a3      	ldrb	r3, [r4, #2]
   1941a:	2b02      	cmp	r3, #2
   1941c:	d001      	beq.n	19422 <recv_thread+0x72>
   1941e:	2b0d      	cmp	r3, #13
		switch (subevent) {
   19420:	d1f4      	bne.n	1940c <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19422:	2200      	movs	r2, #0
   19424:	2300      	movs	r3, #0
   19426:	2101      	movs	r1, #1
   19428:	f7fc f9cc 	bl	157c4 <bt_buf_get_evt>
	if (!evt_buf) {
   1942c:	4605      	mov	r5, r0
   1942e:	b140      	cbz	r0, 19442 <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   19430:	7862      	ldrb	r2, [r4, #1]
   19432:	4621      	mov	r1, r4
   19434:	3202      	adds	r2, #2
   19436:	3008      	adds	r0, #8
   19438:	f006 f93c 	bl	1f6b4 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1943c:	4628      	mov	r0, r5
   1943e:	f7fb fd97 	bl	14f70 <bt_recv>
	return true;
   19442:	2601      	movs	r6, #1
   19444:	e7ca      	b.n	193dc <recv_thread+0x2c>
		switch (subevent) {
   19446:	78a3      	ldrb	r3, [r4, #2]
   19448:	2b80      	cmp	r3, #128	; 0x80
   1944a:	e7e9      	b.n	19420 <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1944c:	480f      	ldr	r0, [pc, #60]	; (1948c <recv_thread+0xdc>)
   1944e:	f7f5 fe7d 	bl	f14c <sdc_hci_data_get>
   19452:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   19454:	f7ff ff98 	bl	19388 <multithreading_lock_release>
	if (errcode) {
   19458:	2d00      	cmp	r5, #0
   1945a:	d1c6      	bne.n	193ea <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1945c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19464:	2003      	movs	r0, #3
   19466:	f7fc f977 	bl	15758 <bt_buf_get_rx>
	if (!data_buf) {
   1946a:	4605      	mov	r5, r0
   1946c:	b908      	cbnz	r0, 19472 <recv_thread+0xc2>
	return true;
   1946e:	2501      	movs	r5, #1
   19470:	e7bc      	b.n	193ec <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   19472:	8862      	ldrh	r2, [r4, #2]
   19474:	4621      	mov	r1, r4
   19476:	3204      	adds	r2, #4
   19478:	3008      	adds	r0, #8
   1947a:	f006 f91b 	bl	1f6b4 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1947e:	4628      	mov	r0, r5
   19480:	f7fb fd76 	bl	14f70 <bt_recv>
   19484:	e7f3      	b.n	1946e <recv_thread+0xbe>
   19486:	bf00      	nop
   19488:	2000084c 	.word	0x2000084c
   1948c:	20002df3 	.word	0x20002df3

00019490 <hci_driver_open>:
{
   19490:	b510      	push	{r4, lr}
   19492:	b08e      	sub	sp, #56	; 0x38
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19494:	2200      	movs	r2, #0
   19496:	2300      	movs	r3, #0
   19498:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1949c:	2400      	movs	r4, #0
   1949e:	f06f 0309 	mvn.w	r3, #9
   194a2:	e9cd 3403 	strd	r3, r4, [sp, #12]
   194a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   194aa:	4b33      	ldr	r3, [pc, #204]	; (19578 <hci_driver_open+0xe8>)
   194ac:	4933      	ldr	r1, [pc, #204]	; (1957c <hci_driver_open+0xec>)
   194ae:	9400      	str	r4, [sp, #0]
   194b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   194b4:	4832      	ldr	r0, [pc, #200]	; (19580 <hci_driver_open+0xf0>)
   194b6:	f001 fbc9 	bl	1ac4c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   194ba:	4932      	ldr	r1, [pc, #200]	; (19584 <hci_driver_open+0xf4>)
   194bc:	4830      	ldr	r0, [pc, #192]	; (19580 <hci_driver_open+0xf0>)
   194be:	f006 fd21 	bl	1ff04 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   194c2:	a809      	add	r0, sp, #36	; 0x24
   194c4:	f7ea fabc 	bl	3a40 <sdc_build_revision_get>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   194c8:	aa08      	add	r2, sp, #32
   194ca:	2101      	movs	r1, #1
   194cc:	4620      	mov	r0, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   194ce:	f88d 4020 	strb.w	r4, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   194d2:	f7ea fac3 	bl	3a5c <sdc_cfg_set>
	if (required_memory < 0) {
   194d6:	2800      	cmp	r0, #0
   194d8:	db27      	blt.n	1952a <hci_driver_open+0x9a>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   194da:	2301      	movs	r3, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   194dc:	aa08      	add	r2, sp, #32
   194de:	2102      	movs	r1, #2
   194e0:	4620      	mov	r0, r4
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   194e2:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   194e6:	f7ea fab9 	bl	3a5c <sdc_cfg_set>
	if (required_memory < 0) {
   194ea:	2800      	cmp	r0, #0
   194ec:	db1d      	blt.n	1952a <hci_driver_open+0x9a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   194ee:	4b26      	ldr	r3, [pc, #152]	; (19588 <hci_driver_open+0xf8>)
   194f0:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   194f2:	aa08      	add	r2, sp, #32
   194f4:	2103      	movs	r1, #3
   194f6:	4620      	mov	r0, r4
   194f8:	f7ea fab0 	bl	3a5c <sdc_cfg_set>
	if (required_memory < 0) {
   194fc:	2800      	cmp	r0, #0
   194fe:	db14      	blt.n	1952a <hci_driver_open+0x9a>
	cfg.event_length.event_length_us =
   19500:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19504:	aa08      	add	r2, sp, #32
   19506:	2104      	movs	r1, #4
   19508:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1950a:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1950c:	f7ea faa6 	bl	3a5c <sdc_cfg_set>
	if (required_memory < 0) {
   19510:	2800      	cmp	r0, #0
   19512:	db0a      	blt.n	1952a <hci_driver_open+0x9a>
	if (required_memory > sizeof(sdc_mempool)) {
   19514:	f5b0 7f71 	cmp.w	r0, #964	; 0x3c4
   19518:	dd09      	ble.n	1952e <hci_driver_open+0x9e>
		k_panic();
   1951a:	4040      	eors	r0, r0
   1951c:	f380 8811 	msr	BASEPRI, r0
   19520:	f04f 0004 	mov.w	r0, #4
   19524:	df02      	svc	2
		return -ENOMEM;
   19526:	f06f 000b 	mvn.w	r0, #11
}
   1952a:	b00e      	add	sp, #56	; 0x38
   1952c:	bd10      	pop	{r4, pc}
			err = sdc_support_adv();
   1952e:	f7f5 fae8 	bl	eb02 <sdc_support_adv>
			if (err) {
   19532:	b110      	cbz	r0, 1953a <hci_driver_open+0xaa>
				return -ENOTSUP;
   19534:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19538:	e7f7      	b.n	1952a <hci_driver_open+0x9a>
		err = sdc_support_slave();
   1953a:	f7f5 faf1 	bl	eb20 <sdc_support_slave>
		if (err) {
   1953e:	2800      	cmp	r0, #0
   19540:	d1f8      	bne.n	19534 <hci_driver_open+0xa4>
		err = sdc_support_dle();
   19542:	f7f5 fae3 	bl	eb0c <sdc_support_dle>
		if (err) {
   19546:	2800      	cmp	r0, #0
   19548:	d1f4      	bne.n	19534 <hci_driver_open+0xa4>
		err = sdc_support_le_2m_phy();
   1954a:	f7f5 fae4 	bl	eb16 <sdc_support_le_2m_phy>
		if (err) {
   1954e:	2800      	cmp	r0, #0
   19550:	d1f0      	bne.n	19534 <hci_driver_open+0xa4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   19552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19556:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1955a:	f7ff ff0d 	bl	19378 <multithreading_lock_acquire>
	if (!err) {
   1955e:	4604      	mov	r4, r0
   19560:	b930      	cbnz	r0, 19570 <hci_driver_open+0xe0>
		err = sdc_enable(host_signal, sdc_mempool);
   19562:	490a      	ldr	r1, [pc, #40]	; (1958c <hci_driver_open+0xfc>)
   19564:	480a      	ldr	r0, [pc, #40]	; (19590 <hci_driver_open+0x100>)
   19566:	f7ea faa5 	bl	3ab4 <sdc_enable>
   1956a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1956c:	f7ff ff0c 	bl	19388 <multithreading_lock_release>
	if (err < 0) {
   19570:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   19574:	e7d9      	b.n	1952a <hci_driver_open+0x9a>
   19576:	bf00      	nop
   19578:	000193b1 	.word	0x000193b1
   1957c:	20004120 	.word	0x20004120
   19580:	20002388 	.word	0x20002388
   19584:	00021182 	.word	0x00021182
   19588:	03031b1b 	.word	0x03031b1b
   1958c:	20002e3f 	.word	0x20002e3f
   19590:	00019595 	.word	0x00019595

00019594 <host_signal>:
	z_impl_k_sem_give(sem);
   19594:	4801      	ldr	r0, [pc, #4]	; (1959c <host_signal+0x8>)
   19596:	f001 babf 	b.w	1ab18 <z_impl_k_sem_give>
   1959a:	bf00      	nop
   1959c:	2000084c 	.word	0x2000084c

000195a0 <hci_driver_send>:
{
   195a0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   195a2:	8983      	ldrh	r3, [r0, #12]
{
   195a4:	4605      	mov	r5, r0
	if (!buf->len) {
   195a6:	b383      	cbz	r3, 1960a <hci_driver_send+0x6a>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   195a8:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   195aa:	b1ab      	cbz	r3, 195d8 <hci_driver_send+0x38>
   195ac:	2b02      	cmp	r3, #2
   195ae:	d12c      	bne.n	1960a <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   195b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   195b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   195b8:	f7ff fede 	bl	19378 <multithreading_lock_acquire>
	if (!errcode) {
   195bc:	4604      	mov	r4, r0
   195be:	b948      	cbnz	r0, 195d4 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   195c0:	68a8      	ldr	r0, [r5, #8]
   195c2:	f7f5 fdd0 	bl	f166 <sdc_hci_data_put>
   195c6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   195c8:	f7ff fede 	bl	19388 <multithreading_lock_release>
		if (errcode) {
   195cc:	b1c4      	cbz	r4, 19600 <hci_driver_send+0x60>
   195ce:	4810      	ldr	r0, [pc, #64]	; (19610 <hci_driver_send+0x70>)
   195d0:	f001 faa2 	bl	1ab18 <z_impl_k_sem_give>
}
   195d4:	4620      	mov	r0, r4
   195d6:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   195d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   195dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   195e0:	f7ff feca 	bl	19378 <multithreading_lock_acquire>
	if (!errcode) {
   195e4:	4604      	mov	r4, r0
   195e6:	2800      	cmp	r0, #0
   195e8:	d1f4      	bne.n	195d4 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   195ea:	68a8      	ldr	r0, [r5, #8]
   195ec:	f000 f812 	bl	19614 <hci_internal_cmd_put>
   195f0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   195f2:	f7ff fec9 	bl	19388 <multithreading_lock_release>
	if (errcode) {
   195f6:	2c00      	cmp	r4, #0
   195f8:	d1ec      	bne.n	195d4 <hci_driver_send+0x34>
   195fa:	4805      	ldr	r0, [pc, #20]	; (19610 <hci_driver_send+0x70>)
   195fc:	f001 fa8c 	bl	1ab18 <z_impl_k_sem_give>
		net_buf_unref(buf);
   19600:	4628      	mov	r0, r5
   19602:	f7ff fb0d 	bl	18c20 <net_buf_unref>
   19606:	2400      	movs	r4, #0
   19608:	e7e4      	b.n	195d4 <hci_driver_send+0x34>
	switch (type) {
   1960a:	f06f 0415 	mvn.w	r4, #21
   1960e:	e7e1      	b.n	195d4 <hci_driver_send+0x34>
   19610:	2000084c 	.word	0x2000084c

00019614 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   19614:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   19616:	4c8a      	ldr	r4, [pc, #552]	; (19840 <hci_internal_cmd_put+0x22c>)
   19618:	7823      	ldrb	r3, [r4, #0]
   1961a:	2b00      	cmp	r3, #0
   1961c:	f040 82b8 	bne.w	19b90 <hci_internal_cmd_put+0x57c>
	return ((uint16_t)src[1] << 8) | src[0];
   19620:	7843      	ldrb	r3, [r0, #1]
   19622:	7805      	ldrb	r5, [r0, #0]
   19624:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   19628:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1962c:	b22e      	sxth	r6, r5
   1962e:	ea4f 2395 	mov.w	r3, r5, lsr #10
   19632:	d20d      	bcs.n	19650 <hci_internal_cmd_put+0x3c>
   19634:	b17b      	cbz	r3, 19656 <hci_internal_cmd_put+0x42>
   19636:	3b01      	subs	r3, #1
   19638:	2b07      	cmp	r3, #7
   1963a:	d80c      	bhi.n	19656 <hci_internal_cmd_put+0x42>
   1963c:	e8df f013 	tbh	[pc, r3, lsl #1]
   19640:	000b000e 	.word	0x000b000e
   19644:	0060002c 	.word	0x0060002c
   19648:	000b000b 	.word	0x000b000b
   1964c:	0104000b 	.word	0x0104000b
   19650:	2b3f      	cmp	r3, #63	; 0x3f
   19652:	f000 821d 	beq.w	19a90 <hci_internal_cmd_put+0x47c>
   19656:	2304      	movs	r3, #4
   19658:	2001      	movs	r0, #1
   1965a:	e254      	b.n	19b06 <hci_internal_cmd_put+0x4f2>
	switch (opcode)	{
   1965c:	f240 4306 	movw	r3, #1030	; 0x406
   19660:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19662:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   19666:	d005      	beq.n	19674 <hci_internal_cmd_put+0x60>
   19668:	f240 431d 	movw	r3, #1053	; 0x41d
   1966c:	429e      	cmp	r6, r3
   1966e:	d010      	beq.n	19692 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   19670:	2001      	movs	r0, #1
   19672:	e001      	b.n	19678 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   19674:	f7f5 fe8a 	bl	f38c <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19678:	230f      	movs	r3, #15
   1967a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1967c:	2304      	movs	r3, #4
   1967e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   19680:	2301      	movs	r3, #1
	evt_data->status = status_code;
   19682:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   19684:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   19686:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1968a:	2301      	movs	r3, #1
   1968c:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1968e:	2000      	movs	r0, #0
}
   19690:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   19692:	f7f5 fe7d 	bl	f390 <sdc_hci_cmd_lc_read_remote_version_information>
   19696:	e7ef      	b.n	19678 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   19698:	f640 4363 	movw	r3, #3171	; 0xc63
   1969c:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1969e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   196a2:	d025      	beq.n	196f0 <hci_internal_cmd_put+0xdc>
   196a4:	dc0f      	bgt.n	196c6 <hci_internal_cmd_put+0xb2>
   196a6:	f640 4303 	movw	r3, #3075	; 0xc03
   196aa:	429e      	cmp	r6, r3
   196ac:	d018      	beq.n	196e0 <hci_internal_cmd_put+0xcc>
   196ae:	f640 432d 	movw	r3, #3117	; 0xc2d
   196b2:	429e      	cmp	r6, r3
   196b4:	d017      	beq.n	196e6 <hci_internal_cmd_put+0xd2>
   196b6:	f640 4301 	movw	r3, #3073	; 0xc01
   196ba:	429e      	cmp	r6, r3
   196bc:	d1d8      	bne.n	19670 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   196be:	f7f5 fd6e 	bl	f19e <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out +=
   196c2:	2304      	movs	r3, #4
   196c4:	e0b8      	b.n	19838 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   196c6:	f640 437b 	movw	r3, #3195	; 0xc7b
   196ca:	429e      	cmp	r6, r3
   196cc:	d013      	beq.n	196f6 <hci_internal_cmd_put+0xe2>
   196ce:	f640 437c 	movw	r3, #3196	; 0xc7c
   196d2:	429e      	cmp	r6, r3
   196d4:	d1cc      	bne.n	19670 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   196d6:	495b      	ldr	r1, [pc, #364]	; (19844 <hci_internal_cmd_put+0x230>)
   196d8:	f7f5 fd6b 	bl	f1b2 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   196dc:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   196de:	e0ab      	b.n	19838 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   196e0:	f7ea fba6 	bl	3e30 <sdc_hci_cmd_cb_reset>
   196e4:	e7ed      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   196e6:	4957      	ldr	r1, [pc, #348]	; (19844 <hci_internal_cmd_put+0x230>)
   196e8:	f7f5 fd57 	bl	f19a <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   196ec:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   196ee:	e0a3      	b.n	19838 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   196f0:	f7f5 fd5a 	bl	f1a8 <sdc_hci_cmd_cb_set_event_mask_page_2>
   196f4:	e7e5      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   196f6:	4953      	ldr	r1, [pc, #332]	; (19844 <hci_internal_cmd_put+0x230>)
   196f8:	f7f5 fd4d 	bl	f196 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   196fc:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   196fe:	e09b      	b.n	19838 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   19700:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   19704:	3e01      	subs	r6, #1
   19706:	2e08      	cmp	r6, #8
   19708:	d8b2      	bhi.n	19670 <hci_internal_cmd_put+0x5c>
   1970a:	a301      	add	r3, pc, #4	; (adr r3, 19710 <hci_internal_cmd_put+0xfc>)
   1970c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19710:	00019735 	.word	0x00019735
   19714:	0001973f 	.word	0x0001973f
   19718:	00019829 	.word	0x00019829
   1971c:	00019671 	.word	0x00019671
   19720:	00019671 	.word	0x00019671
   19724:	00019671 	.word	0x00019671
   19728:	00019671 	.word	0x00019671
   1972c:	00019671 	.word	0x00019671
   19730:	00019831 	.word	0x00019831
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   19734:	4843      	ldr	r0, [pc, #268]	; (19844 <hci_internal_cmd_put+0x230>)
   19736:	f7f5 fddc 	bl	f2f2 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1973a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1973c:	e07c      	b.n	19838 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1973e:	4841      	ldr	r0, [pc, #260]	; (19844 <hci_internal_cmd_put+0x230>)
   19740:	222e      	movs	r2, #46	; 0x2e
   19742:	2100      	movs	r1, #0
   19744:	f003 fb04 	bl	1cd50 <memset>
	cmds->hci_disconnect = 1;
   19748:	79e3      	ldrb	r3, [r4, #7]
   1974a:	f043 0320 	orr.w	r3, r3, #32
   1974e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   19750:	7a63      	ldrb	r3, [r4, #9]
   19752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19756:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   19758:	7b23      	ldrb	r3, [r4, #12]
   1975a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1975e:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   19760:	7c63      	ldrb	r3, [r4, #17]
   19762:	f043 0304 	orr.w	r3, r3, #4
   19766:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   19768:	7d63      	ldrb	r3, [r4, #21]
   1976a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1976e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   19772:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   19774:	7da3      	ldrb	r3, [r4, #22]
   19776:	f043 0302 	orr.w	r3, r3, #2
   1977a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1977c:	7f63      	ldrb	r3, [r4, #29]
   1977e:	f043 0304 	orr.w	r3, r3, #4
   19782:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   19784:	f894 3020 	ldrb.w	r3, [r4, #32]
   19788:	f063 0308 	orn	r3, r3, #8
   1978c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   19790:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   19794:	f063 033c 	orn	r3, r3, #60	; 0x3c
   19798:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1979c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   197a0:	f063 030c 	orn	r3, r3, #12
   197a4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   197a8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   197ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   197b0:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   197b4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   197b8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   197bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   197c0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   197c4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   197c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   197cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   197d0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   197d4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   197d8:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   197dc:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   197e0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   197e4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   197e8:	f063 0301 	orn	r3, r3, #1
   197ec:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   197f0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   197f4:	f043 0301 	orr.w	r3, r3, #1
   197f8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   197fc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   19800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19804:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   19808:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1980c:	f043 0304 	orr.w	r3, r3, #4
   19810:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   19814:	2344      	movs	r3, #68	; 0x44
		return 0;
   19816:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19818:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1981a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1981c:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1981e:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   19820:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   19822:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   19824:	71a0      	strb	r0, [r4, #6]
}
   19826:	e730      	b.n	1968a <hci_internal_cmd_put+0x76>
		return sdc_hci_cmd_ip_read_local_supported_features((void *)event_out_params);
   19828:	4806      	ldr	r0, [pc, #24]	; (19844 <hci_internal_cmd_put+0x230>)
   1982a:	f7f5 fd60 	bl	f2ee <sdc_hci_cmd_ip_read_local_supported_features>
   1982e:	e784      	b.n	1973a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   19830:	4804      	ldr	r0, [pc, #16]	; (19844 <hci_internal_cmd_put+0x230>)
   19832:	f7f5 fd5a 	bl	f2ea <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   19836:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   19838:	2801      	cmp	r0, #1
   1983a:	d1ed      	bne.n	19818 <hci_internal_cmd_put+0x204>
   1983c:	e71c      	b.n	19678 <hci_internal_cmd_put+0x64>
   1983e:	bf00      	nop
   19840:	20003203 	.word	0x20003203
   19844:	2000320a 	.word	0x2000320a
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19848:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1984c:	3e01      	subs	r6, #1
   1984e:	3003      	adds	r0, #3
	switch (opcode)	{
   19850:	2e4d      	cmp	r6, #77	; 0x4d
   19852:	f63f af0d 	bhi.w	19670 <hci_internal_cmd_put+0x5c>
   19856:	a301      	add	r3, pc, #4	; (adr r3, 1985c <hci_internal_cmd_put+0x248>)
   19858:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1985c:	00019995 	.word	0x00019995
   19860:	0001999b 	.word	0x0001999b
   19864:	000199a3 	.word	0x000199a3
   19868:	00019671 	.word	0x00019671
   1986c:	000199ab 	.word	0x000199ab
   19870:	000199b1 	.word	0x000199b1
   19874:	000199b7 	.word	0x000199b7
   19878:	000199c1 	.word	0x000199c1
   1987c:	000199c7 	.word	0x000199c7
   19880:	000199cd 	.word	0x000199cd
   19884:	00019671 	.word	0x00019671
   19888:	00019671 	.word	0x00019671
   1988c:	00019671 	.word	0x00019671
   19890:	00019671 	.word	0x00019671
   19894:	000199d3 	.word	0x000199d3
   19898:	000199db 	.word	0x000199db
   1989c:	000199e1 	.word	0x000199e1
   198a0:	000199e7 	.word	0x000199e7
   198a4:	00019671 	.word	0x00019671
   198a8:	00019671 	.word	0x00019671
   198ac:	000199ed 	.word	0x000199ed
   198b0:	000199f7 	.word	0x000199f7
   198b4:	000199fd 	.word	0x000199fd
   198b8:	00019a07 	.word	0x00019a07
   198bc:	00019671 	.word	0x00019671
   198c0:	00019a0f 	.word	0x00019a0f
   198c4:	00019a17 	.word	0x00019a17
   198c8:	00019a1f 	.word	0x00019a1f
   198cc:	00019671 	.word	0x00019671
   198d0:	00019671 	.word	0x00019671
   198d4:	00019671 	.word	0x00019671
   198d8:	00019671 	.word	0x00019671
   198dc:	00019671 	.word	0x00019671
   198e0:	00019a2b 	.word	0x00019a2b
   198e4:	00019a33 	.word	0x00019a33
   198e8:	00019a3b 	.word	0x00019a3b
   198ec:	00019671 	.word	0x00019671
   198f0:	00019671 	.word	0x00019671
   198f4:	00019a41 	.word	0x00019a41
   198f8:	00019a47 	.word	0x00019a47
   198fc:	00019a4d 	.word	0x00019a4d
   19900:	00019a53 	.word	0x00019a53
   19904:	00019671 	.word	0x00019671
   19908:	00019671 	.word	0x00019671
   1990c:	00019a5b 	.word	0x00019a5b
   19910:	00019a61 	.word	0x00019a61
   19914:	00019a67 	.word	0x00019a67
   19918:	00019a6f 	.word	0x00019a6f
   1991c:	00019a77 	.word	0x00019a77
   19920:	00019a7d 	.word	0x00019a7d
   19924:	00019671 	.word	0x00019671
   19928:	00019671 	.word	0x00019671
   1992c:	00019671 	.word	0x00019671
   19930:	00019671 	.word	0x00019671
   19934:	00019671 	.word	0x00019671
   19938:	00019671 	.word	0x00019671
   1993c:	00019671 	.word	0x00019671
   19940:	00019671 	.word	0x00019671
   19944:	00019671 	.word	0x00019671
   19948:	00019671 	.word	0x00019671
   1994c:	00019671 	.word	0x00019671
   19950:	00019671 	.word	0x00019671
   19954:	00019671 	.word	0x00019671
   19958:	00019671 	.word	0x00019671
   1995c:	00019671 	.word	0x00019671
   19960:	00019671 	.word	0x00019671
   19964:	00019671 	.word	0x00019671
   19968:	00019671 	.word	0x00019671
   1996c:	00019671 	.word	0x00019671
   19970:	00019671 	.word	0x00019671
   19974:	00019671 	.word	0x00019671
   19978:	00019671 	.word	0x00019671
   1997c:	00019671 	.word	0x00019671
   19980:	00019671 	.word	0x00019671
   19984:	00019a83 	.word	0x00019a83
   19988:	00019671 	.word	0x00019671
   1998c:	00019671 	.word	0x00019671
   19990:	00019a8b 	.word	0x00019a8b
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   19994:	f7f5 fce9 	bl	f36a <sdc_hci_cmd_le_set_event_mask>
   19998:	e693      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1999a:	487f      	ldr	r0, [pc, #508]	; (19b98 <hci_internal_cmd_put+0x584>)
   1999c:	f7f5 fcc1 	bl	f322 <sdc_hci_cmd_le_read_buffer_size>
   199a0:	e6a4      	b.n	196ec <hci_internal_cmd_put+0xd8>
		return sdc_hci_cmd_le_read_local_supported_features((void *)event_out_params);
   199a2:	487d      	ldr	r0, [pc, #500]	; (19b98 <hci_internal_cmd_put+0x584>)
   199a4:	f7f5 fcc1 	bl	f32a <sdc_hci_cmd_le_read_local_supported_features>
   199a8:	e6c7      	b.n	1973a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   199aa:	f7f5 fce7 	bl	f37c <sdc_hci_cmd_le_set_random_address>
   199ae:	e688      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   199b0:	f7f5 fcd5 	bl	f35e <sdc_hci_cmd_le_set_adv_params>
   199b4:	e685      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   199b6:	4878      	ldr	r0, [pc, #480]	; (19b98 <hci_internal_cmd_put+0x584>)
   199b8:	f7f5 fcb1 	bl	f31e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   199bc:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   199be:	e73b      	b.n	19838 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   199c0:	f7f5 fcc9 	bl	f356 <sdc_hci_cmd_le_set_adv_data>
   199c4:	e67d      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   199c6:	f7f5 fcdd 	bl	f384 <sdc_hci_cmd_le_set_scan_response_data>
   199ca:	e67a      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   199cc:	f7f5 fcc5 	bl	f35a <sdc_hci_cmd_le_set_adv_enable>
   199d0:	e677      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   199d2:	4871      	ldr	r0, [pc, #452]	; (19b98 <hci_internal_cmd_put+0x584>)
   199d4:	f7f5 fcb7 	bl	f346 <sdc_hci_cmd_le_read_white_list_size>
   199d8:	e7f0      	b.n	199bc <hci_internal_cmd_put+0x3a8>
		return sdc_hci_cmd_le_clear_white_list();
   199da:	f7f5 fc92 	bl	f302 <sdc_hci_cmd_le_clear_white_list>
   199de:	e670      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   199e0:	f7f5 fc8b 	bl	f2fa <sdc_hci_cmd_le_add_device_to_white_list>
   199e4:	e66d      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   199e6:	f7f5 fcb2 	bl	f34e <sdc_hci_cmd_le_remove_device_from_white_list>
   199ea:	e66a      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   199ec:	496a      	ldr	r1, [pc, #424]	; (19b98 <hci_internal_cmd_put+0x584>)
   199ee:	f7f5 fc9a 	bl	f326 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   199f2:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   199f4:	e720      	b.n	19838 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   199f6:	f7f5 fc9e 	bl	f336 <sdc_hci_cmd_le_read_remote_features>
   199fa:	e63d      	b.n	19678 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   199fc:	4966      	ldr	r1, [pc, #408]	; (19b98 <hci_internal_cmd_put+0x584>)
   199fe:	f7f5 fc82 	bl	f306 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   19a02:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   19a04:	e718      	b.n	19838 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   19a06:	4864      	ldr	r0, [pc, #400]	; (19b98 <hci_internal_cmd_put+0x584>)
   19a08:	f7f5 fc87 	bl	f31a <sdc_hci_cmd_le_rand>
   19a0c:	e695      	b.n	1973a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   19a0e:	4962      	ldr	r1, [pc, #392]	; (19b98 <hci_internal_cmd_put+0x584>)
   19a10:	f7f5 fc7f 	bl	f312 <sdc_hci_cmd_le_long_term_key_request_reply>
   19a14:	e662      	b.n	196dc <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   19a16:	4960      	ldr	r1, [pc, #384]	; (19b98 <hci_internal_cmd_put+0x584>)
   19a18:	f7f5 fc77 	bl	f30a <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   19a1c:	e65e      	b.n	196dc <hci_internal_cmd_put+0xc8>
	*buf = states1;
   19a1e:	238f      	movs	r3, #143	; 0x8f
   19a20:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   19a22:	23c0      	movs	r3, #192	; 0xc0
   19a24:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   19a26:	230c      	movs	r3, #12
   19a28:	e6f5      	b.n	19816 <hci_internal_cmd_put+0x202>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   19a2a:	495b      	ldr	r1, [pc, #364]	; (19b98 <hci_internal_cmd_put+0x584>)
   19a2c:	f7f5 fc99 	bl	f362 <sdc_hci_cmd_le_set_data_length>
   19a30:	e654      	b.n	196dc <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   19a32:	4859      	ldr	r0, [pc, #356]	; (19b98 <hci_internal_cmd_put+0x584>)
   19a34:	f7f5 fc83 	bl	f33e <sdc_hci_cmd_le_read_suggested_default_data_length>
   19a38:	e660      	b.n	196fc <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   19a3a:	f7f5 fca5 	bl	f388 <sdc_hci_cmd_le_write_suggested_default_data_length>
   19a3e:	e640      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   19a40:	f7f5 fc59 	bl	f2f6 <sdc_hci_cmd_le_add_device_to_resolving_list>
   19a44:	e63d      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   19a46:	f7f5 fc80 	bl	f34a <sdc_hci_cmd_le_remove_device_from_resolving_list>
   19a4a:	e63a      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   19a4c:	f7f5 fc57 	bl	f2fe <sdc_hci_cmd_le_clear_resolving_list>
   19a50:	e637      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19a52:	4851      	ldr	r0, [pc, #324]	; (19b98 <hci_internal_cmd_put+0x584>)
   19a54:	f7f5 fc71 	bl	f33a <sdc_hci_cmd_le_read_resolving_list_size>
   19a58:	e7b0      	b.n	199bc <hci_internal_cmd_put+0x3a8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   19a5a:	f7f5 fc7a 	bl	f352 <sdc_hci_cmd_le_set_address_resolution_enable>
   19a5e:	e630      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   19a60:	f7f5 fc8e 	bl	f380 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   19a64:	e62d      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   19a66:	484c      	ldr	r0, [pc, #304]	; (19b98 <hci_internal_cmd_put+0x584>)
   19a68:	f7f5 fc61 	bl	f32e <sdc_hci_cmd_le_read_max_data_length>
   19a6c:	e665      	b.n	1973a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   19a6e:	494a      	ldr	r1, [pc, #296]	; (19b98 <hci_internal_cmd_put+0x584>)
   19a70:	f7f5 fc5f 	bl	f332 <sdc_hci_cmd_le_read_phy>
   19a74:	e642      	b.n	196fc <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   19a76:	f7f5 fc76 	bl	f366 <sdc_hci_cmd_le_set_default_phy>
   19a7a:	e622      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   19a7c:	f7f5 fc7a 	bl	f374 <sdc_hci_cmd_le_set_phy>
   19a80:	e5fa      	b.n	19678 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   19a82:	4845      	ldr	r0, [pc, #276]	; (19b98 <hci_internal_cmd_put+0x584>)
   19a84:	f7f5 fc5d 	bl	f342 <sdc_hci_cmd_le_read_transmit_power>
   19a88:	e628      	b.n	196dc <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   19a8a:	f7f5 fc75 	bl	f378 <sdc_hci_cmd_le_set_privacy_mode>
   19a8e:	e618      	b.n	196c2 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   19a90:	f64f 4309 	movw	r3, #64521	; 0xfc09
   19a94:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19a96:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   19a9a:	d81f      	bhi.n	19adc <hci_internal_cmd_put+0x4c8>
   19a9c:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   19aa0:	f43f ade6 	beq.w	19670 <hci_internal_cmd_put+0x5c>
   19aa4:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   19aa8:	3b01      	subs	r3, #1
   19aaa:	2b08      	cmp	r3, #8
   19aac:	f63f ade0 	bhi.w	19670 <hci_internal_cmd_put+0x5c>
   19ab0:	a201      	add	r2, pc, #4	; (adr r2, 19ab8 <hci_internal_cmd_put+0x4a4>)
   19ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19ab6:	bf00      	nop
   19ab8:	00019aff 	.word	0x00019aff
   19abc:	00019b2d 	.word	0x00019b2d
   19ac0:	00019671 	.word	0x00019671
   19ac4:	00019671 	.word	0x00019671
   19ac8:	00019671 	.word	0x00019671
   19acc:	00019b41 	.word	0x00019b41
   19ad0:	00019671 	.word	0x00019671
   19ad4:	00019671 	.word	0x00019671
   19ad8:	00019b37 	.word	0x00019b37
   19adc:	f205 23ff 	addw	r3, r5, #767	; 0x2ff
   19ae0:	b29b      	uxth	r3, r3
   19ae2:	2b04      	cmp	r3, #4
   19ae4:	f63f adc4 	bhi.w	19670 <hci_internal_cmd_put+0x5c>
   19ae8:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   19aec:	3b01      	subs	r3, #1
   19aee:	2b04      	cmp	r3, #4
   19af0:	f63f adbe 	bhi.w	19670 <hci_internal_cmd_put+0x5c>
   19af4:	e8df f003 	tbb	[pc, r3]
   19af8:	312e2b28 	.word	0x312e2b28
   19afc:	34          	.byte	0x34
   19afd:	00          	.byte	0x00
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   19afe:	4826      	ldr	r0, [pc, #152]	; (19b98 <hci_internal_cmd_put+0x584>)
   19b00:	f7ea f9ae 	bl	3e60 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   19b04:	2310      	movs	r3, #16
	switch (hci_opcode) {
   19b06:	f242 0219 	movw	r2, #8217	; 0x2019
   19b0a:	4296      	cmp	r6, r2
   19b0c:	dc38      	bgt.n	19b80 <hci_internal_cmd_put+0x56c>
   19b0e:	f242 020c 	movw	r2, #8204	; 0x200c
   19b12:	4296      	cmp	r6, r2
   19b14:	dc27      	bgt.n	19b66 <hci_internal_cmd_put+0x552>
   19b16:	f240 4206 	movw	r2, #1030	; 0x406
   19b1a:	4296      	cmp	r6, r2
   19b1c:	f43f adac 	beq.w	19678 <hci_internal_cmd_put+0x64>
   19b20:	f240 421d 	movw	r2, #1053	; 0x41d
   19b24:	4296      	cmp	r6, r2
   19b26:	f43f ada7 	beq.w	19678 <hci_internal_cmd_put+0x64>
   19b2a:	e685      	b.n	19838 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_read_supported_commands((void *)event_out_params);
   19b2c:	481a      	ldr	r0, [pc, #104]	; (19b98 <hci_internal_cmd_put+0x584>)
   19b2e:	f7f5 fbca 	bl	f2c6 <sdc_hci_cmd_vs_zephyr_read_supported_commands>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   19b32:	2344      	movs	r3, #68	; 0x44
		return sdc_hci_cmd_vs_zephyr_read_supported_commands((void *)event_out_params);
   19b34:	e7e7      	b.n	19b06 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   19b36:	4818      	ldr	r0, [pc, #96]	; (19b98 <hci_internal_cmd_put+0x584>)
   19b38:	f7f5 fb7e 	bl	f238 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   19b3c:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   19b3e:	e7e2      	b.n	19b06 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   19b40:	f7f5 fbd1 	bl	f2e6 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   19b44:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   19b46:	e7de      	b.n	19b06 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   19b48:	f7f5 fb69 	bl	f21e <sdc_hci_cmd_vs_llpm_mode_set>
   19b4c:	e5b9      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   19b4e:	f7f5 fb3a 	bl	f1c6 <sdc_hci_cmd_vs_conn_update>
   19b52:	e5b6      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   19b54:	f7f5 fb2f 	bl	f1b6 <sdc_hci_cmd_vs_conn_event_extend>
   19b58:	e5b3      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   19b5a:	f7f5 fb68 	bl	f22e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   19b5e:	e5b0      	b.n	196c2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   19b60:	f7f5 fb5b 	bl	f21a <sdc_hci_cmd_vs_event_length_set>
   19b64:	e5ad      	b.n	196c2 <hci_internal_cmd_put+0xae>
   19b66:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   19b6a:	3a0d      	subs	r2, #13
   19b6c:	2101      	movs	r1, #1
   19b6e:	b292      	uxth	r2, r2
   19b70:	fa01 f202 	lsl.w	r2, r1, r2
   19b74:	f241 2141 	movw	r1, #4673	; 0x1241
   19b78:	420a      	tst	r2, r1
   19b7a:	f43f ae5d 	beq.w	19838 <hci_internal_cmd_put+0x224>
   19b7e:	e57b      	b.n	19678 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   19b80:	f242 0232 	movw	r2, #8242	; 0x2032
   19b84:	4296      	cmp	r6, r2
   19b86:	f43f ad77 	beq.w	19678 <hci_internal_cmd_put+0x64>
   19b8a:	f242 0243 	movw	r2, #8259	; 0x2043
   19b8e:	e7c9      	b.n	19b24 <hci_internal_cmd_put+0x510>
		return -NRF_EPERM;
   19b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19b94:	e57c      	b.n	19690 <hci_internal_cmd_put+0x7c>
   19b96:	bf00      	nop
   19b98:	2000320a 	.word	0x2000320a

00019b9c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   19b9c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   19b9e:	4c07      	ldr	r4, [pc, #28]	; (19bbc <hci_internal_evt_get+0x20>)
   19ba0:	7823      	ldrb	r3, [r4, #0]
   19ba2:	b13b      	cbz	r3, 19bb4 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   19ba4:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   19ba6:	1c61      	adds	r1, r4, #1
   19ba8:	3202      	adds	r2, #2
   19baa:	f003 f8a6 	bl	1ccfa <memcpy>
		cmd_complete_or_status.occurred = false;
   19bae:	2000      	movs	r0, #0
   19bb0:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   19bb2:	bd10      	pop	{r4, pc}
   19bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   19bb8:	f7f5 bae0 	b.w	f17c <sdc_hci_evt_get>
   19bbc:	20003203 	.word	0x20003203

00019bc0 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   19bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   19bc4:	4c0b      	ldr	r4, [pc, #44]	; (19bf4 <bt_rand+0x34>)
   19bc6:	6823      	ldr	r3, [r4, #0]
{
   19bc8:	4605      	mov	r5, r0
   19bca:	460e      	mov	r6, r1
   19bcc:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   19bce:	b13b      	cbz	r3, 19be0 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   19bd0:	6838      	ldr	r0, [r7, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   19bd2:	6883      	ldr	r3, [r0, #8]
   19bd4:	b2b2      	uxth	r2, r6
   19bd6:	4629      	mov	r1, r5
   19bd8:	681b      	ldr	r3, [r3, #0]
}
   19bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19bde:	4718      	bx	r3
   19be0:	4805      	ldr	r0, [pc, #20]	; (19bf8 <bt_rand+0x38>)
   19be2:	f000 fa5b 	bl	1a09c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19be6:	6020      	str	r0, [r4, #0]
		if (!dev) {
   19be8:	2800      	cmp	r0, #0
   19bea:	d1f1      	bne.n	19bd0 <bt_rand+0x10>
}
   19bec:	f06f 0012 	mvn.w	r0, #18
   19bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19bf4:	200028c0 	.word	0x200028c0
   19bf8:	0002117e 	.word	0x0002117e

00019bfc <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   19bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	err_code = nrfx_dppi_channel_alloc(&channel);
	__ASSERT_NO_MSG(err_code == NRFX_SUCCESS && channel == 2);
#endif

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   19bfe:	2314      	movs	r3, #20
   19c00:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19c04:	4a0f      	ldr	r2, [pc, #60]	; (19c44 <mpsl_lib_init+0x48>)
	clock_cfg.rc_temp_ctiv = 0;
   19c06:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   19c08:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19c0a:	2119      	movs	r1, #25
   19c0c:	4668      	mov	r0, sp
	clock_cfg.source = m_config_clock_source_get();
   19c0e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   19c12:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19c16:	f7e9 fcfd 	bl	3614 <mpsl_init>
	if (err) {
   19c1a:	4604      	mov	r4, r0
   19c1c:	b970      	cbnz	r0, 19c3c <mpsl_lib_init+0x40>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19c1e:	4601      	mov	r1, r0
   19c20:	462a      	mov	r2, r5
   19c22:	2008      	movs	r0, #8
   19c24:	f7f9 fd6a 	bl	136fc <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19c28:	462a      	mov	r2, r5
   19c2a:	4621      	mov	r1, r4
   19c2c:	200b      	movs	r0, #11
   19c2e:	f7f9 fd65 	bl	136fc <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19c32:	462a      	mov	r2, r5
   19c34:	4621      	mov	r1, r4
   19c36:	4628      	mov	r0, r5
   19c38:	f7f9 fd60 	bl	136fc <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   19c3c:	4620      	mov	r0, r4
   19c3e:	b003      	add	sp, #12
   19c40:	bd30      	pop	{r4, r5, pc}
   19c42:	bf00      	nop
   19c44:	0001f9c1 	.word	0x0001f9c1

00019c48 <mpsl_low_prio_irq_handler>:
   19c48:	4801      	ldr	r0, [pc, #4]	; (19c50 <mpsl_low_prio_irq_handler+0x8>)
   19c4a:	f000 bf65 	b.w	1ab18 <z_impl_k_sem_give>
   19c4e:	bf00      	nop
   19c50:	20000864 	.word	0x20000864

00019c54 <signal_thread>:
{
   19c54:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   19c56:	4c09      	ldr	r4, [pc, #36]	; (19c7c <signal_thread+0x28>)
   19c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19c60:	4620      	mov	r0, r4
   19c62:	f000 ff7f 	bl	1ab64 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   19c66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c6e:	f7ff fb83 	bl	19378 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   19c72:	f7f4 fe5f 	bl	e934 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   19c76:	f7ff fb87 	bl	19388 <multithreading_lock_release>
	while (true) {
   19c7a:	e7ed      	b.n	19c58 <signal_thread+0x4>
   19c7c:	20000864 	.word	0x20000864

00019c80 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   19c80:	b530      	push	{r4, r5, lr}
   19c82:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19c84:	4d0f      	ldr	r5, [pc, #60]	; (19cc4 <mpsl_signal_thread_init+0x44>)
   19c86:	4910      	ldr	r1, [pc, #64]	; (19cc8 <mpsl_signal_thread_init+0x48>)
   19c88:	2200      	movs	r2, #0
   19c8a:	2300      	movs	r3, #0
   19c8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19c90:	2400      	movs	r4, #0
   19c92:	f06f 0309 	mvn.w	r3, #9
   19c96:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19c9a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19c9e:	4b0b      	ldr	r3, [pc, #44]	; (19ccc <mpsl_signal_thread_init+0x4c>)
   19ca0:	9400      	str	r4, [sp, #0]
   19ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19ca6:	4628      	mov	r0, r5
   19ca8:	f000 ffd0 	bl	1ac4c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19cac:	4908      	ldr	r1, [pc, #32]	; (19cd0 <mpsl_signal_thread_init+0x50>)
   19cae:	4628      	mov	r0, r5
   19cb0:	f006 f928 	bl	1ff04 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   19cb4:	4622      	mov	r2, r4
   19cb6:	2104      	movs	r1, #4
   19cb8:	2019      	movs	r0, #25
   19cba:	f7f9 fd1f 	bl	136fc <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   19cbe:	4620      	mov	r0, r4
   19cc0:	b009      	add	sp, #36	; 0x24
   19cc2:	bd30      	pop	{r4, r5, pc}
   19cc4:	20002410 	.word	0x20002410
   19cc8:	20004540 	.word	0x20004540
   19ccc:	00019c55 	.word	0x00019c55
   19cd0:	0002119f 	.word	0x0002119f

00019cd4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   19cd4:	4b01      	ldr	r3, [pc, #4]	; (19cdc <mpsl_hfclk_callback+0x8>)
   19cd6:	2000      	movs	r0, #0
   19cd8:	681b      	ldr	r3, [r3, #0]
   19cda:	4718      	bx	r3
   19cdc:	200028c4 	.word	0x200028c4

00019ce0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   19ce0:	b120      	cbz	r0, 19cec <nrfx_clock_start+0xc>
   19ce2:	2801      	cmp	r0, #1
   19ce4:	d106      	bne.n	19cf4 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   19ce6:	4804      	ldr	r0, [pc, #16]	; (19cf8 <nrfx_clock_start+0x18>)
   19ce8:	f7e9 bb16 	b.w	3318 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19cec:	4b03      	ldr	r3, [pc, #12]	; (19cfc <nrfx_clock_start+0x1c>)
   19cee:	2001      	movs	r0, #1
   19cf0:	681b      	ldr	r3, [r3, #0]
   19cf2:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   19cf4:	4770      	bx	lr
   19cf6:	bf00      	nop
   19cf8:	00019cd5 	.word	0x00019cd5
   19cfc:	200028c4 	.word	0x200028c4

00019d00 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   19d00:	4b01      	ldr	r3, [pc, #4]	; (19d08 <nrfx_clock_init+0x8>)
   19d02:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   19d04:	4801      	ldr	r0, [pc, #4]	; (19d0c <nrfx_clock_init+0xc>)
   19d06:	4770      	bx	lr
   19d08:	200028c4 	.word	0x200028c4
   19d0c:	0bad0000 	.word	0x0bad0000

00019d10 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   19d10:	4b04      	ldr	r3, [pc, #16]	; (19d24 <nrf52_errata_108+0x14>)
   19d12:	6818      	ldr	r0, [r3, #0]
   19d14:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19d16:	bf04      	itt	eq
   19d18:	4b03      	ldreq	r3, [pc, #12]	; (19d28 <nrf52_errata_108+0x18>)
   19d1a:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   19d1c:	1f83      	subs	r3, r0, #6
   19d1e:	4258      	negs	r0, r3
   19d20:	4158      	adcs	r0, r3
   19d22:	4770      	bx	lr
   19d24:	10000130 	.word	0x10000130
   19d28:	f0000fe0 	.word	0xf0000fe0

00019d2c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19d2c:	4b07      	ldr	r3, [pc, #28]	; (19d4c <nrf52_errata_16+0x20>)
   19d2e:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   19d30:	2b06      	cmp	r3, #6
   19d32:	d109      	bne.n	19d48 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   19d34:	4b06      	ldr	r3, [pc, #24]	; (19d50 <nrf52_errata_16+0x24>)
   19d36:	681b      	ldr	r3, [r3, #0]
   19d38:	f3c3 1303 	ubfx	r3, r3, #4, #4
   19d3c:	3b03      	subs	r3, #3
   19d3e:	2b03      	cmp	r3, #3
   19d40:	d802      	bhi.n	19d48 <nrf52_errata_16+0x1c>
   19d42:	4a04      	ldr	r2, [pc, #16]	; (19d54 <nrf52_errata_16+0x28>)
   19d44:	5cd0      	ldrb	r0, [r2, r3]
   19d46:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19d48:	2000      	movs	r0, #0
    #endif
}
   19d4a:	4770      	bx	lr
   19d4c:	f0000fe0 	.word	0xf0000fe0
   19d50:	f0000fe8 	.word	0xf0000fe8
   19d54:	000211b3 	.word	0x000211b3

00019d58 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19d58:	4a02      	ldr	r2, [pc, #8]	; (19d64 <nvmc_wait+0xc>)
   19d5a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19d5e:	2b00      	cmp	r3, #0
   19d60:	d0fb      	beq.n	19d5a <nvmc_wait+0x2>
}
   19d62:	4770      	bx	lr
   19d64:	4001e000 	.word	0x4001e000

00019d68 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19d68:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   19d6a:	f7ff ffd1 	bl	19d10 <nrf52_errata_108>
   19d6e:	b128      	cbz	r0, 19d7c <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   19d70:	4b77      	ldr	r3, [pc, #476]	; (19f50 <SystemInit+0x1e8>)
   19d72:	4a78      	ldr	r2, [pc, #480]	; (19f54 <SystemInit+0x1ec>)
   19d74:	681b      	ldr	r3, [r3, #0]
   19d76:	f3c3 2304 	ubfx	r3, r3, #8, #5
   19d7a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   19d7c:	f7ff ffd6 	bl	19d2c <nrf52_errata_16>
   19d80:	b110      	cbz	r0, 19d88 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   19d82:	4b75      	ldr	r3, [pc, #468]	; (19f58 <SystemInit+0x1f0>)
   19d84:	4a75      	ldr	r2, [pc, #468]	; (19f5c <SystemInit+0x1f4>)
   19d86:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   19d88:	f7ff ffc2 	bl	19d10 <nrf52_errata_108>
   19d8c:	b128      	cbz	r0, 19d9a <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   19d8e:	4b74      	ldr	r3, [pc, #464]	; (19f60 <SystemInit+0x1f8>)
   19d90:	4a74      	ldr	r2, [pc, #464]	; (19f64 <SystemInit+0x1fc>)
   19d92:	681b      	ldr	r3, [r3, #0]
   19d94:	f3c3 3342 	ubfx	r3, r3, #13, #3
   19d98:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   19d9a:	f7ff ffc7 	bl	19d2c <nrf52_errata_16>
   19d9e:	b120      	cbz	r0, 19daa <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   19da0:	4a71      	ldr	r2, [pc, #452]	; (19f68 <SystemInit+0x200>)
   19da2:	68d3      	ldr	r3, [r2, #12]
   19da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19da8:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   19daa:	f7ff ffb1 	bl	19d10 <nrf52_errata_108>
   19dae:	b140      	cbz	r0, 19dc2 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19db0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19db4:	2200      	movs	r2, #0
   19db6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   19dba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19dbe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   19dc2:	f7ff ffb3 	bl	19d2c <nrf52_errata_16>
   19dc6:	b110      	cbz	r0, 19dce <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   19dc8:	4b68      	ldr	r3, [pc, #416]	; (19f6c <SystemInit+0x204>)
   19dca:	2203      	movs	r2, #3
   19dcc:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   19dce:	f7ff ffad 	bl	19d2c <nrf52_errata_16>
   19dd2:	b140      	cbz	r0, 19de6 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   19dd4:	4b66      	ldr	r3, [pc, #408]	; (19f70 <SystemInit+0x208>)
   19dd6:	2205      	movs	r2, #5
   19dd8:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   19dda:	2201      	movs	r2, #1
   19ddc:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   19dde:	2200      	movs	r2, #0
   19de0:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   19de2:	223f      	movs	r2, #63	; 0x3f
   19de4:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   19de6:	4b63      	ldr	r3, [pc, #396]	; (19f74 <SystemInit+0x20c>)
   19de8:	681a      	ldr	r2, [r3, #0]
   19dea:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19dec:	bf0b      	itete	eq
   19dee:	4b62      	ldreq	r3, [pc, #392]	; (19f78 <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   19df0:	4b62      	ldrne	r3, [pc, #392]	; (19f7c <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19df2:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   19df4:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   19df6:	bf02      	ittt	eq
   19df8:	3308      	addeq	r3, #8
   19dfa:	681b      	ldreq	r3, [r3, #0]
   19dfc:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   19e00:	2a06      	cmp	r2, #6
   19e02:	d14d      	bne.n	19ea0 <SystemInit+0x138>
            {
                switch(var2)
   19e04:	3b03      	subs	r3, #3
   19e06:	2b03      	cmp	r3, #3
   19e08:	d803      	bhi.n	19e12 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   19e0a:	4a5d      	ldr	r2, [pc, #372]	; (19f80 <SystemInit+0x218>)
   19e0c:	5cd3      	ldrb	r3, [r2, r3]
   19e0e:	2b00      	cmp	r3, #0
   19e10:	d046      	beq.n	19ea0 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19e16:	4b5b      	ldr	r3, [pc, #364]	; (19f84 <SystemInit+0x21c>)
   19e18:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   19e1c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19e20:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19e24:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19e28:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   19e2c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19e30:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19e34:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19e38:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   19e3c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19e40:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19e44:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19e48:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   19e4c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   19e50:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   19e54:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19e58:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19e5c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19e60:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   19e64:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19e68:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19e6c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19e70:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   19e74:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19e78:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19e7c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19e80:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   19e84:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19e88:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19e8c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19e90:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   19e94:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19e98:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19e9c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   19ea0:	f7ff ff36 	bl	19d10 <nrf52_errata_108>
   19ea4:	b128      	cbz	r0, 19eb2 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   19ea6:	4b38      	ldr	r3, [pc, #224]	; (19f88 <SystemInit+0x220>)
   19ea8:	4a38      	ldr	r2, [pc, #224]	; (19f8c <SystemInit+0x224>)
   19eaa:	681b      	ldr	r3, [r3, #0]
   19eac:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   19eb0:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   19eb2:	f7ff ff2d 	bl	19d10 <nrf52_errata_108>
   19eb6:	b148      	cbz	r0, 19ecc <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19ebc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   19ec0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19ec2:	bf44      	itt	mi
   19ec4:	f06f 0201 	mvnmi.w	r2, #1
   19ec8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19ecc:	4b29      	ldr	r3, [pc, #164]	; (19f74 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   19ece:	681b      	ldr	r3, [r3, #0]
   19ed0:	2b06      	cmp	r3, #6
   19ed2:	d10c      	bne.n	19eee <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19ed4:	4b29      	ldr	r3, [pc, #164]	; (19f7c <SystemInit+0x214>)
   19ed6:	681b      	ldr	r3, [r3, #0]
   19ed8:	3b03      	subs	r3, #3
   19eda:	2b03      	cmp	r3, #3
   19edc:	d802      	bhi.n	19ee4 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   19ede:	4a2c      	ldr	r2, [pc, #176]	; (19f90 <SystemInit+0x228>)
   19ee0:	5cd3      	ldrb	r3, [r2, r3]
   19ee2:	b123      	cbz	r3, 19eee <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   19ee4:	4a2b      	ldr	r2, [pc, #172]	; (19f94 <SystemInit+0x22c>)
   19ee6:	6813      	ldr	r3, [r2, #0]
   19ee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   19eec:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19eee:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19ef2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19ef6:	2a00      	cmp	r2, #0
   19ef8:	db03      	blt.n	19f02 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   19efa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19efe:	2b00      	cmp	r3, #0
   19f00:	da22      	bge.n	19f48 <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19f02:	4925      	ldr	r1, [pc, #148]	; (19f98 <SystemInit+0x230>)
   19f04:	2301      	movs	r3, #1
   19f06:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   19f0a:	f7ff ff25 	bl	19d58 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19f0e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   19f12:	2415      	movs	r4, #21
   19f14:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   19f18:	f7ff ff1e 	bl	19d58 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   19f1c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   19f20:	f7ff ff1a 	bl	19d58 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19f24:	2300      	movs	r3, #0
   19f26:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   19f2a:	f7ff ff15 	bl	19d58 <nvmc_wait>
   19f2e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19f32:	491a      	ldr	r1, [pc, #104]	; (19f9c <SystemInit+0x234>)
   19f34:	4b1a      	ldr	r3, [pc, #104]	; (19fa0 <SystemInit+0x238>)
   19f36:	68ca      	ldr	r2, [r1, #12]
   19f38:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   19f3c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19f3e:	60cb      	str	r3, [r1, #12]
   19f40:	f3bf 8f4f 	dsb	sy
    __NOP();
   19f44:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19f46:	e7fd      	b.n	19f44 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19f48:	4b16      	ldr	r3, [pc, #88]	; (19fa4 <SystemInit+0x23c>)
   19f4a:	4a17      	ldr	r2, [pc, #92]	; (19fa8 <SystemInit+0x240>)
   19f4c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   19f4e:	bd10      	pop	{r4, pc}
   19f50:	10000324 	.word	0x10000324
   19f54:	40013540 	.word	0x40013540
   19f58:	4007c074 	.word	0x4007c074
   19f5c:	baadf00d 	.word	0xbaadf00d
   19f60:	10000244 	.word	0x10000244
   19f64:	4000053c 	.word	0x4000053c
   19f68:	e000edf0 	.word	0xe000edf0
   19f6c:	400005a0 	.word	0x400005a0
   19f70:	40005610 	.word	0x40005610
   19f74:	10000130 	.word	0x10000130
   19f78:	f0000fe0 	.word	0xf0000fe0
   19f7c:	10000134 	.word	0x10000134
   19f80:	000211ab 	.word	0x000211ab
   19f84:	4000c000 	.word	0x4000c000
   19f88:	10000258 	.word	0x10000258
   19f8c:	40000ee4 	.word	0x40000ee4
   19f90:	000211af 	.word	0x000211af
   19f94:	4000173c 	.word	0x4000173c
   19f98:	4001e000 	.word	0x4001e000
   19f9c:	e000ed00 	.word	0xe000ed00
   19fa0:	05fa0004 	.word	0x05fa0004
   19fa4:	20000674 	.word	0x20000674
   19fa8:	03d09000 	.word	0x03d09000

00019fac <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19fac:	4b18      	ldr	r3, [pc, #96]	; (1a010 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   19fae:	f8df c06c 	ldr.w	ip, [pc, #108]	; 1a01c <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19fb2:	681b      	ldr	r3, [r3, #0]
{
   19fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19fb8:	43db      	mvns	r3, r3
{
   19fba:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   19fbc:	4f15      	ldr	r7, [pc, #84]	; (1a014 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   19fbe:	4816      	ldr	r0, [pc, #88]	; (1a018 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   19fc4:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   19fc6:	f04f 0e01 	mov.w	lr, #1
   19fca:	b2e6      	uxtb	r6, r4
   19fcc:	b90b      	cbnz	r3, 19fd2 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   19fd2:	f04f 0240 	mov.w	r2, #64	; 0x40
   19fd6:	f3ef 8811 	mrs	r8, BASEPRI
   19fda:	f382 8811 	msr	BASEPRI, r2
   19fde:	f3bf 8f6f 	isb	sy
   19fe2:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   19fe6:	4213      	tst	r3, r2
   19fe8:	d006      	beq.n	19ff8 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   19fea:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   19fec:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   19fee:	bf01      	itttt	eq
   19ff0:	4311      	orreq	r1, r2
   19ff2:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   19ff4:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   19ff6:	4660      	moveq	r0, ip
	__asm__ volatile(
   19ff8:	f388 8811 	msr	BASEPRI, r8
   19ffc:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1a000:	4560      	cmp	r0, ip
   1a002:	f104 0401 	add.w	r4, r4, #1
   1a006:	d0e2      	beq.n	19fce <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1a008:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1a00c:	e7dd      	b.n	19fca <nrfx_ppi_channel_alloc+0x1e>
   1a00e:	bf00      	nop
   1a010:	00020d28 	.word	0x00020d28
   1a014:	200028c8 	.word	0x200028c8
   1a018:	0bad0002 	.word	0x0bad0002
   1a01c:	0bad0000 	.word	0x0bad0000

0001a020 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a022:	4b10      	ldr	r3, [pc, #64]	; (1a064 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1a024:	4f10      	ldr	r7, [pc, #64]	; (1a068 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a026:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1a02a:	3001      	adds	r0, #1
   1a02c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1a030:	42ae      	cmp	r6, r5
   1a032:	d800      	bhi.n	1a036 <z_sys_init_run_level+0x16>
		}
	}
}
   1a034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1a036:	e9d5 3400 	ldrd	r3, r4, [r5]
   1a03a:	4620      	mov	r0, r4
   1a03c:	4798      	blx	r3
   1a03e:	b170      	cbz	r0, 1a05e <z_sys_init_run_level+0x3e>
   1a040:	b16c      	cbz	r4, 1a05e <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1a042:	1be4      	subs	r4, r4, r7
   1a044:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1a046:	0961      	lsrs	r1, r4, #5
   1a048:	4a08      	ldr	r2, [pc, #32]	; (1a06c <z_sys_init_run_level+0x4c>)
   1a04a:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1a04e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1a052:	2301      	movs	r3, #1
   1a054:	fa03 f404 	lsl.w	r4, r3, r4
   1a058:	4304      	orrs	r4, r0
   1a05a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a05e:	3508      	adds	r5, #8
   1a060:	e7e6      	b.n	1a030 <z_sys_init_run_level+0x10>
   1a062:	bf00      	nop
   1a064:	00020d2c 	.word	0x00020d2c
   1a068:	2000075c 	.word	0x2000075c
   1a06c:	200007ac 	.word	0x200007ac

0001a070 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1a070:	4b08      	ldr	r3, [pc, #32]	; (1a094 <z_device_ready+0x24>)
   1a072:	1ac0      	subs	r0, r0, r3
   1a074:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1a076:	4b08      	ldr	r3, [pc, #32]	; (1a098 <z_device_ready+0x28>)
   1a078:	0942      	lsrs	r2, r0, #5
   1a07a:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1a07e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1a082:	2301      	movs	r3, #1
   1a084:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1a088:	4210      	tst	r0, r2
}
   1a08a:	bf0c      	ite	eq
   1a08c:	4618      	moveq	r0, r3
   1a08e:	2000      	movne	r0, #0
   1a090:	4770      	bx	lr
   1a092:	bf00      	nop
   1a094:	2000075c 	.word	0x2000075c
   1a098:	200007ac 	.word	0x200007ac

0001a09c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1a09c:	4911      	ldr	r1, [pc, #68]	; (1a0e4 <z_impl_device_get_binding+0x48>)
{
   1a09e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1a0a0:	4c11      	ldr	r4, [pc, #68]	; (1a0e8 <z_impl_device_get_binding+0x4c>)
{
   1a0a2:	4605      	mov	r5, r0
   1a0a4:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1a0a6:	428c      	cmp	r4, r1
   1a0a8:	d104      	bne.n	1a0b4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a0aa:	4c0f      	ldr	r4, [pc, #60]	; (1a0e8 <z_impl_device_get_binding+0x4c>)
   1a0ac:	42b4      	cmp	r4, r6
   1a0ae:	d10a      	bne.n	1a0c6 <z_impl_device_get_binding+0x2a>
	return NULL;
   1a0b0:	2400      	movs	r4, #0
   1a0b2:	e014      	b.n	1a0de <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1a0b4:	4620      	mov	r0, r4
   1a0b6:	f7ff ffdb 	bl	1a070 <z_device_ready>
   1a0ba:	b110      	cbz	r0, 1a0c2 <z_impl_device_get_binding+0x26>
   1a0bc:	6823      	ldr	r3, [r4, #0]
   1a0be:	42ab      	cmp	r3, r5
   1a0c0:	d00d      	beq.n	1a0de <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a0c2:	3410      	adds	r4, #16
   1a0c4:	e7ef      	b.n	1a0a6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a0c6:	4620      	mov	r0, r4
   1a0c8:	f7ff ffd2 	bl	1a070 <z_device_ready>
   1a0cc:	b908      	cbnz	r0, 1a0d2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a0ce:	3410      	adds	r4, #16
   1a0d0:	e7ec      	b.n	1a0ac <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a0d2:	6821      	ldr	r1, [r4, #0]
   1a0d4:	4628      	mov	r0, r5
   1a0d6:	f002 fdf4 	bl	1ccc2 <strcmp>
   1a0da:	2800      	cmp	r0, #0
   1a0dc:	d1f7      	bne.n	1a0ce <z_impl_device_get_binding+0x32>
}
   1a0de:	4620      	mov	r0, r4
   1a0e0:	bd70      	pop	{r4, r5, r6, pc}
   1a0e2:	bf00      	nop
   1a0e4:	200007ac 	.word	0x200007ac
   1a0e8:	2000075c 	.word	0x2000075c

0001a0ec <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
   1a0ee:	4e1c      	ldr	r6, [pc, #112]	; (1a160 <idle+0x74>)
{
   1a0f0:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   1a0f2:	2700      	movs	r7, #0
	__asm__ volatile(
   1a0f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a0f8:	f3ef 8311 	mrs	r3, BASEPRI
   1a0fc:	f382 8811 	msr	BASEPRI, r2
   1a100:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1a104:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1a106:	b188      	cbz	r0, 1a12c <idle+0x40>
			cpu->pending_abort = NULL;
   1a108:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1a10a:	f383 8811 	msr	BASEPRI, r3
   1a10e:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   1a112:	f000 fb7d 	bl	1a810 <z_thread_single_abort>
	__asm__ volatile(
   1a116:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a11a:	f3ef 8011 	mrs	r0, BASEPRI
   1a11e:	f383 8811 	msr	BASEPRI, r3
   1a122:	f3bf 8f6f 	isb	sy
   1a126:	f005 fe01 	bl	1fd2c <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   1a12a:	e7e3      	b.n	1a0f4 <idle+0x8>
	__asm__ volatile(
   1a12c:	f383 8811 	msr	BASEPRI, r3
   1a130:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a134:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a138:	f3ef 8311 	mrs	r3, BASEPRI
   1a13c:	f382 8811 	msr	BASEPRI, r2
   1a140:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1a144:	f005 ff77 	bl	20036 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1a148:	2101      	movs	r1, #1
   1a14a:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1a14c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1a14e:	bfd8      	it	le
   1a150:	4608      	movle	r0, r1
   1a152:	f005 ff80 	bl	20056 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1a156:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1a158:	f7f9 fbaa 	bl	138b0 <arch_cpu_idle>
}
   1a15c:	e7ca      	b.n	1a0f4 <idle+0x8>
   1a15e:	bf00      	nop
   1a160:	200028cc 	.word	0x200028cc

0001a164 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1a164:	4802      	ldr	r0, [pc, #8]	; (1a170 <z_bss_zero+0xc>)
   1a166:	4a03      	ldr	r2, [pc, #12]	; (1a174 <z_bss_zero+0x10>)
   1a168:	2100      	movs	r1, #0
   1a16a:	1a12      	subs	r2, r2, r0
   1a16c:	f002 bdf0 	b.w	1cd50 <memset>
   1a170:	20000988 	.word	0x20000988
   1a174:	20003254 	.word	0x20003254

0001a178 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1a178:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1a17a:	4806      	ldr	r0, [pc, #24]	; (1a194 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1a17c:	4a06      	ldr	r2, [pc, #24]	; (1a198 <z_data_copy+0x20>)
   1a17e:	4907      	ldr	r1, [pc, #28]	; (1a19c <z_data_copy+0x24>)
   1a180:	1a12      	subs	r2, r2, r0
   1a182:	f002 fdba 	bl	1ccfa <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1a186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1a18a:	4a05      	ldr	r2, [pc, #20]	; (1a1a0 <z_data_copy+0x28>)
   1a18c:	4905      	ldr	r1, [pc, #20]	; (1a1a4 <z_data_copy+0x2c>)
   1a18e:	4806      	ldr	r0, [pc, #24]	; (1a1a8 <z_data_copy+0x30>)
   1a190:	f002 bdb3 	b.w	1ccfa <memcpy>
   1a194:	20000000 	.word	0x20000000
   1a198:	20000984 	.word	0x20000984
   1a19c:	00021218 	.word	0x00021218
   1a1a0:	00000000 	.word	0x00000000
   1a1a4:	00021218 	.word	0x00021218
   1a1a8:	20000000 	.word	0x20000000

0001a1ac <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1a1ac:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1a1ae:	4b0c      	ldr	r3, [pc, #48]	; (1a1e0 <bg_thread_main+0x34>)
   1a1b0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a1b2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1a1b4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a1b6:	f7ff ff33 	bl	1a020 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1a1ba:	4a0a      	ldr	r2, [pc, #40]	; (1a1e4 <bg_thread_main+0x38>)
   1a1bc:	490a      	ldr	r1, [pc, #40]	; (1a1e8 <bg_thread_main+0x3c>)
   1a1be:	480b      	ldr	r0, [pc, #44]	; (1a1ec <bg_thread_main+0x40>)
   1a1c0:	f001 f86b 	bl	1b29a <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1a1c4:	2003      	movs	r0, #3
   1a1c6:	f7ff ff2b 	bl	1a020 <z_sys_init_run_level>

	z_init_static_threads();
   1a1ca:	f000 fd6b 	bl	1aca4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1a1ce:	f7f8 f8eb 	bl	123a8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1a1d2:	4a07      	ldr	r2, [pc, #28]	; (1a1f0 <bg_thread_main+0x44>)
   1a1d4:	7b13      	ldrb	r3, [r2, #12]
   1a1d6:	f023 0301 	bic.w	r3, r3, #1
   1a1da:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1a1dc:	bd08      	pop	{r3, pc}
   1a1de:	bf00      	nop
   1a1e0:	20003250 	.word	0x20003250
   1a1e4:	00020da4 	.word	0x00020da4
   1a1e8:	000211b7 	.word	0x000211b7
   1a1ec:	000211d6 	.word	0x000211d6
   1a1f0:	20002520 	.word	0x20002520

0001a1f4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1a1f4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1a1f8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1a2f0 <z_cstart+0xfc>
   1a1fc:	b0a9      	sub	sp, #164	; 0xa4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1a1fe:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1a202:	4d33      	ldr	r5, [pc, #204]	; (1a2d0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1a204:	4e33      	ldr	r6, [pc, #204]	; (1a2d4 <z_cstart+0xe0>)
   1a206:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a208:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1a2f4 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   1a20c:	4f32      	ldr	r7, [pc, #200]	; (1a2d8 <z_cstart+0xe4>)
   1a20e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1a212:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a214:	23e0      	movs	r3, #224	; 0xe0
   1a216:	2400      	movs	r4, #0
   1a218:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1a21c:	2320      	movs	r3, #32
   1a21e:	77eb      	strb	r3, [r5, #31]
   1a220:	762c      	strb	r4, [r5, #24]
   1a222:	766c      	strb	r4, [r5, #25]
   1a224:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1a226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a228:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1a22c:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1a22e:	f7f9 fc83 	bl	13b38 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1a232:	f7f9 fb37 	bl	138a4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1a236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a23a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1a23c:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1a23e:	4d27      	ldr	r5, [pc, #156]	; (1a2dc <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1a240:	f240 1301 	movw	r3, #257	; 0x101
   1a244:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1a248:	ab06      	add	r3, sp, #24
   1a24a:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1a24c:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1a24e:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1a252:	f7ff fee5 	bl	1a020 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1a256:	2001      	movs	r0, #1
   1a258:	f7ff fee2 	bl	1a020 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a25c:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1a260:	f000 fbda 	bl	1aa18 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a264:	4b1e      	ldr	r3, [pc, #120]	; (1a2e0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1a266:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a268:	491e      	ldr	r1, [pc, #120]	; (1a2e4 <z_cstart+0xf0>)
   1a26a:	9305      	str	r3, [sp, #20]
   1a26c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1a270:	4653      	mov	r3, sl
   1a272:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1a276:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a27a:	9400      	str	r4, [sp, #0]
   1a27c:	4630      	mov	r0, r6
   1a27e:	f000 fcb3 	bl	1abe8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a282:	7b73      	ldrb	r3, [r6, #13]
   1a284:	4680      	mov	r8, r0
   1a286:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1a28a:	4630      	mov	r0, r6
   1a28c:	7373      	strb	r3, [r6, #13]
   1a28e:	f005 fd8f 	bl	1fdb0 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1a292:	230f      	movs	r3, #15
   1a294:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1a298:	4913      	ldr	r1, [pc, #76]	; (1a2e8 <z_cstart+0xf4>)
   1a29a:	4b14      	ldr	r3, [pc, #80]	; (1a2ec <z_cstart+0xf8>)
   1a29c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1a2a0:	e9cd b404 	strd	fp, r4, [sp, #16]
   1a2a4:	e9cd 5400 	strd	r5, r4, [sp]
   1a2a8:	4638      	mov	r0, r7
   1a2aa:	f000 fc9d 	bl	1abe8 <z_setup_new_thread>
   1a2ae:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1a2b0:	60ef      	str	r7, [r5, #12]
   1a2b2:	f023 0304 	bic.w	r3, r3, #4
   1a2b6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1a2b8:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1a2bc:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1a2c0:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1a2c2:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1a2c6:	4652      	mov	r2, sl
   1a2c8:	4641      	mov	r1, r8
   1a2ca:	4630      	mov	r0, r6
   1a2cc:	f7f9 fa74 	bl	137b8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1a2d0:	e000ed00 	.word	0xe000ed00
   1a2d4:	20002520 	.word	0x20002520
   1a2d8:	20002498 	.word	0x20002498
   1a2dc:	200028cc 	.word	0x200028cc
   1a2e0:	000211fd 	.word	0x000211fd
   1a2e4:	20004960 	.word	0x20004960
   1a2e8:	20005980 	.word	0x20005980
   1a2ec:	0001a0ed 	.word	0x0001a0ed
   1a2f0:	20006300 	.word	0x20006300
   1a2f4:	0001a1ad 	.word	0x0001a1ad

0001a2f8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1a2f8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a2fa:	4c06      	ldr	r4, [pc, #24]	; (1a314 <statics_init+0x1c>)
   1a2fc:	4d06      	ldr	r5, [pc, #24]	; (1a318 <statics_init+0x20>)
   1a2fe:	42ac      	cmp	r4, r5
   1a300:	d301      	bcc.n	1a306 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1a302:	2000      	movs	r0, #0
   1a304:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1a306:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1a30a:	4620      	mov	r0, r4
   1a30c:	f005 fbb2 	bl	1fa74 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a310:	3414      	adds	r4, #20
   1a312:	e7f4      	b.n	1a2fe <statics_init+0x6>
   1a314:	20000804 	.word	0x20000804
   1a318:	20000804 	.word	0x20000804

0001a31c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1a31c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a31e:	4b0e      	ldr	r3, [pc, #56]	; (1a358 <init_mem_slab_module+0x3c>)
   1a320:	4c0e      	ldr	r4, [pc, #56]	; (1a35c <init_mem_slab_module+0x40>)
   1a322:	42a3      	cmp	r3, r4
   1a324:	d301      	bcc.n	1a32a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1a326:	2000      	movs	r0, #0
	return rc;
}
   1a328:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a32a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1a32e:	ea41 0200 	orr.w	r2, r1, r0
   1a332:	f012 0203 	ands.w	r2, r2, #3
   1a336:	d10b      	bne.n	1a350 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1a338:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1a33a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a33c:	42aa      	cmp	r2, r5
   1a33e:	d101      	bne.n	1a344 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a340:	331c      	adds	r3, #28
   1a342:	e7ee      	b.n	1a322 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1a344:	695e      	ldr	r6, [r3, #20]
   1a346:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a348:	3201      	adds	r2, #1
		slab->free_list = p;
   1a34a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1a34c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1a34e:	e7f5      	b.n	1a33c <init_mem_slab_module+0x20>
		return -EINVAL;
   1a350:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1a354:	e7e8      	b.n	1a328 <init_mem_slab_module+0xc>
   1a356:	bf00      	nop
   1a358:	200007b0 	.word	0x200007b0
   1a35c:	20000804 	.word	0x20000804

0001a360 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1a360:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1a362:	460c      	mov	r4, r1
   1a364:	4616      	mov	r6, r2
   1a366:	461f      	mov	r7, r3
   1a368:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a36c:	f3ef 8111 	mrs	r1, BASEPRI
   1a370:	f383 8811 	msr	BASEPRI, r3
   1a374:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1a378:	6943      	ldr	r3, [r0, #20]
   1a37a:	b15b      	cbz	r3, 1a394 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1a37c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1a37e:	681b      	ldr	r3, [r3, #0]
   1a380:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1a382:	6983      	ldr	r3, [r0, #24]
   1a384:	3301      	adds	r3, #1
   1a386:	6183      	str	r3, [r0, #24]
		result = 0;
   1a388:	2000      	movs	r0, #0
	__asm__ volatile(
   1a38a:	f381 8811 	msr	BASEPRI, r1
   1a38e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1a392:	e011      	b.n	1a3b8 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a394:	ea56 0207 	orrs.w	r2, r6, r7
   1a398:	d103      	bne.n	1a3a2 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1a39a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1a39c:	f06f 000b 	mvn.w	r0, #11
   1a3a0:	e7f3      	b.n	1a38a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1a3a2:	4602      	mov	r2, r0
   1a3a4:	e9cd 6700 	strd	r6, r7, [sp]
   1a3a8:	4804      	ldr	r0, [pc, #16]	; (1a3bc <k_mem_slab_alloc+0x5c>)
   1a3aa:	f000 faf3 	bl	1a994 <z_pend_curr>
		if (result == 0) {
   1a3ae:	b918      	cbnz	r0, 1a3b8 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1a3b0:	4b03      	ldr	r3, [pc, #12]	; (1a3c0 <k_mem_slab_alloc+0x60>)
   1a3b2:	689b      	ldr	r3, [r3, #8]
   1a3b4:	695b      	ldr	r3, [r3, #20]
   1a3b6:	6023      	str	r3, [r4, #0]
}
   1a3b8:	b002      	add	sp, #8
   1a3ba:	bdd0      	pop	{r4, r6, r7, pc}
   1a3bc:	20003251 	.word	0x20003251
   1a3c0:	200028cc 	.word	0x200028cc

0001a3c4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1a3c4:	b570      	push	{r4, r5, r6, lr}
   1a3c6:	4604      	mov	r4, r0
   1a3c8:	460d      	mov	r5, r1
	__asm__ volatile(
   1a3ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a3ce:	f3ef 8611 	mrs	r6, BASEPRI
   1a3d2:	f383 8811 	msr	BASEPRI, r3
   1a3d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1a3da:	f005 fd44 	bl	1fe66 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1a3de:	b160      	cbz	r0, 1a3fa <k_mem_slab_free+0x36>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1a3e0:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1a3e2:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1a3e4:	2100      	movs	r1, #0
   1a3e6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		z_ready_thread(pending_thread);
   1a3ea:	f005 fce1 	bl	1fdb0 <z_ready_thread>
		z_reschedule(&lock, key);
   1a3ee:	4631      	mov	r1, r6
   1a3f0:	4808      	ldr	r0, [pc, #32]	; (1a414 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1a3f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1a3f6:	f000 b885 	b.w	1a504 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1a3fa:	682b      	ldr	r3, [r5, #0]
   1a3fc:	6962      	ldr	r2, [r4, #20]
   1a3fe:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1a400:	682b      	ldr	r3, [r5, #0]
   1a402:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1a404:	69a3      	ldr	r3, [r4, #24]
   1a406:	3b01      	subs	r3, #1
   1a408:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1a40a:	f386 8811 	msr	BASEPRI, r6
   1a40e:	f3bf 8f6f 	isb	sy
}
   1a412:	bd70      	pop	{r4, r5, r6, pc}
   1a414:	20003251 	.word	0x20003251

0001a418 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a41a:	4616      	mov	r6, r2
   1a41c:	461f      	mov	r7, r3
	__asm__ volatile(
   1a41e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a422:	f3ef 8511 	mrs	r5, BASEPRI
   1a426:	f383 8811 	msr	BASEPRI, r3
   1a42a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1a42e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a430:	b19c      	cbz	r4, 1a45a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a432:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a434:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a436:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a43a:	4294      	cmp	r4, r2
	list->head = node;
   1a43c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1a43e:	bf08      	it	eq
   1a440:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a442:	2101      	movs	r1, #1
   1a444:	4620      	mov	r0, r4
   1a446:	f005 fbff 	bl	1fc48 <z_queue_node_peek>
   1a44a:	4604      	mov	r4, r0
	__asm__ volatile(
   1a44c:	f385 8811 	msr	BASEPRI, r5
   1a450:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a454:	4620      	mov	r0, r4
   1a456:	b003      	add	sp, #12
   1a458:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a45a:	ea56 0307 	orrs.w	r3, r6, r7
   1a45e:	d0f5      	beq.n	1a44c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a460:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a464:	e9cd 6700 	strd	r6, r7, [sp]
   1a468:	4629      	mov	r1, r5
   1a46a:	4610      	mov	r0, r2
   1a46c:	f000 fa92 	bl	1a994 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a470:	2800      	cmp	r0, #0
   1a472:	d1ef      	bne.n	1a454 <z_impl_k_queue_get+0x3c>
   1a474:	4b01      	ldr	r3, [pc, #4]	; (1a47c <z_impl_k_queue_get+0x64>)
   1a476:	689b      	ldr	r3, [r3, #8]
   1a478:	695c      	ldr	r4, [r3, #20]
   1a47a:	e7eb      	b.n	1a454 <z_impl_k_queue_get+0x3c>
   1a47c:	200028cc 	.word	0x200028cc

0001a480 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1a480:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1a482:	4c08      	ldr	r4, [pc, #32]	; (1a4a4 <z_reset_time_slice+0x24>)
   1a484:	6823      	ldr	r3, [r4, #0]
   1a486:	b15b      	cbz	r3, 1a4a0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a488:	f7f8 ff30 	bl	132ec <z_clock_elapsed>
   1a48c:	4603      	mov	r3, r0
   1a48e:	6820      	ldr	r0, [r4, #0]
   1a490:	4a05      	ldr	r2, [pc, #20]	; (1a4a8 <z_reset_time_slice+0x28>)
   1a492:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1a494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a498:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1a49a:	2100      	movs	r1, #0
   1a49c:	f005 bddb 	b.w	20056 <z_set_timeout_expiry>
}
   1a4a0:	bd10      	pop	{r4, pc}
   1a4a2:	bf00      	nop
   1a4a4:	20002908 	.word	0x20002908
   1a4a8:	200028cc 	.word	0x200028cc

0001a4ac <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4ae:	4605      	mov	r5, r0
   1a4b0:	460c      	mov	r4, r1
	__asm__ volatile(
   1a4b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a4b6:	f3ef 8611 	mrs	r6, BASEPRI
   1a4ba:	f383 8811 	msr	BASEPRI, r3
   1a4be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1a4c2:	4b0d      	ldr	r3, [pc, #52]	; (1a4f8 <k_sched_time_slice_set+0x4c>)
   1a4c4:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a4c6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1a4ca:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a4ce:	2100      	movs	r1, #0
   1a4d0:	615a      	str	r2, [r3, #20]
   1a4d2:	fbe7 0105 	umlal	r0, r1, r7, r5
   1a4d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a4da:	2300      	movs	r3, #0
   1a4dc:	f7e5 fe00 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1a4e0:	4b06      	ldr	r3, [pc, #24]	; (1a4fc <k_sched_time_slice_set+0x50>)
   1a4e2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1a4e4:	4b06      	ldr	r3, [pc, #24]	; (1a500 <k_sched_time_slice_set+0x54>)
   1a4e6:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1a4e8:	f7ff ffca 	bl	1a480 <z_reset_time_slice>
	__asm__ volatile(
   1a4ec:	f386 8811 	msr	BASEPRI, r6
   1a4f0:	f3bf 8f6f 	isb	sy
	}
}
   1a4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a4f6:	bf00      	nop
   1a4f8:	200028cc 	.word	0x200028cc
   1a4fc:	20002908 	.word	0x20002908
   1a500:	20002904 	.word	0x20002904

0001a504 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a504:	b949      	cbnz	r1, 1a51a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a506:	f3ef 8005 	mrs	r0, IPSR
   1a50a:	b930      	cbnz	r0, 1a51a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1a50c:	4b05      	ldr	r3, [pc, #20]	; (1a524 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1a50e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a510:	689b      	ldr	r3, [r3, #8]
   1a512:	429a      	cmp	r2, r3
   1a514:	d001      	beq.n	1a51a <z_reschedule+0x16>
	ret = arch_swap(key);
   1a516:	f7f9 b8c5 	b.w	136a4 <arch_swap>
   1a51a:	f381 8811 	msr	BASEPRI, r1
   1a51e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1a522:	4770      	bx	lr
   1a524:	200028cc 	.word	0x200028cc

0001a528 <k_sched_lock>:
	__asm__ volatile(
   1a528:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a52c:	f3ef 8111 	mrs	r1, BASEPRI
   1a530:	f383 8811 	msr	BASEPRI, r3
   1a534:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1a538:	4b04      	ldr	r3, [pc, #16]	; (1a54c <k_sched_lock+0x24>)
   1a53a:	689a      	ldr	r2, [r3, #8]
   1a53c:	7bd3      	ldrb	r3, [r2, #15]
   1a53e:	3b01      	subs	r3, #1
   1a540:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1a542:	f381 8811 	msr	BASEPRI, r1
   1a546:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1a54a:	4770      	bx	lr
   1a54c:	200028cc 	.word	0x200028cc

0001a550 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a550:	4b09      	ldr	r3, [pc, #36]	; (1a578 <z_priq_dumb_remove+0x28>)
   1a552:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1a556:	4282      	cmp	r2, r0
   1a558:	d105      	bne.n	1a566 <z_priq_dumb_remove+0x16>
   1a55a:	689b      	ldr	r3, [r3, #8]
   1a55c:	428b      	cmp	r3, r1
   1a55e:	d102      	bne.n	1a566 <z_priq_dumb_remove+0x16>
   1a560:	7b4b      	ldrb	r3, [r1, #13]
   1a562:	06db      	lsls	r3, r3, #27
   1a564:	d106      	bne.n	1a574 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1a566:	e9d1 3200 	ldrd	r3, r2, [r1]
   1a56a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a56c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a56e:	2300      	movs	r3, #0
	node->prev = NULL;
   1a570:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1a574:	4770      	bx	lr
   1a576:	bf00      	nop
   1a578:	200028cc 	.word	0x200028cc

0001a57c <update_cache>:
{
   1a57c:	b538      	push	{r3, r4, r5, lr}
   1a57e:	4c12      	ldr	r4, [pc, #72]	; (1a5c8 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1a580:	6923      	ldr	r3, [r4, #16]
   1a582:	68a2      	ldr	r2, [r4, #8]
{
   1a584:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1a586:	b10b      	cbz	r3, 1a58c <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1a588:	68e5      	ldr	r5, [r4, #12]
   1a58a:	e00c      	b.n	1a5a6 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1a58c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1a590:	f005 fc04 	bl	1fd9c <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1a594:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1a596:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1a598:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1a59a:	bf44      	itt	mi
   1a59c:	f043 0308 	orrmi.w	r3, r3, #8
   1a5a0:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1a5a2:	2d00      	cmp	r5, #0
   1a5a4:	d0f0      	beq.n	1a588 <update_cache+0xc>
	if (preempt_ok != 0) {
   1a5a6:	b949      	cbnz	r1, 1a5bc <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1a5a8:	7b53      	ldrb	r3, [r2, #13]
   1a5aa:	06db      	lsls	r3, r3, #27
   1a5ac:	d106      	bne.n	1a5bc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1a5ae:	69ab      	ldr	r3, [r5, #24]
   1a5b0:	b923      	cbnz	r3, 1a5bc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1a5b2:	89d3      	ldrh	r3, [r2, #14]
   1a5b4:	2b7f      	cmp	r3, #127	; 0x7f
   1a5b6:	d901      	bls.n	1a5bc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1a5b8:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1a5ba:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1a5bc:	4295      	cmp	r5, r2
   1a5be:	d001      	beq.n	1a5c4 <update_cache+0x48>
			z_reset_time_slice();
   1a5c0:	f7ff ff5e 	bl	1a480 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1a5c4:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1a5c6:	e7f8      	b.n	1a5ba <update_cache+0x3e>
   1a5c8:	200028cc 	.word	0x200028cc

0001a5cc <k_sched_unlock>:
{
   1a5cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a5ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a5d2:	f3ef 8411 	mrs	r4, BASEPRI
   1a5d6:	f383 8811 	msr	BASEPRI, r3
   1a5da:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1a5de:	4b08      	ldr	r3, [pc, #32]	; (1a600 <k_sched_unlock+0x34>)
   1a5e0:	689a      	ldr	r2, [r3, #8]
   1a5e2:	7bd3      	ldrb	r3, [r2, #15]
   1a5e4:	3301      	adds	r3, #1
   1a5e6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a5e8:	2000      	movs	r0, #0
   1a5ea:	f7ff ffc7 	bl	1a57c <update_cache>
	__asm__ volatile(
   1a5ee:	f384 8811 	msr	BASEPRI, r4
   1a5f2:	f3bf 8f6f 	isb	sy
}
   1a5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1a5fa:	f005 bba3 	b.w	1fd44 <z_reschedule_unlocked>
   1a5fe:	bf00      	nop
   1a600:	200028cc 	.word	0x200028cc

0001a604 <ready_thread>:
{
   1a604:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1a606:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1a60a:	7b43      	ldrb	r3, [r0, #13]
   1a60c:	2a00      	cmp	r2, #0
   1a60e:	db2c      	blt.n	1a66a <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a610:	06db      	lsls	r3, r3, #27
   1a612:	d12a      	bne.n	1a66a <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1a614:	6983      	ldr	r3, [r0, #24]
   1a616:	bb43      	cbnz	r3, 1a66a <ready_thread+0x66>
	return list->head == list;
   1a618:	4a15      	ldr	r2, [pc, #84]	; (1a670 <ready_thread+0x6c>)
   1a61a:	4611      	mov	r1, r2
   1a61c:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a620:	428c      	cmp	r4, r1
   1a622:	bf18      	it	ne
   1a624:	4623      	movne	r3, r4
   1a626:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a628:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1a62a:	bf38      	it	cc
   1a62c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a62e:	b1b3      	cbz	r3, 1a65e <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a630:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1a634:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1a638:	42ae      	cmp	r6, r5
   1a63a:	db03      	blt.n	1a644 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1a63c:	42a3      	cmp	r3, r4
   1a63e:	d00e      	beq.n	1a65e <ready_thread+0x5a>
   1a640:	681b      	ldr	r3, [r3, #0]
   1a642:	e7f4      	b.n	1a62e <ready_thread+0x2a>
	node->prev = successor->prev;
   1a644:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a646:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1a64a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1a64c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1a64e:	7b43      	ldrb	r3, [r0, #13]
   1a650:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a654:	7343      	strb	r3, [r0, #13]
}
   1a656:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1a658:	2000      	movs	r0, #0
   1a65a:	f7ff bf8f 	b.w	1a57c <update_cache>
	node->prev = list->tail;
   1a65e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1a662:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1a664:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1a666:	6310      	str	r0, [r2, #48]	; 0x30
}
   1a668:	e7f1      	b.n	1a64e <ready_thread+0x4a>
}
   1a66a:	bc70      	pop	{r4, r5, r6}
   1a66c:	4770      	bx	lr
   1a66e:	bf00      	nop
   1a670:	200028cc 	.word	0x200028cc

0001a674 <z_sched_start>:
{
   1a674:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a676:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a67a:	f3ef 8411 	mrs	r4, BASEPRI
   1a67e:	f382 8811 	msr	BASEPRI, r2
   1a682:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1a686:	7b42      	ldrb	r2, [r0, #13]
   1a688:	0751      	lsls	r1, r2, #29
   1a68a:	d404      	bmi.n	1a696 <z_sched_start+0x22>
	__asm__ volatile(
   1a68c:	f384 8811 	msr	BASEPRI, r4
   1a690:	f3bf 8f6f 	isb	sy
}
   1a694:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a696:	f022 0204 	bic.w	r2, r2, #4
   1a69a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1a69c:	f7ff ffb2 	bl	1a604 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1a6a0:	4621      	mov	r1, r4
   1a6a2:	4802      	ldr	r0, [pc, #8]	; (1a6ac <z_sched_start+0x38>)
}
   1a6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1a6a8:	f7ff bf2c 	b.w	1a504 <z_reschedule>
   1a6ac:	20003251 	.word	0x20003251

0001a6b0 <move_thread_to_end_of_prio_q>:
{
   1a6b0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1a6b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1a6b6:	2b00      	cmp	r3, #0
{
   1a6b8:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1a6ba:	da02      	bge.n	1a6c2 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a6bc:	4817      	ldr	r0, [pc, #92]	; (1a71c <move_thread_to_end_of_prio_q+0x6c>)
   1a6be:	f7ff ff47 	bl	1a550 <z_priq_dumb_remove>
	return list->head == list;
   1a6c2:	4a17      	ldr	r2, [pc, #92]	; (1a720 <move_thread_to_end_of_prio_q+0x70>)
   1a6c4:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a6c6:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   1a6c8:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a6cc:	4283      	cmp	r3, r0
   1a6ce:	bf08      	it	eq
   1a6d0:	2300      	moveq	r3, #0
   1a6d2:	2b00      	cmp	r3, #0
   1a6d4:	bf38      	it	cc
   1a6d6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a6d8:	b1d3      	cbz	r3, 1a710 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a6da:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1a6de:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1a6e2:	42ae      	cmp	r6, r5
   1a6e4:	db03      	blt.n	1a6ee <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1a6e6:	42a3      	cmp	r3, r4
   1a6e8:	d012      	beq.n	1a710 <move_thread_to_end_of_prio_q+0x60>
   1a6ea:	681b      	ldr	r3, [r3, #0]
   1a6ec:	e7f4      	b.n	1a6d8 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1a6ee:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1a6f0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1a6f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1a6f6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1a6f8:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1a6fa:	6890      	ldr	r0, [r2, #8]
   1a6fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a700:	734b      	strb	r3, [r1, #13]
   1a702:	1a43      	subs	r3, r0, r1
   1a704:	4258      	negs	r0, r3
}
   1a706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1a70a:	4158      	adcs	r0, r3
   1a70c:	f7ff bf36 	b.w	1a57c <update_cache>
	node->prev = list->tail;
   1a710:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1a714:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1a716:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1a718:	6311      	str	r1, [r2, #48]	; 0x30
}
   1a71a:	e7ed      	b.n	1a6f8 <move_thread_to_end_of_prio_q+0x48>
   1a71c:	200028f8 	.word	0x200028f8
   1a720:	200028cc 	.word	0x200028cc

0001a724 <z_time_slice>:
{
   1a724:	b570      	push	{r4, r5, r6, lr}
   1a726:	4601      	mov	r1, r0
	__asm__ volatile(
   1a728:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a72c:	f3ef 8411 	mrs	r4, BASEPRI
   1a730:	f383 8811 	msr	BASEPRI, r3
   1a734:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1a738:	4b16      	ldr	r3, [pc, #88]	; (1a794 <z_time_slice+0x70>)
   1a73a:	4a17      	ldr	r2, [pc, #92]	; (1a798 <z_time_slice+0x74>)
   1a73c:	6898      	ldr	r0, [r3, #8]
   1a73e:	6815      	ldr	r5, [r2, #0]
   1a740:	42a8      	cmp	r0, r5
   1a742:	461d      	mov	r5, r3
   1a744:	d106      	bne.n	1a754 <z_time_slice+0x30>
			z_reset_time_slice();
   1a746:	f7ff fe9b 	bl	1a480 <z_reset_time_slice>
	__asm__ volatile(
   1a74a:	f384 8811 	msr	BASEPRI, r4
   1a74e:	f3bf 8f6f 	isb	sy
}
   1a752:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1a754:	2600      	movs	r6, #0
   1a756:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1a758:	4a10      	ldr	r2, [pc, #64]	; (1a79c <z_time_slice+0x78>)
   1a75a:	6812      	ldr	r2, [r2, #0]
   1a75c:	b1ba      	cbz	r2, 1a78e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1a75e:	89c2      	ldrh	r2, [r0, #14]
   1a760:	2a7f      	cmp	r2, #127	; 0x7f
   1a762:	d814      	bhi.n	1a78e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1a764:	7b42      	ldrb	r2, [r0, #13]
   1a766:	06d2      	lsls	r2, r2, #27
   1a768:	d111      	bne.n	1a78e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1a76a:	4a0d      	ldr	r2, [pc, #52]	; (1a7a0 <z_time_slice+0x7c>)
   1a76c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1a770:	6812      	ldr	r2, [r2, #0]
   1a772:	4296      	cmp	r6, r2
   1a774:	db0b      	blt.n	1a78e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1a776:	4a0b      	ldr	r2, [pc, #44]	; (1a7a4 <z_time_slice+0x80>)
   1a778:	4290      	cmp	r0, r2
   1a77a:	d008      	beq.n	1a78e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1a77c:	695a      	ldr	r2, [r3, #20]
   1a77e:	428a      	cmp	r2, r1
   1a780:	dc02      	bgt.n	1a788 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1a782:	f7ff ff95 	bl	1a6b0 <move_thread_to_end_of_prio_q>
   1a786:	e7de      	b.n	1a746 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1a788:	1a52      	subs	r2, r2, r1
   1a78a:	615a      	str	r2, [r3, #20]
   1a78c:	e7dd      	b.n	1a74a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1a78e:	2300      	movs	r3, #0
   1a790:	616b      	str	r3, [r5, #20]
   1a792:	e7da      	b.n	1a74a <z_time_slice+0x26>
   1a794:	200028cc 	.word	0x200028cc
   1a798:	20002900 	.word	0x20002900
   1a79c:	20002908 	.word	0x20002908
   1a7a0:	20002904 	.word	0x20002904
   1a7a4:	20002498 	.word	0x20002498

0001a7a8 <z_impl_k_thread_suspend>:
{
   1a7a8:	b570      	push	{r4, r5, r6, lr}
   1a7aa:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1a7ac:	3018      	adds	r0, #24
   1a7ae:	f005 fc2c 	bl	2000a <z_abort_timeout>
	__asm__ volatile(
   1a7b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a7b6:	f3ef 8611 	mrs	r6, BASEPRI
   1a7ba:	f383 8811 	msr	BASEPRI, r3
   1a7be:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1a7c2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1a7c6:	2b00      	cmp	r3, #0
   1a7c8:	da07      	bge.n	1a7da <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a7ca:	480f      	ldr	r0, [pc, #60]	; (1a808 <z_impl_k_thread_suspend+0x60>)
   1a7cc:	4621      	mov	r1, r4
   1a7ce:	f7ff febf 	bl	1a550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a7d2:	7b63      	ldrb	r3, [r4, #13]
   1a7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a7d8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1a7da:	4d0c      	ldr	r5, [pc, #48]	; (1a80c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a7dc:	7b63      	ldrb	r3, [r4, #13]
   1a7de:	68a8      	ldr	r0, [r5, #8]
   1a7e0:	f043 0310 	orr.w	r3, r3, #16
   1a7e4:	7363      	strb	r3, [r4, #13]
   1a7e6:	1b03      	subs	r3, r0, r4
   1a7e8:	4258      	negs	r0, r3
   1a7ea:	4158      	adcs	r0, r3
   1a7ec:	f7ff fec6 	bl	1a57c <update_cache>
	__asm__ volatile(
   1a7f0:	f386 8811 	msr	BASEPRI, r6
   1a7f4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1a7f8:	68ab      	ldr	r3, [r5, #8]
   1a7fa:	42a3      	cmp	r3, r4
   1a7fc:	d103      	bne.n	1a806 <z_impl_k_thread_suspend+0x5e>
}
   1a7fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1a802:	f005 ba9f 	b.w	1fd44 <z_reschedule_unlocked>
}
   1a806:	bd70      	pop	{r4, r5, r6, pc}
   1a808:	200028f8 	.word	0x200028f8
   1a80c:	200028cc 	.word	0x200028cc

0001a810 <z_thread_single_abort>:
{
   1a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a814:	4604      	mov	r4, r0
	__asm__ volatile(
   1a816:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a81a:	f3ef 8211 	mrs	r2, BASEPRI
   1a81e:	f383 8811 	msr	BASEPRI, r3
   1a822:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1a826:	7b43      	ldrb	r3, [r0, #13]
   1a828:	f013 0f28 	tst.w	r3, #40	; 0x28
   1a82c:	d005      	beq.n	1a83a <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1a82e:	f382 8811 	msr	BASEPRI, r2
   1a832:	f3bf 8f6f 	isb	sy
}
   1a836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1a83a:	f043 0320 	orr.w	r3, r3, #32
   1a83e:	7343      	strb	r3, [r0, #13]
   1a840:	f382 8811 	msr	BASEPRI, r2
   1a844:	f3bf 8f6f 	isb	sy
   1a848:	3018      	adds	r0, #24
   1a84a:	f005 fbde 	bl	2000a <z_abort_timeout>
	__asm__ volatile(
   1a84e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a852:	f3ef 8611 	mrs	r6, BASEPRI
   1a856:	f383 8811 	msr	BASEPRI, r3
   1a85a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a85e:	7b63      	ldrb	r3, [r4, #13]
   1a860:	06d8      	lsls	r0, r3, #27
   1a862:	d116      	bne.n	1a892 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1a864:	69a2      	ldr	r2, [r4, #24]
   1a866:	b9a2      	cbnz	r2, 1a892 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1a868:	0619      	lsls	r1, r3, #24
   1a86a:	d507      	bpl.n	1a87c <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1a86c:	4826      	ldr	r0, [pc, #152]	; (1a908 <z_thread_single_abort+0xf8>)
   1a86e:	4621      	mov	r1, r4
   1a870:	f7ff fe6e 	bl	1a550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a874:	7b63      	ldrb	r3, [r4, #13]
   1a876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a87a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1a87c:	4b23      	ldr	r3, [pc, #140]	; (1a90c <z_thread_single_abort+0xfc>)
   1a87e:	6898      	ldr	r0, [r3, #8]
   1a880:	1b02      	subs	r2, r0, r4
   1a882:	4250      	negs	r0, r2
   1a884:	4150      	adcs	r0, r2
   1a886:	f7ff fe79 	bl	1a57c <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1a88a:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1a88e:	2700      	movs	r7, #0
   1a890:	e01e      	b.n	1a8d0 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1a892:	079b      	lsls	r3, r3, #30
   1a894:	d5f9      	bpl.n	1a88a <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1a896:	68a0      	ldr	r0, [r4, #8]
   1a898:	4621      	mov	r1, r4
   1a89a:	f7ff fe59 	bl	1a550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a89e:	7b63      	ldrb	r3, [r4, #13]
   1a8a0:	f023 0302 	bic.w	r3, r3, #2
   1a8a4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1a8a6:	2300      	movs	r3, #0
   1a8a8:	60a3      	str	r3, [r4, #8]
   1a8aa:	e7ee      	b.n	1a88a <z_thread_single_abort+0x7a>
   1a8ac:	f105 0018 	add.w	r0, r5, #24
   1a8b0:	f005 fbab 	bl	2000a <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1a8b4:	68a8      	ldr	r0, [r5, #8]
   1a8b6:	4629      	mov	r1, r5
   1a8b8:	f7ff fe4a 	bl	1a550 <z_priq_dumb_remove>
   1a8bc:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1a8be:	60af      	str	r7, [r5, #8]
   1a8c0:	f023 0302 	bic.w	r3, r3, #2
   1a8c4:	736b      	strb	r3, [r5, #13]
   1a8c6:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1a8ca:	4628      	mov	r0, r5
   1a8cc:	f7ff fe9a 	bl	1a604 <ready_thread>
	return list->head == list;
   1a8d0:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8d2:	4545      	cmp	r5, r8
   1a8d4:	d001      	beq.n	1a8da <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1a8d6:	2d00      	cmp	r5, #0
   1a8d8:	d1e8      	bne.n	1a8ac <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1a8da:	4b0c      	ldr	r3, [pc, #48]	; (1a90c <z_thread_single_abort+0xfc>)
   1a8dc:	689a      	ldr	r2, [r3, #8]
   1a8de:	4b0c      	ldr	r3, [pc, #48]	; (1a910 <z_thread_single_abort+0x100>)
   1a8e0:	429a      	cmp	r2, r3
   1a8e2:	d102      	bne.n	1a8ea <z_thread_single_abort+0xda>
			update_cache(1);
   1a8e4:	2001      	movs	r0, #1
   1a8e6:	f7ff fe49 	bl	1a57c <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1a8ea:	7b63      	ldrb	r3, [r4, #13]
   1a8ec:	f043 0308 	orr.w	r3, r3, #8
   1a8f0:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1a8f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1a8f4:	f386 8811 	msr	BASEPRI, r6
   1a8f8:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1a8fc:	2b00      	cmp	r3, #0
   1a8fe:	d09a      	beq.n	1a836 <z_thread_single_abort+0x26>
		fn_abort(thread);
   1a900:	4620      	mov	r0, r4
}
   1a902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1a906:	4718      	bx	r3
   1a908:	200028f8 	.word	0x200028f8
   1a90c:	200028cc 	.word	0x200028cc
   1a910:	20002498 	.word	0x20002498

0001a914 <unready_thread>:
{
   1a914:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1a916:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1a91a:	2b00      	cmp	r3, #0
{
   1a91c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1a91e:	da06      	bge.n	1a92e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a920:	4807      	ldr	r0, [pc, #28]	; (1a940 <unready_thread+0x2c>)
   1a922:	f7ff fe15 	bl	1a550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a926:	7b4b      	ldrb	r3, [r1, #13]
   1a928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a92c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1a92e:	4b05      	ldr	r3, [pc, #20]	; (1a944 <unready_thread+0x30>)
   1a930:	6898      	ldr	r0, [r3, #8]
   1a932:	1a43      	subs	r3, r0, r1
   1a934:	4258      	negs	r0, r3
   1a936:	4158      	adcs	r0, r3
}
   1a938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1a93c:	f7ff be1e 	b.w	1a57c <update_cache>
   1a940:	200028f8 	.word	0x200028f8
   1a944:	200028cc 	.word	0x200028cc

0001a948 <pend>:
{
   1a948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a94c:	4606      	mov	r6, r0
   1a94e:	4614      	mov	r4, r2
   1a950:	461d      	mov	r5, r3
	__asm__ volatile(
   1a952:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a956:	f3ef 8711 	mrs	r7, BASEPRI
   1a95a:	f383 8811 	msr	BASEPRI, r3
   1a95e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1a962:	f005 fa55 	bl	1fe10 <add_to_waitq_locked>
	__asm__ volatile(
   1a966:	f387 8811 	msr	BASEPRI, r7
   1a96a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a96e:	1c6b      	adds	r3, r5, #1
   1a970:	bf08      	it	eq
   1a972:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1a976:	d008      	beq.n	1a98a <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1a978:	4622      	mov	r2, r4
   1a97a:	462b      	mov	r3, r5
   1a97c:	f106 0018 	add.w	r0, r6, #24
   1a980:	4903      	ldr	r1, [pc, #12]	; (1a990 <pend+0x48>)
}
   1a982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a986:	f000 bab5 	b.w	1aef4 <z_add_timeout>
   1a98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a98e:	bf00      	nop
   1a990:	0001fdd1 	.word	0x0001fdd1

0001a994 <z_pend_curr>:
{
   1a994:	b510      	push	{r4, lr}
	pending_current = _current;
   1a996:	4b07      	ldr	r3, [pc, #28]	; (1a9b4 <z_pend_curr+0x20>)
   1a998:	6898      	ldr	r0, [r3, #8]
   1a99a:	4b07      	ldr	r3, [pc, #28]	; (1a9b8 <z_pend_curr+0x24>)
{
   1a99c:	460c      	mov	r4, r1
	pending_current = _current;
   1a99e:	6018      	str	r0, [r3, #0]
{
   1a9a0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1a9a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a9a6:	f7ff ffcf 	bl	1a948 <pend>
   1a9aa:	4620      	mov	r0, r4
}
   1a9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a9b0:	f7f8 be78 	b.w	136a4 <arch_swap>
   1a9b4:	200028cc 	.word	0x200028cc
   1a9b8:	20002900 	.word	0x20002900

0001a9bc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a9be:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1a9c0:	f005 fb63 	bl	2008a <z_tick_get_32>
   1a9c4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1a9c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a9ca:	f3ef 8711 	mrs	r7, BASEPRI
   1a9ce:	f383 8811 	msr	BASEPRI, r3
   1a9d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1a9d6:	4e0d      	ldr	r6, [pc, #52]	; (1aa0c <z_tick_sleep.part.0+0x50>)
   1a9d8:	4b0d      	ldr	r3, [pc, #52]	; (1aa10 <z_tick_sleep.part.0+0x54>)
   1a9da:	68b0      	ldr	r0, [r6, #8]
   1a9dc:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1a9de:	f7ff ff99 	bl	1a914 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1a9e2:	68b0      	ldr	r0, [r6, #8]
   1a9e4:	490b      	ldr	r1, [pc, #44]	; (1aa14 <z_tick_sleep.part.0+0x58>)
   1a9e6:	462a      	mov	r2, r5
   1a9e8:	17eb      	asrs	r3, r5, #31
   1a9ea:	3018      	adds	r0, #24
   1a9ec:	f000 fa82 	bl	1aef4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1a9f0:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a9f2:	7b53      	ldrb	r3, [r2, #13]
   1a9f4:	f043 0310 	orr.w	r3, r3, #16
   1a9f8:	7353      	strb	r3, [r2, #13]
   1a9fa:	4638      	mov	r0, r7
   1a9fc:	f7f8 fe52 	bl	136a4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1aa00:	f005 fb43 	bl	2008a <z_tick_get_32>
   1aa04:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1aa06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1aa0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aa0c:	200028cc 	.word	0x200028cc
   1aa10:	20002900 	.word	0x20002900
   1aa14:	0001fdd1 	.word	0x0001fdd1

0001aa18 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1aa18:	4b04      	ldr	r3, [pc, #16]	; (1aa2c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1aa1a:	2100      	movs	r1, #0
   1aa1c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1aa20:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1aa24:	4608      	mov	r0, r1
   1aa26:	f7ff bd41 	b.w	1a4ac <k_sched_time_slice_set>
   1aa2a:	bf00      	nop
   1aa2c:	200028cc 	.word	0x200028cc

0001aa30 <z_impl_k_yield>:
{
   1aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1aa32:	4c24      	ldr	r4, [pc, #144]	; (1aac4 <z_impl_k_yield+0x94>)
   1aa34:	4b24      	ldr	r3, [pc, #144]	; (1aac8 <z_impl_k_yield+0x98>)
   1aa36:	68a2      	ldr	r2, [r4, #8]
   1aa38:	429a      	cmp	r2, r3
   1aa3a:	d030      	beq.n	1aa9e <z_impl_k_yield+0x6e>
   1aa3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aa40:	f3ef 8511 	mrs	r5, BASEPRI
   1aa44:	f383 8811 	msr	BASEPRI, r3
   1aa48:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1aa4c:	68a1      	ldr	r1, [r4, #8]
   1aa4e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1aa52:	f7ff fd7d 	bl	1a550 <z_priq_dumb_remove>
	return list->head == list;
   1aa56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1aa58:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1aa5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa5c:	4283      	cmp	r3, r0
   1aa5e:	bf08      	it	eq
   1aa60:	2300      	moveq	r3, #0
   1aa62:	2b00      	cmp	r3, #0
   1aa64:	bf38      	it	cc
   1aa66:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aa68:	b32b      	cbz	r3, 1aab6 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1aa6a:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1aa6e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1aa72:	42b7      	cmp	r7, r6
   1aa74:	db03      	blt.n	1aa7e <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1aa76:	428b      	cmp	r3, r1
   1aa78:	d01d      	beq.n	1aab6 <z_impl_k_yield+0x86>
   1aa7a:	681b      	ldr	r3, [r3, #0]
   1aa7c:	e7f4      	b.n	1aa68 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1aa7e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1aa80:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1aa84:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1aa86:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1aa88:	7b53      	ldrb	r3, [r2, #13]
   1aa8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1aa8e:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1aa90:	2001      	movs	r0, #1
   1aa92:	f7ff fd73 	bl	1a57c <update_cache>
	__asm__ volatile(
   1aa96:	f385 8811 	msr	BASEPRI, r5
   1aa9a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1aa9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aaa2:	f3ef 8011 	mrs	r0, BASEPRI
   1aaa6:	f383 8811 	msr	BASEPRI, r3
   1aaaa:	f3bf 8f6f 	isb	sy
}
   1aaae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1aab2:	f7f8 bdf7 	b.w	136a4 <arch_swap>
	node->prev = list->tail;
   1aab6:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1aaba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1aabc:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1aabe:	6322      	str	r2, [r4, #48]	; 0x30
}
   1aac0:	e7e2      	b.n	1aa88 <z_impl_k_yield+0x58>
   1aac2:	bf00      	nop
   1aac4:	200028cc 	.word	0x200028cc
   1aac8:	20002498 	.word	0x20002498

0001aacc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1aacc:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1aace:	3301      	adds	r3, #1
   1aad0:	bf08      	it	eq
   1aad2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1aad6:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1aad8:	d106      	bne.n	1aae8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1aada:	4b0b      	ldr	r3, [pc, #44]	; (1ab08 <z_impl_k_sleep+0x3c>)
   1aadc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1aade:	f7ff fe63 	bl	1a7a8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1aae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1aae6:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1aae8:	4604      	mov	r4, r0
	if (ticks == 0) {
   1aaea:	b948      	cbnz	r0, 1ab00 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1aaec:	f7ff ffa0 	bl	1aa30 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1aaf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1aaf4:	fb84 3400 	smull	r3, r4, r4, r0
   1aaf8:	0bd8      	lsrs	r0, r3, #15
   1aafa:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1aafe:	e7f2      	b.n	1aae6 <z_impl_k_sleep+0x1a>
   1ab00:	f7ff ff5c 	bl	1a9bc <z_tick_sleep.part.0>
   1ab04:	4604      	mov	r4, r0
   1ab06:	e7f3      	b.n	1aaf0 <z_impl_k_sleep+0x24>
   1ab08:	200028cc 	.word	0x200028cc

0001ab0c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1ab0c:	4b01      	ldr	r3, [pc, #4]	; (1ab14 <z_impl_k_current_get+0x8>)
   1ab0e:	6898      	ldr	r0, [r3, #8]
   1ab10:	4770      	bx	lr
   1ab12:	bf00      	nop
   1ab14:	200028cc 	.word	0x200028cc

0001ab18 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ab18:	b538      	push	{r3, r4, r5, lr}
   1ab1a:	4604      	mov	r4, r0
   1ab1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab20:	f3ef 8511 	mrs	r5, BASEPRI
   1ab24:	f383 8811 	msr	BASEPRI, r3
   1ab28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1ab2c:	f005 f99b 	bl	1fe66 <z_unpend_first_thread>

	if (thread != NULL) {
   1ab30:	b150      	cbz	r0, 1ab48 <z_impl_k_sem_give+0x30>
   1ab32:	2200      	movs	r2, #0
   1ab34:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1ab38:	f005 f93a 	bl	1fdb0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1ab3c:	4629      	mov	r1, r5
   1ab3e:	4808      	ldr	r0, [pc, #32]	; (1ab60 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1ab40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1ab44:	f7ff bcde 	b.w	1a504 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ab48:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1ab4c:	429a      	cmp	r2, r3
   1ab4e:	bf18      	it	ne
   1ab50:	3301      	addne	r3, #1
   1ab52:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ab54:	2102      	movs	r1, #2
   1ab56:	f104 0010 	add.w	r0, r4, #16
   1ab5a:	f005 fc07 	bl	2036c <z_handle_obj_poll_events>
}
   1ab5e:	e7ed      	b.n	1ab3c <z_impl_k_sem_give+0x24>
   1ab60:	20003251 	.word	0x20003251

0001ab64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1ab64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ab66:	4614      	mov	r4, r2
   1ab68:	461d      	mov	r5, r3
   1ab6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab6e:	f3ef 8111 	mrs	r1, BASEPRI
   1ab72:	f383 8811 	msr	BASEPRI, r3
   1ab76:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1ab7a:	6883      	ldr	r3, [r0, #8]
   1ab7c:	b143      	cbz	r3, 1ab90 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1ab7e:	3b01      	subs	r3, #1
   1ab80:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1ab82:	f381 8811 	msr	BASEPRI, r1
   1ab86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1ab8a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1ab8c:	b003      	add	sp, #12
   1ab8e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ab90:	ea54 0305 	orrs.w	r3, r4, r5
   1ab94:	d106      	bne.n	1aba4 <z_impl_k_sem_take+0x40>
   1ab96:	f381 8811 	msr	BASEPRI, r1
   1ab9a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1ab9e:	f06f 000f 	mvn.w	r0, #15
   1aba2:	e7f3      	b.n	1ab8c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1aba4:	4602      	mov	r2, r0
   1aba6:	e9cd 4500 	strd	r4, r5, [sp]
   1abaa:	4802      	ldr	r0, [pc, #8]	; (1abb4 <z_impl_k_sem_take+0x50>)
   1abac:	f7ff fef2 	bl	1a994 <z_pend_curr>
	return ret;
   1abb0:	e7ec      	b.n	1ab8c <z_impl_k_sem_take+0x28>
   1abb2:	bf00      	nop
   1abb4:	20003251 	.word	0x20003251

0001abb8 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1abb8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1abba:	4c08      	ldr	r4, [pc, #32]	; (1abdc <k_sys_work_q_init+0x24>)
   1abbc:	4908      	ldr	r1, [pc, #32]	; (1abe0 <k_sys_work_q_init+0x28>)
   1abbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1abc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1abc6:	4620      	mov	r0, r4
   1abc8:	f000 f8de 	bl	1ad88 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1abcc:	4905      	ldr	r1, [pc, #20]	; (1abe4 <k_sys_work_q_init+0x2c>)
   1abce:	f104 0018 	add.w	r0, r4, #24
   1abd2:	f005 f997 	bl	1ff04 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1abd6:	2000      	movs	r0, #0
   1abd8:	bd10      	pop	{r4, pc}
   1abda:	bf00      	nop
   1abdc:	200025a8 	.word	0x200025a8
   1abe0:	20006300 	.word	0x20006300
   1abe4:	00021202 	.word	0x00021202

0001abe8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1abe8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1abec:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1abf0:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1abf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1abf6:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1abf8:	2504      	movs	r5, #4
   1abfa:	7345      	strb	r5, [r0, #13]
{
   1abfc:	460f      	mov	r7, r1

	thread_base->prio = priority;
   1abfe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1ac00:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ac02:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   1ac04:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ac06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1ac08:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ac0a:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1ac0e:	3720      	adds	r7, #32
	node->prev = NULL;
   1ac10:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1ac14:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   1ac18:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ac1a:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ac1e:	9202      	str	r2, [sp, #8]
   1ac20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ac22:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1ac24:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ac26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ac28:	9200      	str	r2, [sp, #0]
   1ac2a:	4642      	mov	r2, r8
{
   1ac2c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ac2e:	f7f8 fd8d 	bl	1374c <arch_new_thread>
	if (!_current) {
   1ac32:	4b05      	ldr	r3, [pc, #20]	; (1ac48 <z_setup_new_thread+0x60>)
   1ac34:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1ac36:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1ac3a:	b103      	cbz	r3, 1ac3e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1ac3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   1ac3e:	67a3      	str	r3, [r4, #120]	; 0x78
}
   1ac40:	4640      	mov	r0, r8
   1ac42:	b004      	add	sp, #16
   1ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ac48:	200028cc 	.word	0x200028cc

0001ac4c <z_impl_k_thread_create>:
{
   1ac4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac4e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ac50:	2500      	movs	r5, #0
   1ac52:	9505      	str	r5, [sp, #20]
   1ac54:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1ac56:	9504      	str	r5, [sp, #16]
   1ac58:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1ac5a:	9503      	str	r5, [sp, #12]
   1ac5c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1ac5e:	9502      	str	r5, [sp, #8]
{
   1ac60:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ac64:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1ac66:	9501      	str	r5, [sp, #4]
   1ac68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1ac6a:	9500      	str	r5, [sp, #0]
{
   1ac6c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ac6e:	f7ff ffbb 	bl	1abe8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1ac72:	1c7b      	adds	r3, r7, #1
   1ac74:	bf08      	it	eq
   1ac76:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1ac7a:	d005      	beq.n	1ac88 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ac7c:	ea56 0307 	orrs.w	r3, r6, r7
   1ac80:	d105      	bne.n	1ac8e <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1ac82:	4620      	mov	r0, r4
   1ac84:	f7ff fcf6 	bl	1a674 <z_sched_start>
}
   1ac88:	4620      	mov	r0, r4
   1ac8a:	b007      	add	sp, #28
   1ac8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac8e:	4904      	ldr	r1, [pc, #16]	; (1aca0 <z_impl_k_thread_create+0x54>)
   1ac90:	4632      	mov	r2, r6
   1ac92:	463b      	mov	r3, r7
   1ac94:	f104 0018 	add.w	r0, r4, #24
   1ac98:	f000 f92c 	bl	1aef4 <z_add_timeout>
   1ac9c:	e7f4      	b.n	1ac88 <z_impl_k_thread_create+0x3c>
   1ac9e:	bf00      	nop
   1aca0:	0001fdd1 	.word	0x0001fdd1

0001aca4 <z_init_static_threads>:
{
   1aca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1aca8:	4e2a      	ldr	r6, [pc, #168]	; (1ad54 <z_init_static_threads+0xb0>)
   1acaa:	4d2b      	ldr	r5, [pc, #172]	; (1ad58 <z_init_static_threads+0xb4>)
{
   1acac:	b086      	sub	sp, #24
   1acae:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1acb0:	42b5      	cmp	r5, r6
   1acb2:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1acb6:	d310      	bcc.n	1acda <z_init_static_threads+0x36>
	k_sched_lock();
   1acb8:	f7ff fc36 	bl	1a528 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1acbc:	4c26      	ldr	r4, [pc, #152]	; (1ad58 <z_init_static_threads+0xb4>)
   1acbe:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1ad5c <z_init_static_threads+0xb8>
   1acc2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1acc6:	f240 36e7 	movw	r6, #999	; 0x3e7
   1acca:	2700      	movs	r7, #0
   1accc:	4544      	cmp	r4, r8
   1acce:	d321      	bcc.n	1ad14 <z_init_static_threads+0x70>
}
   1acd0:	b006      	add	sp, #24
   1acd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1acd6:	f7ff bc79 	b.w	1a5cc <k_sched_unlock>
		z_setup_new_thread(
   1acda:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1acde:	9305      	str	r3, [sp, #20]
   1ace0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ace4:	9304      	str	r3, [sp, #16]
   1ace6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1acea:	9303      	str	r3, [sp, #12]
   1acec:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1acf0:	9302      	str	r3, [sp, #8]
   1acf2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1acf6:	9301      	str	r3, [sp, #4]
   1acf8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1acfc:	9300      	str	r3, [sp, #0]
   1acfe:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1ad02:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1ad06:	f7ff ff6f 	bl	1abe8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1ad0a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1ad0e:	65dd      	str	r5, [r3, #92]	; 0x5c
   1ad10:	4625      	mov	r5, r4
   1ad12:	e7cd      	b.n	1acb0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ad14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ad16:	1c5a      	adds	r2, r3, #1
   1ad18:	d00d      	beq.n	1ad36 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1ad1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ad1e:	4630      	mov	r0, r6
   1ad20:	4639      	mov	r1, r7
   1ad22:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ad26:	42b9      	cmp	r1, r7
   1ad28:	bf08      	it	eq
   1ad2a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1ad2c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ad2e:	d104      	bne.n	1ad3a <z_init_static_threads+0x96>
	z_sched_start(thread);
   1ad30:	4628      	mov	r0, r5
   1ad32:	f7ff fc9f 	bl	1a674 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ad36:	3430      	adds	r4, #48	; 0x30
   1ad38:	e7c8      	b.n	1accc <z_init_static_threads+0x28>
   1ad3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ad3e:	2300      	movs	r3, #0
   1ad40:	f7e5 f9ce 	bl	e0 <__aeabi_uldivmod>
   1ad44:	4602      	mov	r2, r0
   1ad46:	460b      	mov	r3, r1
   1ad48:	f105 0018 	add.w	r0, r5, #24
   1ad4c:	4651      	mov	r1, sl
   1ad4e:	f000 f8d1 	bl	1aef4 <z_add_timeout>
   1ad52:	e7f0      	b.n	1ad36 <z_init_static_threads+0x92>
   1ad54:	200007b0 	.word	0x200007b0
   1ad58:	200007b0 	.word	0x200007b0
   1ad5c:	0001fdd1 	.word	0x0001fdd1

0001ad60 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   1ad60:	b508      	push	{r3, lr}
	__asm__ volatile(
   1ad62:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad66:	f3ef 8411 	mrs	r4, BASEPRI
   1ad6a:	f383 8811 	msr	BASEPRI, r3
   1ad6e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1ad72:	4b04      	ldr	r3, [pc, #16]	; (1ad84 <z_self_abort+0x24>)
   1ad74:	6898      	ldr	r0, [r3, #8]
   1ad76:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1ad78:	f7ff fd16 	bl	1a7a8 <z_impl_k_thread_suspend>
   1ad7c:	4620      	mov	r0, r4
   1ad7e:	f7f8 fc91 	bl	136a4 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   1ad82:	bf00      	nop
   1ad84:	200028cc 	.word	0x200028cc

0001ad88 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1ad88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad8c:	4604      	mov	r4, r0
   1ad8e:	b088      	sub	sp, #32
   1ad90:	460d      	mov	r5, r1
   1ad92:	4616      	mov	r6, r2
   1ad94:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1ad96:	f004 ff63 	bl	1fc60 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1ad9a:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ad9e:	2200      	movs	r2, #0
   1ada0:	2300      	movs	r3, #0
   1ada2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ada6:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1adaa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1adae:	4b07      	ldr	r3, [pc, #28]	; (1adcc <k_work_q_start+0x44>)
   1adb0:	9400      	str	r4, [sp, #0]
   1adb2:	4632      	mov	r2, r6
   1adb4:	4629      	mov	r1, r5
   1adb6:	4640      	mov	r0, r8
   1adb8:	f7ff ff48 	bl	1ac4c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1adbc:	4904      	ldr	r1, [pc, #16]	; (1add0 <k_work_q_start+0x48>)
   1adbe:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1adc0:	b008      	add	sp, #32
   1adc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1adc6:	f005 b89d 	b.w	1ff04 <z_impl_k_thread_name_set>
   1adca:	bf00      	nop
   1adcc:	0001b41f 	.word	0x0001b41f
   1add0:	0002120b 	.word	0x0002120b

0001add4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1add4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1add8:	4606      	mov	r6, r0
   1adda:	460d      	mov	r5, r1
   1addc:	4690      	mov	r8, r2
   1adde:	4699      	mov	r9, r3
   1ade0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ade4:	f3ef 8711 	mrs	r7, BASEPRI
   1ade8:	f383 8811 	msr	BASEPRI, r3
   1adec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1adf0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1adf2:	b17b      	cbz	r3, 1ae14 <k_delayed_work_submit_to_queue+0x40>
   1adf4:	4283      	cmp	r3, r0
   1adf6:	d128      	bne.n	1ae4a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1adf8:	4628      	mov	r0, r5
   1adfa:	f005 f8a3 	bl	1ff44 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1adfe:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1ae02:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1ae04:	d008      	beq.n	1ae18 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1ae06:	2800      	cmp	r0, #0
   1ae08:	da07      	bge.n	1ae1a <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1ae0a:	f387 8811 	msr	BASEPRI, r7
   1ae0e:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1ae12:	e00f      	b.n	1ae34 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1ae14:	2800      	cmp	r0, #0
   1ae16:	d0ef      	beq.n	1adf8 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1ae18:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ae1a:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1ae1e:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ae20:	d10b      	bne.n	1ae3a <k_delayed_work_submit_to_queue+0x66>
   1ae22:	f387 8811 	msr	BASEPRI, r7
   1ae26:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1ae2a:	4629      	mov	r1, r5
   1ae2c:	4630      	mov	r0, r6
   1ae2e:	f005 f86c 	bl	1ff0a <k_work_submit_to_queue>
		return 0;
   1ae32:	2400      	movs	r4, #0
}
   1ae34:	4620      	mov	r0, r4
   1ae36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1ae3a:	4905      	ldr	r1, [pc, #20]	; (1ae50 <k_delayed_work_submit_to_queue+0x7c>)
   1ae3c:	4642      	mov	r2, r8
   1ae3e:	464b      	mov	r3, r9
   1ae40:	f105 0010 	add.w	r0, r5, #16
   1ae44:	f000 f856 	bl	1aef4 <z_add_timeout>
   1ae48:	e7df      	b.n	1ae0a <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1ae4a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1ae4e:	e7dc      	b.n	1ae0a <k_delayed_work_submit_to_queue+0x36>
   1ae50:	0001ff3b 	.word	0x0001ff3b

0001ae54 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1ae54:	4b03      	ldr	r3, [pc, #12]	; (1ae64 <elapsed+0x10>)
   1ae56:	681b      	ldr	r3, [r3, #0]
   1ae58:	b90b      	cbnz	r3, 1ae5e <elapsed+0xa>
   1ae5a:	f7f8 ba47 	b.w	132ec <z_clock_elapsed>
}
   1ae5e:	2000      	movs	r0, #0
   1ae60:	4770      	bx	lr
   1ae62:	bf00      	nop
   1ae64:	2000290c 	.word	0x2000290c

0001ae68 <remove_timeout>:
{
   1ae68:	b530      	push	{r4, r5, lr}
   1ae6a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ae6c:	b168      	cbz	r0, 1ae8a <remove_timeout+0x22>
   1ae6e:	4a0a      	ldr	r2, [pc, #40]	; (1ae98 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1ae70:	6852      	ldr	r2, [r2, #4]
   1ae72:	4290      	cmp	r0, r2
   1ae74:	d009      	beq.n	1ae8a <remove_timeout+0x22>
	if (next(t) != NULL) {
   1ae76:	b143      	cbz	r3, 1ae8a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1ae78:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1ae7c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1ae80:	1912      	adds	r2, r2, r4
   1ae82:	eb45 0101 	adc.w	r1, r5, r1
   1ae86:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1ae8a:	6842      	ldr	r2, [r0, #4]
   1ae8c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ae8e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ae90:	2300      	movs	r3, #0
	node->prev = NULL;
   1ae92:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ae96:	bd30      	pop	{r4, r5, pc}
   1ae98:	20000678 	.word	0x20000678

0001ae9c <next_timeout>:

static int32_t next_timeout(void)
{
   1ae9c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1ae9e:	4b13      	ldr	r3, [pc, #76]	; (1aeec <next_timeout+0x50>)
   1aea0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aea2:	429c      	cmp	r4, r3
   1aea4:	bf08      	it	eq
   1aea6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1aea8:	f7ff ffd4 	bl	1ae54 <elapsed>
   1aeac:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1aeae:	b1bc      	cbz	r4, 1aee0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1aeb0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1aeb4:	1b40      	subs	r0, r0, r5
   1aeb6:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1aeba:	2801      	cmp	r0, #1
   1aebc:	f171 0300 	sbcs.w	r3, r1, #0
   1aec0:	db11      	blt.n	1aee6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1aec2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1aec6:	2300      	movs	r3, #0
   1aec8:	4282      	cmp	r2, r0
   1aeca:	eb73 0401 	sbcs.w	r4, r3, r1
   1aece:	da00      	bge.n	1aed2 <next_timeout+0x36>
   1aed0:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1aed2:	4b07      	ldr	r3, [pc, #28]	; (1aef0 <next_timeout+0x54>)
   1aed4:	695b      	ldr	r3, [r3, #20]
   1aed6:	b113      	cbz	r3, 1aede <next_timeout+0x42>
   1aed8:	4298      	cmp	r0, r3
   1aeda:	bfa8      	it	ge
   1aedc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1aede:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1aee0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1aee4:	e7f5      	b.n	1aed2 <next_timeout+0x36>
   1aee6:	2000      	movs	r0, #0
   1aee8:	e7f3      	b.n	1aed2 <next_timeout+0x36>
   1aeea:	bf00      	nop
   1aeec:	20000678 	.word	0x20000678
   1aef0:	200028cc 	.word	0x200028cc

0001aef4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1aef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aef8:	9101      	str	r1, [sp, #4]
   1aefa:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1aefc:	1c4b      	adds	r3, r1, #1
   1aefe:	bf08      	it	eq
   1af00:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1af04:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1af06:	d06c      	beq.n	1afe2 <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1af08:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1af0a:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1af0e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1af12:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1af16:	ebb3 0804 	subs.w	r8, r3, r4
   1af1a:	eb6b 0905 	sbc.w	r9, fp, r5
   1af1e:	f1b8 0f00 	cmp.w	r8, #0
   1af22:	f179 0300 	sbcs.w	r3, r9, #0
   1af26:	db0f      	blt.n	1af48 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1af28:	f7ff ff94 	bl	1ae54 <elapsed>
   1af2c:	4a33      	ldr	r2, [pc, #204]	; (1affc <z_add_timeout+0x108>)
   1af2e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1af32:	f06f 0301 	mvn.w	r3, #1
   1af36:	1a5b      	subs	r3, r3, r1
   1af38:	eb6b 020c 	sbc.w	r2, fp, ip
   1af3c:	1b1e      	subs	r6, r3, r4
   1af3e:	eb62 0705 	sbc.w	r7, r2, r5
   1af42:	1a34      	subs	r4, r6, r0
   1af44:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1af48:	9b01      	ldr	r3, [sp, #4]
   1af4a:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1af4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af52:	f3ef 8611 	mrs	r6, BASEPRI
   1af56:	f383 8811 	msr	BASEPRI, r3
   1af5a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1af5e:	f7ff ff79 	bl	1ae54 <elapsed>
	ticks = MAX(1, ticks);
   1af62:	2c01      	cmp	r4, #1
   1af64:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1af68:	4b25      	ldr	r3, [pc, #148]	; (1b000 <z_add_timeout+0x10c>)
   1af6a:	bfb8      	it	lt
   1af6c:	2401      	movlt	r4, #1
   1af6e:	681a      	ldr	r2, [r3, #0]
   1af70:	bfb8      	it	lt
   1af72:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1af74:	1824      	adds	r4, r4, r0
   1af76:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1af7a:	429a      	cmp	r2, r3
   1af7c:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1af80:	d001      	beq.n	1af86 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1af82:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1af84:	b952      	cbnz	r2, 1af9c <z_add_timeout+0xa8>
	node->prev = list->tail;
   1af86:	685a      	ldr	r2, [r3, #4]
   1af88:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1af8c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1af8e:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1af92:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1af96:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1af9a:	e014      	b.n	1afc6 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   1af9c:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1afa0:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1afa4:	4544      	cmp	r4, r8
   1afa6:	eb75 0109 	sbcs.w	r1, r5, r9
   1afaa:	da1d      	bge.n	1afe8 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   1afac:	ebb8 0004 	subs.w	r0, r8, r4
   1afb0:	eb69 0105 	sbc.w	r1, r9, r5
   1afb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1afb8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1afba:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1afbe:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1afc2:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1afc6:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1afc8:	429a      	cmp	r2, r3
   1afca:	d006      	beq.n	1afda <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1afcc:	4592      	cmp	sl, r2
   1afce:	d104      	bne.n	1afda <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   1afd0:	f7ff ff64 	bl	1ae9c <next_timeout>
   1afd4:	2100      	movs	r1, #0
   1afd6:	f7f8 f923 	bl	13220 <z_clock_set_timeout>
	__asm__ volatile(
   1afda:	f386 8811 	msr	BASEPRI, r6
   1afde:	f3bf 8f6f 	isb	sy
		}
	}
}
   1afe2:	b003      	add	sp, #12
   1afe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1afe8:	ebb4 0008 	subs.w	r0, r4, r8
   1afec:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1aff0:	42ba      	cmp	r2, r7
   1aff2:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1aff6:	d0c6      	beq.n	1af86 <z_add_timeout+0x92>
   1aff8:	6812      	ldr	r2, [r2, #0]
   1affa:	e7c3      	b.n	1af84 <z_add_timeout+0x90>
   1affc:	20002648 	.word	0x20002648
   1b000:	20000678 	.word	0x20000678

0001b004 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1b004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b008:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1b00a:	f7ff fb8b 	bl	1a724 <z_time_slice>
	__asm__ volatile(
   1b00e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b012:	f3ef 8411 	mrs	r4, BASEPRI
   1b016:	f383 8811 	msr	BASEPRI, r3
   1b01a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1b01e:	4d2c      	ldr	r5, [pc, #176]	; (1b0d0 <z_clock_announce+0xcc>)
   1b020:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1b0d4 <z_clock_announce+0xd0>
	return list->head == list;
   1b024:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1b0d8 <z_clock_announce+0xd4>
   1b028:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1b02a:	4651      	mov	r1, sl
   1b02c:	f8d5 c000 	ldr.w	ip, [r5]
   1b030:	f8db 0000 	ldr.w	r0, [fp]
   1b034:	4662      	mov	r2, ip
   1b036:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b038:	4558      	cmp	r0, fp
   1b03a:	e9da 8900 	ldrd	r8, r9, [sl]
   1b03e:	e9cd 2300 	strd	r2, r3, [sp]
   1b042:	d00d      	beq.n	1b060 <z_clock_announce+0x5c>
   1b044:	b160      	cbz	r0, 1b060 <z_clock_announce+0x5c>
   1b046:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1b04a:	45b4      	cmp	ip, r6
   1b04c:	41bb      	sbcs	r3, r7
   1b04e:	da1e      	bge.n	1b08e <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1b050:	9b00      	ldr	r3, [sp, #0]
   1b052:	ebb6 0c03 	subs.w	ip, r6, r3
   1b056:	9b01      	ldr	r3, [sp, #4]
   1b058:	eb67 0603 	sbc.w	r6, r7, r3
   1b05c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1b060:	9b00      	ldr	r3, [sp, #0]
   1b062:	eb13 0208 	adds.w	r2, r3, r8
   1b066:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1b068:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1b06c:	eb43 0309 	adc.w	r3, r3, r9
   1b070:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1b074:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1b076:	f7ff ff11 	bl	1ae9c <next_timeout>
   1b07a:	4631      	mov	r1, r6
   1b07c:	f7f8 f8d0 	bl	13220 <z_clock_set_timeout>
	__asm__ volatile(
   1b080:	f384 8811 	msr	BASEPRI, r4
   1b084:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1b088:	b003      	add	sp, #12
   1b08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1b08e:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1b092:	f04f 0200 	mov.w	r2, #0
   1b096:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1b09a:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1b09e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1b0a2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1b0a6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1b0aa:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1b0ac:	f7ff fedc 	bl	1ae68 <remove_timeout>
   1b0b0:	f384 8811 	msr	BASEPRI, r4
   1b0b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1b0b8:	6883      	ldr	r3, [r0, #8]
   1b0ba:	4798      	blx	r3
	__asm__ volatile(
   1b0bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0c0:	f3ef 8411 	mrs	r4, BASEPRI
   1b0c4:	f383 8811 	msr	BASEPRI, r3
   1b0c8:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1b0cc:	4901      	ldr	r1, [pc, #4]	; (1b0d4 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1b0ce:	e7ad      	b.n	1b02c <z_clock_announce+0x28>
   1b0d0:	2000290c 	.word	0x2000290c
   1b0d4:	20002648 	.word	0x20002648
   1b0d8:	20000678 	.word	0x20000678

0001b0dc <z_tick_get>:

int64_t z_tick_get(void)
{
   1b0dc:	b510      	push	{r4, lr}
   1b0de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0e2:	f3ef 8411 	mrs	r4, BASEPRI
   1b0e6:	f383 8811 	msr	BASEPRI, r3
   1b0ea:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1b0ee:	f7f8 f8fd 	bl	132ec <z_clock_elapsed>
   1b0f2:	4b06      	ldr	r3, [pc, #24]	; (1b10c <z_tick_get+0x30>)
   1b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b0f8:	1812      	adds	r2, r2, r0
   1b0fa:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1b0fe:	f384 8811 	msr	BASEPRI, r4
   1b102:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1b106:	4610      	mov	r0, r2
   1b108:	4619      	mov	r1, r3
   1b10a:	bd10      	pop	{r4, pc}
   1b10c:	20002648 	.word	0x20002648

0001b110 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1b110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1b114:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1b116:	4b2a      	ldr	r3, [pc, #168]	; (1b1c0 <z_impl_k_poll+0xb0>)
   1b118:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1b11a:	2301      	movs	r3, #1
   1b11c:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   1b120:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1b124:	ea52 0307 	orrs.w	r3, r2, r7
{
   1b128:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1b12a:	bf0c      	ite	eq
   1b12c:	2301      	moveq	r3, #1
   1b12e:	2300      	movne	r3, #0
   1b130:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   1b134:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1b136:	f005 f8a9 	bl	2028c <register_events>
   1b13a:	4681      	mov	r9, r0
	__asm__ volatile(
   1b13c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b140:	f3ef 8a11 	mrs	sl, BASEPRI
   1b144:	f383 8811 	msr	BASEPRI, r3
   1b148:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1b14c:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   1b150:	b964      	cbnz	r4, 1b16c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1b152:	4601      	mov	r1, r0
   1b154:	4652      	mov	r2, sl
   1b156:	4640      	mov	r0, r8
   1b158:	f004 ffc4 	bl	200e4 <clear_event_registrations>
	__asm__ volatile(
   1b15c:	f38a 8811 	msr	BASEPRI, sl
   1b160:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1b164:	4620      	mov	r0, r4
   1b166:	b004      	add	sp, #16
   1b168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1b16c:	2300      	movs	r3, #0
   1b16e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b172:	ea56 0307 	orrs.w	r3, r6, r7
   1b176:	d106      	bne.n	1b186 <z_impl_k_poll+0x76>
   1b178:	f38a 8811 	msr	BASEPRI, sl
   1b17c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1b180:	f06f 040a 	mvn.w	r4, #10
   1b184:	e7ee      	b.n	1b164 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1b186:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1b188:	e9cd 6700 	strd	r6, r7, [sp]
   1b18c:	4651      	mov	r1, sl
   1b18e:	480d      	ldr	r0, [pc, #52]	; (1b1c4 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1b190:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1b194:	f7ff fbfe 	bl	1a994 <z_pend_curr>
   1b198:	4604      	mov	r4, r0
	__asm__ volatile(
   1b19a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b19e:	f3ef 8511 	mrs	r5, BASEPRI
   1b1a2:	f383 8811 	msr	BASEPRI, r3
   1b1a6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1b1aa:	462a      	mov	r2, r5
   1b1ac:	4649      	mov	r1, r9
   1b1ae:	4640      	mov	r0, r8
   1b1b0:	f004 ff98 	bl	200e4 <clear_event_registrations>
	__asm__ volatile(
   1b1b4:	f385 8811 	msr	BASEPRI, r5
   1b1b8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1b1bc:	e7d2      	b.n	1b164 <z_impl_k_poll+0x54>
   1b1be:	bf00      	nop
   1b1c0:	200028cc 	.word	0x200028cc
   1b1c4:	20003251 	.word	0x20003251

0001b1c8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1b1c8:	b538      	push	{r3, r4, r5, lr}
   1b1ca:	4603      	mov	r3, r0
	__asm__ volatile(
   1b1cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b1d0:	f3ef 8511 	mrs	r5, BASEPRI
   1b1d4:	f382 8811 	msr	BASEPRI, r2
   1b1d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1b1dc:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1b1de:	2101      	movs	r1, #1
   1b1e0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1b1e2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1b1e4:	4283      	cmp	r3, r0
   1b1e6:	d106      	bne.n	1b1f6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1b1e8:	f385 8811 	msr	BASEPRI, r5
   1b1ec:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1b1f0:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1b1f2:	4620      	mov	r0, r4
   1b1f4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1b1f6:	e9d0 3200 	ldrd	r3, r2, [r0]
   1b1fa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b1fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b1fe:	2300      	movs	r3, #0
	node->prev = NULL;
   1b200:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b204:	f004 ffb1 	bl	2016a <signal_poll_event>
	z_reschedule(&lock, key);
   1b208:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b20a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1b20c:	4801      	ldr	r0, [pc, #4]	; (1b214 <z_impl_k_poll_signal_raise+0x4c>)
   1b20e:	f7ff f979 	bl	1a504 <z_reschedule>
	return rc;
   1b212:	e7ee      	b.n	1b1f2 <z_impl_k_poll_signal_raise+0x2a>
   1b214:	20003251 	.word	0x20003251

0001b218 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1b218:	b510      	push	{r4, lr}
   1b21a:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1b21c:	f004 fe68 	bl	1fef0 <k_is_in_isr>
   1b220:	b940      	cbnz	r0, 1b234 <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1b222:	4b05      	ldr	r3, [pc, #20]	; (1b238 <z_thread_malloc+0x20>)
   1b224:	689b      	ldr	r3, [r3, #8]
   1b226:	6f98      	ldr	r0, [r3, #120]	; 0x78
	}

	if (pool) {
   1b228:	b120      	cbz	r0, 1b234 <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
   1b22a:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   1b22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1b230:	f005 b8aa 	b.w	20388 <k_mem_pool_malloc>
}
   1b234:	2000      	movs	r0, #0
   1b236:	bd10      	pop	{r4, pc}
   1b238:	200028cc 	.word	0x200028cc

0001b23c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1b23c:	4603      	mov	r3, r0
   1b23e:	b140      	cbz	r0, 1b252 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b240:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b242:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1b246:	2a02      	cmp	r2, #2
   1b248:	d006      	beq.n	1b258 <sys_notify_validate+0x1c>
   1b24a:	2a03      	cmp	r2, #3
   1b24c:	d004      	beq.n	1b258 <sys_notify_validate+0x1c>
   1b24e:	2a01      	cmp	r2, #1
   1b250:	d005      	beq.n	1b25e <sys_notify_validate+0x22>
		return -EINVAL;
   1b252:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1b256:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1b258:	681a      	ldr	r2, [r3, #0]
   1b25a:	2a00      	cmp	r2, #0
   1b25c:	d0f9      	beq.n	1b252 <sys_notify_validate+0x16>
		notify->result = 0;
   1b25e:	2000      	movs	r0, #0
   1b260:	6098      	str	r0, [r3, #8]
   1b262:	4770      	bx	lr

0001b264 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b264:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b266:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1b26a:	2a02      	cmp	r2, #2
{
   1b26c:	b510      	push	{r4, lr}
   1b26e:	4603      	mov	r3, r0
	notify->result = res;
   1b270:	6081      	str	r1, [r0, #8]
	switch (method) {
   1b272:	d00a      	beq.n	1b28a <sys_notify_finalize+0x26>
   1b274:	2a03      	cmp	r2, #3
   1b276:	d10b      	bne.n	1b290 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1b278:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1b27a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1b27c:	2200      	movs	r2, #0
   1b27e:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1b280:	b108      	cbz	r0, 1b286 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   1b282:	f7ff ffa1 	bl	1b1c8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1b286:	4620      	mov	r0, r4
   1b288:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1b28a:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1b28c:	2400      	movs	r4, #0
		break;
   1b28e:	e7f5      	b.n	1b27c <sys_notify_finalize+0x18>
	switch (method) {
   1b290:	2400      	movs	r4, #0
   1b292:	4620      	mov	r0, r4
   1b294:	e7f2      	b.n	1b27c <sys_notify_finalize+0x18>

0001b296 <arch_printk_char_out>:
}
   1b296:	2000      	movs	r0, #0
   1b298:	4770      	bx	lr

0001b29a <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
   1b29a:	b40f      	push	{r0, r1, r2, r3}
   1b29c:	b507      	push	{r0, r1, r2, lr}
   1b29e:	a904      	add	r1, sp, #16
   1b2a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1b2a4:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   1b2a6:	f7f7 f933 	bl	12510 <vprintk>
	}
	va_end(ap);
}
   1b2aa:	b003      	add	sp, #12
   1b2ac:	f85d eb04 	ldr.w	lr, [sp], #4
   1b2b0:	b004      	add	sp, #16
   1b2b2:	4770      	bx	lr

0001b2b4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b2b4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1b2b6:	f013 0307 	ands.w	r3, r3, #7
   1b2ba:	d105      	bne.n	1b2c8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1b2bc:	6803      	ldr	r3, [r0, #0]
   1b2be:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1b2c0:	bf0c      	ite	eq
   1b2c2:	2000      	moveq	r0, #0
   1b2c4:	2003      	movne	r0, #3
   1b2c6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1b2c8:	2b02      	cmp	r3, #2
   1b2ca:	d105      	bne.n	1b2d8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1b2cc:	8b43      	ldrh	r3, [r0, #26]
   1b2ce:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1b2d0:	bf14      	ite	ne
   1b2d2:	2000      	movne	r0, #0
   1b2d4:	2004      	moveq	r0, #4
   1b2d6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1b2d8:	2b01      	cmp	r3, #1
   1b2da:	d105      	bne.n	1b2e8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1b2dc:	6803      	ldr	r3, [r0, #0]
   1b2de:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1b2e0:	bf0c      	ite	eq
   1b2e2:	2000      	moveq	r0, #0
   1b2e4:	2005      	movne	r0, #5
   1b2e6:	4770      	bx	lr
	int evt = EVT_NOP;
   1b2e8:	2000      	movs	r0, #0
}
   1b2ea:	4770      	bx	lr

0001b2ec <notify_one>:
{
   1b2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b2f0:	460d      	mov	r5, r1
   1b2f2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b2f4:	4619      	mov	r1, r3
   1b2f6:	1d28      	adds	r0, r5, #4
{
   1b2f8:	4690      	mov	r8, r2
   1b2fa:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b2fc:	f7ff ffb2 	bl	1b264 <sys_notify_finalize>
	if (cb) {
   1b300:	4604      	mov	r4, r0
   1b302:	b138      	cbz	r0, 1b314 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1b304:	4633      	mov	r3, r6
   1b306:	4642      	mov	r2, r8
   1b308:	4629      	mov	r1, r5
   1b30a:	4638      	mov	r0, r7
   1b30c:	46a4      	mov	ip, r4
}
   1b30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1b312:	4760      	bx	ip
}
   1b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b318 <transition_complete>:
{
   1b318:	b410      	push	{r4}
	__asm__ volatile(
   1b31a:	f04f 0440 	mov.w	r4, #64	; 0x40
   1b31e:	f3ef 8211 	mrs	r2, BASEPRI
   1b322:	f384 8811 	msr	BASEPRI, r4
   1b326:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1b32a:	6141      	str	r1, [r0, #20]
}
   1b32c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1b32e:	2101      	movs	r1, #1
   1b330:	f7f7 b8fc 	b.w	1252c <process_event>

0001b334 <validate_args>:
{
   1b334:	b510      	push	{r4, lr}
   1b336:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1b338:	b140      	cbz	r0, 1b34c <validate_args+0x18>
   1b33a:	b139      	cbz	r1, 1b34c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1b33c:	1d08      	adds	r0, r1, #4
   1b33e:	f7ff ff7d 	bl	1b23c <sys_notify_validate>
	if ((rv == 0)
   1b342:	b928      	cbnz	r0, 1b350 <validate_args+0x1c>
	    && ((cli->notify.flags
   1b344:	68a3      	ldr	r3, [r4, #8]
   1b346:	f033 0303 	bics.w	r3, r3, #3
   1b34a:	d001      	beq.n	1b350 <validate_args+0x1c>
		rv = -EINVAL;
   1b34c:	f06f 0015 	mvn.w	r0, #21
}
   1b350:	bd10      	pop	{r4, pc}

0001b352 <onoff_manager_init>:
{
   1b352:	b538      	push	{r3, r4, r5, lr}
   1b354:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1b356:	4605      	mov	r5, r0
   1b358:	b158      	cbz	r0, 1b372 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1b35a:	b151      	cbz	r1, 1b372 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1b35c:	680b      	ldr	r3, [r1, #0]
   1b35e:	b143      	cbz	r3, 1b372 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1b360:	684b      	ldr	r3, [r1, #4]
   1b362:	b133      	cbz	r3, 1b372 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b364:	221c      	movs	r2, #28
   1b366:	2100      	movs	r1, #0
   1b368:	f001 fcf2 	bl	1cd50 <memset>
   1b36c:	612c      	str	r4, [r5, #16]
	return 0;
   1b36e:	2000      	movs	r0, #0
}
   1b370:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b372:	f06f 0015 	mvn.w	r0, #21
   1b376:	e7fb      	b.n	1b370 <onoff_manager_init+0x1e>

0001b378 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1b378:	b570      	push	{r4, r5, r6, lr}
   1b37a:	4604      	mov	r4, r0
   1b37c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1b37e:	f7ff ffd9 	bl	1b334 <validate_args>

	if (rv < 0) {
   1b382:	1e05      	subs	r5, r0, #0
   1b384:	db31      	blt.n	1b3ea <onoff_request+0x72>
   1b386:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b38a:	f3ef 8111 	mrs	r1, BASEPRI
   1b38e:	f383 8811 	msr	BASEPRI, r3
   1b392:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1b396:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b398:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1b39a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1b39e:	42ab      	cmp	r3, r5
   1b3a0:	f000 0207 	and.w	r2, r0, #7
   1b3a4:	d02e      	beq.n	1b404 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1b3a6:	2a02      	cmp	r2, #2
   1b3a8:	d10e      	bne.n	1b3c8 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1b3aa:	3301      	adds	r3, #1
   1b3ac:	8363      	strh	r3, [r4, #26]
	rv = state;
   1b3ae:	4615      	mov	r5, r2
		notify = true;
   1b3b0:	2301      	movs	r3, #1
	__asm__ volatile(
   1b3b2:	f381 8811 	msr	BASEPRI, r1
   1b3b6:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1b3ba:	b1b3      	cbz	r3, 1b3ea <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1b3bc:	2300      	movs	r3, #0
   1b3be:	4631      	mov	r1, r6
   1b3c0:	4620      	mov	r0, r4
   1b3c2:	f7ff ff93 	bl	1b2ec <notify_one>
   1b3c6:	e010      	b.n	1b3ea <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1b3c8:	0783      	lsls	r3, r0, #30
   1b3ca:	d001      	beq.n	1b3d0 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1b3cc:	2a06      	cmp	r2, #6
   1b3ce:	d10e      	bne.n	1b3ee <onoff_request+0x76>
	parent->next = child;
   1b3d0:	2300      	movs	r3, #0
   1b3d2:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1b3d4:	6863      	ldr	r3, [r4, #4]
   1b3d6:	b993      	cbnz	r3, 1b3fe <onoff_request+0x86>
	list->head = node;
   1b3d8:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1b3dc:	4615      	mov	r5, r2
   1b3de:	b962      	cbnz	r2, 1b3fa <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1b3e0:	460a      	mov	r2, r1
   1b3e2:	4620      	mov	r0, r4
   1b3e4:	2102      	movs	r1, #2
   1b3e6:	f7f7 f8a1 	bl	1252c <process_event>
		}
	}

	return rv;
}
   1b3ea:	4628      	mov	r0, r5
   1b3ec:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1b3ee:	2a05      	cmp	r2, #5
   1b3f0:	bf0c      	ite	eq
   1b3f2:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1b3f6:	f06f 0504 	mvnne.w	r5, #4
   1b3fa:	2300      	movs	r3, #0
   1b3fc:	e7d9      	b.n	1b3b2 <onoff_request+0x3a>
	parent->next = child;
   1b3fe:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1b400:	6066      	str	r6, [r4, #4]
}
   1b402:	e7eb      	b.n	1b3dc <onoff_request+0x64>
		rv = -EAGAIN;
   1b404:	f06f 050a 	mvn.w	r5, #10
   1b408:	e7f7      	b.n	1b3fa <onoff_request+0x82>

0001b40a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1b40a:	4604      	mov	r4, r0
   1b40c:	b508      	push	{r3, lr}
   1b40e:	4608      	mov	r0, r1
   1b410:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1b412:	461a      	mov	r2, r3
   1b414:	47a0      	blx	r4
	return z_impl_k_current_get();
   1b416:	f7ff fb79 	bl	1ab0c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1b41a:	f7f8 fba1 	bl	13b60 <z_impl_k_thread_abort>

0001b41e <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1b41e:	b510      	push	{r4, lr}
   1b420:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1b422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b42a:	4620      	mov	r0, r4
   1b42c:	f7fe fff4 	bl	1a418 <z_impl_k_queue_get>
   1b430:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1b432:	2800      	cmp	r0, #0
   1b434:	d0f5      	beq.n	1b422 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b436:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1b438:	6842      	ldr	r2, [r0, #4]
   1b43a:	f3bf 8f5b 	dmb	ish
   1b43e:	e853 1f00 	ldrex	r1, [r3]
   1b442:	f021 0c01 	bic.w	ip, r1, #1
   1b446:	e843 ce00 	strex	lr, ip, [r3]
   1b44a:	f1be 0f00 	cmp.w	lr, #0
   1b44e:	d1f6      	bne.n	1b43e <z_work_q_main+0x20>
   1b450:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1b454:	07cb      	lsls	r3, r1, #31
   1b456:	d500      	bpl.n	1b45a <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1b458:	4790      	blx	r2
	z_impl_k_yield();
   1b45a:	f7ff fae9 	bl	1aa30 <z_impl_k_yield>
   1b45e:	e7e0      	b.n	1b422 <z_work_q_main+0x4>

0001b460 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1b460:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1b462:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1b466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1b46a:	bf2c      	ite	cs
   1b46c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1b470:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1b474:	4770      	bx	lr

0001b476 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1b476:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1b47a:	6880      	ldr	r0, [r0, #8]
   1b47c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1b480:	bf2c      	ite	cs
   1b482:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1b486:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1b48a:	4770      	bx	lr

0001b48c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1b48c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1b48e:	2201      	movs	r2, #1
   1b490:	f7ff ffe6 	bl	1b460 <chunk_field>
}
   1b494:	0840      	lsrs	r0, r0, #1
   1b496:	bd08      	pop	{r3, pc}

0001b498 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1b498:	6883      	ldr	r3, [r0, #8]
   1b49a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1b49e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1b4a2:	d308      	bcc.n	1b4b6 <set_chunk_used+0x1e>
		if (used) {
   1b4a4:	684b      	ldr	r3, [r1, #4]
   1b4a6:	b11a      	cbz	r2, 1b4b0 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b4a8:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1b4ac:	604b      	str	r3, [r1, #4]
   1b4ae:	4770      	bx	lr
   1b4b0:	f023 0301 	bic.w	r3, r3, #1
   1b4b4:	e7fa      	b.n	1b4ac <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1b4b6:	884b      	ldrh	r3, [r1, #2]
   1b4b8:	b11a      	cbz	r2, 1b4c2 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b4ba:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1b4be:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1b4c0:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1b4c2:	f023 0301 	bic.w	r3, r3, #1
   1b4c6:	e7fa      	b.n	1b4be <set_chunk_used+0x26>

0001b4c8 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b4c8:	0053      	lsls	r3, r2, #1
   1b4ca:	2201      	movs	r2, #1
   1b4cc:	f7ff bfd3 	b.w	1b476 <chunk_set>

0001b4d0 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1b4d0:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1b4d2:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b4d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1b4d8:	bf2c      	ite	cs
   1b4da:	2002      	movcs	r0, #2
   1b4dc:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1b4de:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1b4e0:	fab0 f080 	clz	r0, r0
}
   1b4e4:	f1c0 001f 	rsb	r0, r0, #31
   1b4e8:	4770      	bx	lr

0001b4ea <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1b4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4ee:	4616      	mov	r6, r2
   1b4f0:	4604      	mov	r4, r0
   1b4f2:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1b4f4:	f7ff ffca 	bl	1b48c <chunk_size>
   1b4f8:	4631      	mov	r1, r6
   1b4fa:	4605      	mov	r5, r0
   1b4fc:	4620      	mov	r0, r4
   1b4fe:	f7ff ffc5 	bl	1b48c <chunk_size>
   1b502:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1b504:	462a      	mov	r2, r5
   1b506:	4639      	mov	r1, r7
   1b508:	4620      	mov	r0, r4
   1b50a:	f7ff ffdd 	bl	1b4c8 <set_chunk_size>
	return c + chunk_size(h, c);
   1b50e:	4631      	mov	r1, r6
   1b510:	4620      	mov	r0, r4
   1b512:	f7ff ffbb 	bl	1b48c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1b516:	462b      	mov	r3, r5
   1b518:	1831      	adds	r1, r6, r0
   1b51a:	2200      	movs	r2, #0
   1b51c:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1b51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b522:	f7ff bfa8 	b.w	1b476 <chunk_set>

0001b526 <split_chunks>:
{
   1b526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b52a:	4614      	mov	r4, r2
   1b52c:	4605      	mov	r5, r0
   1b52e:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1b530:	f7ff ffac 	bl	1b48c <chunk_size>
	size_t lsz = rc - lc;
   1b534:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1b538:	1b37      	subs	r7, r6, r4
   1b53a:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1b53c:	4642      	mov	r2, r8
   1b53e:	4631      	mov	r1, r6
   1b540:	4628      	mov	r0, r5
   1b542:	f7ff ffc1 	bl	1b4c8 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1b546:	463a      	mov	r2, r7
   1b548:	4621      	mov	r1, r4
   1b54a:	4628      	mov	r0, r5
   1b54c:	f7ff ffbc 	bl	1b4c8 <set_chunk_size>
   1b550:	4643      	mov	r3, r8
   1b552:	2200      	movs	r2, #0
   1b554:	4621      	mov	r1, r4
   1b556:	4628      	mov	r0, r5
   1b558:	f7ff ff8d 	bl	1b476 <chunk_set>
	return c + chunk_size(h, c);
   1b55c:	4621      	mov	r1, r4
   1b55e:	4628      	mov	r0, r5
   1b560:	f7ff ff94 	bl	1b48c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1b564:	463b      	mov	r3, r7
   1b566:	1821      	adds	r1, r4, r0
   1b568:	2200      	movs	r2, #0
   1b56a:	4628      	mov	r0, r5
}
   1b56c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b570:	f7ff bf81 	b.w	1b476 <chunk_set>

0001b574 <free_list_remove_bidx>:
{
   1b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b578:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1b57a:	2203      	movs	r2, #3
   1b57c:	460e      	mov	r6, r1
   1b57e:	4604      	mov	r4, r0
   1b580:	f7ff ff6e 	bl	1b460 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1b584:	4286      	cmp	r6, r0
   1b586:	4605      	mov	r5, r0
   1b588:	f107 0804 	add.w	r8, r7, #4
   1b58c:	d10b      	bne.n	1b5a6 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1b58e:	2301      	movs	r3, #1
   1b590:	fa03 f707 	lsl.w	r7, r3, r7
   1b594:	68e3      	ldr	r3, [r4, #12]
   1b596:	ea23 0307 	bic.w	r3, r3, r7
   1b59a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1b59c:	2300      	movs	r3, #0
   1b59e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1b5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1b5a6:	4631      	mov	r1, r6
   1b5a8:	2202      	movs	r2, #2
   1b5aa:	4620      	mov	r0, r4
   1b5ac:	f7ff ff58 	bl	1b460 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1b5b0:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1b5b2:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1b5b4:	4601      	mov	r1, r0
		b->next = second;
   1b5b6:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1b5ba:	4620      	mov	r0, r4
   1b5bc:	2203      	movs	r2, #3
   1b5be:	f7ff ff5a 	bl	1b476 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1b5c2:	4633      	mov	r3, r6
   1b5c4:	4629      	mov	r1, r5
   1b5c6:	4620      	mov	r0, r4
   1b5c8:	2202      	movs	r2, #2
}
   1b5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b5ce:	f7ff bf52 	b.w	1b476 <chunk_set>

0001b5d2 <free_list_remove>:
{
   1b5d2:	b538      	push	{r3, r4, r5, lr}
   1b5d4:	4604      	mov	r4, r0
   1b5d6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1b5d8:	f7ff ff58 	bl	1b48c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1b5dc:	68a3      	ldr	r3, [r4, #8]
   1b5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1b5e2:	4601      	mov	r1, r0
   1b5e4:	d301      	bcc.n	1b5ea <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1b5e6:	2801      	cmp	r0, #1
   1b5e8:	d009      	beq.n	1b5fe <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1b5ea:	4620      	mov	r0, r4
   1b5ec:	f7ff ff70 	bl	1b4d0 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1b5f0:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1b5f2:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1b5f4:	4620      	mov	r0, r4
}
   1b5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1b5fa:	f7ff bfbb 	b.w	1b574 <free_list_remove_bidx>
}
   1b5fe:	bd38      	pop	{r3, r4, r5, pc}

0001b600 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1b600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b604:	4604      	mov	r4, r0
   1b606:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1b608:	f7ff ff62 	bl	1b4d0 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1b60c:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1b60e:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1b610:	4620      	mov	r0, r4
   1b612:	f7ff ff5d 	bl	1b4d0 <bucket_idx>
   1b616:	42a8      	cmp	r0, r5
   1b618:	da03      	bge.n	1b622 <alloc_chunk+0x22>
		return 0;
   1b61a:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1b61c:	4630      	mov	r0, r6
   1b61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1b622:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1b626:	f8da 9010 	ldr.w	r9, [sl, #16]
   1b62a:	f1b9 0f00 	cmp.w	r9, #0
   1b62e:	d019      	beq.n	1b664 <alloc_chunk+0x64>
   1b630:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1b632:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1b636:	4620      	mov	r0, r4
   1b638:	4631      	mov	r1, r6
   1b63a:	f7ff ff27 	bl	1b48c <chunk_size>
   1b63e:	4540      	cmp	r0, r8
   1b640:	d305      	bcc.n	1b64e <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   1b642:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1b644:	4631      	mov	r1, r6
   1b646:	4620      	mov	r0, r4
   1b648:	f7ff ff94 	bl	1b574 <free_list_remove_bidx>
		return c;
   1b64c:	e7e6      	b.n	1b61c <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1b64e:	2203      	movs	r2, #3
   1b650:	4631      	mov	r1, r6
   1b652:	4620      	mov	r0, r4
   1b654:	f7ff ff04 	bl	1b460 <chunk_field>
		} while (--i && b->next != first);
   1b658:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1b65a:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1b65e:	d001      	beq.n	1b664 <alloc_chunk+0x64>
   1b660:	4581      	cmp	r9, r0
   1b662:	d1e6      	bne.n	1b632 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1b664:	68e3      	ldr	r3, [r4, #12]
   1b666:	3501      	adds	r5, #1
   1b668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b66c:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1b66e:	401a      	ands	r2, r3
   1b670:	d0d3      	beq.n	1b61a <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1b672:	fa92 f2a2 	rbit	r2, r2
   1b676:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1b67a:	1d13      	adds	r3, r2, #4
   1b67c:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1b680:	e7e0      	b.n	1b644 <alloc_chunk+0x44>

0001b682 <free_list_add>:
{
   1b682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b686:	4604      	mov	r4, r0
   1b688:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1b68a:	f7ff feff 	bl	1b48c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1b68e:	68a3      	ldr	r3, [r4, #8]
   1b690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1b694:	4601      	mov	r1, r0
   1b696:	d301      	bcc.n	1b69c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1b698:	2801      	cmp	r0, #1
   1b69a:	d035      	beq.n	1b708 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1b69c:	4620      	mov	r0, r4
   1b69e:	f7ff ff17 	bl	1b4d0 <bucket_idx>
	if (b->next == 0U) {
   1b6a2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1b6a6:	6916      	ldr	r6, [r2, #16]
   1b6a8:	b99e      	cbnz	r6, 1b6d2 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1b6aa:	2301      	movs	r3, #1
   1b6ac:	fa03 f000 	lsl.w	r0, r3, r0
   1b6b0:	68e3      	ldr	r3, [r4, #12]
   1b6b2:	4303      	orrs	r3, r0
   1b6b4:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1b6b6:	4629      	mov	r1, r5
		b->next = c;
   1b6b8:	6115      	str	r5, [r2, #16]
   1b6ba:	462b      	mov	r3, r5
   1b6bc:	2202      	movs	r2, #2
   1b6be:	4620      	mov	r0, r4
   1b6c0:	f7ff fed9 	bl	1b476 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1b6c4:	2203      	movs	r2, #3
   1b6c6:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1b6c8:	4620      	mov	r0, r4
}
   1b6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b6ce:	f7ff bed2 	b.w	1b476 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1b6d2:	2202      	movs	r2, #2
   1b6d4:	4631      	mov	r1, r6
   1b6d6:	4620      	mov	r0, r4
   1b6d8:	f7ff fec2 	bl	1b460 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1b6dc:	2202      	movs	r2, #2
   1b6de:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1b6e0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1b6e2:	4629      	mov	r1, r5
   1b6e4:	4620      	mov	r0, r4
   1b6e6:	f7ff fec6 	bl	1b476 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1b6ea:	4633      	mov	r3, r6
   1b6ec:	2203      	movs	r2, #3
   1b6ee:	4629      	mov	r1, r5
   1b6f0:	4620      	mov	r0, r4
   1b6f2:	f7ff fec0 	bl	1b476 <chunk_set>
   1b6f6:	2203      	movs	r2, #3
   1b6f8:	4639      	mov	r1, r7
   1b6fa:	462b      	mov	r3, r5
   1b6fc:	4620      	mov	r0, r4
   1b6fe:	f7ff feba 	bl	1b476 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1b702:	2202      	movs	r2, #2
   1b704:	4631      	mov	r1, r6
   1b706:	e7df      	b.n	1b6c8 <free_list_add+0x46>
   1b708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b70c <sys_heap_free>:
{
   1b70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1b70e:	2900      	cmp	r1, #0
   1b710:	d04e      	beq.n	1b7b0 <sys_heap_free+0xa4>
	struct z_heap *h = heap->heap;
   1b712:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1b714:	68ab      	ldr	r3, [r5, #8]
   1b716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1b71a:	bf2c      	ite	cs
   1b71c:	2408      	movcs	r4, #8
   1b71e:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1b720:	1b0c      	subs	r4, r1, r4
   1b722:	1b64      	subs	r4, r4, r5
   1b724:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1b726:	2200      	movs	r2, #0
   1b728:	4621      	mov	r1, r4
   1b72a:	4628      	mov	r0, r5
   1b72c:	f7ff feb4 	bl	1b498 <set_chunk_used>
	return c + chunk_size(h, c);
   1b730:	4621      	mov	r1, r4
   1b732:	f7ff feab 	bl	1b48c <chunk_size>
   1b736:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1b738:	2201      	movs	r2, #1
   1b73a:	4631      	mov	r1, r6
   1b73c:	4628      	mov	r0, r5
   1b73e:	f7ff fe8f 	bl	1b460 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1b742:	07c3      	lsls	r3, r0, #31
   1b744:	d40c      	bmi.n	1b760 <sys_heap_free+0x54>
		free_list_remove(h, right_chunk(h, c));
   1b746:	4631      	mov	r1, r6
   1b748:	4628      	mov	r0, r5
   1b74a:	f7ff ff42 	bl	1b5d2 <free_list_remove>
	return c + chunk_size(h, c);
   1b74e:	4621      	mov	r1, r4
   1b750:	4628      	mov	r0, r5
   1b752:	f7ff fe9b 	bl	1b48c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1b756:	4621      	mov	r1, r4
   1b758:	1822      	adds	r2, r4, r0
   1b75a:	4628      	mov	r0, r5
   1b75c:	f7ff fec5 	bl	1b4ea <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1b760:	2200      	movs	r2, #0
   1b762:	4621      	mov	r1, r4
   1b764:	4628      	mov	r0, r5
   1b766:	f7ff fe7b 	bl	1b460 <chunk_field>
   1b76a:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1b76c:	2201      	movs	r2, #1
   1b76e:	4639      	mov	r1, r7
   1b770:	4628      	mov	r0, r5
   1b772:	f7ff fe75 	bl	1b460 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1b776:	f010 0601 	ands.w	r6, r0, #1
   1b77a:	d113      	bne.n	1b7a4 <sys_heap_free+0x98>
		free_list_remove(h, left_chunk(h, c));
   1b77c:	4639      	mov	r1, r7
   1b77e:	4628      	mov	r0, r5
   1b780:	f7ff ff27 	bl	1b5d2 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1b784:	4621      	mov	r1, r4
   1b786:	4632      	mov	r2, r6
   1b788:	4628      	mov	r0, r5
   1b78a:	f7ff fe69 	bl	1b460 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1b78e:	4622      	mov	r2, r4
   1b790:	1a21      	subs	r1, r4, r0
   1b792:	4628      	mov	r0, r5
   1b794:	f7ff fea9 	bl	1b4ea <merge_chunks>
   1b798:	4621      	mov	r1, r4
   1b79a:	4632      	mov	r2, r6
   1b79c:	4628      	mov	r0, r5
   1b79e:	f7ff fe5f 	bl	1b460 <chunk_field>
   1b7a2:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1b7a4:	4621      	mov	r1, r4
   1b7a6:	4628      	mov	r0, r5
}
   1b7a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1b7ac:	f7ff bf69 	b.w	1b682 <free_list_add>
}
   1b7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b7b2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1b7b2:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   1b7b4:	b909      	cbnz	r1, 1b7ba <sys_heap_alloc+0x8>
		return NULL;
   1b7b6:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1b7b8:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   1b7ba:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1b7bc:	68ab      	ldr	r3, [r5, #8]
   1b7be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1b7c2:	bf2c      	ite	cs
   1b7c4:	2208      	movcs	r2, #8
   1b7c6:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b7c8:	1dcc      	adds	r4, r1, #7
   1b7ca:	4414      	add	r4, r2
   1b7cc:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1b7ce:	4621      	mov	r1, r4
   1b7d0:	4628      	mov	r0, r5
   1b7d2:	f7ff ff15 	bl	1b600 <alloc_chunk>
	if (c == 0U) {
   1b7d6:	4606      	mov	r6, r0
   1b7d8:	2800      	cmp	r0, #0
   1b7da:	d0ec      	beq.n	1b7b6 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   1b7dc:	4601      	mov	r1, r0
   1b7de:	4628      	mov	r0, r5
   1b7e0:	f7ff fe54 	bl	1b48c <chunk_size>
   1b7e4:	42a0      	cmp	r0, r4
   1b7e6:	d909      	bls.n	1b7fc <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   1b7e8:	4434      	add	r4, r6
   1b7ea:	4631      	mov	r1, r6
   1b7ec:	4628      	mov	r0, r5
   1b7ee:	4622      	mov	r2, r4
   1b7f0:	f7ff fe99 	bl	1b526 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1b7f4:	4621      	mov	r1, r4
   1b7f6:	4628      	mov	r0, r5
   1b7f8:	f7ff ff43 	bl	1b682 <free_list_add>
	set_chunk_used(h, c, true);
   1b7fc:	4628      	mov	r0, r5
   1b7fe:	2201      	movs	r2, #1
   1b800:	4631      	mov	r1, r6
   1b802:	f7ff fe49 	bl	1b498 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1b806:	68ab      	ldr	r3, [r5, #8]
   1b808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1b80c:	bf2c      	ite	cs
   1b80e:	2008      	movcs	r0, #8
   1b810:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1b812:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1b816:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1b818:	e7ce      	b.n	1b7b8 <sys_heap_alloc+0x6>

0001b81a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1b81a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1b81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b820:	bf2c      	ite	cs
   1b822:	2508      	movcs	r5, #8
   1b824:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1b826:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1b828:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1b82a:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1b82c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1b830:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1b834:	2200      	movs	r2, #0
   1b836:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1b838:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1b83a:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1b83c:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1b83e:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1b842:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1b844:	4629      	mov	r1, r5
	h->len = buf_sz;
   1b846:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1b848:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1b84a:	4620      	mov	r0, r4
   1b84c:	f7ff fe40 	bl	1b4d0 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1b850:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b852:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1b854:	1c41      	adds	r1, r0, #1
   1b856:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1b858:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1b85c:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1b85e:	428b      	cmp	r3, r1
   1b860:	db29      	blt.n	1b8b6 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1b862:	4632      	mov	r2, r6
   1b864:	4620      	mov	r0, r4
   1b866:	2100      	movs	r1, #0
   1b868:	f7ff fe2e 	bl	1b4c8 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1b86c:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1b86e:	4620      	mov	r0, r4
   1b870:	2201      	movs	r2, #1
   1b872:	2100      	movs	r1, #0
   1b874:	f7ff fe10 	bl	1b498 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1b878:	463a      	mov	r2, r7
   1b87a:	4631      	mov	r1, r6
   1b87c:	f7ff fe24 	bl	1b4c8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1b880:	4633      	mov	r3, r6
   1b882:	4631      	mov	r1, r6
   1b884:	4620      	mov	r0, r4
   1b886:	2200      	movs	r2, #0
   1b888:	f7ff fdf5 	bl	1b476 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1b88c:	4629      	mov	r1, r5
   1b88e:	4620      	mov	r0, r4
   1b890:	2200      	movs	r2, #0
   1b892:	f7ff fe19 	bl	1b4c8 <set_chunk_size>
   1b896:	463b      	mov	r3, r7
   1b898:	4629      	mov	r1, r5
   1b89a:	4620      	mov	r0, r4
   1b89c:	2200      	movs	r2, #0
   1b89e:	f7ff fdea 	bl	1b476 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1b8a2:	4629      	mov	r1, r5
   1b8a4:	4620      	mov	r0, r4
   1b8a6:	2201      	movs	r2, #1
   1b8a8:	f7ff fdf6 	bl	1b498 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1b8ac:	4631      	mov	r1, r6
}
   1b8ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1b8b2:	f7ff bee6 	b.w	1b682 <free_list_add>
		h->buckets[i].next = 0;
   1b8b6:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1b8ba:	3301      	adds	r3, #1
   1b8bc:	e7cf      	b.n	1b85e <sys_heap_init+0x44>

0001b8be <encode_uint>:
{
   1b8be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8c2:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1b8c4:	78d3      	ldrb	r3, [r2, #3]
{
   1b8c6:	4614      	mov	r4, r2
	switch (specifier) {
   1b8c8:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1b8ca:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1b8ce:	4606      	mov	r6, r0
   1b8d0:	460f      	mov	r7, r1
   1b8d2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1b8d4:	d02d      	beq.n	1b932 <encode_uint+0x74>
   1b8d6:	d828      	bhi.n	1b92a <encode_uint+0x6c>
		return 16;
   1b8d8:	2b58      	cmp	r3, #88	; 0x58
   1b8da:	bf14      	ite	ne
   1b8dc:	250a      	movne	r5, #10
   1b8de:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1b8e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1b8e4:	46aa      	mov	sl, r5
   1b8e6:	f04f 0b00 	mov.w	fp, #0
   1b8ea:	4652      	mov	r2, sl
   1b8ec:	465b      	mov	r3, fp
   1b8ee:	4630      	mov	r0, r6
   1b8f0:	4639      	mov	r1, r7
   1b8f2:	f7e4 fbf5 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b8f6:	2a09      	cmp	r2, #9
   1b8f8:	b2d3      	uxtb	r3, r2
   1b8fa:	d81f      	bhi.n	1b93c <encode_uint+0x7e>
   1b8fc:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1b8fe:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b900:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1b902:	bf08      	it	eq
   1b904:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b906:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1b90a:	d301      	bcc.n	1b910 <encode_uint+0x52>
   1b90c:	45c8      	cmp	r8, r9
   1b90e:	d812      	bhi.n	1b936 <encode_uint+0x78>
	if (conv->flag_hash) {
   1b910:	7823      	ldrb	r3, [r4, #0]
   1b912:	069b      	lsls	r3, r3, #26
   1b914:	d505      	bpl.n	1b922 <encode_uint+0x64>
		if (radix == 8) {
   1b916:	2d08      	cmp	r5, #8
   1b918:	d116      	bne.n	1b948 <encode_uint+0x8a>
			conv->altform_0 = true;
   1b91a:	78a3      	ldrb	r3, [r4, #2]
   1b91c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1b920:	70a3      	strb	r3, [r4, #2]
}
   1b922:	4640      	mov	r0, r8
   1b924:	b003      	add	sp, #12
   1b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1b92a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1b92e:	2b70      	cmp	r3, #112	; 0x70
   1b930:	e7d3      	b.n	1b8da <encode_uint+0x1c>
	switch (specifier) {
   1b932:	2508      	movs	r5, #8
   1b934:	e7d4      	b.n	1b8e0 <encode_uint+0x22>
		value /= radix;
   1b936:	4606      	mov	r6, r0
   1b938:	460f      	mov	r7, r1
   1b93a:	e7d6      	b.n	1b8ea <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b93c:	9a01      	ldr	r2, [sp, #4]
   1b93e:	2a19      	cmp	r2, #25
   1b940:	bf94      	ite	ls
   1b942:	3337      	addls	r3, #55	; 0x37
   1b944:	3357      	addhi	r3, #87	; 0x57
   1b946:	e7da      	b.n	1b8fe <encode_uint+0x40>
		} else if (radix == 16) {
   1b948:	2d10      	cmp	r5, #16
   1b94a:	d1ea      	bne.n	1b922 <encode_uint+0x64>
			conv->altform_0c = true;
   1b94c:	78a3      	ldrb	r3, [r4, #2]
   1b94e:	f043 0310 	orr.w	r3, r3, #16
   1b952:	e7e5      	b.n	1b920 <encode_uint+0x62>

0001b954 <outs>:
{
   1b954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b958:	4607      	mov	r7, r0
   1b95a:	4688      	mov	r8, r1
   1b95c:	4615      	mov	r5, r2
   1b95e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1b960:	4614      	mov	r4, r2
   1b962:	42b4      	cmp	r4, r6
   1b964:	eba4 0005 	sub.w	r0, r4, r5
   1b968:	d302      	bcc.n	1b970 <outs+0x1c>
   1b96a:	b93e      	cbnz	r6, 1b97c <outs+0x28>
   1b96c:	7823      	ldrb	r3, [r4, #0]
   1b96e:	b12b      	cbz	r3, 1b97c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1b970:	f814 0b01 	ldrb.w	r0, [r4], #1
   1b974:	4641      	mov	r1, r8
   1b976:	47b8      	blx	r7
		if (rc < 0) {
   1b978:	2800      	cmp	r0, #0
   1b97a:	daf2      	bge.n	1b962 <outs+0xe>
}
   1b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b980 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1b980:	4770      	bx	lr

0001b982 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1b982:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1b986:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1b98a:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1b98c:	4640      	mov	r0, r8
{
   1b98e:	461f      	mov	r7, r3
   1b990:	460c      	mov	r4, r1
   1b992:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1b994:	f001 f98e 	bl	1ccb4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1b998:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b99c:	9300      	str	r3, [sp, #0]
   1b99e:	b280      	uxth	r0, r0
   1b9a0:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1b9a4:	463b      	mov	r3, r7
   1b9a6:	4632      	mov	r2, r6
   1b9a8:	4621      	mov	r1, r4
   1b9aa:	4628      	mov	r0, r5
   1b9ac:	f003 f86a 	bl	1ea84 <bt_gatt_attr_read>
}
   1b9b0:	b004      	add	sp, #16
   1b9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b9b6 <blvl_ccc_cfg_changed>:
}
   1b9b6:	4770      	bx	lr

0001b9b8 <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   1b9b8:	2000      	movs	r0, #0
   1b9ba:	4770      	bx	lr

0001b9bc <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1b9bc:	68c2      	ldr	r2, [r0, #12]
   1b9be:	b2cb      	uxtb	r3, r1
   1b9c0:	210c      	movs	r1, #12
   1b9c2:	fb03 2101 	mla	r1, r3, r1, r2
   1b9c6:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1b9c8:	f000 0007 	and.w	r0, r0, #7
   1b9cc:	4770      	bx	lr

0001b9ce <set_off_state>:
	__asm__ volatile(
   1b9ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9d2:	f3ef 8211 	mrs	r2, BASEPRI
   1b9d6:	f383 8811 	msr	BASEPRI, r3
   1b9da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b9de:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1b9e0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1b9e4:	d001      	beq.n	1b9ea <set_off_state+0x1c>
   1b9e6:	428b      	cmp	r3, r1
   1b9e8:	d107      	bne.n	1b9fa <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1b9ea:	2301      	movs	r3, #1
   1b9ec:	6003      	str	r3, [r0, #0]
	int err = 0;
   1b9ee:	2000      	movs	r0, #0
	__asm__ volatile(
   1b9f0:	f382 8811 	msr	BASEPRI, r2
   1b9f4:	f3bf 8f6f 	isb	sy
}
   1b9f8:	4770      	bx	lr
		err = -EPERM;
   1b9fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b9fe:	e7f7      	b.n	1b9f0 <set_off_state+0x22>

0001ba00 <set_starting_state>:
{
   1ba00:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ba02:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba06:	f3ef 8211 	mrs	r2, BASEPRI
   1ba0a:	f383 8811 	msr	BASEPRI, r3
   1ba0e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ba12:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1ba14:	f003 0407 	and.w	r4, r3, #7
   1ba18:	2c01      	cmp	r4, #1
   1ba1a:	d106      	bne.n	1ba2a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1ba1c:	6001      	str	r1, [r0, #0]
	int err = 0;
   1ba1e:	2000      	movs	r0, #0
	__asm__ volatile(
   1ba20:	f382 8811 	msr	BASEPRI, r2
   1ba24:	f3bf 8f6f 	isb	sy
}
   1ba28:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1ba2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1ba2e:	428b      	cmp	r3, r1
		err = -EALREADY;
   1ba30:	bf14      	ite	ne
   1ba32:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1ba36:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   1ba3a:	e7f1      	b.n	1ba20 <set_starting_state+0x20>

0001ba3c <set_on_state>:
	__asm__ volatile(
   1ba3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba40:	f3ef 8211 	mrs	r2, BASEPRI
   1ba44:	f383 8811 	msr	BASEPRI, r3
   1ba48:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1ba4c:	6803      	ldr	r3, [r0, #0]
   1ba4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ba52:	f043 0302 	orr.w	r3, r3, #2
   1ba56:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1ba58:	f382 8811 	msr	BASEPRI, r2
   1ba5c:	f3bf 8f6f 	isb	sy
}
   1ba60:	4770      	bx	lr

0001ba62 <onoff_started_callback>:
	return &data->mgr[type];
   1ba62:	68c0      	ldr	r0, [r0, #12]
{
   1ba64:	b410      	push	{r4}
	return &data->mgr[type];
   1ba66:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1ba68:	241c      	movs	r4, #28
   1ba6a:	fb03 0004 	mla	r0, r3, r4, r0
   1ba6e:	2100      	movs	r1, #0
}
   1ba70:	bc10      	pop	{r4}
	notify(mgr, 0);
   1ba72:	4710      	bx	r2

0001ba74 <blocking_start_callback>:
{
   1ba74:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1ba76:	f7ff b84f 	b.w	1ab18 <z_impl_k_sem_give>

0001ba7a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1ba7a:	2000      	movs	r0, #0
   1ba7c:	f003 bfd2 	b.w	1fa24 <nrfx_clock_stop>

0001ba80 <api_stop>:
{
   1ba80:	b538      	push	{r3, r4, r5, lr}
   1ba82:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   1ba84:	230c      	movs	r3, #12
{
   1ba86:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1ba88:	4363      	muls	r3, r4
   1ba8a:	68c0      	ldr	r0, [r0, #12]
   1ba8c:	3340      	adds	r3, #64	; 0x40
   1ba8e:	2180      	movs	r1, #128	; 0x80
   1ba90:	4418      	add	r0, r3
   1ba92:	f7ff ff9c 	bl	1b9ce <set_off_state>
	if (err < 0) {
   1ba96:	2800      	cmp	r0, #0
   1ba98:	db05      	blt.n	1baa6 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1ba9a:	6869      	ldr	r1, [r5, #4]
   1ba9c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   1baa0:	6863      	ldr	r3, [r4, #4]
   1baa2:	4798      	blx	r3
	return 0;
   1baa4:	2000      	movs	r0, #0
}
   1baa6:	bd38      	pop	{r3, r4, r5, pc}

0001baa8 <api_start>:
{
   1baa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1baac:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   1baae:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1bab0:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   1bab2:	436f      	muls	r7, r5
{
   1bab4:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1bab6:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1baba:	2180      	movs	r1, #128	; 0x80
   1babc:	4420      	add	r0, r4
{
   1babe:	4690      	mov	r8, r2
   1bac0:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   1bac2:	f7ff ff9d 	bl	1ba00 <set_starting_state>
	if (err < 0) {
   1bac6:	2800      	cmp	r0, #0
   1bac8:	db07      	blt.n	1bada <api_start+0x32>
	subdata->cb = cb;
   1baca:	443c      	add	r4, r7
	subdata->user_data = user_data;
   1bacc:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1bad0:	6873      	ldr	r3, [r6, #4]
   1bad2:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1bad6:	4798      	blx	r3
	return 0;
   1bad8:	2000      	movs	r0, #0
}
   1bada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001bade <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1bade:	4770      	bx	lr

0001bae0 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1bae0:	4770      	bx	lr

0001bae2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1bae2:	f7f7 bc1d 	b.w	13320 <_DoInit>

0001bae6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1bae6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1bae8:	f7ff fffb 	bl	1bae2 <SEGGER_RTT_Init>

	return 0;
}
   1baec:	2000      	movs	r0, #0
   1baee:	bd08      	pop	{r3, pc}

0001baf0 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1baf0:	b538      	push	{r3, r4, r5, lr}
   1baf2:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1baf4:	42ab      	cmp	r3, r5
{
   1baf6:	4611      	mov	r1, r2
   1baf8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1bafa:	d804      	bhi.n	1bb06 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1bafc:	461a      	mov	r2, r3
   1bafe:	f001 f8fc 	bl	1ccfa <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1bb02:	4620      	mov	r0, r4
   1bb04:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1bb06:	2400      	movs	r4, #0
   1bb08:	e7fb      	b.n	1bb02 <_copy+0x12>

0001bb0a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1bb0a:	f001 b921 	b.w	1cd50 <memset>

0001bb0e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1bb0e:	09c3      	lsrs	r3, r0, #7
   1bb10:	005a      	lsls	r2, r3, #1
   1bb12:	4413      	add	r3, r2
   1bb14:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1bb18:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1bb1c:	b2c0      	uxtb	r0, r0
   1bb1e:	4770      	bx	lr

0001bb20 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1bb20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bb24:	4606      	mov	r6, r0
   1bb26:	b0a9      	sub	sp, #164	; 0xa4
   1bb28:	4688      	mov	r8, r1
   1bb2a:	4614      	mov	r4, r2
   1bb2c:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1bb2e:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1bb32:	f7f7 fc25 	bl	13380 <uECC_get_rng>
		if (!rng_function ||
   1bb36:	4603      	mov	r3, r0
   1bb38:	2800      	cmp	r0, #0
   1bb3a:	d03e      	beq.n	1bbba <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1bb3c:	2140      	movs	r1, #64	; 0x40
   1bb3e:	a808      	add	r0, sp, #32
   1bb40:	4798      	blx	r3
		if (!rng_function ||
   1bb42:	b3d0      	cbz	r0, 1bbba <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1bb44:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1bb48:	f112 031f 	adds.w	r3, r2, #31
   1bb4c:	bf48      	it	mi
   1bb4e:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1bb52:	466d      	mov	r5, sp
   1bb54:	464a      	mov	r2, r9
   1bb56:	a908      	add	r1, sp, #32
   1bb58:	4628      	mov	r0, r5
   1bb5a:	f343 1347 	sbfx	r3, r3, #5, #8
   1bb5e:	f000 fa03 	bl	1bf68 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1bb62:	4622      	mov	r2, r4
   1bb64:	4629      	mov	r1, r5
   1bb66:	a818      	add	r0, sp, #96	; 0x60
   1bb68:	f000 fe19 	bl	1c79e <EccPoint_compute_public_key>
   1bb6c:	b318      	cbz	r0, 1bbb6 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1bb6e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1bb72:	1dd9      	adds	r1, r3, #7
   1bb74:	bf48      	it	mi
   1bb76:	f103 010e 	addmi.w	r1, r3, #14
   1bb7a:	462a      	mov	r2, r5
   1bb7c:	4640      	mov	r0, r8
   1bb7e:	10c9      	asrs	r1, r1, #3
   1bb80:	f000 fe35 	bl	1c7ee <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1bb84:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1bb88:	aa18      	add	r2, sp, #96	; 0x60
   1bb8a:	4630      	mov	r0, r6
   1bb8c:	f000 fe2f 	bl	1c7ee <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1bb90:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1bb94:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1bb98:	ab18      	add	r3, sp, #96	; 0x60
   1bb9a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1bb9e:	1870      	adds	r0, r6, r1
   1bba0:	f000 fe25 	bl	1c7ee <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1bba4:	2220      	movs	r2, #32
   1bba6:	2100      	movs	r1, #0
   1bba8:	4628      	mov	r0, r5
   1bbaa:	f001 f8d1 	bl	1cd50 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1bbae:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1bbb0:	b029      	add	sp, #164	; 0xa4
   1bbb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1bbb6:	3f01      	subs	r7, #1
   1bbb8:	d1bb      	bne.n	1bb32 <uECC_make_key+0x12>
        		return 0;
   1bbba:	2000      	movs	r0, #0
   1bbbc:	e7f8      	b.n	1bbb0 <uECC_make_key+0x90>

0001bbbe <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1bbbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bbc2:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1bbc4:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1bbc8:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1bbcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1bbd0:	b0a4      	sub	sp, #144	; 0x90
   1bbd2:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1bbd4:	1dda      	adds	r2, r3, #7
   1bbd6:	bf48      	it	mi
   1bbd8:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1bbdc:	ad04      	add	r5, sp, #16
{
   1bbde:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1bbe0:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1bbe2:	4628      	mov	r0, r5
   1bbe4:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1bbe6:	9502      	str	r5, [sp, #8]
   1bbe8:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1bbea:	f000 fe14 	bl	1c816 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1bbee:	463a      	mov	r2, r7
   1bbf0:	4649      	mov	r1, r9
   1bbf2:	a814      	add	r0, sp, #80	; 0x50
   1bbf4:	f000 fe0f 	bl	1c816 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1bbf8:	ab14      	add	r3, sp, #80	; 0x50
   1bbfa:	eb09 0107 	add.w	r1, r9, r7
   1bbfe:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1bc02:	463a      	mov	r2, r7
   1bc04:	f000 fe07 	bl	1c816 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1bc08:	4623      	mov	r3, r4
   1bc0a:	4632      	mov	r2, r6
   1bc0c:	4629      	mov	r1, r5
   1bc0e:	4628      	mov	r0, r5
   1bc10:	f000 fd99 	bl	1c746 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1bc14:	fab0 f080 	clz	r0, r0
   1bc18:	9401      	str	r4, [sp, #4]
   1bc1a:	ab24      	add	r3, sp, #144	; 0x90
   1bc1c:	0940      	lsrs	r0, r0, #5
   1bc1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1bc22:	8863      	ldrh	r3, [r4, #2]
   1bc24:	3301      	adds	r3, #1
   1bc26:	b21b      	sxth	r3, r3
   1bc28:	9300      	str	r3, [sp, #0]
   1bc2a:	a914      	add	r1, sp, #80	; 0x50
   1bc2c:	2300      	movs	r3, #0
   1bc2e:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1bc32:	4608      	mov	r0, r1
   1bc34:	f000 fcb8 	bl	1c5a8 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1bc38:	aa14      	add	r2, sp, #80	; 0x50
   1bc3a:	4639      	mov	r1, r7
   1bc3c:	4640      	mov	r0, r8
   1bc3e:	f000 fdd6 	bl	1c7ee <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1bc42:	4621      	mov	r1, r4
   1bc44:	a814      	add	r0, sp, #80	; 0x50
   1bc46:	f000 fc24 	bl	1c492 <EccPoint_isZero>
   1bc4a:	af02      	add	r7, sp, #8
   1bc4c:	4604      	mov	r4, r0
   1bc4e:	2208      	movs	r2, #8
   1bc50:	2100      	movs	r1, #0
   1bc52:	4638      	mov	r0, r7
   1bc54:	f001 f87c 	bl	1cd50 <memset>
   1bc58:	2220      	movs	r2, #32
   1bc5a:	2100      	movs	r1, #0
   1bc5c:	4630      	mov	r0, r6
   1bc5e:	f001 f877 	bl	1cd50 <memset>
   1bc62:	2220      	movs	r2, #32
   1bc64:	2100      	movs	r1, #0
   1bc66:	4628      	mov	r0, r5
   1bc68:	f001 f872 	bl	1cd50 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1bc6c:	fab4 f084 	clz	r0, r4
   1bc70:	0940      	lsrs	r0, r0, #5
   1bc72:	b024      	add	sp, #144	; 0x90
   1bc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001bc78 <uECC_vli_add>:
{
   1bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1bc7a:	2400      	movs	r4, #0
{
   1bc7c:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1bc7e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1bc80:	b265      	sxtb	r5, r4
   1bc82:	42ab      	cmp	r3, r5
   1bc84:	dc00      	bgt.n	1bc88 <uECC_vli_add+0x10>
}
   1bc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1bc88:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1bc8c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1bc90:	443d      	add	r5, r7
   1bc92:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1bc94:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1bc96:	bf8c      	ite	hi
   1bc98:	2701      	movhi	r7, #1
   1bc9a:	2700      	movls	r7, #0
		result[i] = sum;
   1bc9c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1bca0:	bf18      	it	ne
   1bca2:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1bca4:	3401      	adds	r4, #1
   1bca6:	e7eb      	b.n	1bc80 <uECC_vli_add+0x8>

0001bca8 <uECC_vli_rshift1>:
	vli += num_words;
   1bca8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1bcac:	2300      	movs	r3, #0
	while (vli-- > end) {
   1bcae:	4288      	cmp	r0, r1
   1bcb0:	d300      	bcc.n	1bcb4 <uECC_vli_rshift1+0xc>
}
   1bcb2:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1bcb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1bcb8:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1bcbc:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1bcbe:	07d3      	lsls	r3, r2, #31
   1bcc0:	e7f5      	b.n	1bcae <uECC_vli_rshift1+0x6>

0001bcc2 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1bcc2:	6803      	ldr	r3, [r0, #0]
{
   1bcc4:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1bcc6:	f013 0601 	ands.w	r6, r3, #1
{
   1bcca:	4605      	mov	r5, r0
   1bccc:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1bcce:	d005      	beq.n	1bcdc <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1bcd0:	4613      	mov	r3, r2
   1bcd2:	460a      	mov	r2, r1
   1bcd4:	4601      	mov	r1, r0
   1bcd6:	f7ff ffcf 	bl	1bc78 <uECC_vli_add>
   1bcda:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1bcdc:	4621      	mov	r1, r4
   1bcde:	4628      	mov	r0, r5
   1bce0:	f7ff ffe2 	bl	1bca8 <uECC_vli_rshift1>
	if (carry) {
   1bce4:	b146      	cbz	r6, 1bcf8 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1bce6:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1bcea:	3a01      	subs	r2, #1
   1bcec:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1bcf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1bcf4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1bcf8:	bd70      	pop	{r4, r5, r6, pc}

0001bcfa <uECC_vli_mult>:
{
   1bcfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1bcfe:	2500      	movs	r5, #0
{
   1bd00:	b087      	sub	sp, #28
   1bd02:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1bd06:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1bd08:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1bd0a:	fa4f f885 	sxtb.w	r8, r5
   1bd0e:	4543      	cmp	r3, r8
   1bd10:	dc16      	bgt.n	1bd40 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1bd12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1bd16:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1bd1a:	9502      	str	r5, [sp, #8]
   1bd1c:	f04f 0a00 	mov.w	sl, #0
   1bd20:	9e02      	ldr	r6, [sp, #8]
   1bd22:	fa53 fe8a 	uxtab	lr, r3, sl
   1bd26:	fa4f fe8e 	sxtb.w	lr, lr
   1bd2a:	45b6      	cmp	lr, r6
   1bd2c:	fa5f f58a 	uxtb.w	r5, sl
   1bd30:	db2d      	blt.n	1bd8e <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1bd32:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1bd36:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1bd3a:	b007      	add	sp, #28
   1bd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd40:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1bd42:	f04f 0c00 	mov.w	ip, #0
   1bd46:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1bd4a:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1bd4c:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1bd50:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1bd52:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1bd56:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1bd5a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1bd5e:	fba7 ab06 	umull	sl, fp, r7, r6
   1bd62:	eb1a 0601 	adds.w	r6, sl, r1
   1bd66:	f10c 0c01 	add.w	ip, ip, #1
   1bd6a:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1bd6e:	fa4f fa8c 	sxtb.w	sl, ip
   1bd72:	bf2c      	ite	cs
   1bd74:	2201      	movcs	r2, #1
   1bd76:	2200      	movcc	r2, #0
   1bd78:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1bd7a:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1bd7c:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1bd7e:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1bd80:	dde4      	ble.n	1bd4c <uECC_vli_mult+0x52>
		result[k] = r0;
   1bd82:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1bd86:	463a      	mov	r2, r7
   1bd88:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1bd8a:	4674      	mov	r4, lr
   1bd8c:	e7bd      	b.n	1bd0a <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1bd8e:	3501      	adds	r5, #1
   1bd90:	9900      	ldr	r1, [sp, #0]
   1bd92:	9e01      	ldr	r6, [sp, #4]
   1bd94:	fa4f fc85 	sxtb.w	ip, r5
   1bd98:	ebae 0b0c 	sub.w	fp, lr, ip
   1bd9c:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1bda0:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1bda4:	4621      	mov	r1, r4
   1bda6:	2400      	movs	r4, #0
   1bda8:	459c      	cmp	ip, r3
   1bdaa:	db05      	blt.n	1bdb8 <uECC_vli_mult+0xbe>
		result[k] = r0;
   1bdac:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1bdb0:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1bdb4:	460a      	mov	r2, r1
   1bdb6:	e7b3      	b.n	1bd20 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1bdb8:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1bdbc:	f855 7b04 	ldr.w	r7, [r5], #4
   1bdc0:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1bdc4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1bdc8:	fba7 6706 	umull	r6, r7, r7, r6
   1bdcc:	eb16 0801 	adds.w	r8, r6, r1
   1bdd0:	eb57 0902 	adcs.w	r9, r7, r2
   1bdd4:	bf2c      	ite	cs
   1bdd6:	2201      	movcs	r2, #1
   1bdd8:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1bdda:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1bdde:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1bde0:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1bde2:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1bde4:	fa4f fc8c 	sxtb.w	ip, ip
   1bde8:	e7de      	b.n	1bda8 <uECC_vli_mult+0xae>

0001bdea <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1bdea:	2300      	movs	r3, #0
{
   1bdec:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1bdee:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1bdf0:	b25a      	sxtb	r2, r3
   1bdf2:	4291      	cmp	r1, r2
   1bdf4:	dc00      	bgt.n	1bdf8 <uECC_vli_clear+0xe>
}
   1bdf6:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1bdf8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1bdfc:	3301      	adds	r3, #1
   1bdfe:	e7f7      	b.n	1bdf0 <uECC_vli_clear+0x6>

0001be00 <uECC_vli_isZero>:
{
   1be00:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1be02:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1be04:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1be06:	b25c      	sxtb	r4, r3
   1be08:	42a1      	cmp	r1, r4
   1be0a:	dc03      	bgt.n	1be14 <uECC_vli_isZero+0x14>
}
   1be0c:	fab2 f082 	clz	r0, r2
   1be10:	0940      	lsrs	r0, r0, #5
   1be12:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1be14:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1be18:	3301      	adds	r3, #1
   1be1a:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1be1c:	e7f3      	b.n	1be06 <uECC_vli_isZero+0x6>

0001be1e <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1be1e:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1be20:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1be22:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1be26:	f001 011f 	and.w	r1, r1, #31
   1be2a:	fa03 f101 	lsl.w	r1, r3, r1
}
   1be2e:	4008      	ands	r0, r1
   1be30:	4770      	bx	lr

0001be32 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1be32:	3901      	subs	r1, #1
   1be34:	b24b      	sxtb	r3, r1
{
   1be36:	4602      	mov	r2, r0
   1be38:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1be3c:	2b00      	cmp	r3, #0
   1be3e:	da03      	bge.n	1be48 <uECC_vli_numBits+0x16>
	return (i + 1);
   1be40:	3301      	adds	r3, #1
   1be42:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1be44:	b938      	cbnz	r0, 1be56 <uECC_vli_numBits+0x24>
   1be46:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1be48:	f851 0904 	ldr.w	r0, [r1], #-4
   1be4c:	2800      	cmp	r0, #0
   1be4e:	d1f7      	bne.n	1be40 <uECC_vli_numBits+0xe>
   1be50:	3b01      	subs	r3, #1
   1be52:	b25b      	sxtb	r3, r3
   1be54:	e7f2      	b.n	1be3c <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1be56:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1be5a:	3b01      	subs	r3, #1
   1be5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1be60:	2300      	movs	r3, #0
   1be62:	b922      	cbnz	r2, 1be6e <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1be64:	3801      	subs	r0, #1
   1be66:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1be6a:	b200      	sxth	r0, r0
}
   1be6c:	4770      	bx	lr
		digit >>= 1;
   1be6e:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1be70:	3301      	adds	r3, #1
   1be72:	e7f6      	b.n	1be62 <uECC_vli_numBits+0x30>

0001be74 <uECC_vli_set>:
{
   1be74:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1be76:	2300      	movs	r3, #0
   1be78:	b25c      	sxtb	r4, r3
   1be7a:	42a2      	cmp	r2, r4
   1be7c:	dc00      	bgt.n	1be80 <uECC_vli_set+0xc>
}
   1be7e:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1be80:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1be84:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1be88:	3301      	adds	r3, #1
   1be8a:	e7f5      	b.n	1be78 <uECC_vli_set+0x4>

0001be8c <uECC_vli_cmp_unsafe>:
{
   1be8c:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1be8e:	3a01      	subs	r2, #1
   1be90:	b253      	sxtb	r3, r2
   1be92:	009a      	lsls	r2, r3, #2
   1be94:	2b00      	cmp	r3, #0
   1be96:	da01      	bge.n	1be9c <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1be98:	2000      	movs	r0, #0
}
   1be9a:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1be9c:	5885      	ldr	r5, [r0, r2]
   1be9e:	588c      	ldr	r4, [r1, r2]
   1bea0:	42a5      	cmp	r5, r4
   1bea2:	d805      	bhi.n	1beb0 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1bea4:	f1a2 0204 	sub.w	r2, r2, #4
   1bea8:	d304      	bcc.n	1beb4 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1beaa:	3b01      	subs	r3, #1
   1beac:	b25b      	sxtb	r3, r3
   1beae:	e7f1      	b.n	1be94 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1beb0:	2001      	movs	r0, #1
   1beb2:	e7f2      	b.n	1be9a <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1beb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1beb8:	e7ef      	b.n	1be9a <uECC_vli_cmp_unsafe+0xe>

0001beba <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1beba:	3a01      	subs	r2, #1
   1bebc:	b253      	sxtb	r3, r2
{
   1bebe:	b570      	push	{r4, r5, r6, lr}
   1bec0:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1bec2:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1bec4:	2b00      	cmp	r3, #0
   1bec6:	da03      	bge.n	1bed0 <uECC_vli_equal+0x16>
}
   1bec8:	1e20      	subs	r0, r4, #0
   1beca:	bf18      	it	ne
   1becc:	2001      	movne	r0, #1
   1bece:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1bed0:	5885      	ldr	r5, [r0, r2]
   1bed2:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1bed4:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1bed6:	4075      	eors	r5, r6
   1bed8:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1beda:	b25b      	sxtb	r3, r3
   1bedc:	3a04      	subs	r2, #4
   1bede:	e7f1      	b.n	1bec4 <uECC_vli_equal+0xa>

0001bee0 <uECC_vli_sub>:
{
   1bee0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1bee2:	2400      	movs	r4, #0
{
   1bee4:	4606      	mov	r6, r0
   1bee6:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1bee8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1beea:	b265      	sxtb	r5, r4
   1beec:	45ac      	cmp	ip, r5
   1beee:	dc00      	bgt.n	1bef2 <uECC_vli_sub+0x12>
}
   1bef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1bef2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1bef6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1befa:	1a3d      	subs	r5, r7, r0
   1befc:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1befe:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1bf00:	bf34      	ite	cc
   1bf02:	2701      	movcc	r7, #1
   1bf04:	2700      	movcs	r7, #0
		result[i] = diff;
   1bf06:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1bf0a:	bf18      	it	ne
   1bf0c:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1bf0e:	3401      	adds	r4, #1
   1bf10:	e7eb      	b.n	1beea <uECC_vli_sub+0xa>

0001bf12 <uECC_vli_modAdd>:
{
   1bf12:	b570      	push	{r4, r5, r6, lr}
   1bf14:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1bf18:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1bf1a:	4633      	mov	r3, r6
{
   1bf1c:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1bf1e:	f7ff feab 	bl	1bc78 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1bf22:	b930      	cbnz	r0, 1bf32 <uECC_vli_modAdd+0x20>
   1bf24:	4632      	mov	r2, r6
   1bf26:	4621      	mov	r1, r4
   1bf28:	4628      	mov	r0, r5
   1bf2a:	f7ff ffaf 	bl	1be8c <uECC_vli_cmp_unsafe>
   1bf2e:	2801      	cmp	r0, #1
   1bf30:	d007      	beq.n	1bf42 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1bf32:	4633      	mov	r3, r6
   1bf34:	462a      	mov	r2, r5
   1bf36:	4621      	mov	r1, r4
   1bf38:	4620      	mov	r0, r4
}
   1bf3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1bf3e:	f7ff bfcf 	b.w	1bee0 <uECC_vli_sub>
}
   1bf42:	bd70      	pop	{r4, r5, r6, pc}

0001bf44 <uECC_vli_modSub>:
{
   1bf44:	b570      	push	{r4, r5, r6, lr}
   1bf46:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1bf4a:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1bf4c:	4633      	mov	r3, r6
{
   1bf4e:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1bf50:	f7ff ffc6 	bl	1bee0 <uECC_vli_sub>
	if (l_borrow) {
   1bf54:	b138      	cbz	r0, 1bf66 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1bf56:	4633      	mov	r3, r6
   1bf58:	462a      	mov	r2, r5
   1bf5a:	4621      	mov	r1, r4
   1bf5c:	4620      	mov	r0, r4
}
   1bf5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1bf62:	f7ff be89 	b.w	1bc78 <uECC_vli_add>
}
   1bf66:	bd70      	pop	{r4, r5, r6, pc}

0001bf68 <uECC_vli_mmod>:
{
   1bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf6c:	b0a5      	sub	sp, #148	; 0x94
   1bf6e:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1bf70:	ab14      	add	r3, sp, #80	; 0x50
   1bf72:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1bf76:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1bf78:	4629      	mov	r1, r5
   1bf7a:	4610      	mov	r0, r2
{
   1bf7c:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1bf7e:	f7ff ff58 	bl	1be32 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1bf82:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1bf86:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1bf88:	2c00      	cmp	r4, #0
   1bf8a:	4621      	mov	r1, r4
   1bf8c:	bfb8      	it	lt
   1bf8e:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1bf92:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1bf94:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1bf98:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1bf9c:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1bf9e:	f004 071f 	and.w	r7, r4, #31
   1bfa2:	bf58      	it	pl
   1bfa4:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1bfa6:	f7ff ff20 	bl	1bdea <uECC_vli_clear>
	if (bit_shift > 0) {
   1bfaa:	2f00      	cmp	r7, #0
   1bfac:	b208      	sxth	r0, r1
   1bfae:	dd2b      	ble.n	1c008 <uECC_vli_mmod+0xa0>
   1bfb0:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1bfb2:	2200      	movs	r2, #0
   1bfb4:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1bfb8:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1bfbc:	4613      	mov	r3, r2
   1bfbe:	429d      	cmp	r5, r3
   1bfc0:	d817      	bhi.n	1bff2 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1bfc2:	006b      	lsls	r3, r5, #1
   1bfc4:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1bfc6:	ab04      	add	r3, sp, #16
   1bfc8:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1bfcc:	1e6f      	subs	r7, r5, #1
   1bfce:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1bfd0:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1bfd2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1bfd6:	2c00      	cmp	r4, #0
   1bfd8:	da54      	bge.n	1c084 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1bfda:	ab24      	add	r3, sp, #144	; 0x90
   1bfdc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1bfe0:	462a      	mov	r2, r5
   1bfe2:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1bfe6:	4640      	mov	r0, r8
   1bfe8:	f7ff ff44 	bl	1be74 <uECC_vli_set>
}
   1bfec:	b025      	add	sp, #148	; 0x94
   1bfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1bff2:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1bff6:	fa0c f007 	lsl.w	r0, ip, r7
   1bffa:	4302      	orrs	r2, r0
   1bffc:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1c000:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1c002:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1c006:	e7da      	b.n	1bfbe <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1c008:	ab04      	add	r3, sp, #16
   1c00a:	462a      	mov	r2, r5
   1c00c:	4631      	mov	r1, r6
   1c00e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1c012:	f7ff ff2f 	bl	1be74 <uECC_vli_set>
   1c016:	e7d4      	b.n	1bfc2 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1c018:	fa0f fe82 	sxth.w	lr, r2
   1c01c:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1c020:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1c024:	ab24      	add	r3, sp, #144	; 0x90
   1c026:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1c02a:	3001      	adds	r0, #1
   1c02c:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1c030:	440b      	add	r3, r1
   1c032:	ebbb 0303 	subs.w	r3, fp, r3
   1c036:	bf34      	ite	cc
   1c038:	2201      	movcc	r2, #1
   1c03a:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1c03c:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1c03e:	bf18      	it	ne
   1c040:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1c042:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1c046:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1c04a:	9b01      	ldr	r3, [sp, #4]
   1c04c:	b242      	sxtb	r2, r0
   1c04e:	429a      	cmp	r2, r3
   1c050:	dbe2      	blt.n	1c018 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1c052:	1a73      	subs	r3, r6, r1
   1c054:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1c056:	4629      	mov	r1, r5
   1c058:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1c05a:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1c05c:	f7ff fe24 	bl	1bca8 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1c060:	ab24      	add	r3, sp, #144	; 0x90
   1c062:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1c066:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1c068:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1c06c:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1c070:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1c072:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1c076:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1c078:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1c07c:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1c07e:	f7ff fe13 	bl	1bca8 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1c082:	e7a8      	b.n	1bfd6 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1c084:	ab24      	add	r3, sp, #144	; 0x90
   1c086:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1c088:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1c08c:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1c08e:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1c092:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1c096:	e7d8      	b.n	1c04a <uECC_vli_mmod+0xe2>

0001c098 <uECC_vli_modMult_fast>:
{
   1c098:	b530      	push	{r4, r5, lr}
   1c09a:	461c      	mov	r4, r3
   1c09c:	b091      	sub	sp, #68	; 0x44
   1c09e:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1c0a0:	f993 3000 	ldrsb.w	r3, [r3]
   1c0a4:	4668      	mov	r0, sp
   1c0a6:	f7ff fe28 	bl	1bcfa <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1c0aa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1c0ae:	4669      	mov	r1, sp
   1c0b0:	4628      	mov	r0, r5
   1c0b2:	4798      	blx	r3
}
   1c0b4:	b011      	add	sp, #68	; 0x44
   1c0b6:	bd30      	pop	{r4, r5, pc}

0001c0b8 <uECC_vli_modSquare_fast>:
{
   1c0b8:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1c0ba:	460a      	mov	r2, r1
   1c0bc:	f7ff bfec 	b.w	1c098 <uECC_vli_modMult_fast>

0001c0c0 <double_jacobian_default>:
{
   1c0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1c0c4:	f993 6000 	ldrsb.w	r6, [r3]
{
   1c0c8:	b092      	sub	sp, #72	; 0x48
   1c0ca:	4604      	mov	r4, r0
   1c0cc:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1c0ce:	4610      	mov	r0, r2
   1c0d0:	4631      	mov	r1, r6
{
   1c0d2:	4615      	mov	r5, r2
   1c0d4:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1c0d6:	f7ff fe93 	bl	1be00 <uECC_vli_isZero>
   1c0da:	2800      	cmp	r0, #0
   1c0dc:	f040 8091 	bne.w	1c202 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1c0e0:	463a      	mov	r2, r7
   1c0e2:	4649      	mov	r1, r9
   1c0e4:	a802      	add	r0, sp, #8
   1c0e6:	f7ff ffe7 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1c0ea:	463b      	mov	r3, r7
   1c0ec:	aa02      	add	r2, sp, #8
   1c0ee:	4621      	mov	r1, r4
   1c0f0:	a80a      	add	r0, sp, #40	; 0x28
   1c0f2:	f7ff ffd1 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1c0f6:	a902      	add	r1, sp, #8
   1c0f8:	4608      	mov	r0, r1
   1c0fa:	463a      	mov	r2, r7
   1c0fc:	f7ff ffdc 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1c100:	463b      	mov	r3, r7
   1c102:	462a      	mov	r2, r5
   1c104:	4649      	mov	r1, r9
   1c106:	4648      	mov	r0, r9
   1c108:	f7ff ffc6 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1c10c:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1c110:	463a      	mov	r2, r7
   1c112:	4629      	mov	r1, r5
   1c114:	4628      	mov	r0, r5
   1c116:	f7ff ffcf 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1c11a:	4643      	mov	r3, r8
   1c11c:	462a      	mov	r2, r5
   1c11e:	4621      	mov	r1, r4
   1c120:	4620      	mov	r0, r4
   1c122:	9600      	str	r6, [sp, #0]
   1c124:	f7ff fef5 	bl	1bf12 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1c128:	4643      	mov	r3, r8
   1c12a:	462a      	mov	r2, r5
   1c12c:	4629      	mov	r1, r5
   1c12e:	4628      	mov	r0, r5
   1c130:	9600      	str	r6, [sp, #0]
   1c132:	f7ff feee 	bl	1bf12 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1c136:	4643      	mov	r3, r8
   1c138:	462a      	mov	r2, r5
   1c13a:	4621      	mov	r1, r4
   1c13c:	4628      	mov	r0, r5
   1c13e:	9600      	str	r6, [sp, #0]
   1c140:	f7ff ff00 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1c144:	463b      	mov	r3, r7
   1c146:	462a      	mov	r2, r5
   1c148:	4621      	mov	r1, r4
   1c14a:	4620      	mov	r0, r4
   1c14c:	f7ff ffa4 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1c150:	4643      	mov	r3, r8
   1c152:	4622      	mov	r2, r4
   1c154:	4621      	mov	r1, r4
   1c156:	4628      	mov	r0, r5
   1c158:	9600      	str	r6, [sp, #0]
   1c15a:	f7ff feda 	bl	1bf12 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1c15e:	4643      	mov	r3, r8
   1c160:	9600      	str	r6, [sp, #0]
   1c162:	462a      	mov	r2, r5
   1c164:	4621      	mov	r1, r4
   1c166:	4620      	mov	r0, r4
   1c168:	f7ff fed3 	bl	1bf12 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1c16c:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1c16e:	07db      	lsls	r3, r3, #31
   1c170:	d54a      	bpl.n	1c208 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1c172:	4633      	mov	r3, r6
   1c174:	4642      	mov	r2, r8
   1c176:	4621      	mov	r1, r4
   1c178:	4620      	mov	r0, r4
   1c17a:	f7ff fd7d 	bl	1bc78 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1c17e:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1c180:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1c182:	4620      	mov	r0, r4
   1c184:	f7ff fd90 	bl	1bca8 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1c188:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1c18c:	3b01      	subs	r3, #1
   1c18e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1c192:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1c196:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1c19a:	463a      	mov	r2, r7
   1c19c:	4621      	mov	r1, r4
   1c19e:	4628      	mov	r0, r5
   1c1a0:	f7ff ff8a 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1c1a4:	4643      	mov	r3, r8
   1c1a6:	aa0a      	add	r2, sp, #40	; 0x28
   1c1a8:	4629      	mov	r1, r5
   1c1aa:	4628      	mov	r0, r5
   1c1ac:	9600      	str	r6, [sp, #0]
   1c1ae:	f7ff fec9 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1c1b2:	4643      	mov	r3, r8
   1c1b4:	aa0a      	add	r2, sp, #40	; 0x28
   1c1b6:	4629      	mov	r1, r5
   1c1b8:	4628      	mov	r0, r5
   1c1ba:	9600      	str	r6, [sp, #0]
   1c1bc:	f7ff fec2 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1c1c0:	a90a      	add	r1, sp, #40	; 0x28
   1c1c2:	4608      	mov	r0, r1
   1c1c4:	4643      	mov	r3, r8
   1c1c6:	462a      	mov	r2, r5
   1c1c8:	9600      	str	r6, [sp, #0]
   1c1ca:	f7ff febb 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1c1ce:	463b      	mov	r3, r7
   1c1d0:	aa0a      	add	r2, sp, #40	; 0x28
   1c1d2:	4621      	mov	r1, r4
   1c1d4:	4620      	mov	r0, r4
   1c1d6:	f7ff ff5f 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1c1da:	aa02      	add	r2, sp, #8
   1c1dc:	4643      	mov	r3, r8
   1c1de:	4610      	mov	r0, r2
   1c1e0:	4621      	mov	r1, r4
   1c1e2:	9600      	str	r6, [sp, #0]
   1c1e4:	f7ff feae 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1c1e8:	4632      	mov	r2, r6
   1c1ea:	4629      	mov	r1, r5
   1c1ec:	4620      	mov	r0, r4
   1c1ee:	f7ff fe41 	bl	1be74 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1c1f2:	4649      	mov	r1, r9
   1c1f4:	4628      	mov	r0, r5
   1c1f6:	f7ff fe3d 	bl	1be74 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1c1fa:	a902      	add	r1, sp, #8
   1c1fc:	4648      	mov	r0, r9
   1c1fe:	f7ff fe39 	bl	1be74 <uECC_vli_set>
}
   1c202:	b012      	add	sp, #72	; 0x48
   1c204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1c208:	4631      	mov	r1, r6
   1c20a:	4620      	mov	r0, r4
   1c20c:	f7ff fd4c 	bl	1bca8 <uECC_vli_rshift1>
   1c210:	e7c3      	b.n	1c19a <double_jacobian_default+0xda>

0001c212 <x_side_default>:
{
   1c212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c216:	4615      	mov	r5, r2
   1c218:	b08a      	sub	sp, #40	; 0x28
   1c21a:	4604      	mov	r4, r0
   1c21c:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1c21e:	221c      	movs	r2, #28
   1c220:	2100      	movs	r1, #0
   1c222:	a803      	add	r0, sp, #12
   1c224:	f000 fd94 	bl	1cd50 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1c228:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1c22a:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1c22e:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1c230:	462a      	mov	r2, r5
   1c232:	4631      	mov	r1, r6
   1c234:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1c236:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1c238:	f7ff ff3e 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1c23c:	463b      	mov	r3, r7
   1c23e:	aa02      	add	r2, sp, #8
   1c240:	4621      	mov	r1, r4
   1c242:	4620      	mov	r0, r4
   1c244:	f8cd 8000 	str.w	r8, [sp]
   1c248:	f7ff fe7c 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1c24c:	462b      	mov	r3, r5
   1c24e:	4632      	mov	r2, r6
   1c250:	4621      	mov	r1, r4
   1c252:	4620      	mov	r0, r4
   1c254:	f7ff ff20 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1c258:	f8cd 8000 	str.w	r8, [sp]
   1c25c:	463b      	mov	r3, r7
   1c25e:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1c262:	4621      	mov	r1, r4
   1c264:	4620      	mov	r0, r4
   1c266:	f7ff fe54 	bl	1bf12 <uECC_vli_modAdd>
}
   1c26a:	b00a      	add	sp, #40	; 0x28
   1c26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c270 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1c270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c274:	b09a      	sub	sp, #104	; 0x68
   1c276:	4616      	mov	r6, r2
   1c278:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1c27c:	4644      	mov	r4, r8
{
   1c27e:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1c280:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1c284:	9500      	str	r5, [sp, #0]
{
   1c286:	4607      	mov	r7, r0
   1c288:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1c28a:	4623      	mov	r3, r4
   1c28c:	4602      	mov	r2, r0
   1c28e:	4631      	mov	r1, r6
   1c290:	a802      	add	r0, sp, #8
   1c292:	f7ff fe57 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1c296:	a902      	add	r1, sp, #8
   1c298:	4642      	mov	r2, r8
   1c29a:	4608      	mov	r0, r1
   1c29c:	f7ff ff0c 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1c2a0:	4643      	mov	r3, r8
   1c2a2:	aa02      	add	r2, sp, #8
   1c2a4:	4639      	mov	r1, r7
   1c2a6:	4638      	mov	r0, r7
   1c2a8:	f7ff fef6 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1c2ac:	4643      	mov	r3, r8
   1c2ae:	aa02      	add	r2, sp, #8
   1c2b0:	4631      	mov	r1, r6
   1c2b2:	4630      	mov	r0, r6
   1c2b4:	f7ff fef0 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1c2b8:	4623      	mov	r3, r4
   1c2ba:	4652      	mov	r2, sl
   1c2bc:	4649      	mov	r1, r9
   1c2be:	a802      	add	r0, sp, #8
   1c2c0:	9500      	str	r5, [sp, #0]
   1c2c2:	f7ff fe26 	bl	1bf12 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1c2c6:	4623      	mov	r3, r4
   1c2c8:	4652      	mov	r2, sl
   1c2ca:	4649      	mov	r1, r9
   1c2cc:	4648      	mov	r0, r9
   1c2ce:	9500      	str	r5, [sp, #0]
   1c2d0:	f7ff fe38 	bl	1bf44 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1c2d4:	4623      	mov	r3, r4
   1c2d6:	463a      	mov	r2, r7
   1c2d8:	4631      	mov	r1, r6
   1c2da:	a80a      	add	r0, sp, #40	; 0x28
   1c2dc:	9500      	str	r5, [sp, #0]
   1c2de:	f7ff fe31 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1c2e2:	4643      	mov	r3, r8
   1c2e4:	aa0a      	add	r2, sp, #40	; 0x28
   1c2e6:	4651      	mov	r1, sl
   1c2e8:	4650      	mov	r0, sl
   1c2ea:	f7ff fed5 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1c2ee:	4623      	mov	r3, r4
   1c2f0:	4632      	mov	r2, r6
   1c2f2:	4639      	mov	r1, r7
   1c2f4:	a80a      	add	r0, sp, #40	; 0x28
   1c2f6:	9500      	str	r5, [sp, #0]
   1c2f8:	f7ff fe0b 	bl	1bf12 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1c2fc:	4642      	mov	r2, r8
   1c2fe:	4649      	mov	r1, r9
   1c300:	4630      	mov	r0, r6
   1c302:	f7ff fed9 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1c306:	4623      	mov	r3, r4
   1c308:	aa0a      	add	r2, sp, #40	; 0x28
   1c30a:	4631      	mov	r1, r6
   1c30c:	4630      	mov	r0, r6
   1c30e:	9500      	str	r5, [sp, #0]
   1c310:	f7ff fe18 	bl	1bf44 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1c314:	4623      	mov	r3, r4
   1c316:	4632      	mov	r2, r6
   1c318:	4639      	mov	r1, r7
   1c31a:	a812      	add	r0, sp, #72	; 0x48
   1c31c:	9500      	str	r5, [sp, #0]
   1c31e:	f7ff fe11 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1c322:	4643      	mov	r3, r8
   1c324:	aa12      	add	r2, sp, #72	; 0x48
   1c326:	4649      	mov	r1, r9
   1c328:	4648      	mov	r0, r9
   1c32a:	f7ff feb5 	bl	1c098 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1c32e:	4623      	mov	r3, r4
   1c330:	4652      	mov	r2, sl
   1c332:	4649      	mov	r1, r9
   1c334:	4648      	mov	r0, r9
   1c336:	9500      	str	r5, [sp, #0]
   1c338:	f7ff fe04 	bl	1bf44 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1c33c:	4642      	mov	r2, r8
   1c33e:	a902      	add	r1, sp, #8
   1c340:	a812      	add	r0, sp, #72	; 0x48
   1c342:	f7ff feb9 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1c346:	a912      	add	r1, sp, #72	; 0x48
   1c348:	4623      	mov	r3, r4
   1c34a:	aa0a      	add	r2, sp, #40	; 0x28
   1c34c:	4608      	mov	r0, r1
   1c34e:	9500      	str	r5, [sp, #0]
   1c350:	f7ff fdf8 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1c354:	4623      	mov	r3, r4
   1c356:	463a      	mov	r2, r7
   1c358:	a912      	add	r1, sp, #72	; 0x48
   1c35a:	a80a      	add	r0, sp, #40	; 0x28
   1c35c:	9500      	str	r5, [sp, #0]
   1c35e:	f7ff fdf1 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1c362:	a90a      	add	r1, sp, #40	; 0x28
   1c364:	4643      	mov	r3, r8
   1c366:	aa02      	add	r2, sp, #8
   1c368:	4608      	mov	r0, r1
   1c36a:	f7ff fe95 	bl	1c098 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1c36e:	4623      	mov	r3, r4
   1c370:	4652      	mov	r2, sl
   1c372:	a90a      	add	r1, sp, #40	; 0x28
   1c374:	4650      	mov	r0, sl
   1c376:	9500      	str	r5, [sp, #0]
   1c378:	f7ff fde4 	bl	1bf44 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1c37c:	462a      	mov	r2, r5
   1c37e:	a912      	add	r1, sp, #72	; 0x48
   1c380:	4638      	mov	r0, r7
   1c382:	f7ff fd77 	bl	1be74 <uECC_vli_set>
}
   1c386:	b01a      	add	sp, #104	; 0x68
   1c388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c38c <uECC_vli_modInv>:
{
   1c38c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c38e:	460f      	mov	r7, r1
   1c390:	b0a1      	sub	sp, #132	; 0x84
   1c392:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1c394:	4619      	mov	r1, r3
   1c396:	4638      	mov	r0, r7
{
   1c398:	4615      	mov	r5, r2
   1c39a:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1c39c:	f7ff fd30 	bl	1be00 <uECC_vli_isZero>
   1c3a0:	b120      	cbz	r0, 1c3ac <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1c3a2:	4630      	mov	r0, r6
   1c3a4:	f7ff fd21 	bl	1bdea <uECC_vli_clear>
}
   1c3a8:	b021      	add	sp, #132	; 0x84
   1c3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1c3ac:	4622      	mov	r2, r4
   1c3ae:	4639      	mov	r1, r7
   1c3b0:	4668      	mov	r0, sp
   1c3b2:	f7ff fd5f 	bl	1be74 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1c3b6:	4629      	mov	r1, r5
   1c3b8:	a808      	add	r0, sp, #32
   1c3ba:	f7ff fd5b 	bl	1be74 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1c3be:	a810      	add	r0, sp, #64	; 0x40
   1c3c0:	4621      	mov	r1, r4
   1c3c2:	f7ff fd12 	bl	1bdea <uECC_vli_clear>
	u[0] = 1;
   1c3c6:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1c3c8:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1c3ca:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1c3cc:	f7ff fd0d 	bl	1bdea <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1c3d0:	4622      	mov	r2, r4
   1c3d2:	a908      	add	r1, sp, #32
   1c3d4:	4668      	mov	r0, sp
   1c3d6:	f7ff fd59 	bl	1be8c <uECC_vli_cmp_unsafe>
   1c3da:	b928      	cbnz	r0, 1c3e8 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1c3dc:	4622      	mov	r2, r4
   1c3de:	a910      	add	r1, sp, #64	; 0x40
   1c3e0:	4630      	mov	r0, r6
   1c3e2:	f7ff fd47 	bl	1be74 <uECC_vli_set>
   1c3e6:	e7df      	b.n	1c3a8 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1c3e8:	9b00      	ldr	r3, [sp, #0]
   1c3ea:	07da      	lsls	r2, r3, #31
   1c3ec:	d409      	bmi.n	1c402 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1c3ee:	4621      	mov	r1, r4
   1c3f0:	4668      	mov	r0, sp
   1c3f2:	f7ff fc59 	bl	1bca8 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1c3f6:	4622      	mov	r2, r4
   1c3f8:	4629      	mov	r1, r5
   1c3fa:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1c3fc:	f7ff fc61 	bl	1bcc2 <vli_modInv_update>
   1c400:	e7e6      	b.n	1c3d0 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1c402:	9b08      	ldr	r3, [sp, #32]
   1c404:	07db      	lsls	r3, r3, #31
   1c406:	d407      	bmi.n	1c418 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1c408:	4621      	mov	r1, r4
   1c40a:	a808      	add	r0, sp, #32
   1c40c:	f7ff fc4c 	bl	1bca8 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1c410:	4622      	mov	r2, r4
   1c412:	4629      	mov	r1, r5
   1c414:	a818      	add	r0, sp, #96	; 0x60
   1c416:	e7f1      	b.n	1c3fc <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1c418:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1c41a:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1c41c:	dd1c      	ble.n	1c458 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1c41e:	aa08      	add	r2, sp, #32
   1c420:	4669      	mov	r1, sp
   1c422:	4668      	mov	r0, sp
   1c424:	f7ff fd5c 	bl	1bee0 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1c428:	4621      	mov	r1, r4
   1c42a:	4668      	mov	r0, sp
   1c42c:	f7ff fc3c 	bl	1bca8 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1c430:	4622      	mov	r2, r4
   1c432:	a918      	add	r1, sp, #96	; 0x60
   1c434:	a810      	add	r0, sp, #64	; 0x40
   1c436:	f7ff fd29 	bl	1be8c <uECC_vli_cmp_unsafe>
   1c43a:	2800      	cmp	r0, #0
   1c43c:	da05      	bge.n	1c44a <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1c43e:	a910      	add	r1, sp, #64	; 0x40
   1c440:	4623      	mov	r3, r4
   1c442:	462a      	mov	r2, r5
   1c444:	4608      	mov	r0, r1
   1c446:	f7ff fc17 	bl	1bc78 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1c44a:	a910      	add	r1, sp, #64	; 0x40
   1c44c:	4623      	mov	r3, r4
   1c44e:	aa18      	add	r2, sp, #96	; 0x60
   1c450:	4608      	mov	r0, r1
   1c452:	f7ff fd45 	bl	1bee0 <uECC_vli_sub>
   1c456:	e7ce      	b.n	1c3f6 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1c458:	a908      	add	r1, sp, #32
   1c45a:	466a      	mov	r2, sp
   1c45c:	4608      	mov	r0, r1
   1c45e:	f7ff fd3f 	bl	1bee0 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1c462:	4621      	mov	r1, r4
   1c464:	a808      	add	r0, sp, #32
   1c466:	f7ff fc1f 	bl	1bca8 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1c46a:	4622      	mov	r2, r4
   1c46c:	a910      	add	r1, sp, #64	; 0x40
   1c46e:	a818      	add	r0, sp, #96	; 0x60
   1c470:	f7ff fd0c 	bl	1be8c <uECC_vli_cmp_unsafe>
   1c474:	2800      	cmp	r0, #0
   1c476:	da05      	bge.n	1c484 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1c478:	a918      	add	r1, sp, #96	; 0x60
   1c47a:	4623      	mov	r3, r4
   1c47c:	462a      	mov	r2, r5
   1c47e:	4608      	mov	r0, r1
   1c480:	f7ff fbfa 	bl	1bc78 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1c484:	a918      	add	r1, sp, #96	; 0x60
   1c486:	4623      	mov	r3, r4
   1c488:	aa10      	add	r2, sp, #64	; 0x40
   1c48a:	4608      	mov	r0, r1
   1c48c:	f7ff fd28 	bl	1bee0 <uECC_vli_sub>
   1c490:	e7be      	b.n	1c410 <uECC_vli_modInv+0x84>

0001c492 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1c492:	7809      	ldrb	r1, [r1, #0]
   1c494:	0049      	lsls	r1, r1, #1
   1c496:	b249      	sxtb	r1, r1
   1c498:	f7ff bcb2 	b.w	1be00 <uECC_vli_isZero>

0001c49c <apply_z>:
{
   1c49c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c49e:	4615      	mov	r5, r2
   1c4a0:	b089      	sub	sp, #36	; 0x24
   1c4a2:	461c      	mov	r4, r3
   1c4a4:	4607      	mov	r7, r0
   1c4a6:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1c4a8:	461a      	mov	r2, r3
   1c4aa:	4629      	mov	r1, r5
   1c4ac:	4668      	mov	r0, sp
   1c4ae:	f7ff fe03 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1c4b2:	4623      	mov	r3, r4
   1c4b4:	466a      	mov	r2, sp
   1c4b6:	4639      	mov	r1, r7
   1c4b8:	4638      	mov	r0, r7
   1c4ba:	f7ff fded 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1c4be:	4623      	mov	r3, r4
   1c4c0:	462a      	mov	r2, r5
   1c4c2:	4669      	mov	r1, sp
   1c4c4:	4668      	mov	r0, sp
   1c4c6:	f7ff fde7 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1c4ca:	4623      	mov	r3, r4
   1c4cc:	466a      	mov	r2, sp
   1c4ce:	4631      	mov	r1, r6
   1c4d0:	4630      	mov	r0, r6
   1c4d2:	f7ff fde1 	bl	1c098 <uECC_vli_modMult_fast>
}
   1c4d6:	b009      	add	sp, #36	; 0x24
   1c4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c4da <XYcZ_add>:
{
   1c4da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c4de:	b08a      	sub	sp, #40	; 0x28
   1c4e0:	4614      	mov	r4, r2
   1c4e2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1c4e6:	4655      	mov	r5, sl
{
   1c4e8:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1c4ea:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1c4ee:	9600      	str	r6, [sp, #0]
{
   1c4f0:	4680      	mov	r8, r0
   1c4f2:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1c4f4:	462b      	mov	r3, r5
   1c4f6:	4602      	mov	r2, r0
   1c4f8:	4621      	mov	r1, r4
   1c4fa:	a802      	add	r0, sp, #8
   1c4fc:	f7ff fd22 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1c500:	a902      	add	r1, sp, #8
   1c502:	4652      	mov	r2, sl
   1c504:	4608      	mov	r0, r1
   1c506:	f7ff fdd7 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1c50a:	4653      	mov	r3, sl
   1c50c:	aa02      	add	r2, sp, #8
   1c50e:	4641      	mov	r1, r8
   1c510:	4640      	mov	r0, r8
   1c512:	f7ff fdc1 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1c516:	4653      	mov	r3, sl
   1c518:	aa02      	add	r2, sp, #8
   1c51a:	4621      	mov	r1, r4
   1c51c:	4620      	mov	r0, r4
   1c51e:	f7ff fdbb 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1c522:	462b      	mov	r3, r5
   1c524:	464a      	mov	r2, r9
   1c526:	4639      	mov	r1, r7
   1c528:	4638      	mov	r0, r7
   1c52a:	9600      	str	r6, [sp, #0]
   1c52c:	f7ff fd0a 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1c530:	4652      	mov	r2, sl
   1c532:	4639      	mov	r1, r7
   1c534:	a802      	add	r0, sp, #8
   1c536:	f7ff fdbf 	bl	1c0b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1c53a:	a902      	add	r1, sp, #8
   1c53c:	462b      	mov	r3, r5
   1c53e:	4642      	mov	r2, r8
   1c540:	4608      	mov	r0, r1
   1c542:	9600      	str	r6, [sp, #0]
   1c544:	f7ff fcfe 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1c548:	a902      	add	r1, sp, #8
   1c54a:	462b      	mov	r3, r5
   1c54c:	4622      	mov	r2, r4
   1c54e:	4608      	mov	r0, r1
   1c550:	9600      	str	r6, [sp, #0]
   1c552:	f7ff fcf7 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1c556:	462b      	mov	r3, r5
   1c558:	4642      	mov	r2, r8
   1c55a:	4621      	mov	r1, r4
   1c55c:	4620      	mov	r0, r4
   1c55e:	9600      	str	r6, [sp, #0]
   1c560:	f7ff fcf0 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1c564:	4653      	mov	r3, sl
   1c566:	4622      	mov	r2, r4
   1c568:	4649      	mov	r1, r9
   1c56a:	4648      	mov	r0, r9
   1c56c:	f7ff fd94 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1c570:	462b      	mov	r3, r5
   1c572:	aa02      	add	r2, sp, #8
   1c574:	4641      	mov	r1, r8
   1c576:	4620      	mov	r0, r4
   1c578:	9600      	str	r6, [sp, #0]
   1c57a:	f7ff fce3 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1c57e:	4653      	mov	r3, sl
   1c580:	4622      	mov	r2, r4
   1c582:	4639      	mov	r1, r7
   1c584:	4638      	mov	r0, r7
   1c586:	f7ff fd87 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1c58a:	462b      	mov	r3, r5
   1c58c:	464a      	mov	r2, r9
   1c58e:	4639      	mov	r1, r7
   1c590:	4638      	mov	r0, r7
   1c592:	9600      	str	r6, [sp, #0]
   1c594:	f7ff fcd6 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1c598:	4632      	mov	r2, r6
   1c59a:	a902      	add	r1, sp, #8
   1c59c:	4620      	mov	r0, r4
   1c59e:	f7ff fc69 	bl	1be74 <uECC_vli_set>
}
   1c5a2:	b00a      	add	sp, #40	; 0x28
   1c5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c5a8 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5ac:	b0b1      	sub	sp, #196	; 0xc4
   1c5ae:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1c5b2:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1c5b4:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1c5b8:	a818      	add	r0, sp, #96	; 0x60
{
   1c5ba:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1c5bc:	463a      	mov	r2, r7
{
   1c5be:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1c5c0:	f7ff fc58 	bl	1be74 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1c5c4:	00bb      	lsls	r3, r7, #2
   1c5c6:	9305      	str	r3, [sp, #20]
   1c5c8:	9b04      	ldr	r3, [sp, #16]
   1c5ca:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1c5ce:	4619      	mov	r1, r3
   1c5d0:	a828      	add	r0, sp, #160	; 0xa0
   1c5d2:	9302      	str	r3, [sp, #8]
   1c5d4:	f7ff fc4e 	bl	1be74 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1c5d8:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1c5dc:	2e00      	cmp	r6, #0
   1c5de:	f000 8088 	beq.w	1c6f2 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1c5e2:	462a      	mov	r2, r5
   1c5e4:	4631      	mov	r1, r6
   1c5e6:	a808      	add	r0, sp, #32
   1c5e8:	f7ff fc44 	bl	1be74 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1c5ec:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1c5f0:	462a      	mov	r2, r5
   1c5f2:	a918      	add	r1, sp, #96	; 0x60
   1c5f4:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1c5f6:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1c5fa:	f7ff fc3b 	bl	1be74 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1c5fe:	a928      	add	r1, sp, #160	; 0xa0
   1c600:	4648      	mov	r0, r9
   1c602:	f7ff fc37 	bl	1be74 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1c606:	4623      	mov	r3, r4
   1c608:	aa08      	add	r2, sp, #32
   1c60a:	a928      	add	r1, sp, #160	; 0xa0
   1c60c:	a818      	add	r0, sp, #96	; 0x60
   1c60e:	f7ff ff45 	bl	1c49c <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1c612:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1c616:	4623      	mov	r3, r4
   1c618:	aa08      	add	r2, sp, #32
   1c61a:	a928      	add	r1, sp, #160	; 0xa0
   1c61c:	a818      	add	r0, sp, #96	; 0x60
   1c61e:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1c620:	4623      	mov	r3, r4
   1c622:	aa08      	add	r2, sp, #32
   1c624:	4649      	mov	r1, r9
   1c626:	4640      	mov	r0, r8
   1c628:	f7ff ff38 	bl	1c49c <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1c62c:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1c630:	3d02      	subs	r5, #2
   1c632:	b22d      	sxth	r5, r5
   1c634:	2d00      	cmp	r5, #0
   1c636:	dc63      	bgt.n	1c700 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1c638:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1c63c:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1c63e:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1c642:	ab10      	add	r3, sp, #64	; 0x40
   1c644:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1c648:	43ed      	mvns	r5, r5
   1c64a:	ab20      	add	r3, sp, #128	; 0x80
   1c64c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1c650:	f005 0501 	and.w	r5, r5, #1
   1c654:	ab10      	add	r3, sp, #64	; 0x40
   1c656:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1c65a:	ab20      	add	r3, sp, #128	; 0x80
   1c65c:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1c660:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1c664:	462b      	mov	r3, r5
   1c666:	464a      	mov	r2, r9
   1c668:	4631      	mov	r1, r6
   1c66a:	4640      	mov	r0, r8
   1c66c:	f7ff fe00 	bl	1c270 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1c670:	4653      	mov	r3, sl
   1c672:	aa10      	add	r2, sp, #64	; 0x40
   1c674:	a918      	add	r1, sp, #96	; 0x60
   1c676:	a808      	add	r0, sp, #32
   1c678:	9700      	str	r7, [sp, #0]
   1c67a:	f7ff fc63 	bl	1bf44 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1c67e:	a908      	add	r1, sp, #32
   1c680:	4623      	mov	r3, r4
   1c682:	4632      	mov	r2, r6
   1c684:	4608      	mov	r0, r1
   1c686:	f7ff fd07 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1c68a:	a908      	add	r1, sp, #32
   1c68c:	9a04      	ldr	r2, [sp, #16]
   1c68e:	4623      	mov	r3, r4
   1c690:	4608      	mov	r0, r1
   1c692:	f7ff fd01 	bl	1c098 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1c696:	a908      	add	r1, sp, #32
   1c698:	463b      	mov	r3, r7
   1c69a:	4652      	mov	r2, sl
   1c69c:	4608      	mov	r0, r1
   1c69e:	f7ff fe75 	bl	1c38c <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1c6a2:	a908      	add	r1, sp, #32
   1c6a4:	9a02      	ldr	r2, [sp, #8]
   1c6a6:	4623      	mov	r3, r4
   1c6a8:	4608      	mov	r0, r1
   1c6aa:	f7ff fcf5 	bl	1c098 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1c6ae:	a908      	add	r1, sp, #32
   1c6b0:	4623      	mov	r3, r4
   1c6b2:	4642      	mov	r2, r8
   1c6b4:	4608      	mov	r0, r1
   1c6b6:	f7ff fcef 	bl	1c098 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1c6ba:	9400      	str	r4, [sp, #0]
   1c6bc:	4633      	mov	r3, r6
   1c6be:	4642      	mov	r2, r8
   1c6c0:	4629      	mov	r1, r5
   1c6c2:	4648      	mov	r0, r9
   1c6c4:	f7ff ff09 	bl	1c4da <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1c6c8:	4623      	mov	r3, r4
   1c6ca:	aa08      	add	r2, sp, #32
   1c6cc:	a920      	add	r1, sp, #128	; 0x80
   1c6ce:	a810      	add	r0, sp, #64	; 0x40
   1c6d0:	f7ff fee4 	bl	1c49c <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1c6d4:	9803      	ldr	r0, [sp, #12]
   1c6d6:	463a      	mov	r2, r7
   1c6d8:	a910      	add	r1, sp, #64	; 0x40
   1c6da:	f7ff fbcb 	bl	1be74 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1c6de:	9b03      	ldr	r3, [sp, #12]
   1c6e0:	9c05      	ldr	r4, [sp, #20]
   1c6e2:	4423      	add	r3, r4
   1c6e4:	a920      	add	r1, sp, #128	; 0x80
   1c6e6:	4618      	mov	r0, r3
   1c6e8:	f7ff fbc4 	bl	1be74 <uECC_vli_set>
}
   1c6ec:	b031      	add	sp, #196	; 0xc4
   1c6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1c6f2:	4629      	mov	r1, r5
   1c6f4:	a808      	add	r0, sp, #32
   1c6f6:	f7ff fb78 	bl	1bdea <uECC_vli_clear>
		z[0] = 1;
   1c6fa:	2301      	movs	r3, #1
   1c6fc:	9308      	str	r3, [sp, #32]
   1c6fe:	e775      	b.n	1c5ec <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1c700:	4629      	mov	r1, r5
   1c702:	4650      	mov	r0, sl
   1c704:	f7ff fb8b 	bl	1be1e <uECC_vli_testBit>
   1c708:	fab0 f680 	clz	r6, r0
   1c70c:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1c70e:	f1c6 0101 	rsb	r1, r6, #1
   1c712:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1c716:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1c71a:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1c71e:	4633      	mov	r3, r6
   1c720:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1c724:	465a      	mov	r2, fp
   1c726:	9400      	str	r4, [sp, #0]
   1c728:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1c72c:	f7ff fda0 	bl	1c270 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1c730:	9907      	ldr	r1, [sp, #28]
   1c732:	9806      	ldr	r0, [sp, #24]
   1c734:	9400      	str	r4, [sp, #0]
   1c736:	460b      	mov	r3, r1
   1c738:	4602      	mov	r2, r0
   1c73a:	4631      	mov	r1, r6
   1c73c:	4658      	mov	r0, fp
   1c73e:	f7ff fecc 	bl	1c4da <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1c742:	3d01      	subs	r5, #1
   1c744:	e775      	b.n	1c632 <EccPoint_mult+0x8a>

0001c746 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1c746:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1c74a:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1c74e:	f119 081f 	adds.w	r8, r9, #31
{
   1c752:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1c754:	bf48      	it	mi
   1c756:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1c75a:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1c75c:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1c760:	3524      	adds	r5, #36	; 0x24
   1c762:	4601      	mov	r1, r0
{
   1c764:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1c766:	4643      	mov	r3, r8
   1c768:	462a      	mov	r2, r5
   1c76a:	4630      	mov	r0, r6
   1c76c:	f7ff fa84 	bl	1bc78 <uECC_vli_add>
   1c770:	4604      	mov	r4, r0
   1c772:	b990      	cbnz	r0, 1c79a <regularize_k+0x54>
   1c774:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1c778:	da06      	bge.n	1c788 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1c77a:	4649      	mov	r1, r9
   1c77c:	4630      	mov	r0, r6
   1c77e:	f7ff fb4e 	bl	1be1e <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1c782:	1e04      	subs	r4, r0, #0
   1c784:	bf18      	it	ne
   1c786:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1c788:	4643      	mov	r3, r8
   1c78a:	462a      	mov	r2, r5
   1c78c:	4631      	mov	r1, r6
   1c78e:	4638      	mov	r0, r7
   1c790:	f7ff fa72 	bl	1bc78 <uECC_vli_add>

	return carry;
}
   1c794:	4620      	mov	r0, r4
   1c796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1c79a:	2401      	movs	r4, #1
   1c79c:	e7f4      	b.n	1c788 <regularize_k+0x42>

0001c79e <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1c79e:	b530      	push	{r4, r5, lr}
   1c7a0:	4614      	mov	r4, r2
   1c7a2:	b095      	sub	sp, #84	; 0x54
   1c7a4:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1c7a6:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1c7a8:	4623      	mov	r3, r4
{
   1c7aa:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1c7ac:	a904      	add	r1, sp, #16
   1c7ae:	9102      	str	r1, [sp, #8]
   1c7b0:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1c7b2:	f7ff ffc8 	bl	1c746 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1c7b6:	fab0 f380 	clz	r3, r0
   1c7ba:	095b      	lsrs	r3, r3, #5
   1c7bc:	aa14      	add	r2, sp, #80	; 0x50
   1c7be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1c7c2:	8863      	ldrh	r3, [r4, #2]
   1c7c4:	9401      	str	r4, [sp, #4]
   1c7c6:	3301      	adds	r3, #1
   1c7c8:	b21b      	sxth	r3, r3
   1c7ca:	9300      	str	r3, [sp, #0]
   1c7cc:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1c7d0:	2300      	movs	r3, #0
   1c7d2:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1c7d6:	4628      	mov	r0, r5
   1c7d8:	f7ff fee6 	bl	1c5a8 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1c7dc:	4621      	mov	r1, r4
   1c7de:	4628      	mov	r0, r5
   1c7e0:	f7ff fe57 	bl	1c492 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1c7e4:	fab0 f080 	clz	r0, r0
   1c7e8:	0940      	lsrs	r0, r0, #5
   1c7ea:	b015      	add	sp, #84	; 0x54
   1c7ec:	bd30      	pop	{r4, r5, pc}

0001c7ee <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1c7ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1c7f0:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1c7f2:	1e4f      	subs	r7, r1, #1
   1c7f4:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1c7f6:	428c      	cmp	r4, r1
   1c7f8:	f105 0501 	add.w	r5, r5, #1
   1c7fc:	db00      	blt.n	1c800 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1c7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1c800:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1c802:	f023 0603 	bic.w	r6, r3, #3
   1c806:	f003 0303 	and.w	r3, r3, #3
   1c80a:	5996      	ldr	r6, [r2, r6]
   1c80c:	00db      	lsls	r3, r3, #3
   1c80e:	fa26 f303 	lsr.w	r3, r6, r3
   1c812:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1c814:	e7ee      	b.n	1c7f4 <uECC_vli_nativeToBytes+0x6>

0001c816 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1c816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c818:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1c81a:	1cd1      	adds	r1, r2, #3
   1c81c:	bf48      	it	mi
   1c81e:	1d91      	addmi	r1, r2, #6
   1c820:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1c824:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1c826:	f7ff fae0 	bl	1bdea <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1c82a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1c82c:	1e67      	subs	r7, r4, #1
   1c82e:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1c830:	42a2      	cmp	r2, r4
   1c832:	f105 0501 	add.w	r5, r5, #1
   1c836:	db00      	blt.n	1c83a <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1c838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1c83a:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1c83c:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1c840:	5cb2      	ldrb	r2, [r6, r2]
   1c842:	f003 0303 	and.w	r3, r3, #3
   1c846:	00db      	lsls	r3, r3, #3
   1c848:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1c84c:	5842      	ldr	r2, [r0, r1]
   1c84e:	431a      	orrs	r2, r3
   1c850:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1c852:	e7ec      	b.n	1c82e <uECC_vli_bytesToNative+0x18>

0001c854 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1c854:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c856:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1c858:	f991 6000 	ldrsb.w	r6, [r1]
{
   1c85c:	4605      	mov	r5, r0
   1c85e:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1c860:	f7ff fe17 	bl	1c492 <EccPoint_isZero>
   1c864:	bb28      	cbnz	r0, 1c8b2 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1c866:	1d27      	adds	r7, r4, #4
   1c868:	4632      	mov	r2, r6
   1c86a:	4629      	mov	r1, r5
   1c86c:	4638      	mov	r0, r7
   1c86e:	f7ff fb0d 	bl	1be8c <uECC_vli_cmp_unsafe>
   1c872:	2801      	cmp	r0, #1
   1c874:	d120      	bne.n	1c8b8 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1c876:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1c87a:	4632      	mov	r2, r6
   1c87c:	4638      	mov	r0, r7
   1c87e:	f7ff fb05 	bl	1be8c <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1c882:	2801      	cmp	r0, #1
   1c884:	d118      	bne.n	1c8b8 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1c886:	4622      	mov	r2, r4
   1c888:	4668      	mov	r0, sp
   1c88a:	f7ff fc15 	bl	1c0b8 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1c88e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1c892:	4622      	mov	r2, r4
   1c894:	4629      	mov	r1, r5
   1c896:	a808      	add	r0, sp, #32
   1c898:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1c89a:	4632      	mov	r2, r6
   1c89c:	a908      	add	r1, sp, #32
   1c89e:	4668      	mov	r0, sp
   1c8a0:	f7ff fb0b 	bl	1beba <uECC_vli_equal>
   1c8a4:	2800      	cmp	r0, #0
		return -3;
   1c8a6:	bf0c      	ite	eq
   1c8a8:	2000      	moveq	r0, #0
   1c8aa:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1c8ae:	b011      	add	sp, #68	; 0x44
   1c8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1c8b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c8b6:	e7fa      	b.n	1c8ae <uECC_valid_point+0x5a>
		return -2;
   1c8b8:	f06f 0001 	mvn.w	r0, #1
   1c8bc:	e7f7      	b.n	1c8ae <uECC_valid_point+0x5a>

0001c8be <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1c8be:	b570      	push	{r4, r5, r6, lr}
   1c8c0:	460c      	mov	r4, r1
   1c8c2:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1c8c4:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1c8c6:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1c8ca:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1c8cc:	4601      	mov	r1, r0
   1c8ce:	4668      	mov	r0, sp
   1c8d0:	f7ff ffa1 	bl	1c816 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1c8d4:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1c8d8:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1c8dc:	18a9      	adds	r1, r5, r2
   1c8de:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1c8e2:	f7ff ff98 	bl	1c816 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1c8e6:	2210      	movs	r2, #16
   1c8e8:	4631      	mov	r1, r6
   1c8ea:	4668      	mov	r0, sp
   1c8ec:	f7ff face 	bl	1be8c <uECC_vli_cmp_unsafe>
   1c8f0:	b128      	cbz	r0, 1c8fe <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1c8f2:	4621      	mov	r1, r4
   1c8f4:	4668      	mov	r0, sp
   1c8f6:	f7ff ffad 	bl	1c854 <uECC_valid_point>
}
   1c8fa:	b010      	add	sp, #64	; 0x40
   1c8fc:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1c8fe:	f06f 0003 	mvn.w	r0, #3
   1c902:	e7fa      	b.n	1c8fa <uECC_valid_public_key+0x3c>

0001c904 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1c904:	78cb      	ldrb	r3, [r1, #3]
   1c906:	7802      	ldrb	r2, [r0, #0]
   1c908:	4053      	eors	r3, r2
   1c90a:	7003      	strb	r3, [r0, #0]
   1c90c:	884b      	ldrh	r3, [r1, #2]
   1c90e:	7842      	ldrb	r2, [r0, #1]
   1c910:	4053      	eors	r3, r2
   1c912:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1c914:	680a      	ldr	r2, [r1, #0]
   1c916:	7883      	ldrb	r3, [r0, #2]
   1c918:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c91c:	7083      	strb	r3, [r0, #2]
   1c91e:	680a      	ldr	r2, [r1, #0]
   1c920:	78c3      	ldrb	r3, [r0, #3]
   1c922:	4053      	eors	r3, r2
   1c924:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1c926:	79cb      	ldrb	r3, [r1, #7]
   1c928:	7902      	ldrb	r2, [r0, #4]
   1c92a:	4053      	eors	r3, r2
   1c92c:	7103      	strb	r3, [r0, #4]
   1c92e:	88cb      	ldrh	r3, [r1, #6]
   1c930:	7942      	ldrb	r2, [r0, #5]
   1c932:	4053      	eors	r3, r2
   1c934:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1c936:	684a      	ldr	r2, [r1, #4]
   1c938:	7983      	ldrb	r3, [r0, #6]
   1c93a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c93e:	7183      	strb	r3, [r0, #6]
   1c940:	684a      	ldr	r2, [r1, #4]
   1c942:	79c3      	ldrb	r3, [r0, #7]
   1c944:	4053      	eors	r3, r2
   1c946:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1c948:	7acb      	ldrb	r3, [r1, #11]
   1c94a:	7a02      	ldrb	r2, [r0, #8]
   1c94c:	4053      	eors	r3, r2
   1c94e:	7203      	strb	r3, [r0, #8]
   1c950:	7a42      	ldrb	r2, [r0, #9]
   1c952:	894b      	ldrh	r3, [r1, #10]
   1c954:	4053      	eors	r3, r2
   1c956:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1c958:	688a      	ldr	r2, [r1, #8]
   1c95a:	7a83      	ldrb	r3, [r0, #10]
   1c95c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c960:	7283      	strb	r3, [r0, #10]
   1c962:	688a      	ldr	r2, [r1, #8]
   1c964:	7ac3      	ldrb	r3, [r0, #11]
   1c966:	4053      	eors	r3, r2
   1c968:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1c96a:	7bcb      	ldrb	r3, [r1, #15]
   1c96c:	7b02      	ldrb	r2, [r0, #12]
   1c96e:	4053      	eors	r3, r2
   1c970:	7303      	strb	r3, [r0, #12]
   1c972:	89cb      	ldrh	r3, [r1, #14]
   1c974:	7b42      	ldrb	r2, [r0, #13]
   1c976:	4053      	eors	r3, r2
   1c978:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1c97a:	68ca      	ldr	r2, [r1, #12]
   1c97c:	7b83      	ldrb	r3, [r0, #14]
   1c97e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c982:	7383      	strb	r3, [r0, #14]
   1c984:	68ca      	ldr	r2, [r1, #12]
   1c986:	7bc3      	ldrb	r3, [r0, #15]
   1c988:	4053      	eors	r3, r2
   1c98a:	73c3      	strb	r3, [r0, #15]
}
   1c98c:	4770      	bx	lr

0001c98e <shift_rows>:
{
   1c98e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1c990:	7802      	ldrb	r2, [r0, #0]
   1c992:	f88d 2000 	strb.w	r2, [sp]
   1c996:	7942      	ldrb	r2, [r0, #5]
   1c998:	f88d 2001 	strb.w	r2, [sp, #1]
   1c99c:	7a82      	ldrb	r2, [r0, #10]
   1c99e:	f88d 2002 	strb.w	r2, [sp, #2]
   1c9a2:	7bc2      	ldrb	r2, [r0, #15]
   1c9a4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1c9a8:	7902      	ldrb	r2, [r0, #4]
   1c9aa:	f88d 2004 	strb.w	r2, [sp, #4]
   1c9ae:	7a42      	ldrb	r2, [r0, #9]
   1c9b0:	f88d 2005 	strb.w	r2, [sp, #5]
   1c9b4:	7b82      	ldrb	r2, [r0, #14]
   1c9b6:	f88d 2006 	strb.w	r2, [sp, #6]
   1c9ba:	78c2      	ldrb	r2, [r0, #3]
   1c9bc:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1c9c0:	7a02      	ldrb	r2, [r0, #8]
   1c9c2:	f88d 2008 	strb.w	r2, [sp, #8]
   1c9c6:	7b42      	ldrb	r2, [r0, #13]
   1c9c8:	f88d 2009 	strb.w	r2, [sp, #9]
   1c9cc:	7882      	ldrb	r2, [r0, #2]
   1c9ce:	f88d 200a 	strb.w	r2, [sp, #10]
   1c9d2:	79c2      	ldrb	r2, [r0, #7]
   1c9d4:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1c9d8:	7b02      	ldrb	r2, [r0, #12]
   1c9da:	f88d 200c 	strb.w	r2, [sp, #12]
   1c9de:	7842      	ldrb	r2, [r0, #1]
   1c9e0:	7ac3      	ldrb	r3, [r0, #11]
   1c9e2:	f88d 200d 	strb.w	r2, [sp, #13]
   1c9e6:	7982      	ldrb	r2, [r0, #6]
   1c9e8:	f88d 200e 	strb.w	r2, [sp, #14]
   1c9ec:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1c9f0:	2310      	movs	r3, #16
   1c9f2:	466a      	mov	r2, sp
   1c9f4:	4619      	mov	r1, r3
   1c9f6:	f7ff f87b 	bl	1baf0 <_copy>
}
   1c9fa:	b005      	add	sp, #20
   1c9fc:	f85d fb04 	ldr.w	pc, [sp], #4

0001ca00 <mult_row_column>:
{
   1ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca02:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1ca04:	7808      	ldrb	r0, [r1, #0]
{
   1ca06:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1ca08:	f7ff f881 	bl	1bb0e <_double_byte>
   1ca0c:	4605      	mov	r5, r0
   1ca0e:	7860      	ldrb	r0, [r4, #1]
   1ca10:	f7ff f87d 	bl	1bb0e <_double_byte>
   1ca14:	78a2      	ldrb	r2, [r4, #2]
   1ca16:	7863      	ldrb	r3, [r4, #1]
   1ca18:	4053      	eors	r3, r2
   1ca1a:	78e2      	ldrb	r2, [r4, #3]
   1ca1c:	4053      	eors	r3, r2
   1ca1e:	405d      	eors	r5, r3
   1ca20:	4045      	eors	r5, r0
   1ca22:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1ca24:	7860      	ldrb	r0, [r4, #1]
   1ca26:	7827      	ldrb	r7, [r4, #0]
   1ca28:	f7ff f871 	bl	1bb0e <_double_byte>
   1ca2c:	4605      	mov	r5, r0
   1ca2e:	78a0      	ldrb	r0, [r4, #2]
   1ca30:	f7ff f86d 	bl	1bb0e <_double_byte>
   1ca34:	78a3      	ldrb	r3, [r4, #2]
   1ca36:	405f      	eors	r7, r3
   1ca38:	78e3      	ldrb	r3, [r4, #3]
   1ca3a:	405f      	eors	r7, r3
   1ca3c:	407d      	eors	r5, r7
   1ca3e:	4045      	eors	r5, r0
   1ca40:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1ca42:	78a0      	ldrb	r0, [r4, #2]
   1ca44:	7865      	ldrb	r5, [r4, #1]
   1ca46:	7827      	ldrb	r7, [r4, #0]
   1ca48:	f7ff f861 	bl	1bb0e <_double_byte>
   1ca4c:	406f      	eors	r7, r5
   1ca4e:	4605      	mov	r5, r0
   1ca50:	78e0      	ldrb	r0, [r4, #3]
   1ca52:	f7ff f85c 	bl	1bb0e <_double_byte>
   1ca56:	78e3      	ldrb	r3, [r4, #3]
   1ca58:	405f      	eors	r7, r3
   1ca5a:	407d      	eors	r5, r7
   1ca5c:	4045      	eors	r5, r0
   1ca5e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1ca60:	7820      	ldrb	r0, [r4, #0]
   1ca62:	f7ff f854 	bl	1bb0e <_double_byte>
   1ca66:	7863      	ldrb	r3, [r4, #1]
   1ca68:	7825      	ldrb	r5, [r4, #0]
   1ca6a:	405d      	eors	r5, r3
   1ca6c:	78a3      	ldrb	r3, [r4, #2]
   1ca6e:	405d      	eors	r5, r3
   1ca70:	4045      	eors	r5, r0
   1ca72:	78e0      	ldrb	r0, [r4, #3]
   1ca74:	f7ff f84b 	bl	1bb0e <_double_byte>
   1ca78:	b2ed      	uxtb	r5, r5
   1ca7a:	4045      	eors	r5, r0
   1ca7c:	70f5      	strb	r5, [r6, #3]
}
   1ca7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ca80 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1ca80:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1ca82:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1ca84:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1ca86:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1ca8a:	2b00      	cmp	r3, #0
   1ca8c:	bfb4      	ite	lt
   1ca8e:	2387      	movlt	r3, #135	; 0x87
   1ca90:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1ca92:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1ca96:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1ca9a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1ca9c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1caa0:	d002      	beq.n	1caa8 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1caa2:	7813      	ldrb	r3, [r2, #0]
   1caa4:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1caa6:	e7f4      	b.n	1ca92 <gf_double+0x12>
	}
}
   1caa8:	bd10      	pop	{r4, pc}

0001caaa <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1caaa:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1caac:	b120      	cbz	r0, 1cab8 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1caae:	2258      	movs	r2, #88	; 0x58
   1cab0:	2100      	movs	r1, #0
   1cab2:	f7ff f82a 	bl	1bb0a <_set>
   1cab6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1cab8:	bd08      	pop	{r3, pc}

0001caba <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1caba:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1cabc:	4604      	mov	r4, r0
   1cabe:	b188      	cbz	r0, 1cae4 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1cac0:	2210      	movs	r2, #16
   1cac2:	2100      	movs	r1, #0
   1cac4:	f7ff f821 	bl	1bb0a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1cac8:	2210      	movs	r2, #16
   1caca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1cace:	2100      	movs	r1, #0
   1cad0:	f7ff f81b 	bl	1bb0a <_set>
	s->leftover_offset = 0;
   1cad4:	2300      	movs	r3, #0
   1cad6:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1cad8:	2200      	movs	r2, #0
   1cada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1cade:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1cae2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1cae4:	bd10      	pop	{r4, pc}

0001cae6 <tc_cmac_setup>:
{
   1cae6:	b570      	push	{r4, r5, r6, lr}
   1cae8:	460d      	mov	r5, r1
   1caea:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1caec:	4604      	mov	r4, r0
   1caee:	b310      	cbz	r0, 1cb36 <tc_cmac_setup+0x50>
   1caf0:	b311      	cbz	r1, 1cb38 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1caf2:	2258      	movs	r2, #88	; 0x58
   1caf4:	2100      	movs	r1, #0
   1caf6:	f7ff f808 	bl	1bb0a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1cafa:	4629      	mov	r1, r5
	s->sched = sched;
   1cafc:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1cafe:	4630      	mov	r0, r6
   1cb00:	f7f6 fd14 	bl	1352c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1cb04:	2210      	movs	r2, #16
   1cb06:	2100      	movs	r1, #0
   1cb08:	4620      	mov	r0, r4
   1cb0a:	f7fe fffe 	bl	1bb0a <_set>
	gf_double (s->K1, s->iv);
   1cb0e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1cb12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1cb14:	4621      	mov	r1, r4
   1cb16:	4620      	mov	r0, r4
   1cb18:	f7f6 fd5a 	bl	135d0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1cb1c:	4621      	mov	r1, r4
   1cb1e:	4628      	mov	r0, r5
   1cb20:	f7ff ffae 	bl	1ca80 <gf_double>
	gf_double (s->K2, s->K1);
   1cb24:	4629      	mov	r1, r5
   1cb26:	f104 0020 	add.w	r0, r4, #32
   1cb2a:	f7ff ffa9 	bl	1ca80 <gf_double>
	tc_cmac_init(s);
   1cb2e:	4620      	mov	r0, r4
   1cb30:	f7ff ffc3 	bl	1caba <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1cb34:	2001      	movs	r0, #1
}
   1cb36:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1cb38:	4608      	mov	r0, r1
   1cb3a:	e7fc      	b.n	1cb36 <tc_cmac_setup+0x50>

0001cb3c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1cb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb40:	460d      	mov	r5, r1
   1cb42:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1cb44:	4604      	mov	r4, r0
   1cb46:	2800      	cmp	r0, #0
   1cb48:	d062      	beq.n	1cc10 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1cb4a:	b912      	cbnz	r2, 1cb52 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1cb4c:	2001      	movs	r0, #1
}
   1cb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1cb52:	2900      	cmp	r1, #0
   1cb54:	d05c      	beq.n	1cc10 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1cb56:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1cb5a:	ea50 0301 	orrs.w	r3, r0, r1
   1cb5e:	d057      	beq.n	1cc10 <tc_cmac_update+0xd4>
	s->countdown--;
   1cb60:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1cb64:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1cb68:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1cb6c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1cb70:	f1b8 0f00 	cmp.w	r8, #0
   1cb74:	d02a      	beq.n	1cbcc <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1cb76:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1cb7a:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1cb7e:	42be      	cmp	r6, r7
   1cb80:	4420      	add	r0, r4
   1cb82:	d208      	bcs.n	1cb96 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1cb84:	462a      	mov	r2, r5
   1cb86:	4633      	mov	r3, r6
   1cb88:	4631      	mov	r1, r6
   1cb8a:	f7fe ffb1 	bl	1baf0 <_copy>
			s->leftover_offset += data_length;
   1cb8e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1cb90:	4432      	add	r2, r6
   1cb92:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1cb94:	e7da      	b.n	1cb4c <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1cb96:	463b      	mov	r3, r7
   1cb98:	462a      	mov	r2, r5
   1cb9a:	4639      	mov	r1, r7
   1cb9c:	f7fe ffa8 	bl	1baf0 <_copy>
		data_length -= remaining_space;
   1cba0:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1cba2:	2300      	movs	r3, #0
   1cba4:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1cba6:	4446      	add	r6, r8
		data += remaining_space;
   1cba8:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cbaa:	1e63      	subs	r3, r4, #1
   1cbac:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1cbb0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1cbb4:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cbb8:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1cbba:	ea82 0200 	eor.w	r2, r2, r0
   1cbbe:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cbc0:	d1f6      	bne.n	1cbb0 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1cbc2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1cbc4:	4621      	mov	r1, r4
   1cbc6:	4620      	mov	r0, r4
   1cbc8:	f7f6 fd02 	bl	135d0 <tc_aes_encrypt>
   1cbcc:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1cbd0:	2e10      	cmp	r6, #16
   1cbd2:	d80a      	bhi.n	1cbea <tc_cmac_update+0xae>
	if (data_length > 0) {
   1cbd4:	2e00      	cmp	r6, #0
   1cbd6:	d0b9      	beq.n	1cb4c <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1cbd8:	4633      	mov	r3, r6
   1cbda:	462a      	mov	r2, r5
   1cbdc:	4631      	mov	r1, r6
   1cbde:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1cbe2:	f7fe ff85 	bl	1baf0 <_copy>
		s->leftover_offset = data_length;
   1cbe6:	6466      	str	r6, [r4, #68]	; 0x44
   1cbe8:	e7b0      	b.n	1cb4c <tc_cmac_update+0x10>
   1cbea:	1e63      	subs	r3, r4, #1
   1cbec:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1cbee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1cbf2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cbf6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1cbf8:	ea82 0200 	eor.w	r2, r2, r0
   1cbfc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cbfe:	d1f6      	bne.n	1cbee <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1cc00:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1cc02:	4621      	mov	r1, r4
   1cc04:	4620      	mov	r0, r4
   1cc06:	f7f6 fce3 	bl	135d0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1cc0a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1cc0c:	3e10      	subs	r6, #16
   1cc0e:	e7df      	b.n	1cbd0 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1cc10:	2000      	movs	r0, #0
   1cc12:	e79c      	b.n	1cb4e <tc_cmac_update+0x12>

0001cc14 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1cc14:	b570      	push	{r4, r5, r6, lr}
   1cc16:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1cc18:	4605      	mov	r5, r0
   1cc1a:	b1e8      	cbz	r0, 1cc58 <tc_cmac_final+0x44>
   1cc1c:	b369      	cbz	r1, 1cc7a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1cc1e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1cc20:	2a10      	cmp	r2, #16
   1cc22:	d11a      	bne.n	1cc5a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1cc24:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cc26:	1e63      	subs	r3, r4, #1
   1cc28:	3901      	subs	r1, #1
   1cc2a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1cc2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1cc32:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1cc36:	4072      	eors	r2, r6
   1cc38:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cc3c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1cc3e:	ea82 0206 	eor.w	r2, r2, r6
   1cc42:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cc44:	d1f3      	bne.n	1cc2e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1cc46:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1cc48:	4621      	mov	r1, r4
   1cc4a:	4628      	mov	r0, r5
   1cc4c:	f7f6 fcc0 	bl	135d0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1cc50:	4620      	mov	r0, r4
   1cc52:	f7ff ff2a 	bl	1caaa <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1cc56:	2001      	movs	r0, #1
}
   1cc58:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1cc5a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1cc5e:	2100      	movs	r1, #0
   1cc60:	f1c2 0210 	rsb	r2, r2, #16
   1cc64:	4420      	add	r0, r4
   1cc66:	f7fe ff50 	bl	1bb0a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1cc6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cc6c:	4423      	add	r3, r4
   1cc6e:	2280      	movs	r2, #128	; 0x80
   1cc70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1cc74:	f104 0120 	add.w	r1, r4, #32
   1cc78:	e7d5      	b.n	1cc26 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1cc7a:	4608      	mov	r0, r1
   1cc7c:	e7ec      	b.n	1cc58 <tc_cmac_final+0x44>

0001cc7e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1cc7e:	2100      	movs	r1, #0
   1cc80:	2001      	movs	r0, #1
   1cc82:	f000 b800 	b.w	1cc86 <z_arm_fatal_error>

0001cc86 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1cc86:	f002 bed8 	b.w	1fa3a <z_fatal_error>

0001cc8a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1cc8a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1cc8c:	6800      	ldr	r0, [r0, #0]
   1cc8e:	f002 bed4 	b.w	1fa3a <z_fatal_error>

0001cc92 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1cc92:	b508      	push	{r3, lr}
	handler();
   1cc94:	f7f6 fe24 	bl	138e0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1cc98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1cc9c:	f7f6 be66 	b.w	1396c <z_arm_exc_exit>

0001cca0 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1cca0:	3901      	subs	r1, #1
   1cca2:	4603      	mov	r3, r0
   1cca4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1cca8:	b90a      	cbnz	r2, 1ccae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1ccaa:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1ccac:	4770      	bx	lr
		*d = *s;
   1ccae:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1ccb2:	e7f7      	b.n	1cca4 <strcpy+0x4>

0001ccb4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1ccb4:	4603      	mov	r3, r0
	size_t n = 0;
   1ccb6:	2000      	movs	r0, #0

	while (*s != '\0') {
   1ccb8:	5c1a      	ldrb	r2, [r3, r0]
   1ccba:	b902      	cbnz	r2, 1ccbe <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1ccbc:	4770      	bx	lr
		n++;
   1ccbe:	3001      	adds	r0, #1
   1ccc0:	e7fa      	b.n	1ccb8 <strlen+0x4>

0001ccc2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1ccc2:	1e43      	subs	r3, r0, #1
   1ccc4:	3901      	subs	r1, #1
   1ccc6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ccca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1ccce:	4282      	cmp	r2, r0
   1ccd0:	d101      	bne.n	1ccd6 <strcmp+0x14>
   1ccd2:	2a00      	cmp	r2, #0
   1ccd4:	d1f7      	bne.n	1ccc6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1ccd6:	1a10      	subs	r0, r2, r0
   1ccd8:	4770      	bx	lr

0001ccda <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1ccda:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1ccdc:	b15a      	cbz	r2, 1ccf6 <memcmp+0x1c>
   1ccde:	3901      	subs	r1, #1
   1cce0:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1cce2:	f810 2b01 	ldrb.w	r2, [r0], #1
   1cce6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1ccea:	42a0      	cmp	r0, r4
   1ccec:	d001      	beq.n	1ccf2 <memcmp+0x18>
   1ccee:	429a      	cmp	r2, r3
   1ccf0:	d0f7      	beq.n	1cce2 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1ccf2:	1ad0      	subs	r0, r2, r3
}
   1ccf4:	bd10      	pop	{r4, pc}
		return 0;
   1ccf6:	4610      	mov	r0, r2
   1ccf8:	e7fc      	b.n	1ccf4 <memcmp+0x1a>

0001ccfa <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1ccfa:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1ccfc:	ea81 0400 	eor.w	r4, r1, r0
   1cd00:	07a5      	lsls	r5, r4, #30
   1cd02:	4603      	mov	r3, r0
   1cd04:	d00b      	beq.n	1cd1e <memcpy+0x24>
   1cd06:	3b01      	subs	r3, #1
   1cd08:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1cd0a:	4291      	cmp	r1, r2
   1cd0c:	d11b      	bne.n	1cd46 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1cd10:	2a00      	cmp	r2, #0
   1cd12:	d0fc      	beq.n	1cd0e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1cd14:	f811 4b01 	ldrb.w	r4, [r1], #1
   1cd18:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1cd1c:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1cd1e:	079c      	lsls	r4, r3, #30
   1cd20:	d1f6      	bne.n	1cd10 <memcpy+0x16>
   1cd22:	f022 0403 	bic.w	r4, r2, #3
   1cd26:	1f1d      	subs	r5, r3, #4
   1cd28:	0896      	lsrs	r6, r2, #2
   1cd2a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1cd2c:	42b9      	cmp	r1, r7
   1cd2e:	d105      	bne.n	1cd3c <memcpy+0x42>
   1cd30:	f06f 0503 	mvn.w	r5, #3
   1cd34:	fb05 2206 	mla	r2, r5, r6, r2
   1cd38:	4423      	add	r3, r4
   1cd3a:	e7e4      	b.n	1cd06 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1cd3c:	f851 cb04 	ldr.w	ip, [r1], #4
   1cd40:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1cd44:	e7f2      	b.n	1cd2c <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1cd46:	f811 4b01 	ldrb.w	r4, [r1], #1
   1cd4a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1cd4e:	e7dc      	b.n	1cd0a <memcpy+0x10>

0001cd50 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1cd50:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1cd52:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1cd54:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1cd56:	079c      	lsls	r4, r3, #30
   1cd58:	d111      	bne.n	1cd7e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1cd5a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1cd5e:	f022 0603 	bic.w	r6, r2, #3
   1cd62:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1cd66:	441e      	add	r6, r3
   1cd68:	0894      	lsrs	r4, r2, #2
   1cd6a:	42b3      	cmp	r3, r6
   1cd6c:	d10d      	bne.n	1cd8a <memset+0x3a>
   1cd6e:	f06f 0503 	mvn.w	r5, #3
   1cd72:	fb05 2204 	mla	r2, r5, r4, r2
   1cd76:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1cd78:	4293      	cmp	r3, r2
   1cd7a:	d109      	bne.n	1cd90 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1cd7c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1cd7e:	2a00      	cmp	r2, #0
   1cd80:	d0fc      	beq.n	1cd7c <memset+0x2c>
		*(d_byte++) = c_byte;
   1cd82:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1cd86:	3a01      	subs	r2, #1
   1cd88:	e7e5      	b.n	1cd56 <memset+0x6>
		*(d_word++) = c_word;
   1cd8a:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1cd8e:	e7ec      	b.n	1cd6a <memset+0x1a>
		*(d_byte++) = c_byte;
   1cd90:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1cd94:	e7f0      	b.n	1cd78 <memset+0x28>

0001cd96 <_stdout_hook_default>:
}
   1cd96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cd9a:	4770      	bx	lr

0001cd9c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1cd9c:	f7fc bfe4 	b.w	19d68 <SystemInit>

0001cda0 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1cda0:	b530      	push	{r4, r5, lr}
   1cda2:	b085      	sub	sp, #20
   1cda4:	4604      	mov	r4, r0
   1cda6:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1cda8:	4668      	mov	r0, sp
   1cdaa:	2203      	movs	r2, #3
   1cdac:	f7ff ffa5 	bl	1ccfa <memcpy>
	(void)memset(res + 3, 0, 13);
   1cdb0:	220d      	movs	r2, #13
   1cdb2:	2100      	movs	r1, #0
   1cdb4:	f10d 0003 	add.w	r0, sp, #3
   1cdb8:	f7ff ffca 	bl	1cd50 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1cdbc:	4620      	mov	r0, r4
   1cdbe:	466a      	mov	r2, sp
   1cdc0:	4669      	mov	r1, sp
   1cdc2:	f002 fdc8 	bl	1f956 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1cdc6:	4604      	mov	r4, r0
   1cdc8:	b920      	cbnz	r0, 1cdd4 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1cdca:	2203      	movs	r2, #3
   1cdcc:	4669      	mov	r1, sp
   1cdce:	4628      	mov	r0, r5
   1cdd0:	f7ff ff93 	bl	1ccfa <memcpy>

	return 0;
}
   1cdd4:	4620      	mov	r0, r4
   1cdd6:	b005      	add	sp, #20
   1cdd8:	bd30      	pop	{r4, r5, pc}

0001cdda <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1cdda:	b513      	push	{r0, r1, r4, lr}
   1cddc:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1cdde:	aa01      	add	r2, sp, #4
   1cde0:	3103      	adds	r1, #3
   1cde2:	f7ff ffdd 	bl	1cda0 <ah>
	if (err) {
   1cde6:	b948      	cbnz	r0, 1cdfc <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1cde8:	2203      	movs	r2, #3
   1cdea:	a901      	add	r1, sp, #4
   1cdec:	4620      	mov	r0, r4
   1cdee:	f7ff ff74 	bl	1ccda <memcmp>
   1cdf2:	fab0 f080 	clz	r0, r0
   1cdf6:	0940      	lsrs	r0, r0, #5
}
   1cdf8:	b002      	add	sp, #8
   1cdfa:	bd10      	pop	{r4, pc}
		return false;
   1cdfc:	2000      	movs	r0, #0
   1cdfe:	e7fb      	b.n	1cdf8 <bt_rpa_irk_matches+0x1e>

0001ce00 <send_cmd_status>:
{
   1ce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ce04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1ce08:	4606      	mov	r6, r0
   1ce0a:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ce0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ce10:	2100      	movs	r1, #0
   1ce12:	200f      	movs	r0, #15
   1ce14:	f7f8 fcd6 	bl	157c4 <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   1ce18:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ce1a:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ce1e:	4604      	mov	r4, r0
   1ce20:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ce22:	2102      	movs	r1, #2
   1ce24:	4640      	mov	r0, r8
   1ce26:	f002 fc3f 	bl	1f6a8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ce2a:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1ce2c:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ce2e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1ce30:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1ce32:	4640      	mov	r0, r8
   1ce34:	f002 fc38 	bl	1f6a8 <net_buf_simple_add>
	evt->ncmd = 1U;
   1ce38:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1ce3a:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1ce3c:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   1ce3e:	4620      	mov	r0, r4
}
   1ce40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   1ce44:	f7f8 b894 	b.w	14f70 <bt_recv>

0001ce48 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1ce48:	f101 0320 	add.w	r3, r1, #32
   1ce4c:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1ce4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1ce52:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1ce56:	428b      	cmp	r3, r1
   1ce58:	d1f9      	bne.n	1ce4e <sys_memcpy_swap.constprop.0+0x6>
}
   1ce5a:	4770      	bx	lr

0001ce5c <default_CSPRNG>:
{
   1ce5c:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1ce5e:	f7fc feaf 	bl	19bc0 <bt_rand>
}
   1ce62:	fab0 f080 	clz	r0, r0
   1ce66:	0940      	lsrs	r0, r0, #5
   1ce68:	bd08      	pop	{r3, pc}

0001ce6a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1ce6a:	b510      	push	{r4, lr}
   1ce6c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1ce6e:	7801      	ldrb	r1, [r0, #0]
   1ce70:	7822      	ldrb	r2, [r4, #0]
   1ce72:	428a      	cmp	r2, r1
{
   1ce74:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1ce76:	d00e      	beq.n	1ce96 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1ce78:	4669      	mov	r1, sp
   1ce7a:	f7f7 f91b 	bl	140b4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1ce7e:	a905      	add	r1, sp, #20
   1ce80:	4620      	mov	r0, r4
   1ce82:	f7f7 f917 	bl	140b4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1ce86:	2210      	movs	r2, #16
   1ce88:	f10d 0115 	add.w	r1, sp, #21
   1ce8c:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1ce90:	f7ff ff23 	bl	1ccda <memcmp>
   1ce94:	e007      	b.n	1cea6 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1ce96:	2a01      	cmp	r2, #1
   1ce98:	d007      	beq.n	1ceaa <bt_uuid_cmp+0x40>
   1ce9a:	2a02      	cmp	r2, #2
   1ce9c:	d008      	beq.n	1ceb0 <bt_uuid_cmp+0x46>
   1ce9e:	b95a      	cbnz	r2, 1ceb8 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1cea0:	8840      	ldrh	r0, [r0, #2]
   1cea2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1cea4:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1cea6:	b00a      	add	sp, #40	; 0x28
   1cea8:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1ceaa:	6840      	ldr	r0, [r0, #4]
   1ceac:	6863      	ldr	r3, [r4, #4]
   1ceae:	e7f9      	b.n	1cea4 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1ceb0:	2210      	movs	r2, #16
   1ceb2:	1c61      	adds	r1, r4, #1
   1ceb4:	3001      	adds	r0, #1
   1ceb6:	e7eb      	b.n	1ce90 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1ceb8:	f06f 0015 	mvn.w	r0, #21
   1cebc:	e7f3      	b.n	1cea6 <bt_uuid_cmp+0x3c>

0001cebe <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1cebe:	2a04      	cmp	r2, #4
{
   1cec0:	b538      	push	{r3, r4, r5, lr}
   1cec2:	460c      	mov	r4, r1
	switch (data_len) {
   1cec4:	d00d      	beq.n	1cee2 <bt_uuid_create+0x24>
   1cec6:	2a10      	cmp	r2, #16
   1cec8:	d019      	beq.n	1cefe <bt_uuid_create+0x40>
   1ceca:	2a02      	cmp	r2, #2
   1cecc:	f04f 0300 	mov.w	r3, #0
   1ced0:	d11b      	bne.n	1cf0a <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1ced2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1ced4:	784a      	ldrb	r2, [r1, #1]
   1ced6:	780b      	ldrb	r3, [r1, #0]
   1ced8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1cedc:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1cede:	2001      	movs	r0, #1
}
   1cee0:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1cee2:	2301      	movs	r3, #1
   1cee4:	7003      	strb	r3, [r0, #0]
   1cee6:	78a2      	ldrb	r2, [r4, #2]
   1cee8:	78c9      	ldrb	r1, [r1, #3]
   1ceea:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1ceec:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1cef0:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1cef2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1cef6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1cefa:	6042      	str	r2, [r0, #4]
		break;
   1cefc:	e7ef      	b.n	1cede <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1cefe:	2302      	movs	r3, #2
   1cf00:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1cf04:	f7ff fef9 	bl	1ccfa <memcpy>
		break;
   1cf08:	e7e9      	b.n	1cede <bt_uuid_create+0x20>
	switch (data_len) {
   1cf0a:	4618      	mov	r0, r3
   1cf0c:	e7e8      	b.n	1cee0 <bt_uuid_create+0x22>

0001cf0e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1cf0e:	280f      	cmp	r0, #15
   1cf10:	d806      	bhi.n	1cf20 <bt_hci_evt_get_flags+0x12>
   1cf12:	280d      	cmp	r0, #13
   1cf14:	d80b      	bhi.n	1cf2e <bt_hci_evt_get_flags+0x20>
   1cf16:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1cf18:	bf14      	ite	ne
   1cf1a:	2002      	movne	r0, #2
   1cf1c:	2003      	moveq	r0, #3
   1cf1e:	4770      	bx	lr
	switch (evt) {
   1cf20:	2813      	cmp	r0, #19
   1cf22:	d004      	beq.n	1cf2e <bt_hci_evt_get_flags+0x20>
   1cf24:	281a      	cmp	r0, #26
   1cf26:	bf14      	ite	ne
   1cf28:	2002      	movne	r0, #2
   1cf2a:	2001      	moveq	r0, #1
   1cf2c:	4770      	bx	lr
   1cf2e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1cf30:	4770      	bx	lr

0001cf32 <handle_event>:
{
   1cf32:	b410      	push	{r4}
   1cf34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1cf38:	4604      	mov	r4, r0
   1cf3a:	4608      	mov	r0, r1
		if (handler->event != event) {
   1cf3c:	7811      	ldrb	r1, [r2, #0]
   1cf3e:	42a1      	cmp	r1, r4
   1cf40:	d004      	beq.n	1cf4c <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1cf42:	3208      	adds	r2, #8
   1cf44:	429a      	cmp	r2, r3
   1cf46:	d1f9      	bne.n	1cf3c <handle_event+0xa>
}
   1cf48:	bc10      	pop	{r4}
   1cf4a:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1cf4c:	8981      	ldrh	r1, [r0, #12]
   1cf4e:	7853      	ldrb	r3, [r2, #1]
   1cf50:	4299      	cmp	r1, r3
   1cf52:	d3f9      	bcc.n	1cf48 <handle_event+0x16>
		handler->handler(buf);
   1cf54:	6853      	ldr	r3, [r2, #4]
}
   1cf56:	bc10      	pop	{r4}
		handler->handler(buf);
   1cf58:	4718      	bx	r3

0001cf5a <hci_data_buf_overflow>:
}
   1cf5a:	4770      	bx	lr

0001cf5c <get_adv_channel_map>:
{
   1cf5c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1cf5e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1cf62:	bf0c      	ite	eq
   1cf64:	2007      	moveq	r0, #7
   1cf66:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1cf68:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1cf6a:	bf48      	it	mi
   1cf6c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1cf70:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1cf72:	bf48      	it	mi
   1cf74:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1cf78:	4770      	bx	lr

0001cf7a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf7a:	f3bf 8f5b 	dmb	ish
   1cf7e:	6800      	ldr	r0, [r0, #0]
   1cf80:	f3bf 8f5b 	dmb	ish
}
   1cf84:	4770      	bx	lr

0001cf86 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1cf86:	2207      	movs	r2, #7
   1cf88:	f7ff beb7 	b.w	1ccfa <memcpy>

0001cf8c <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1cf8c:	2207      	movs	r2, #7
   1cf8e:	f7ff bea4 	b.w	1ccda <memcmp>

0001cf92 <atomic_and>:
{
   1cf92:	4603      	mov	r3, r0
}
   1cf94:	f3bf 8f5b 	dmb	ish
   1cf98:	e853 0f00 	ldrex	r0, [r3]
   1cf9c:	ea00 0201 	and.w	r2, r0, r1
   1cfa0:	e843 2c00 	strex	ip, r2, [r3]
   1cfa4:	f1bc 0f00 	cmp.w	ip, #0
   1cfa8:	d1f6      	bne.n	1cf98 <atomic_and+0x6>
   1cfaa:	f3bf 8f5b 	dmb	ish
   1cfae:	4770      	bx	lr

0001cfb0 <atomic_or>:
{
   1cfb0:	4603      	mov	r3, r0
}
   1cfb2:	f3bf 8f5b 	dmb	ish
   1cfb6:	e853 0f00 	ldrex	r0, [r3]
   1cfba:	ea40 0201 	orr.w	r2, r0, r1
   1cfbe:	e843 2c00 	strex	ip, r2, [r3]
   1cfc2:	f1bc 0f00 	cmp.w	ip, #0
   1cfc6:	d1f6      	bne.n	1cfb6 <atomic_or+0x6>
   1cfc8:	f3bf 8f5b 	dmb	ish
   1cfcc:	4770      	bx	lr

0001cfce <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1cfce:	460b      	mov	r3, r1
   1cfd0:	b410      	push	{r4}
   1cfd2:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1cfd4:	f001 041f 	and.w	r4, r1, #31
   1cfd8:	2101      	movs	r1, #1
   1cfda:	40a1      	lsls	r1, r4

	if (val) {
   1cfdc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1cfe0:	b112      	cbz	r2, 1cfe8 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1cfe2:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1cfe4:	f7ff bfe4 	b.w	1cfb0 <atomic_or>
}
   1cfe8:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1cfea:	43c9      	mvns	r1, r1
   1cfec:	f7ff bfd1 	b.w	1cf92 <atomic_and>

0001cff0 <hci_hardware_error>:
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   1cff0:	2101      	movs	r1, #1
   1cff2:	3008      	adds	r0, #8
   1cff4:	f002 bb7f 	b.w	1f6f6 <net_buf_simple_pull_mem>

0001cff8 <le_data_len_change>:
{
   1cff8:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1cffa:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1cffc:	8818      	ldrh	r0, [r3, #0]
   1cffe:	f7f8 fe8f 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   1d002:	b118      	cbz	r0, 1d00c <le_data_len_change+0x14>
}
   1d004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1d008:	f000 bc73 	b.w	1d8f2 <bt_conn_unref>
}
   1d00c:	bd08      	pop	{r3, pc}

0001d00e <hci_disconn_complete_prio>:
{
   1d00e:	b510      	push	{r4, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1d010:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1d012:	781a      	ldrb	r2, [r3, #0]
   1d014:	b96a      	cbnz	r2, 1d032 <hci_disconn_complete_prio+0x24>
	conn = bt_conn_lookup_handle(handle);
   1d016:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1d01a:	f7f8 fe81 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   1d01e:	4604      	mov	r4, r0
   1d020:	b138      	cbz	r0, 1d032 <hci_disconn_complete_prio+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1d022:	2101      	movs	r1, #1
   1d024:	f7f8 feca 	bl	15dbc <bt_conn_set_state>
	bt_conn_unref(conn);
   1d028:	4620      	mov	r0, r4
}
   1d02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1d02e:	f000 bc60 	b.w	1d8f2 <bt_conn_unref>
}
   1d032:	bd10      	pop	{r4, pc}

0001d034 <hci_disconn_complete>:
{
   1d034:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1d036:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1d038:	7835      	ldrb	r5, [r6, #0]
   1d03a:	b985      	cbnz	r5, 1d05e <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   1d03c:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1d040:	f7f8 fe6e 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   1d044:	4604      	mov	r4, r0
   1d046:	b150      	cbz	r0, 1d05e <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   1d048:	78f3      	ldrb	r3, [r6, #3]
   1d04a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1d04c:	4629      	mov	r1, r5
   1d04e:	f7f8 feb5 	bl	15dbc <bt_conn_set_state>
	conn->handle = 0U;
   1d052:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1d054:	4620      	mov	r0, r4
}
   1d056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1d05a:	f000 bc4a 	b.w	1d8f2 <bt_conn_unref>
}
   1d05e:	bd70      	pop	{r4, r5, r6, pc}

0001d060 <le_conn_update_complete>:
{
   1d060:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1d062:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d064:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1d068:	f7f8 fe5a 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   1d06c:	4604      	mov	r4, r0
   1d06e:	b1c0      	cbz	r0, 1d0a2 <le_conn_update_complete+0x42>
	if (!evt->status) {
   1d070:	782b      	ldrb	r3, [r5, #0]
   1d072:	b9c3      	cbnz	r3, 1d0a6 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1d074:	792a      	ldrb	r2, [r5, #4]
   1d076:	78eb      	ldrb	r3, [r5, #3]
   1d078:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d07c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1d080:	79aa      	ldrb	r2, [r5, #6]
   1d082:	796b      	ldrb	r3, [r5, #5]
   1d084:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d088:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1d08c:	79eb      	ldrb	r3, [r5, #7]
   1d08e:	7a2a      	ldrb	r2, [r5, #8]
   1d090:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d094:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1d098:	f7f8 fce8 	bl	15a6c <notify_le_param_updated>
	bt_conn_unref(conn);
   1d09c:	4620      	mov	r0, r4
   1d09e:	f000 fc28 	bl	1d8f2 <bt_conn_unref>
}
   1d0a2:	b003      	add	sp, #12
   1d0a4:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1d0a6:	2b1a      	cmp	r3, #26
   1d0a8:	d1f8      	bne.n	1d09c <le_conn_update_complete+0x3c>
   1d0aa:	78c3      	ldrb	r3, [r0, #3]
   1d0ac:	2b01      	cmp	r3, #1
   1d0ae:	d1f5      	bne.n	1d09c <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d0b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1d0b4:	3004      	adds	r0, #4
   1d0b6:	f7ff ff7b 	bl	1cfb0 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1d0ba:	0543      	lsls	r3, r0, #21
   1d0bc:	d4ee      	bmi.n	1d09c <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1d0be:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1d0c2:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1d0c4:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1d0c6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1d0ca:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1d0cc:	4620      	mov	r0, r4
   1d0ce:	f7f9 f8eb 	bl	162a8 <bt_l2cap_update_conn_param>
   1d0d2:	e7e3      	b.n	1d09c <le_conn_update_complete+0x3c>

0001d0d4 <update_sec_level>:
	if (!conn->encrypt) {
   1d0d4:	7ac3      	ldrb	r3, [r0, #11]
   1d0d6:	b913      	cbnz	r3, 1d0de <update_sec_level+0xa>
		conn->sec_level = BT_SECURITY_L1;
   1d0d8:	2301      	movs	r3, #1
   1d0da:	7243      	strb	r3, [r0, #9]
		return;
   1d0dc:	4770      	bx	lr
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1d0de:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1d0e2:	b193      	cbz	r3, 1d10a <update_sec_level+0x36>
   1d0e4:	7b5a      	ldrb	r2, [r3, #13]
   1d0e6:	07d1      	lsls	r1, r2, #31
   1d0e8:	d50f      	bpl.n	1d10a <update_sec_level+0x36>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1d0ea:	06d2      	lsls	r2, r2, #27
   1d0ec:	d50b      	bpl.n	1d106 <update_sec_level+0x32>
   1d0ee:	7b1b      	ldrb	r3, [r3, #12]
   1d0f0:	2b10      	cmp	r3, #16
   1d0f2:	d108      	bne.n	1d106 <update_sec_level+0x32>
			conn->sec_level = BT_SECURITY_L4;
   1d0f4:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   1d0f6:	7243      	strb	r3, [r0, #9]
	if (conn->required_sec_level > conn->sec_level) {
   1d0f8:	7a82      	ldrb	r2, [r0, #10]
   1d0fa:	7a43      	ldrb	r3, [r0, #9]
   1d0fc:	429a      	cmp	r2, r3
   1d0fe:	d906      	bls.n	1d10e <update_sec_level+0x3a>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
   1d100:	2105      	movs	r1, #5
   1d102:	f000 bc13 	b.w	1d92c <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
   1d106:	2303      	movs	r3, #3
   1d108:	e7f5      	b.n	1d0f6 <update_sec_level+0x22>
		conn->sec_level = BT_SECURITY_L2;
   1d10a:	2302      	movs	r3, #2
   1d10c:	e7f3      	b.n	1d0f6 <update_sec_level+0x22>
}
   1d10e:	4770      	bx	lr

0001d110 <hci_vendor_event>:
   1d110:	4770      	bx	lr

0001d112 <sys_put_le64>:
	dst[1] = val >> 8;
   1d112:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1d116:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1d118:	0e00      	lsrs	r0, r0, #24
   1d11a:	7053      	strb	r3, [r2, #1]
   1d11c:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1d11e:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1d120:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1d124:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1d126:	7093      	strb	r3, [r2, #2]
   1d128:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1d12a:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1d12c:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1d12e:	71d1      	strb	r1, [r2, #7]
}
   1d130:	4770      	bx	lr

0001d132 <le_ltk_request>:
{
   1d132:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1d134:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1d136:	8826      	ldrh	r6, [r4, #0]
{
   1d138:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1d13a:	b2b0      	uxth	r0, r6
   1d13c:	f7f8 fdf0 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   1d140:	4605      	mov	r5, r0
   1d142:	b318      	cbz	r0, 1d18c <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1d144:	af02      	add	r7, sp, #8
   1d146:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1d14a:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1d14e:	9701      	str	r7, [sp, #4]
   1d150:	8961      	ldrh	r1, [r4, #10]
   1d152:	9100      	str	r1, [sp, #0]
   1d154:	f002 f90a 	bl	1f36c <bt_smp_request_ltk>
   1d158:	b1d0      	cbz	r0, 1d190 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1d15a:	2112      	movs	r1, #18
   1d15c:	f242 001a 	movw	r0, #8218	; 0x201a
   1d160:	f7f7 fb42 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d164:	4604      	mov	r4, r0
   1d166:	b170      	cbz	r0, 1d186 <le_ltk_request+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
   1d168:	2112      	movs	r1, #18
   1d16a:	3008      	adds	r0, #8
   1d16c:	f002 fa9c 	bl	1f6a8 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1d170:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1d172:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1d176:	2210      	movs	r2, #16
   1d178:	f7ff fdbf 	bl	1ccfa <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1d17c:	4621      	mov	r1, r4
   1d17e:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1d182:	f7f7 fb69 	bl	14858 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   1d186:	4628      	mov	r0, r5
   1d188:	f000 fbb3 	bl	1d8f2 <bt_conn_unref>
}
   1d18c:	b007      	add	sp, #28
   1d18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1d190:	2102      	movs	r1, #2
   1d192:	f242 001b 	movw	r0, #8219	; 0x201b
   1d196:	f7f7 fb27 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d19a:	4604      	mov	r4, r0
   1d19c:	2800      	cmp	r0, #0
   1d19e:	d0f2      	beq.n	1d186 <le_ltk_request+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
   1d1a0:	2102      	movs	r1, #2
   1d1a2:	3008      	adds	r0, #8
   1d1a4:	f002 fa80 	bl	1f6a8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1d1a8:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1d1aa:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1d1ac:	f242 001b 	movw	r0, #8219	; 0x201b
   1d1b0:	e7e7      	b.n	1d182 <le_ltk_request+0x50>

0001d1b2 <le_conn_param_neg_reply>:
{
   1d1b2:	b570      	push	{r4, r5, r6, lr}
   1d1b4:	4606      	mov	r6, r0
   1d1b6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1d1b8:	f242 0021 	movw	r0, #8225	; 0x2021
   1d1bc:	2103      	movs	r1, #3
   1d1be:	f7f7 fb13 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d1c2:	4604      	mov	r4, r0
   1d1c4:	b160      	cbz	r0, 1d1e0 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
   1d1c6:	2103      	movs	r1, #3
   1d1c8:	3008      	adds	r0, #8
   1d1ca:	f002 fa6d 	bl	1f6a8 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1d1ce:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1d1d0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1d1d2:	4621      	mov	r1, r4
   1d1d4:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1d1d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1d1dc:	f7f7 bb3c 	b.w	14858 <bt_hci_cmd_send>
}
   1d1e0:	bd70      	pop	{r4, r5, r6, pc}

0001d1e2 <le_conn_param_req>:
{
   1d1e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1d1e4:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1d1e6:	78d9      	ldrb	r1, [r3, #3]
   1d1e8:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1d1ea:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1d1ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d1f0:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1d1f4:	7959      	ldrb	r1, [r3, #5]
   1d1f6:	791a      	ldrb	r2, [r3, #4]
   1d1f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d1fc:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1d200:	799a      	ldrb	r2, [r3, #6]
   1d202:	79d9      	ldrb	r1, [r3, #7]
   1d204:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d208:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d20c:	7a1a      	ldrb	r2, [r3, #8]
   1d20e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1d210:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d212:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1d216:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d218:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1d21c:	f7f8 fd80 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   1d220:	4606      	mov	r6, r0
   1d222:	b928      	cbnz	r0, 1d230 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1d224:	2102      	movs	r1, #2
   1d226:	4620      	mov	r0, r4
   1d228:	f7ff ffc3 	bl	1d1b2 <le_conn_param_neg_reply>
}
   1d22c:	b003      	add	sp, #12
   1d22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1d230:	4669      	mov	r1, sp
   1d232:	f7f8 fc4f 	bl	15ad4 <le_param_req>
   1d236:	b938      	cbnz	r0, 1d248 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1d238:	211e      	movs	r1, #30
   1d23a:	4620      	mov	r0, r4
   1d23c:	f7ff ffb9 	bl	1d1b2 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1d240:	4630      	mov	r0, r6
   1d242:	f000 fb56 	bl	1d8f2 <bt_conn_unref>
   1d246:	e7f1      	b.n	1d22c <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1d248:	210e      	movs	r1, #14
   1d24a:	f242 0020 	movw	r0, #8224	; 0x2020
   1d24e:	f7f7 facb 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d252:	4605      	mov	r5, r0
   1d254:	2800      	cmp	r0, #0
   1d256:	d0f3      	beq.n	1d240 <le_conn_param_req+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
   1d258:	210e      	movs	r1, #14
   1d25a:	3008      	adds	r0, #8
   1d25c:	f002 fa24 	bl	1f6a8 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1d260:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
   1d262:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1d264:	2100      	movs	r1, #0
   1d266:	f7ff fd73 	bl	1cd50 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1d26a:	f8bd 3000 	ldrh.w	r3, [sp]
   1d26e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1d270:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1d274:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1d276:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1d27a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1d27c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1d280:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1d282:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1d284:	4629      	mov	r1, r5
   1d286:	f242 0020 	movw	r0, #8224	; 0x2020
   1d28a:	f7f7 fae5 	bl	14858 <bt_hci_cmd_send>
   1d28e:	e7d7      	b.n	1d240 <le_conn_param_req+0x5e>

0001d290 <hci_le_read_max_data_len>:
{
   1d290:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d292:	4606      	mov	r6, r0
   1d294:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1d296:	aa01      	add	r2, sp, #4
   1d298:	2100      	movs	r1, #0
   1d29a:	f242 002f 	movw	r0, #8239	; 0x202f
   1d29e:	f7f7 fafd 	bl	1489c <bt_hci_cmd_send_sync>
	if (err) {
   1d2a2:	4604      	mov	r4, r0
   1d2a4:	b948      	cbnz	r0, 1d2ba <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1d2a6:	9801      	ldr	r0, [sp, #4]
   1d2a8:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1d2aa:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1d2ae:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1d2b0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1d2b4:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1d2b6:	f7fb fcb3 	bl	18c20 <net_buf_unref>
}
   1d2ba:	4620      	mov	r0, r4
   1d2bc:	b002      	add	sp, #8
   1d2be:	bd70      	pop	{r4, r5, r6, pc}

0001d2c0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1d2c0:	f100 0314 	add.w	r3, r0, #20
{
   1d2c4:	b510      	push	{r4, lr}
   1d2c6:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d2c8:	4618      	mov	r0, r3
   1d2ca:	f7ff fe56 	bl	1cf7a <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1d2ce:	0642      	lsls	r2, r0, #25
   1d2d0:	d50a      	bpl.n	1d2e8 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d2d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1d2d6:	4618      	mov	r0, r3
   1d2d8:	f7ff fe6a 	bl	1cfb0 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1d2dc:	4620      	mov	r0, r4
   1d2de:	2100      	movs	r1, #0
}
   1d2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1d2e4:	f7f7 bbc4 	b.w	14a70 <set_le_adv_enable_legacy>
}
   1d2e8:	bd10      	pop	{r4, pc}

0001d2ea <adv_unpause_enabled>:
{
   1d2ea:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d2ec:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1d2f0:	4604      	mov	r4, r0
   1d2f2:	3014      	adds	r0, #20
   1d2f4:	f7ff fe4d 	bl	1cf92 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1d2f8:	0483      	lsls	r3, r0, #18
   1d2fa:	d505      	bpl.n	1d308 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1d2fc:	4620      	mov	r0, r4
   1d2fe:	2101      	movs	r1, #1
}
   1d300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1d304:	f7f7 bbb4 	b.w	14a70 <set_le_adv_enable_legacy>
}
   1d308:	bd10      	pop	{r4, pc}

0001d30a <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1d30a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d30c:	4607      	mov	r7, r0
   1d30e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1d310:	f242 0027 	movw	r0, #8231	; 0x2027
   1d314:	2127      	movs	r1, #39	; 0x27
   1d316:	f7f7 fa67 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d31a:	4604      	mov	r4, r0
   1d31c:	b1d0      	cbz	r0, 1d354 <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   1d31e:	2127      	movs	r1, #39	; 0x27
   1d320:	3008      	adds	r0, #8
   1d322:	f002 f9c1 	bl	1f6a8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1d326:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
   1d328:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1d32a:	f7ff fe2c 	bl	1cf86 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1d32e:	4631      	mov	r1, r6
   1d330:	2210      	movs	r2, #16
   1d332:	1de8      	adds	r0, r5, #7
   1d334:	f7ff fce1 	bl	1ccfa <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1d338:	2210      	movs	r2, #16
   1d33a:	2100      	movs	r1, #0
   1d33c:	f105 0017 	add.w	r0, r5, #23
   1d340:	f7ff fd06 	bl	1cd50 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1d344:	4621      	mov	r1, r4
   1d346:	2200      	movs	r2, #0
}
   1d348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1d34c:	f242 0027 	movw	r0, #8231	; 0x2027
   1d350:	f7f7 baa4 	b.w	1489c <bt_hci_cmd_send_sync>
}
   1d354:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1d358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d35a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1d35a:	7a03      	ldrb	r3, [r0, #8]
   1d35c:	075b      	lsls	r3, r3, #29
   1d35e:	d504      	bpl.n	1d36a <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1d360:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1d364:	3001      	adds	r0, #1
   1d366:	f7ff bfd0 	b.w	1d30a <hci_id_add.isra.0>
}
   1d36a:	4770      	bx	lr

0001d36c <addr_res_enable>:
{
   1d36c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1d36e:	2101      	movs	r1, #1
{
   1d370:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1d372:	f242 002d 	movw	r0, #8237	; 0x202d
   1d376:	f7f7 fa37 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d37a:	4604      	mov	r4, r0
   1d37c:	b158      	cbz	r0, 1d396 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   1d37e:	4629      	mov	r1, r5
   1d380:	3008      	adds	r0, #8
   1d382:	f002 f9a0 	bl	1f6c6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1d386:	4621      	mov	r1, r4
   1d388:	2200      	movs	r2, #0
}
   1d38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1d38e:	f242 002d 	movw	r0, #8237	; 0x202d
   1d392:	f7f7 ba83 	b.w	1489c <bt_hci_cmd_send_sync>
}
   1d396:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1d39a:	bd38      	pop	{r3, r4, r5, pc}

0001d39c <hci_set_ad>:
{
   1d39c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3a0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1d3a2:	2120      	movs	r1, #32
{
   1d3a4:	4682      	mov	sl, r0
   1d3a6:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1d3a8:	f7f7 fa1e 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d3ac:	4606      	mov	r6, r0
   1d3ae:	2800      	cmp	r0, #0
   1d3b0:	d04a      	beq.n	1d448 <hci_set_ad+0xac>
	set_data = net_buf_add(buf, sizeof(*set_data));
   1d3b2:	2120      	movs	r1, #32
   1d3b4:	3008      	adds	r0, #8
   1d3b6:	f002 f977 	bl	1f6a8 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1d3ba:	2220      	movs	r2, #32
   1d3bc:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
   1d3be:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   1d3c0:	f7ff fcc6 	bl	1cd50 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1d3c4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1d3c8:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1d3cc:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1d3ce:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1d3d0:	f8d4 8000 	ldr.w	r8, [r4]
   1d3d4:	2300      	movs	r3, #0
   1d3d6:	6862      	ldr	r2, [r4, #4]
   1d3d8:	4293      	cmp	r3, r2
   1d3da:	d30d      	bcc.n	1d3f8 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1d3dc:	9b00      	ldr	r3, [sp, #0]
   1d3de:	3408      	adds	r4, #8
   1d3e0:	42a3      	cmp	r3, r4
   1d3e2:	d1f5      	bne.n	1d3d0 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1d3e4:	2200      	movs	r2, #0
   1d3e6:	4631      	mov	r1, r6
   1d3e8:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1d3ea:	f889 5000 	strb.w	r5, [r9]
}
   1d3ee:	b003      	add	sp, #12
   1d3f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1d3f4:	f7f7 ba52 	b.w	1489c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1d3f8:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1d3fc:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1d400:	1ca8      	adds	r0, r5, #2
   1d402:	1811      	adds	r1, r2, r0
   1d404:	291f      	cmp	r1, #31
   1d406:	d908      	bls.n	1d41a <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1d408:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1d40c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1d410:	d11f      	bne.n	1d452 <hci_set_ad+0xb6>
   1d412:	2a00      	cmp	r2, #0
   1d414:	dd1d      	ble.n	1d452 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1d416:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1d41a:	b2d7      	uxtb	r7, r2
   1d41c:	1c79      	adds	r1, r7, #1
   1d41e:	f80b 1005 	strb.w	r1, [fp, r5]
   1d422:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1d424:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1d426:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1d42a:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1d42e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1d432:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1d434:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1d436:	f7ff fc60 	bl	1ccfa <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1d43a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1d43c:	443d      	add	r5, r7
   1d43e:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1d440:	3301      	adds	r3, #1
   1d442:	f108 0808 	add.w	r8, r8, #8
   1d446:	e7c6      	b.n	1d3d6 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1d448:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1d44c:	b003      	add	sp, #12
   1d44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1d452:	4630      	mov	r0, r6
   1d454:	f7fb fbe4 	bl	18c20 <net_buf_unref>
		return err;
   1d458:	f06f 0015 	mvn.w	r0, #21
   1d45c:	e7f6      	b.n	1d44c <hci_set_ad+0xb0>

0001d45e <bt_lookup_id_addr>:
{
   1d45e:	b510      	push	{r4, lr}
   1d460:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1d462:	f7fb fad7 	bl	18a14 <bt_keys_find_irk>
		if (keys) {
   1d466:	b100      	cbz	r0, 1d46a <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1d468:	1c44      	adds	r4, r0, #1
}
   1d46a:	4620      	mov	r0, r4
   1d46c:	bd10      	pop	{r4, pc}

0001d46e <bt_hci_disconnect>:
{
   1d46e:	b570      	push	{r4, r5, r6, lr}
   1d470:	4606      	mov	r6, r0
   1d472:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1d474:	f240 4006 	movw	r0, #1030	; 0x406
   1d478:	2103      	movs	r1, #3
   1d47a:	f7f7 f9b5 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d47e:	4604      	mov	r4, r0
   1d480:	b160      	cbz	r0, 1d49c <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1d482:	2103      	movs	r1, #3
   1d484:	3008      	adds	r0, #8
   1d486:	f002 f90f 	bl	1f6a8 <net_buf_simple_add>
	disconn->reason = reason;
   1d48a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1d48c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1d48e:	4621      	mov	r1, r4
   1d490:	f240 4006 	movw	r0, #1030	; 0x406
}
   1d494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1d498:	f7f7 b9de 	b.w	14858 <bt_hci_cmd_send>
}
   1d49c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1d4a0:	bd70      	pop	{r4, r5, r6, pc}

0001d4a2 <bt_le_set_data_len>:
{
   1d4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4a4:	4607      	mov	r7, r0
   1d4a6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1d4a8:	f242 0022 	movw	r0, #8226	; 0x2022
   1d4ac:	2106      	movs	r1, #6
{
   1d4ae:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1d4b0:	f7f7 f99a 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d4b4:	4604      	mov	r4, r0
   1d4b6:	b170      	cbz	r0, 1d4d6 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   1d4b8:	2106      	movs	r1, #6
   1d4ba:	3008      	adds	r0, #8
   1d4bc:	f002 f8f4 	bl	1f6a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1d4c0:	883b      	ldrh	r3, [r7, #0]
   1d4c2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1d4c4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1d4c6:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1d4c8:	4621      	mov	r1, r4
   1d4ca:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1d4ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1d4d2:	f7f7 b9c1 	b.w	14858 <bt_hci_cmd_send>
}
   1d4d6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1d4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d4dc <bt_le_set_phy>:
{
   1d4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d4e0:	4680      	mov	r8, r0
   1d4e2:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1d4e4:	f242 0032 	movw	r0, #8242	; 0x2032
   1d4e8:	2107      	movs	r1, #7
{
   1d4ea:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1d4ee:	4616      	mov	r6, r2
   1d4f0:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1d4f2:	f7f7 f979 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d4f6:	4604      	mov	r4, r0
   1d4f8:	b190      	cbz	r0, 1d520 <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   1d4fa:	2107      	movs	r1, #7
   1d4fc:	3008      	adds	r0, #8
   1d4fe:	f002 f8d3 	bl	1f6a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1d502:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1d506:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1d508:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1d50a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1d50c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1d50e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1d512:	4621      	mov	r1, r4
   1d514:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1d518:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1d51c:	f7f7 b99c 	b.w	14858 <bt_hci_cmd_send>
}
   1d520:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1d524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d528 <le_phy_update_complete>:
{
   1d528:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1d52a:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d52c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1d530:	f7f8 fbf6 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   1d534:	4604      	mov	r4, r0
   1d536:	b1a0      	cbz	r0, 1d562 <le_phy_update_complete+0x3a>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1d538:	1d05      	adds	r5, r0, #4
   1d53a:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1d53e:	4628      	mov	r0, r5
   1d540:	f7ff fd27 	bl	1cf92 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1d544:	0603      	lsls	r3, r0, #24
   1d546:	d507      	bpl.n	1d558 <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1d54c:	4628      	mov	r0, r5
   1d54e:	f7ff fd2f 	bl	1cfb0 <atomic_or>
		conn_auto_initiate(conn);
   1d552:	4620      	mov	r0, r4
   1d554:	f7f7 fb2e 	bl	14bb4 <conn_auto_initiate>
	bt_conn_unref(conn);
   1d558:	4620      	mov	r0, r4
}
   1d55a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1d55e:	f000 b9c8 	b.w	1d8f2 <bt_conn_unref>
}
   1d562:	bd38      	pop	{r3, r4, r5, pc}

0001d564 <le_remote_feat_complete>:
{
   1d564:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1d566:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d568:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1d56c:	f7f8 fbd8 	bl	15d20 <bt_conn_lookup_handle>
	if (!conn) {
   1d570:	4604      	mov	r4, r0
   1d572:	b198      	cbz	r0, 1d59c <le_remote_feat_complete+0x38>
	if (!evt->status) {
   1d574:	782b      	ldrb	r3, [r5, #0]
   1d576:	b923      	cbnz	r3, 1d582 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1d578:	2208      	movs	r2, #8
   1d57a:	1ce9      	adds	r1, r5, #3
   1d57c:	30ac      	adds	r0, #172	; 0xac
   1d57e:	f7ff fbbc 	bl	1ccfa <memcpy>
   1d582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1d586:	1d20      	adds	r0, r4, #4
   1d588:	f7ff fd12 	bl	1cfb0 <atomic_or>
	conn_auto_initiate(conn);
   1d58c:	4620      	mov	r0, r4
   1d58e:	f7f7 fb11 	bl	14bb4 <conn_auto_initiate>
	bt_conn_unref(conn);
   1d592:	4620      	mov	r0, r4
}
   1d594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1d598:	f000 b9ab 	b.w	1d8f2 <bt_conn_unref>
}
   1d59c:	bd38      	pop	{r3, r4, r5, pc}

0001d59e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1d59e:	8802      	ldrh	r2, [r0, #0]
   1d5a0:	8843      	ldrh	r3, [r0, #2]
   1d5a2:	429a      	cmp	r2, r3
{
   1d5a4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1d5a6:	d818      	bhi.n	1d5da <bt_le_conn_params_valid+0x3c>
   1d5a8:	2a05      	cmp	r2, #5
   1d5aa:	d916      	bls.n	1d5da <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1d5ac:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1d5b0:	d813      	bhi.n	1d5da <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1d5b2:	8884      	ldrh	r4, [r0, #4]
   1d5b4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1d5b8:	d20f      	bcs.n	1d5da <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1d5ba:	88c1      	ldrh	r1, [r0, #6]
   1d5bc:	f1a1 020a 	sub.w	r2, r1, #10
   1d5c0:	b292      	uxth	r2, r2
   1d5c2:	f640 4076 	movw	r0, #3190	; 0xc76
   1d5c6:	4282      	cmp	r2, r0
   1d5c8:	d807      	bhi.n	1d5da <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1d5ca:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1d5ce:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1d5d2:	bf34      	ite	cc
   1d5d4:	2001      	movcc	r0, #1
   1d5d6:	2000      	movcs	r0, #0
}
   1d5d8:	bd10      	pop	{r4, pc}
		return false;
   1d5da:	2000      	movs	r0, #0
   1d5dc:	e7fc      	b.n	1d5d8 <bt_le_conn_params_valid+0x3a>

0001d5de <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1d5de:	7a03      	ldrb	r3, [r0, #8]
   1d5e0:	07d9      	lsls	r1, r3, #31
   1d5e2:	d504      	bpl.n	1d5ee <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1d5e4:	f023 0301 	bic.w	r3, r3, #1
   1d5e8:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1d5ea:	f7f7 bb3d 	b.w	14c68 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1d5ee:	0799      	lsls	r1, r3, #30
   1d5f0:	d504      	bpl.n	1d5fc <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1d5f2:	f023 0302 	bic.w	r3, r3, #2
   1d5f6:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1d5f8:	f7f7 bbc0 	b.w	14d7c <bt_id_del>
}
   1d5fc:	4770      	bx	lr

0001d5fe <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1d5fe:	2301      	movs	r3, #1
{
   1d600:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1d602:	2106      	movs	r1, #6
{
   1d604:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1d606:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1d60a:	f7fc fad9 	bl	19bc0 <bt_rand>
	if (err) {
   1d60e:	b918      	cbnz	r0, 1d618 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1d610:	79a3      	ldrb	r3, [r4, #6]
   1d612:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d616:	71a3      	strb	r3, [r4, #6]
}
   1d618:	bd10      	pop	{r4, pc}

0001d61a <bt_send>:
		return bt_hci_ecc_send(buf);
   1d61a:	f7f6 bc9f 	b.w	13f5c <bt_hci_ecc_send>

0001d61e <bt_addr_le_is_bonded>:
{
   1d61e:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1d620:	f7fb fa32 	bl	18a88 <bt_keys_find_addr>
		return keys && keys->keys;
   1d624:	b118      	cbz	r0, 1d62e <bt_addr_le_is_bonded+0x10>
   1d626:	89c0      	ldrh	r0, [r0, #14]
   1d628:	3800      	subs	r0, #0
   1d62a:	bf18      	it	ne
   1d62c:	2001      	movne	r0, #1
}
   1d62e:	bd08      	pop	{r3, pc}

0001d630 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1d630:	6880      	ldr	r0, [r0, #8]
   1d632:	f7f7 bfdf 	b.w	155f4 <enh_conn_complete>

0001d636 <le_legacy_conn_complete>:
{
   1d636:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1d638:	6881      	ldr	r1, [r0, #8]
{
   1d63a:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1d63c:	780b      	ldrb	r3, [r1, #0]
   1d63e:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1d642:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1d646:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1d64a:	78cb      	ldrb	r3, [r1, #3]
   1d64c:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1d650:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1d654:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1d658:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1d65c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1d660:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1d664:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1d668:	7c4b      	ldrb	r3, [r1, #17]
   1d66a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1d66e:	a803      	add	r0, sp, #12
   1d670:	3104      	adds	r1, #4
   1d672:	f7ff fc88 	bl	1cf86 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1d676:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1d678:	4669      	mov	r1, sp
   1d67a:	2206      	movs	r2, #6
   1d67c:	f10d 0013 	add.w	r0, sp, #19
   1d680:	9400      	str	r4, [sp, #0]
   1d682:	f8ad 4004 	strh.w	r4, [sp, #4]
   1d686:	f7ff fb38 	bl	1ccfa <memcpy>
   1d68a:	2206      	movs	r2, #6
   1d68c:	4669      	mov	r1, sp
   1d68e:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1d692:	9400      	str	r4, [sp, #0]
   1d694:	f8ad 4004 	strh.w	r4, [sp, #4]
   1d698:	f7ff fb2f 	bl	1ccfa <memcpy>
	enh_conn_complete(&enh);
   1d69c:	a802      	add	r0, sp, #8
   1d69e:	f7f7 ffa9 	bl	155f4 <enh_conn_complete>
}
   1d6a2:	b00a      	add	sp, #40	; 0x28
   1d6a4:	bd10      	pop	{r4, pc}

0001d6a6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d6a6:	f3bf 8f5b 	dmb	ish
   1d6aa:	6800      	ldr	r0, [r0, #0]
   1d6ac:	f3bf 8f5b 	dmb	ish
}
   1d6b0:	4770      	bx	lr

0001d6b2 <atomic_inc>:
{
   1d6b2:	4603      	mov	r3, r0
}
   1d6b4:	f3bf 8f5b 	dmb	ish
   1d6b8:	e853 0f00 	ldrex	r0, [r3]
   1d6bc:	1c42      	adds	r2, r0, #1
   1d6be:	e843 2100 	strex	r1, r2, [r3]
   1d6c2:	2900      	cmp	r1, #0
   1d6c4:	d1f8      	bne.n	1d6b8 <atomic_inc+0x6>
   1d6c6:	f3bf 8f5b 	dmb	ish
   1d6ca:	4770      	bx	lr

0001d6cc <tx_notify>:
{
   1d6cc:	b570      	push	{r4, r5, r6, lr}
   1d6ce:	4604      	mov	r4, r0
	__asm__ volatile(
   1d6d0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d6d4:	f3ef 8311 	mrs	r3, BASEPRI
   1d6d8:	f382 8811 	msr	BASEPRI, r2
   1d6dc:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1d6e0:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1d6e2:	b920      	cbnz	r0, 1d6ee <tx_notify+0x22>
	__asm__ volatile(
   1d6e4:	f383 8811 	msr	BASEPRI, r3
   1d6e8:	f3bf 8f6f 	isb	sy
}
   1d6ec:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d6ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d6f0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1d6f2:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d6f4:	4288      	cmp	r0, r1
	list->tail = node;
   1d6f6:	bf08      	it	eq
   1d6f8:	6262      	streq	r2, [r4, #36]	; 0x24
   1d6fa:	f383 8811 	msr	BASEPRI, r3
   1d6fe:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1d702:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1d706:	f7f8 f903 	bl	15910 <tx_free>
		cb(conn, user_data);
   1d70a:	4631      	mov	r1, r6
   1d70c:	4620      	mov	r0, r4
   1d70e:	47a8      	blx	r5
	while (1) {
   1d710:	e7de      	b.n	1d6d0 <tx_notify+0x4>

0001d712 <tx_complete_work>:
	tx_notify(conn);
   1d712:	3828      	subs	r0, #40	; 0x28
   1d714:	f7ff bfda 	b.w	1d6cc <tx_notify>

0001d718 <bt_conn_new>:
{
   1d718:	b570      	push	{r4, r5, r6, lr}
   1d71a:	460a      	mov	r2, r1
   1d71c:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1d71e:	2600      	movs	r6, #0
   1d720:	4296      	cmp	r6, r2
   1d722:	d102      	bne.n	1d72a <bt_conn_new+0x12>
		return NULL;
   1d724:	2400      	movs	r4, #0
}
   1d726:	4620      	mov	r0, r4
   1d728:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
   1d72a:	f104 0554 	add.w	r5, r4, #84	; 0x54
   1d72e:	4628      	mov	r0, r5
   1d730:	f7ff ffb9 	bl	1d6a6 <atomic_get>
   1d734:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1d738:	4601      	mov	r1, r0
   1d73a:	b110      	cbz	r0, 1d742 <bt_conn_new+0x2a>
	for (i = 0; i < size; i++) {
   1d73c:	3601      	adds	r6, #1
   1d73e:	461c      	mov	r4, r3
   1d740:	e7ee      	b.n	1d720 <bt_conn_new+0x8>
	if (!conn) {
   1d742:	2c00      	cmp	r4, #0
   1d744:	d0ef      	beq.n	1d726 <bt_conn_new+0xe>
	(void)memset(conn, 0, sizeof(*conn));
   1d746:	22b8      	movs	r2, #184	; 0xb8
   1d748:	4620      	mov	r0, r4
   1d74a:	f7ff fb01 	bl	1cd50 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d74e:	f3bf 8f5b 	dmb	ish
   1d752:	2301      	movs	r3, #1
   1d754:	e855 2f00 	ldrex	r2, [r5]
   1d758:	e845 3100 	strex	r1, r3, [r5]
   1d75c:	2900      	cmp	r1, #0
   1d75e:	d1f9      	bne.n	1d754 <bt_conn_new+0x3c>
   1d760:	f3bf 8f5b 	dmb	ish
   1d764:	e7df      	b.n	1d726 <bt_conn_new+0xe>

0001d766 <bt_conn_set_security>:
{
   1d766:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1d768:	7b43      	ldrb	r3, [r0, #13]
   1d76a:	2b07      	cmp	r3, #7
{
   1d76c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1d76e:	d128      	bne.n	1d7c2 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1d770:	7a43      	ldrb	r3, [r0, #9]
   1d772:	428b      	cmp	r3, r1
   1d774:	d228      	bcs.n	1d7c8 <bt_conn_set_security+0x62>
   1d776:	7a83      	ldrb	r3, [r0, #10]
   1d778:	428b      	cmp	r3, r1
   1d77a:	d225      	bcs.n	1d7c8 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d77c:	f3bf 8f5b 	dmb	ish
	if (val) {
   1d780:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1d782:	f100 0304 	add.w	r3, r0, #4
   1d786:	d513      	bpl.n	1d7b0 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d788:	e853 2f00 	ldrex	r2, [r3]
   1d78c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1d790:	e843 2000 	strex	r0, r2, [r3]
   1d794:	2800      	cmp	r0, #0
   1d796:	d1f7      	bne.n	1d788 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d798:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1d79c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1d7a0:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   1d7a2:	4620      	mov	r0, r4
   1d7a4:	f7fb f816 	bl	187d4 <bt_smp_start_security>
	if (err) {
   1d7a8:	b108      	cbz	r0, 1d7ae <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   1d7aa:	7a63      	ldrb	r3, [r4, #9]
   1d7ac:	72a3      	strb	r3, [r4, #10]
}
   1d7ae:	bd10      	pop	{r4, pc}
   1d7b0:	e853 2f00 	ldrex	r2, [r3]
   1d7b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1d7b8:	e843 2000 	strex	r0, r2, [r3]
   1d7bc:	2800      	cmp	r0, #0
   1d7be:	d0eb      	beq.n	1d798 <bt_conn_set_security+0x32>
   1d7c0:	e7f6      	b.n	1d7b0 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   1d7c2:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1d7c6:	e7f2      	b.n	1d7ae <bt_conn_set_security+0x48>
		return 0;
   1d7c8:	2000      	movs	r0, #0
   1d7ca:	e7f0      	b.n	1d7ae <bt_conn_set_security+0x48>

0001d7cc <bt_conn_get_security>:
}
   1d7cc:	7a40      	ldrb	r0, [r0, #9]
   1d7ce:	4770      	bx	lr

0001d7d0 <bt_conn_reset_rx_state>:
{
   1d7d0:	b510      	push	{r4, lr}
   1d7d2:	4604      	mov	r4, r0
	if (!conn->rx) {
   1d7d4:	6900      	ldr	r0, [r0, #16]
   1d7d6:	b118      	cbz	r0, 1d7e0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1d7d8:	f7fb fa22 	bl	18c20 <net_buf_unref>
	conn->rx = NULL;
   1d7dc:	2300      	movs	r3, #0
   1d7de:	6123      	str	r3, [r4, #16]
}
   1d7e0:	bd10      	pop	{r4, pc}

0001d7e2 <bt_conn_recv>:
{
   1d7e2:	b570      	push	{r4, r5, r6, lr}
   1d7e4:	4616      	mov	r6, r2
   1d7e6:	4604      	mov	r4, r0
   1d7e8:	460d      	mov	r5, r1
	tx_notify(conn);
   1d7ea:	f7ff ff6f 	bl	1d6cc <tx_notify>
	switch (flags) {
   1d7ee:	2e01      	cmp	r6, #1
   1d7f0:	d01a      	beq.n	1d828 <bt_conn_recv+0x46>
   1d7f2:	2e02      	cmp	r6, #2
   1d7f4:	d11a      	bne.n	1d82c <bt_conn_recv+0x4a>
		if (conn->rx) {
   1d7f6:	6923      	ldr	r3, [r4, #16]
   1d7f8:	b113      	cbz	r3, 1d800 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1d7fa:	4620      	mov	r0, r4
   1d7fc:	f7ff ffe8 	bl	1d7d0 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1d800:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1d802:	6921      	ldr	r1, [r4, #16]
   1d804:	898a      	ldrh	r2, [r1, #12]
   1d806:	2a01      	cmp	r2, #1
   1d808:	d931      	bls.n	1d86e <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1d80a:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1d80c:	7845      	ldrb	r5, [r0, #1]
   1d80e:	7803      	ldrb	r3, [r0, #0]
   1d810:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1d814:	3304      	adds	r3, #4
   1d816:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1d818:	429a      	cmp	r2, r3
   1d81a:	d328      	bcc.n	1d86e <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   1d81c:	d920      	bls.n	1d860 <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   1d81e:	4620      	mov	r0, r4
}
   1d820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1d824:	f7ff bfd4 	b.w	1d7d0 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1d828:	6920      	ldr	r0, [r4, #16]
   1d82a:	b918      	cbnz	r0, 1d834 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1d82c:	4620      	mov	r0, r4
   1d82e:	f7ff ffcf 	bl	1d7d0 <bt_conn_reset_rx_state>
   1d832:	e001      	b.n	1d838 <bt_conn_recv+0x56>
		if (!buf->len) {
   1d834:	89ae      	ldrh	r6, [r5, #12]
   1d836:	b926      	cbnz	r6, 1d842 <bt_conn_recv+0x60>
		net_buf_unref(buf);
   1d838:	4628      	mov	r0, r5
}
   1d83a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1d83e:	f7fb b9ef 	b.w	18c20 <net_buf_unref>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1d842:	3008      	adds	r0, #8
   1d844:	f001 ff6b 	bl	1f71e <net_buf_simple_tailroom>
   1d848:	4286      	cmp	r6, r0
   1d84a:	d8ef      	bhi.n	1d82c <bt_conn_recv+0x4a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1d84c:	6920      	ldr	r0, [r4, #16]
   1d84e:	89aa      	ldrh	r2, [r5, #12]
   1d850:	68a9      	ldr	r1, [r5, #8]
   1d852:	3008      	adds	r0, #8
   1d854:	f001 ff2e 	bl	1f6b4 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1d858:	4628      	mov	r0, r5
   1d85a:	f7fb f9e1 	bl	18c20 <net_buf_unref>
		break;
   1d85e:	e7d0      	b.n	1d802 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1d860:	2300      	movs	r3, #0
   1d862:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1d864:	4620      	mov	r0, r4
}
   1d866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1d86a:	f000 b9a4 	b.w	1dbb6 <bt_l2cap_recv>
}
   1d86e:	bd70      	pop	{r4, r5, r6, pc}

0001d870 <conn_lookup_handle>:
{
   1d870:	b538      	push	{r3, r4, r5, lr}
   1d872:	f100 0354 	add.w	r3, r0, #84	; 0x54
	for (i = 0; i < size; i++) {
   1d876:	2400      	movs	r4, #0
   1d878:	428c      	cmp	r4, r1
   1d87a:	d101      	bne.n	1d880 <conn_lookup_handle+0x10>
	return NULL;
   1d87c:	2500      	movs	r5, #0
   1d87e:	e013      	b.n	1d8a8 <conn_lookup_handle+0x38>
		if (!atomic_get(&conns[i].ref)) {
   1d880:	4618      	mov	r0, r3
   1d882:	f1a3 0554 	sub.w	r5, r3, #84	; 0x54
   1d886:	f7ff ff0e 	bl	1d6a6 <atomic_get>
   1d88a:	b178      	cbz	r0, 1d8ac <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(&conns[i])) {
   1d88c:	f813 0c47 	ldrb.w	r0, [r3, #-71]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1d890:	2801      	cmp	r0, #1
   1d892:	d002      	beq.n	1d89a <conn_lookup_handle+0x2a>
   1d894:	3807      	subs	r0, #7
   1d896:	2801      	cmp	r0, #1
   1d898:	d808      	bhi.n	1d8ac <conn_lookup_handle+0x3c>
		if (conns[i].handle == handle) {
   1d89a:	f833 0c54 	ldrh.w	r0, [r3, #-84]
   1d89e:	4290      	cmp	r0, r2
   1d8a0:	d104      	bne.n	1d8ac <conn_lookup_handle+0x3c>
	atomic_val_t old = atomic_inc(&conn->ref);
   1d8a2:	4618      	mov	r0, r3
   1d8a4:	f7ff ff05 	bl	1d6b2 <atomic_inc>
}
   1d8a8:	4628      	mov	r0, r5
   1d8aa:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1d8ac:	3401      	adds	r4, #1
   1d8ae:	33b8      	adds	r3, #184	; 0xb8
   1d8b0:	e7e2      	b.n	1d878 <conn_lookup_handle+0x8>

0001d8b2 <bt_conn_is_peer_addr_le>:
{
   1d8b2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1d8b4:	7a03      	ldrb	r3, [r0, #8]
   1d8b6:	428b      	cmp	r3, r1
{
   1d8b8:	4604      	mov	r4, r0
   1d8ba:	4615      	mov	r5, r2
	if (id != conn->id) {
   1d8bc:	d115      	bne.n	1d8ea <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1d8be:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1d8c2:	2207      	movs	r2, #7
   1d8c4:	4628      	mov	r0, r5
   1d8c6:	f7ff fa08 	bl	1ccda <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1d8ca:	b180      	cbz	r0, 1d8ee <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1d8cc:	78e3      	ldrb	r3, [r4, #3]
   1d8ce:	2207      	movs	r2, #7
   1d8d0:	b943      	cbnz	r3, 1d8e4 <bt_conn_is_peer_addr_le+0x32>
   1d8d2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1d8d6:	4628      	mov	r0, r5
   1d8d8:	f7ff f9ff 	bl	1ccda <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1d8dc:	fab0 f080 	clz	r0, r0
   1d8e0:	0940      	lsrs	r0, r0, #5
}
   1d8e2:	bd38      	pop	{r3, r4, r5, pc}
   1d8e4:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1d8e8:	e7f5      	b.n	1d8d6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1d8ea:	2000      	movs	r0, #0
   1d8ec:	e7f9      	b.n	1d8e2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1d8ee:	2001      	movs	r0, #1
   1d8f0:	e7f7      	b.n	1d8e2 <bt_conn_is_peer_addr_le+0x30>

0001d8f2 <bt_conn_unref>:
{
   1d8f2:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1d8f4:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1d8f6:	f3bf 8f5b 	dmb	ish
   1d8fa:	e850 3f00 	ldrex	r3, [r0]
   1d8fe:	3b01      	subs	r3, #1
   1d900:	e840 3200 	strex	r2, r3, [r0]
   1d904:	2a00      	cmp	r2, #0
   1d906:	d1f8      	bne.n	1d8fa <bt_conn_unref+0x8>
   1d908:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   1d90c:	f7ff fecb 	bl	1d6a6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d910:	b918      	cbnz	r0, 1d91a <bt_conn_unref+0x28>
}
   1d912:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   1d916:	f7f7 be37 	b.w	15588 <bt_le_adv_resume>
}
   1d91a:	bd08      	pop	{r3, pc}

0001d91c <bt_conn_exists_le>:
{
   1d91c:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1d91e:	f7f8 fa0b 	bl	15d38 <bt_conn_lookup_addr_le>
	if (conn) {
   1d922:	b110      	cbz	r0, 1d92a <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1d924:	f7ff ffe5 	bl	1d8f2 <bt_conn_unref>
		return true;
   1d928:	2001      	movs	r0, #1
}
   1d92a:	bd08      	pop	{r3, pc}

0001d92c <bt_conn_disconnect>:
{
   1d92c:	b538      	push	{r3, r4, r5, lr}
   1d92e:	7b43      	ldrb	r3, [r0, #13]
   1d930:	3b02      	subs	r3, #2
   1d932:	4604      	mov	r4, r0
   1d934:	2b06      	cmp	r3, #6
   1d936:	d805      	bhi.n	1d944 <bt_conn_disconnect+0x18>
   1d938:	e8df f003 	tbb	[pc, r3]
   1d93c:	0e040408 	.word	0x0e040408
   1d940:	160c      	.short	0x160c
   1d942:	0c          	.byte	0x0c
   1d943:	00          	.byte	0x00
	switch (conn->state) {
   1d944:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   1d948:	4628      	mov	r0, r5
   1d94a:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1d94c:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1d94e:	2100      	movs	r1, #0
   1d950:	f7f8 fa34 	bl	15dbc <bt_conn_set_state>
		return 0;
   1d954:	2500      	movs	r5, #0
   1d956:	e7f7      	b.n	1d948 <bt_conn_disconnect+0x1c>
		conn->err = reason;
   1d958:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1d95a:	2100      	movs	r1, #0
   1d95c:	f7f8 fa2e 	bl	15dbc <bt_conn_set_state>
}
   1d960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   1d964:	f7f7 bdc4 	b.w	154f0 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
   1d968:	8800      	ldrh	r0, [r0, #0]
   1d96a:	f7ff fd80 	bl	1d46e <bt_hci_disconnect>
	if (err) {
   1d96e:	4605      	mov	r5, r0
   1d970:	2800      	cmp	r0, #0
   1d972:	d1e9      	bne.n	1d948 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1d974:	2108      	movs	r1, #8
   1d976:	4620      	mov	r0, r4
   1d978:	f7f8 fa20 	bl	15dbc <bt_conn_set_state>
	return 0;
   1d97c:	e7e4      	b.n	1d948 <bt_conn_disconnect+0x1c>

0001d97e <bt_conn_le_conn_update>:
{
   1d97e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d980:	4607      	mov	r7, r0
   1d982:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1d984:	f242 0013 	movw	r0, #8211	; 0x2013
   1d988:	210e      	movs	r1, #14
   1d98a:	f7f6 ff2d 	bl	147e8 <bt_hci_cmd_create>
	if (!buf) {
   1d98e:	4606      	mov	r6, r0
   1d990:	b1d0      	cbz	r0, 1d9c8 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1d992:	210e      	movs	r1, #14
   1d994:	3008      	adds	r0, #8
   1d996:	f001 fe87 	bl	1f6a8 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1d99a:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1d99c:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1d99e:	2100      	movs	r1, #0
   1d9a0:	f7ff f9d6 	bl	1cd50 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1d9a4:	883b      	ldrh	r3, [r7, #0]
   1d9a6:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1d9a8:	882b      	ldrh	r3, [r5, #0]
   1d9aa:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1d9ac:	886b      	ldrh	r3, [r5, #2]
   1d9ae:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1d9b0:	88ab      	ldrh	r3, [r5, #4]
   1d9b2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1d9b4:	88eb      	ldrh	r3, [r5, #6]
   1d9b6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1d9b8:	4631      	mov	r1, r6
   1d9ba:	2200      	movs	r2, #0
}
   1d9bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1d9c0:	f242 0013 	movw	r0, #8211	; 0x2013
   1d9c4:	f7f6 bf6a 	b.w	1489c <bt_hci_cmd_send_sync>
}
   1d9c8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1d9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d9ce <l2cap_connected>:
}
   1d9ce:	4770      	bx	lr

0001d9d0 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d9d2:	4607      	mov	r7, r0
   1d9d4:	460e      	mov	r6, r1
   1d9d6:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1d9d8:	2300      	movs	r3, #0
   1d9da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d9de:	2104      	movs	r1, #4
   1d9e0:	2000      	movs	r0, #0
   1d9e2:	f7f8 fb15 	bl	16010 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1d9e6:	4604      	mov	r4, r0
   1d9e8:	b130      	cbz	r0, 1d9f8 <l2cap_create_le_sig_pdu.isra.0+0x28>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1d9ea:	2104      	movs	r1, #4
   1d9ec:	3008      	adds	r0, #8
   1d9ee:	f001 fe5b 	bl	1f6a8 <net_buf_simple_add>
	hdr->code = code;
   1d9f2:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1d9f4:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1d9f6:	8045      	strh	r5, [r0, #2]
}
   1d9f8:	4620      	mov	r0, r4
   1d9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d9fc <l2cap_disconnected>:
   1d9fc:	4770      	bx	lr

0001d9fe <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1d9fe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1da00:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1da02:	b17b      	cbz	r3, 1da24 <bt_l2cap_chan_remove+0x26>
   1da04:	3b08      	subs	r3, #8
   1da06:	2200      	movs	r2, #0
   1da08:	b163      	cbz	r3, 1da24 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1da0a:	428b      	cmp	r3, r1
   1da0c:	f103 0408 	add.w	r4, r3, #8
   1da10:	d10f      	bne.n	1da32 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1da12:	688b      	ldr	r3, [r1, #8]
   1da14:	b93a      	cbnz	r2, 1da26 <bt_l2cap_chan_remove+0x28>
   1da16:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   1da18:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   1da1a:	4294      	cmp	r4, r2
   1da1c:	d100      	bne.n	1da20 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1da1e:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   1da20:	2300      	movs	r3, #0
   1da22:	608b      	str	r3, [r1, #8]
}
   1da24:	bd10      	pop	{r4, pc}
   1da26:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1da28:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1da2a:	429c      	cmp	r4, r3
	list->tail = node;
   1da2c:	bf08      	it	eq
   1da2e:	6502      	streq	r2, [r0, #80]	; 0x50
}
   1da30:	e7f6      	b.n	1da20 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1da32:	2c00      	cmp	r4, #0
   1da34:	d0f6      	beq.n	1da24 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1da36:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1da38:	2b00      	cmp	r3, #0
   1da3a:	d0f3      	beq.n	1da24 <bt_l2cap_chan_remove+0x26>
   1da3c:	3b08      	subs	r3, #8
   1da3e:	4622      	mov	r2, r4
   1da40:	e7e2      	b.n	1da08 <bt_l2cap_chan_remove+0xa>

0001da42 <bt_l2cap_chan_del>:
{
   1da42:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1da44:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1da48:	4604      	mov	r4, r0
	if (!chan->conn) {
   1da4a:	b123      	cbz	r3, 1da56 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1da4c:	686b      	ldr	r3, [r5, #4]
   1da4e:	b103      	cbz	r3, 1da52 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1da50:	4798      	blx	r3
	chan->conn = NULL;
   1da52:	2300      	movs	r3, #0
   1da54:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1da56:	68e3      	ldr	r3, [r4, #12]
   1da58:	b10b      	cbz	r3, 1da5e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1da5a:	4620      	mov	r0, r4
   1da5c:	4798      	blx	r3
	if (ops->released) {
   1da5e:	69eb      	ldr	r3, [r5, #28]
   1da60:	b11b      	cbz	r3, 1da6a <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1da62:	4620      	mov	r0, r4
}
   1da64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1da68:	4718      	bx	r3
}
   1da6a:	bd70      	pop	{r4, r5, r6, pc}

0001da6c <l2cap_rtx_timeout>:
{
   1da6c:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1da6e:	f1a0 0110 	sub.w	r1, r0, #16
   1da72:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1da76:	f7ff ffc2 	bl	1d9fe <bt_l2cap_chan_remove>
}
   1da7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1da7e:	4608      	mov	r0, r1
   1da80:	f7ff bfdf 	b.w	1da42 <bt_l2cap_chan_del>

0001da84 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1da84:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1da86:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1da88:	b18b      	cbz	r3, 1daae <bt_l2cap_disconnected+0x2a>
   1da8a:	f1b3 0008 	subs.w	r0, r3, #8
   1da8e:	d00e      	beq.n	1daae <bt_l2cap_disconnected+0x2a>
   1da90:	681c      	ldr	r4, [r3, #0]
   1da92:	b104      	cbz	r4, 1da96 <bt_l2cap_disconnected+0x12>
   1da94:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1da96:	f7ff ffd4 	bl	1da42 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1da9a:	b144      	cbz	r4, 1daae <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1da9c:	f114 0308 	adds.w	r3, r4, #8
   1daa0:	d002      	beq.n	1daa8 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1daa2:	68a3      	ldr	r3, [r4, #8]
   1daa4:	b103      	cbz	r3, 1daa8 <bt_l2cap_disconnected+0x24>
   1daa6:	3b08      	subs	r3, #8
{
   1daa8:	4620      	mov	r0, r4
   1daaa:	461c      	mov	r4, r3
   1daac:	e7f3      	b.n	1da96 <bt_l2cap_disconnected+0x12>
}
   1daae:	bd10      	pop	{r4, pc}

0001dab0 <bt_l2cap_security_changed>:
{
   1dab0:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1dab2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1dab4:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1dab6:	b1a3      	cbz	r3, 1dae2 <bt_l2cap_security_changed+0x32>
   1dab8:	f1b3 0008 	subs.w	r0, r3, #8
   1dabc:	d011      	beq.n	1dae2 <bt_l2cap_security_changed+0x32>
   1dabe:	681c      	ldr	r4, [r3, #0]
   1dac0:	b104      	cbz	r4, 1dac4 <bt_l2cap_security_changed+0x14>
   1dac2:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1dac4:	6843      	ldr	r3, [r0, #4]
   1dac6:	689b      	ldr	r3, [r3, #8]
   1dac8:	b10b      	cbz	r3, 1dace <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1daca:	4629      	mov	r1, r5
   1dacc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1dace:	b144      	cbz	r4, 1dae2 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dad0:	f114 0308 	adds.w	r3, r4, #8
   1dad4:	d002      	beq.n	1dadc <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dad6:	68a3      	ldr	r3, [r4, #8]
   1dad8:	b103      	cbz	r3, 1dadc <bt_l2cap_security_changed+0x2c>
   1dada:	3b08      	subs	r3, #8
{
   1dadc:	4620      	mov	r0, r4
   1dade:	461c      	mov	r4, r3
   1dae0:	e7f0      	b.n	1dac4 <bt_l2cap_security_changed+0x14>
}
   1dae2:	bd38      	pop	{r3, r4, r5, pc}

0001dae4 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1dae4:	3104      	adds	r1, #4
   1dae6:	f7f8 ba93 	b.w	16010 <bt_conn_create_pdu_timeout>

0001daea <bt_l2cap_send_cb>:
{
   1daea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1daee:	4614      	mov	r4, r2
   1daf0:	4605      	mov	r5, r0
   1daf2:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1daf4:	f102 0008 	add.w	r0, r2, #8
   1daf8:	2104      	movs	r1, #4
{
   1dafa:	461e      	mov	r6, r3
   1dafc:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   1db00:	f001 fde9 	bl	1f6d6 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1db04:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1db06:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1db08:	3a04      	subs	r2, #4
   1db0a:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1db0c:	4643      	mov	r3, r8
   1db0e:	4632      	mov	r2, r6
   1db10:	4621      	mov	r1, r4
   1db12:	4628      	mov	r0, r5
}
   1db14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1db18:	f7f8 b856 	b.w	15bc8 <bt_conn_send_cb>

0001db1c <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1db1c:	898b      	ldrh	r3, [r1, #12]
   1db1e:	2b03      	cmp	r3, #3
{
   1db20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1db22:	4605      	mov	r5, r0
   1db24:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1db26:	d923      	bls.n	1db70 <l2cap_recv+0x54>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1db28:	2104      	movs	r1, #4
   1db2a:	f104 0008 	add.w	r0, r4, #8
   1db2e:	f001 fde2 	bl	1f6f6 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1db32:	89a3      	ldrh	r3, [r4, #12]
   1db34:	8842      	ldrh	r2, [r0, #2]
   1db36:	429a      	cmp	r2, r3
   1db38:	d11a      	bne.n	1db70 <l2cap_recv+0x54>
	if (!hdr->ident) {
   1db3a:	7841      	ldrb	r1, [r0, #1]
   1db3c:	b1c1      	cbz	r1, 1db70 <l2cap_recv+0x54>
	switch (hdr->code) {
   1db3e:	7803      	ldrb	r3, [r0, #0]
   1db40:	2b01      	cmp	r3, #1
   1db42:	d015      	beq.n	1db70 <l2cap_recv+0x54>
   1db44:	2b13      	cmp	r3, #19
   1db46:	d013      	beq.n	1db70 <l2cap_recv+0x54>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1db48:	2202      	movs	r2, #2
   1db4a:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1db4c:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1db4e:	f7ff ff3f 	bl	1d9d0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1db52:	4604      	mov	r4, r0
   1db54:	b160      	cbz	r0, 1db70 <l2cap_recv+0x54>
	rej = net_buf_add(buf, sizeof(*rej));
   1db56:	2102      	movs	r1, #2
   1db58:	3008      	adds	r0, #8
   1db5a:	f001 fda5 	bl	1f6a8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1db5e:	2300      	movs	r3, #0
   1db60:	7003      	strb	r3, [r0, #0]
   1db62:	7043      	strb	r3, [r0, #1]
   1db64:	4622      	mov	r2, r4
   1db66:	9300      	str	r3, [sp, #0]
   1db68:	2105      	movs	r1, #5
   1db6a:	4628      	mov	r0, r5
   1db6c:	f7ff ffbd 	bl	1daea <bt_l2cap_send_cb>
}
   1db70:	2000      	movs	r0, #0
   1db72:	b003      	add	sp, #12
   1db74:	bd30      	pop	{r4, r5, pc}

0001db76 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1db76:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1db78:	b160      	cbz	r0, 1db94 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1db7a:	3808      	subs	r0, #8
   1db7c:	b900      	cbnz	r0, 1db80 <bt_l2cap_le_lookup_tx_cid+0xa>
   1db7e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1db80:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1db84:	428b      	cmp	r3, r1
   1db86:	d005      	beq.n	1db94 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1db88:	f110 0308 	adds.w	r3, r0, #8
   1db8c:	d001      	beq.n	1db92 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1db8e:	6880      	ldr	r0, [r0, #8]
   1db90:	e7f2      	b.n	1db78 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1db92:	4618      	mov	r0, r3
}
   1db94:	4770      	bx	lr

0001db96 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1db96:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1db98:	b160      	cbz	r0, 1dbb4 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1db9a:	3808      	subs	r0, #8
   1db9c:	b900      	cbnz	r0, 1dba0 <bt_l2cap_le_lookup_rx_cid+0xa>
   1db9e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1dba0:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1dba4:	428b      	cmp	r3, r1
   1dba6:	d005      	beq.n	1dbb4 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dba8:	f110 0308 	adds.w	r3, r0, #8
   1dbac:	d001      	beq.n	1dbb2 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dbae:	6880      	ldr	r0, [r0, #8]
   1dbb0:	e7f2      	b.n	1db98 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1dbb2:	4618      	mov	r0, r3
}
   1dbb4:	4770      	bx	lr

0001dbb6 <bt_l2cap_recv>:
{
   1dbb6:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1dbb8:	898b      	ldrh	r3, [r1, #12]
   1dbba:	2b03      	cmp	r3, #3
{
   1dbbc:	4605      	mov	r5, r0
   1dbbe:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1dbc0:	d804      	bhi.n	1dbcc <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1dbc2:	4620      	mov	r0, r4
}
   1dbc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1dbc8:	f7fb b82a 	b.w	18c20 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1dbcc:	2104      	movs	r1, #4
   1dbce:	f104 0008 	add.w	r0, r4, #8
   1dbd2:	f001 fd90 	bl	1f6f6 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1dbd6:	8841      	ldrh	r1, [r0, #2]
   1dbd8:	4628      	mov	r0, r5
   1dbda:	f7ff ffdc 	bl	1db96 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1dbde:	2800      	cmp	r0, #0
   1dbe0:	d0ef      	beq.n	1dbc2 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1dbe2:	6843      	ldr	r3, [r0, #4]
   1dbe4:	4621      	mov	r1, r4
   1dbe6:	691b      	ldr	r3, [r3, #16]
   1dbe8:	4798      	blx	r3
   1dbea:	e7ea      	b.n	1dbc2 <bt_l2cap_recv+0xc>

0001dbec <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1dbec:	4770      	bx	lr

0001dbee <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1dbee:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1dbf0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1dbf2:	b128      	cbz	r0, 1dc00 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dbf4:	6859      	ldr	r1, [r3, #4]
   1dbf6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1dbf8:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dbfa:	4288      	cmp	r0, r1
	list->tail = node;
   1dbfc:	bf08      	it	eq
   1dbfe:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1dc00:	4770      	bx	lr

0001dc02 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dc02:	4603      	mov	r3, r0
   1dc04:	6800      	ldr	r0, [r0, #0]
   1dc06:	2200      	movs	r2, #0
   1dc08:	b900      	cbnz	r0, 1dc0c <sys_slist_find_and_remove+0xa>
   1dc0a:	4770      	bx	lr
   1dc0c:	4288      	cmp	r0, r1
   1dc0e:	d110      	bne.n	1dc32 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1dc10:	6808      	ldr	r0, [r1, #0]
   1dc12:	b942      	cbnz	r2, 1dc26 <sys_slist_find_and_remove+0x24>
   1dc14:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1dc16:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dc18:	4291      	cmp	r1, r2
   1dc1a:	d100      	bne.n	1dc1e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1dc1c:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1dc1e:	2300      	movs	r3, #0
   1dc20:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dc22:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1dc24:	4770      	bx	lr
	parent->next = child;
   1dc26:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dc28:	6858      	ldr	r0, [r3, #4]
   1dc2a:	4281      	cmp	r1, r0
	list->tail = node;
   1dc2c:	bf08      	it	eq
   1dc2e:	605a      	streq	r2, [r3, #4]
}
   1dc30:	e7f5      	b.n	1dc1e <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dc32:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dc34:	6800      	ldr	r0, [r0, #0]
   1dc36:	e7e7      	b.n	1dc08 <sys_slist_find_and_remove+0x6>

0001dc38 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1dc38:	4603      	mov	r3, r0
	size_t bytes = 0;
   1dc3a:	2000      	movs	r0, #0

	while (buf) {
   1dc3c:	b903      	cbnz	r3, 1dc40 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1dc3e:	4770      	bx	lr
		bytes += buf->len;
   1dc40:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1dc42:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1dc44:	4410      	add	r0, r2
		buf = buf->frags;
   1dc46:	e7f9      	b.n	1dc3c <net_buf_frags_len+0x4>

0001dc48 <att_sent>:
	if (chan->ops->sent) {
   1dc48:	684b      	ldr	r3, [r1, #4]
   1dc4a:	695b      	ldr	r3, [r3, #20]
{
   1dc4c:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1dc4e:	b103      	cbz	r3, 1dc52 <att_sent+0xa>
		chan->ops->sent(chan);
   1dc50:	4718      	bx	r3
}
   1dc52:	4770      	bx	lr

0001dc54 <attr_read_type_cb>:
{
   1dc54:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1dc56:	68d4      	ldr	r4, [r2, #12]
   1dc58:	7823      	ldrb	r3, [r4, #0]
   1dc5a:	3102      	adds	r1, #2
   1dc5c:	b913      	cbnz	r3, 1dc64 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1dc5e:	7021      	strb	r1, [r4, #0]
	return true;
   1dc60:	2001      	movs	r0, #1
   1dc62:	e006      	b.n	1dc72 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1dc64:	428b      	cmp	r3, r1
   1dc66:	d0fb      	beq.n	1dc60 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1dc68:	8983      	ldrh	r3, [r0, #12]
   1dc6a:	3b02      	subs	r3, #2
   1dc6c:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1dc6e:	2000      	movs	r0, #0
   1dc70:	6110      	str	r0, [r2, #16]
}
   1dc72:	bd10      	pop	{r4, pc}

0001dc74 <att_prepare_write_req>:
}
   1dc74:	2006      	movs	r0, #6
   1dc76:	4770      	bx	lr

0001dc78 <att_op_get_type>:
	switch (op) {
   1dc78:	281e      	cmp	r0, #30
   1dc7a:	d816      	bhi.n	1dcaa <att_op_get_type+0x32>
   1dc7c:	b308      	cbz	r0, 1dcc2 <att_op_get_type+0x4a>
   1dc7e:	1e43      	subs	r3, r0, #1
   1dc80:	2b1d      	cmp	r3, #29
   1dc82:	d81e      	bhi.n	1dcc2 <att_op_get_type+0x4a>
   1dc84:	e8df f003 	tbb	[pc, r3]
   1dc88:	23172317 	.word	0x23172317
   1dc8c:	23172317 	.word	0x23172317
   1dc90:	23172317 	.word	0x23172317
   1dc94:	23172317 	.word	0x23172317
   1dc98:	1d172317 	.word	0x1d172317
   1dc9c:	2317231d 	.word	0x2317231d
   1dca0:	1d191d17 	.word	0x1d191d17
   1dca4:	0f1b      	.short	0x0f1b
   1dca6:	2004      	movs	r0, #4
   1dca8:	4770      	bx	lr
   1dcaa:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1dcae:	2b52      	cmp	r3, #82	; 0x52
   1dcb0:	d107      	bne.n	1dcc2 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1dcb2:	2000      	movs	r0, #0
}
   1dcb4:	4770      	bx	lr
		return ATT_RESPONSE;
   1dcb6:	2002      	movs	r0, #2
   1dcb8:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1dcba:	2003      	movs	r0, #3
   1dcbc:	4770      	bx	lr
		return ATT_INDICATION;
   1dcbe:	2005      	movs	r0, #5
   1dcc0:	4770      	bx	lr
		return ATT_COMMAND;
   1dcc2:	f010 0f40 	tst.w	r0, #64	; 0x40
   1dcc6:	bf0c      	ite	eq
   1dcc8:	2006      	moveq	r0, #6
   1dcca:	2000      	movne	r0, #0
   1dccc:	4770      	bx	lr
		return ATT_REQUEST;
   1dcce:	2001      	movs	r0, #1
   1dcd0:	4770      	bx	lr

0001dcd2 <bt_gatt_foreach_attr>:
{
   1dcd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1dcd4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1dcd8:	2300      	movs	r3, #0
   1dcda:	9300      	str	r3, [sp, #0]
   1dcdc:	461a      	mov	r2, r3
   1dcde:	f7f9 fb89 	bl	173f4 <bt_gatt_foreach_attr_type>
}
   1dce2:	b005      	add	sp, #20
   1dce4:	f85d fb04 	ldr.w	pc, [sp], #4

0001dce8 <att_chan_read>:
{
   1dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcec:	4680      	mov	r8, r0
   1dcee:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1dcf0:	4610      	mov	r0, r2
{
   1dcf2:	4699      	mov	r9, r3
   1dcf4:	468b      	mov	fp, r1
   1dcf6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1dcf8:	f7ff ff9e 	bl	1dc38 <net_buf_frags_len>
   1dcfc:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   1dd00:	4283      	cmp	r3, r0
   1dd02:	d97a      	bls.n	1ddfa <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1dd04:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dd08:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1dd0a:	4630      	mov	r0, r6
   1dd0c:	f001 fcaa 	bl	1f664 <net_buf_frag_last>
	size_t len, total = 0;
   1dd10:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1dd14:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1dd16:	4630      	mov	r0, r6
   1dd18:	f7ff ff8e 	bl	1dc38 <net_buf_frags_len>
   1dd1c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1dd20:	f105 0708 	add.w	r7, r5, #8
   1dd24:	1a24      	subs	r4, r4, r0
   1dd26:	4638      	mov	r0, r7
   1dd28:	f001 fcf9 	bl	1f71e <net_buf_simple_tailroom>
   1dd2c:	4284      	cmp	r4, r0
   1dd2e:	d211      	bcs.n	1dd54 <att_chan_read+0x6c>
   1dd30:	4630      	mov	r0, r6
   1dd32:	f7ff ff81 	bl	1dc38 <net_buf_frags_len>
   1dd36:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1dd3a:	1a24      	subs	r4, r4, r0
		if (!len) {
   1dd3c:	bb34      	cbnz	r4, 1dd8c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1dd3e:	79b0      	ldrb	r0, [r6, #6]
   1dd40:	f7fa feb2 	bl	18aa8 <net_buf_pool_get>
   1dd44:	2200      	movs	r2, #0
   1dd46:	2300      	movs	r3, #0
   1dd48:	f001 fc58 	bl	1f5fc <net_buf_alloc_fixed>
			if (!frag) {
   1dd4c:	4605      	mov	r5, r0
   1dd4e:	b930      	cbnz	r0, 1dd5e <att_chan_read+0x76>
	return total;
   1dd50:	4657      	mov	r7, sl
   1dd52:	e02c      	b.n	1ddae <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1dd54:	4638      	mov	r0, r7
   1dd56:	f001 fce2 	bl	1f71e <net_buf_simple_tailroom>
   1dd5a:	4604      	mov	r4, r0
   1dd5c:	e7ee      	b.n	1dd3c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1dd5e:	4601      	mov	r1, r0
   1dd60:	4630      	mov	r0, r6
   1dd62:	f001 fc90 	bl	1f686 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1dd66:	4630      	mov	r0, r6
   1dd68:	f7ff ff66 	bl	1dc38 <net_buf_frags_len>
   1dd6c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1dd70:	f105 0708 	add.w	r7, r5, #8
   1dd74:	1a24      	subs	r4, r4, r0
   1dd76:	4638      	mov	r0, r7
   1dd78:	f001 fcd1 	bl	1f71e <net_buf_simple_tailroom>
   1dd7c:	4284      	cmp	r4, r0
   1dd7e:	d21a      	bcs.n	1ddb6 <att_chan_read+0xce>
   1dd80:	4630      	mov	r0, r6
   1dd82:	f7ff ff59 	bl	1dc38 <net_buf_frags_len>
   1dd86:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1dd8a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1dd8c:	68a9      	ldr	r1, [r5, #8]
   1dd8e:	89aa      	ldrh	r2, [r5, #12]
   1dd90:	f8db 7004 	ldr.w	r7, [fp, #4]
   1dd94:	9803      	ldr	r0, [sp, #12]
   1dd96:	f8cd 9000 	str.w	r9, [sp]
   1dd9a:	440a      	add	r2, r1
   1dd9c:	b2a3      	uxth	r3, r4
   1dd9e:	4659      	mov	r1, fp
   1dda0:	47b8      	blx	r7
		if (read < 0) {
   1dda2:	1e07      	subs	r7, r0, #0
   1dda4:	da0c      	bge.n	1ddc0 <att_chan_read+0xd8>
				return total;
   1dda6:	f1ba 0f00 	cmp.w	sl, #0
   1ddaa:	bf18      	it	ne
   1ddac:	4657      	movne	r7, sl
}
   1ddae:	4638      	mov	r0, r7
   1ddb0:	b005      	add	sp, #20
   1ddb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ddb6:	4638      	mov	r0, r7
   1ddb8:	f001 fcb1 	bl	1f71e <net_buf_simple_tailroom>
   1ddbc:	4604      	mov	r4, r0
   1ddbe:	e7e5      	b.n	1dd8c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1ddc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ddc2:	b993      	cbnz	r3, 1ddea <att_chan_read+0x102>
		net_buf_add(frag, read);
   1ddc4:	4639      	mov	r1, r7
   1ddc6:	f105 0008 	add.w	r0, r5, #8
   1ddca:	f001 fc6d 	bl	1f6a8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ddce:	4630      	mov	r0, r6
   1ddd0:	f7ff ff32 	bl	1dc38 <net_buf_frags_len>
   1ddd4:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1ddd8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ddda:	4283      	cmp	r3, r0
		total += read;
   1dddc:	44ba      	add	sl, r7
		offset += read;
   1ddde:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1dde2:	d9b5      	bls.n	1dd50 <att_chan_read+0x68>
   1dde4:	42a7      	cmp	r7, r4
   1dde6:	d096      	beq.n	1dd16 <att_chan_read+0x2e>
   1dde8:	e7b2      	b.n	1dd50 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1ddea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ddec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ddee:	4639      	mov	r1, r7
   1ddf0:	4628      	mov	r0, r5
   1ddf2:	4798      	blx	r3
   1ddf4:	2800      	cmp	r0, #0
   1ddf6:	d1e5      	bne.n	1ddc4 <att_chan_read+0xdc>
   1ddf8:	e7aa      	b.n	1dd50 <att_chan_read+0x68>
		return 0;
   1ddfa:	2700      	movs	r7, #0
   1ddfc:	e7d7      	b.n	1ddae <att_chan_read+0xc6>

0001ddfe <find_type_cb>:
{
   1ddfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1de02:	f8d2 9000 	ldr.w	r9, [r2]
{
   1de06:	b091      	sub	sp, #68	; 0x44
   1de08:	4607      	mov	r7, r0
   1de0a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1de0c:	2400      	movs	r4, #0
   1de0e:	f642 0301 	movw	r3, #10241	; 0x2801
   1de12:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1de14:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1de18:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1de1c:	a90b      	add	r1, sp, #44	; 0x2c
{
   1de1e:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1de20:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1de24:	f7ff f821 	bl	1ce6a <bt_uuid_cmp>
   1de28:	2800      	cmp	r0, #0
   1de2a:	d079      	beq.n	1df20 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1de2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1de30:	6838      	ldr	r0, [r7, #0]
   1de32:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1de36:	a90b      	add	r1, sp, #44	; 0x2c
   1de38:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1de3c:	f7ff f815 	bl	1ce6a <bt_uuid_cmp>
   1de40:	4604      	mov	r4, r0
   1de42:	b148      	cbz	r0, 1de58 <find_type_cb+0x5a>
		if (data->group &&
   1de44:	68ab      	ldr	r3, [r5, #8]
   1de46:	b11b      	cbz	r3, 1de50 <find_type_cb+0x52>
   1de48:	885a      	ldrh	r2, [r3, #2]
   1de4a:	42b2      	cmp	r2, r6
   1de4c:	d200      	bcs.n	1de50 <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1de4e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1de50:	2001      	movs	r0, #1
}
   1de52:	b011      	add	sp, #68	; 0x44
   1de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1de58:	6869      	ldr	r1, [r5, #4]
   1de5a:	4608      	mov	r0, r1
   1de5c:	f7ff feec 	bl	1dc38 <net_buf_frags_len>
   1de60:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1de64:	1a1b      	subs	r3, r3, r0
   1de66:	2b03      	cmp	r3, #3
   1de68:	d922      	bls.n	1deb0 <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
   1de6a:	4608      	mov	r0, r1
   1de6c:	f001 fbfa 	bl	1f664 <net_buf_frag_last>
   1de70:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1de72:	6868      	ldr	r0, [r5, #4]
   1de74:	f7ff fee0 	bl	1dc38 <net_buf_frags_len>
   1de78:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
   1de7c:	f104 0b08 	add.w	fp, r4, #8
   1de80:	ebaa 0a00 	sub.w	sl, sl, r0
   1de84:	4658      	mov	r0, fp
   1de86:	f001 fc4a 	bl	1f71e <net_buf_simple_tailroom>
   1de8a:	4582      	cmp	sl, r0
   1de8c:	d212      	bcs.n	1deb4 <find_type_cb+0xb6>
   1de8e:	6868      	ldr	r0, [r5, #4]
   1de90:	f7ff fed2 	bl	1dc38 <net_buf_frags_len>
   1de94:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1de98:	1a18      	subs	r0, r3, r0
	if (!len) {
   1de9a:	b998      	cbnz	r0, 1dec4 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1de9c:	686b      	ldr	r3, [r5, #4]
   1de9e:	7998      	ldrb	r0, [r3, #6]
   1dea0:	f7fa fe02 	bl	18aa8 <net_buf_pool_get>
   1dea4:	2200      	movs	r2, #0
   1dea6:	2300      	movs	r3, #0
   1dea8:	f001 fba8 	bl	1f5fc <net_buf_alloc_fixed>
		if (!frag) {
   1deac:	4604      	mov	r4, r0
   1deae:	b928      	cbnz	r0, 1debc <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
   1deb0:	4620      	mov	r0, r4
   1deb2:	e7ce      	b.n	1de52 <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1deb4:	4658      	mov	r0, fp
   1deb6:	f001 fc32 	bl	1f71e <net_buf_simple_tailroom>
   1deba:	e7ee      	b.n	1de9a <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
   1debc:	4601      	mov	r1, r0
   1debe:	6868      	ldr	r0, [r5, #4]
   1dec0:	f001 fbe1 	bl	1f686 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1dec4:	2300      	movs	r3, #0
   1dec6:	9300      	str	r3, [sp, #0]
   1dec8:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1decc:	4639      	mov	r1, r7
   1dece:	2310      	movs	r3, #16
   1ded0:	aa02      	add	r2, sp, #8
   1ded2:	4640      	mov	r0, r8
   1ded4:	47c8      	blx	r9
	if (read < 0) {
   1ded6:	1e07      	subs	r7, r0, #0
   1ded8:	db22      	blt.n	1df20 <find_type_cb+0x122>
	if (read != data->value_len) {
   1deda:	7c2a      	ldrb	r2, [r5, #16]
   1dedc:	68e8      	ldr	r0, [r5, #12]
   1dede:	42ba      	cmp	r2, r7
   1dee0:	d01a      	beq.n	1df18 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1dee2:	4601      	mov	r1, r0
   1dee4:	a80b      	add	r0, sp, #44	; 0x2c
   1dee6:	f7fe ffea 	bl	1cebe <bt_uuid_create>
   1deea:	b1c8      	cbz	r0, 1df20 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1deec:	b2fa      	uxtb	r2, r7
   1deee:	a902      	add	r1, sp, #8
   1def0:	a806      	add	r0, sp, #24
   1def2:	f7fe ffe4 	bl	1cebe <bt_uuid_create>
   1def6:	b198      	cbz	r0, 1df20 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1def8:	a906      	add	r1, sp, #24
   1defa:	a80b      	add	r0, sp, #44	; 0x2c
   1defc:	f7fe ffb5 	bl	1ce6a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1df00:	b970      	cbnz	r0, 1df20 <find_type_cb+0x122>
	data->err = 0x00;
   1df02:	2300      	movs	r3, #0
   1df04:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
   1df06:	2104      	movs	r1, #4
   1df08:	f104 0008 	add.w	r0, r4, #8
   1df0c:	f001 fbcc 	bl	1f6a8 <net_buf_simple_add>
   1df10:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1df12:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1df14:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1df16:	e79b      	b.n	1de50 <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
   1df18:	a902      	add	r1, sp, #8
   1df1a:	f7fe fede 	bl	1ccda <memcmp>
   1df1e:	e7ef      	b.n	1df00 <find_type_cb+0x102>
	data->group = NULL;
   1df20:	2300      	movs	r3, #0
   1df22:	60ab      	str	r3, [r5, #8]
   1df24:	e794      	b.n	1de50 <find_type_cb+0x52>

0001df26 <find_info_cb>:
{
   1df26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1df28:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1df2a:	6817      	ldr	r7, [r2, #0]
{
   1df2c:	4605      	mov	r5, r0
   1df2e:	460e      	mov	r6, r1
   1df30:	4614      	mov	r4, r2
	if (!data->rsp) {
   1df32:	b963      	cbnz	r3, 1df4e <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1df34:	6850      	ldr	r0, [r2, #4]
   1df36:	2101      	movs	r1, #1
   1df38:	3008      	adds	r0, #8
   1df3a:	f001 fbb5 	bl	1f6a8 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1df3e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1df40:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1df42:	781b      	ldrb	r3, [r3, #0]
   1df44:	2b00      	cmp	r3, #0
   1df46:	bf0c      	ite	eq
   1df48:	2301      	moveq	r3, #1
   1df4a:	2302      	movne	r3, #2
   1df4c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1df4e:	68a3      	ldr	r3, [r4, #8]
   1df50:	781b      	ldrb	r3, [r3, #0]
   1df52:	2b01      	cmp	r3, #1
   1df54:	d003      	beq.n	1df5e <find_info_cb+0x38>
   1df56:	2b02      	cmp	r3, #2
   1df58:	d019      	beq.n	1df8e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1df5a:	2000      	movs	r0, #0
   1df5c:	e016      	b.n	1df8c <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1df5e:	682b      	ldr	r3, [r5, #0]
   1df60:	781b      	ldrb	r3, [r3, #0]
   1df62:	2b00      	cmp	r3, #0
   1df64:	d1f9      	bne.n	1df5a <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1df66:	6860      	ldr	r0, [r4, #4]
   1df68:	2104      	movs	r1, #4
   1df6a:	3008      	adds	r0, #8
   1df6c:	f001 fb9c 	bl	1f6a8 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1df70:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1df72:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1df74:	885b      	ldrh	r3, [r3, #2]
   1df76:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1df78:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1df7a:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1df7c:	899b      	ldrh	r3, [r3, #12]
   1df7e:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1df82:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1df84:	2804      	cmp	r0, #4
   1df86:	bf94      	ite	ls
   1df88:	2000      	movls	r0, #0
   1df8a:	2001      	movhi	r0, #1
}
   1df8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1df8e:	682b      	ldr	r3, [r5, #0]
   1df90:	781b      	ldrb	r3, [r3, #0]
   1df92:	2b02      	cmp	r3, #2
   1df94:	d1e1      	bne.n	1df5a <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1df96:	6860      	ldr	r0, [r4, #4]
   1df98:	2112      	movs	r1, #18
   1df9a:	3008      	adds	r0, #8
   1df9c:	f001 fb84 	bl	1f6a8 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1dfa0:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1dfa2:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1dfa4:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1dfa6:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1dfaa:	3101      	adds	r1, #1
   1dfac:	f7fe fea5 	bl	1ccfa <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1dfb0:	6863      	ldr	r3, [r4, #4]
   1dfb2:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1dfb6:	899b      	ldrh	r3, [r3, #12]
   1dfb8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1dfba:	2812      	cmp	r0, #18
   1dfbc:	e7e3      	b.n	1df86 <find_info_cb+0x60>

0001dfbe <attr_read_group_cb>:
	if (!data->rsp->len) {
   1dfbe:	68d0      	ldr	r0, [r2, #12]
   1dfc0:	7803      	ldrb	r3, [r0, #0]
   1dfc2:	3104      	adds	r1, #4
   1dfc4:	b913      	cbnz	r3, 1dfcc <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1dfc6:	7001      	strb	r1, [r0, #0]
	return true;
   1dfc8:	2001      	movs	r0, #1
}
   1dfca:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1dfcc:	428b      	cmp	r3, r1
   1dfce:	d0fb      	beq.n	1dfc8 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1dfd0:	6891      	ldr	r1, [r2, #8]
   1dfd2:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1dfd4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1dfd6:	3b04      	subs	r3, #4
   1dfd8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1dfda:	6110      	str	r0, [r2, #16]
		return false;
   1dfdc:	4770      	bx	lr

0001dfde <att_exec_write_req>:
   1dfde:	2006      	movs	r0, #6
   1dfe0:	4770      	bx	lr

0001dfe2 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dfe2:	30c0      	adds	r0, #192	; 0xc0
   1dfe4:	f3bf 8f5b 	dmb	ish
   1dfe8:	e850 3f00 	ldrex	r3, [r0]
   1dfec:	f023 0301 	bic.w	r3, r3, #1
   1dff0:	e840 3200 	strex	r2, r3, [r0]
   1dff4:	2a00      	cmp	r2, #0
   1dff6:	d1f7      	bne.n	1dfe8 <chan_rsp_sent+0x6>
   1dff8:	f3bf 8f5b 	dmb	ish
}
   1dffc:	4770      	bx	lr

0001dffe <chan_cfm_sent>:
   1dffe:	30c0      	adds	r0, #192	; 0xc0
   1e000:	f3bf 8f5b 	dmb	ish
   1e004:	e850 3f00 	ldrex	r3, [r0]
   1e008:	f023 0302 	bic.w	r3, r3, #2
   1e00c:	e840 3200 	strex	r2, r3, [r0]
   1e010:	2a00      	cmp	r2, #0
   1e012:	d1f7      	bne.n	1e004 <chan_cfm_sent+0x6>
   1e014:	f3bf 8f5b 	dmb	ish
}
   1e018:	4770      	bx	lr

0001e01a <att_get>:
{
   1e01a:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1e01c:	7b43      	ldrb	r3, [r0, #13]
   1e01e:	2b07      	cmp	r3, #7
   1e020:	d001      	beq.n	1e026 <att_get+0xc>
		return NULL;
   1e022:	2000      	movs	r0, #0
}
   1e024:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1e026:	2104      	movs	r1, #4
   1e028:	f7ff fdb5 	bl	1db96 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e02c:	2800      	cmp	r0, #0
   1e02e:	d0f8      	beq.n	1e022 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e030:	f3bf 8f5b 	dmb	ish
   1e034:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1e038:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1e03c:	075b      	lsls	r3, r3, #29
   1e03e:	d4f0      	bmi.n	1e022 <att_get+0x8>
	return att_chan->att;
   1e040:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e044:	e7ee      	b.n	1e024 <att_get+0xa>

0001e046 <write_cb>:
{
   1e046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e048:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e04a:	4601      	mov	r1, r0
{
   1e04c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e04e:	222a      	movs	r2, #42	; 0x2a
   1e050:	6820      	ldr	r0, [r4, #0]
   1e052:	f000 fd89 	bl	1eb68 <bt_gatt_check_perm>
   1e056:	4605      	mov	r5, r0
   1e058:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e05a:	bb00      	cbnz	r0, 1e09e <write_cb+0x58>
	if (!data->req) {
   1e05c:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1e05e:	68b7      	ldr	r7, [r6, #8]
   1e060:	68e2      	ldr	r2, [r4, #12]
   1e062:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1e064:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1e066:	bf14      	ite	ne
   1e068:	2300      	movne	r3, #0
   1e06a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1e06c:	9301      	str	r3, [sp, #4]
   1e06e:	8a63      	ldrh	r3, [r4, #18]
   1e070:	9300      	str	r3, [sp, #0]
   1e072:	4631      	mov	r1, r6
   1e074:	8a23      	ldrh	r3, [r4, #16]
   1e076:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1e078:	1e03      	subs	r3, r0, #0
   1e07a:	db05      	blt.n	1e088 <write_cb+0x42>
   1e07c:	8a22      	ldrh	r2, [r4, #16]
   1e07e:	4293      	cmp	r3, r2
   1e080:	d10b      	bne.n	1e09a <write_cb+0x54>
	data->err = 0U;
   1e082:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1e084:	2501      	movs	r5, #1
   1e086:	e005      	b.n	1e094 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1e088:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1e08c:	d305      	bcc.n	1e09a <write_cb+0x54>
		return -err;
   1e08e:	425b      	negs	r3, r3
   1e090:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1e092:	7523      	strb	r3, [r4, #20]
}
   1e094:	4628      	mov	r0, r5
   1e096:	b003      	add	sp, #12
   1e098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1e09a:	230e      	movs	r3, #14
   1e09c:	e7f9      	b.n	1e092 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1e09e:	2500      	movs	r5, #0
   1e0a0:	e7f8      	b.n	1e094 <write_cb+0x4e>

0001e0a2 <read_cb>:
{
   1e0a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1e0a6:	f8d2 8000 	ldr.w	r8, [r2]
{
   1e0aa:	4606      	mov	r6, r0
	data->err = 0x00;
   1e0ac:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1e0ae:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1e0b2:	7317      	strb	r7, [r2, #12]
{
   1e0b4:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e0b6:	4631      	mov	r1, r6
   1e0b8:	2215      	movs	r2, #21
   1e0ba:	f000 fd55 	bl	1eb68 <bt_gatt_check_perm>
   1e0be:	4604      	mov	r4, r0
   1e0c0:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1e0c2:	b9a0      	cbnz	r0, 1e0ee <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1e0c4:	e9cd 0000 	strd	r0, r0, [sp]
   1e0c8:	88ab      	ldrh	r3, [r5, #4]
   1e0ca:	68aa      	ldr	r2, [r5, #8]
   1e0cc:	4631      	mov	r1, r6
   1e0ce:	4640      	mov	r0, r8
   1e0d0:	f7ff fe0a 	bl	1dce8 <att_chan_read>
	if (ret < 0) {
   1e0d4:	1e03      	subs	r3, r0, #0
   1e0d6:	da0c      	bge.n	1e0f2 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1e0d8:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1e0dc:	bf26      	itte	cs
   1e0de:	425b      	negcs	r3, r3
   1e0e0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1e0e2:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1e0e4:	732b      	strb	r3, [r5, #12]
}
   1e0e6:	4620      	mov	r0, r4
   1e0e8:	b002      	add	sp, #8
   1e0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1e0ee:	463c      	mov	r4, r7
   1e0f0:	e7f9      	b.n	1e0e6 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1e0f2:	2401      	movs	r4, #1
   1e0f4:	e7f7      	b.n	1e0e6 <read_cb+0x44>

0001e0f6 <chan_req_send>:
{
   1e0f6:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e0f8:	690e      	ldr	r6, [r1, #16]
{
   1e0fa:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e0fc:	4630      	mov	r0, r6
{
   1e0fe:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e100:	f7ff fd9a 	bl	1dc38 <net_buf_frags_len>
   1e104:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1e108:	4283      	cmp	r3, r0
   1e10a:	d317      	bcc.n	1e13c <chan_req_send+0x46>
	chan->req = req;
   1e10c:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   1e110:	f106 0008 	add.w	r0, r6, #8
   1e114:	f001 faff 	bl	1f716 <net_buf_simple_headroom>
	state->len = buf->len;
   1e118:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1e11a:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1e11c:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1e11e:	6920      	ldr	r0, [r4, #16]
   1e120:	f001 fa9c 	bl	1f65c <net_buf_ref>
   1e124:	2200      	movs	r2, #0
   1e126:	4601      	mov	r1, r0
   1e128:	4628      	mov	r0, r5
   1e12a:	f7f8 fa45 	bl	165b8 <chan_send>
	if (err) {
   1e12e:	4605      	mov	r5, r0
   1e130:	b110      	cbz	r0, 1e138 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1e132:	6920      	ldr	r0, [r4, #16]
   1e134:	f7fa fd74 	bl	18c20 <net_buf_unref>
}
   1e138:	4628      	mov	r0, r5
   1e13a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1e13c:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1e140:	e7fa      	b.n	1e138 <chan_req_send+0x42>

0001e142 <bt_att_chan_req_send>:
{
   1e142:	b570      	push	{r4, r5, r6, lr}
   1e144:	4604      	mov	r4, r0
   1e146:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1e148:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   1e14c:	2200      	movs	r2, #0
   1e14e:	2300      	movs	r3, #0
   1e150:	4630      	mov	r0, r6
   1e152:	f7fc fd07 	bl	1ab64 <z_impl_k_sem_take>
   1e156:	2800      	cmp	r0, #0
   1e158:	db0a      	blt.n	1e170 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   1e15a:	4620      	mov	r0, r4
   1e15c:	4629      	mov	r1, r5
   1e15e:	f7ff ffca 	bl	1e0f6 <chan_req_send>
	if (err < 0) {
   1e162:	1e04      	subs	r4, r0, #0
   1e164:	da02      	bge.n	1e16c <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   1e166:	4630      	mov	r0, r6
   1e168:	f7fc fcd6 	bl	1ab18 <z_impl_k_sem_give>
}
   1e16c:	4620      	mov	r0, r4
   1e16e:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1e170:	f06f 040a 	mvn.w	r4, #10
   1e174:	e7fa      	b.n	1e16c <bt_att_chan_req_send+0x2a>

0001e176 <bt_att_status>:
{
   1e176:	b538      	push	{r3, r4, r5, lr}
   1e178:	f3bf 8f5b 	dmb	ish
   1e17c:	680b      	ldr	r3, [r1, #0]
   1e17e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e182:	07db      	lsls	r3, r3, #31
{
   1e184:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e186:	d518      	bpl.n	1e1ba <bt_att_status+0x44>
	if (chan->req) {
   1e188:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1e18c:	b9ab      	cbnz	r3, 1e1ba <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   1e18e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e192:	3004      	adds	r0, #4
   1e194:	f7ff fd2b 	bl	1dbee <sys_slist_get>
	if (!node) {
   1e198:	4604      	mov	r4, r0
   1e19a:	b170      	cbz	r0, 1e1ba <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e19c:	4601      	mov	r1, r0
   1e19e:	f1a5 0008 	sub.w	r0, r5, #8
   1e1a2:	f7ff ffce 	bl	1e142 <bt_att_chan_req_send>
   1e1a6:	2800      	cmp	r0, #0
   1e1a8:	da07      	bge.n	1e1ba <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   1e1aa:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1e1ae:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1e1b0:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e1b2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1e1b4:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e1b6:	b902      	cbnz	r2, 1e1ba <bt_att_status+0x44>
	list->tail = node;
   1e1b8:	609c      	str	r4, [r3, #8]
}
   1e1ba:	bd38      	pop	{r3, r4, r5, pc}

0001e1bc <bt_att_chan_send>:
{
   1e1bc:	b570      	push	{r4, r5, r6, lr}
   1e1be:	4604      	mov	r4, r0
   1e1c0:	460e      	mov	r6, r1
	if (!cb) {
   1e1c2:	4615      	mov	r5, r2
   1e1c4:	b132      	cbz	r2, 1e1d4 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1e1c6:	462a      	mov	r2, r5
   1e1c8:	4631      	mov	r1, r6
   1e1ca:	4620      	mov	r0, r4
}
   1e1cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1e1d0:	f7f8 b9f2 	b.w	165b8 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1e1d4:	2200      	movs	r2, #0
   1e1d6:	2300      	movs	r3, #0
   1e1d8:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1e1dc:	f7fc fcc2 	bl	1ab64 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1e1e0:	2800      	cmp	r0, #0
   1e1e2:	daf0      	bge.n	1e1c6 <bt_att_chan_send+0xa>
}
   1e1e4:	f06f 000a 	mvn.w	r0, #10
   1e1e8:	bd70      	pop	{r4, r5, r6, pc}

0001e1ea <bt_att_chan_send_rsp>:
{
   1e1ea:	b538      	push	{r3, r4, r5, lr}
   1e1ec:	4604      	mov	r4, r0
   1e1ee:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1e1f0:	f7ff ffe4 	bl	1e1bc <bt_att_chan_send>
	if (err) {
   1e1f4:	b130      	cbz	r0, 1e204 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1e1f6:	4629      	mov	r1, r5
   1e1f8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   1e1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1e200:	f001 ba1f 	b.w	1f642 <net_buf_put>
}
   1e204:	bd38      	pop	{r3, r4, r5, pc}

0001e206 <process_queue>:
{
   1e206:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1e208:	2200      	movs	r2, #0
{
   1e20a:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1e20c:	2300      	movs	r3, #0
   1e20e:	4608      	mov	r0, r1
{
   1e210:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1e212:	f001 f9f8 	bl	1f606 <net_buf_get>
	if (buf) {
   1e216:	4605      	mov	r5, r0
   1e218:	b160      	cbz	r0, 1e234 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1e21a:	4601      	mov	r1, r0
   1e21c:	2200      	movs	r2, #0
   1e21e:	4620      	mov	r0, r4
   1e220:	f7f8 f9ca 	bl	165b8 <chan_send>
		if (err) {
   1e224:	4604      	mov	r4, r0
   1e226:	b118      	cbz	r0, 1e230 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1e228:	4629      	mov	r1, r5
   1e22a:	4630      	mov	r0, r6
   1e22c:	f001 fd2f 	bl	1fc8e <k_queue_prepend>
}
   1e230:	4620      	mov	r0, r4
   1e232:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e234:	f06f 0401 	mvn.w	r4, #1
   1e238:	e7fa      	b.n	1e230 <process_queue+0x2a>

0001e23a <bt_att_sent>:
{
   1e23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1e23c:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   1e240:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1e244:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1e246:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1e24a:	b10b      	cbz	r3, 1e250 <bt_att_sent+0x16>
		chan->sent(chan);
   1e24c:	4638      	mov	r0, r7
   1e24e:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e250:	f3bf 8f5b 	dmb	ish
   1e254:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1e258:	e853 2f00 	ldrex	r2, [r3]
   1e25c:	f022 0210 	bic.w	r2, r2, #16
   1e260:	e843 2100 	strex	r1, r2, [r3]
   1e264:	2900      	cmp	r1, #0
   1e266:	d1f7      	bne.n	1e258 <bt_att_sent+0x1e>
   1e268:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1e26c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1e270:	b98b      	cbnz	r3, 1e296 <bt_att_sent+0x5c>
   1e272:	686b      	ldr	r3, [r5, #4]
   1e274:	b17b      	cbz	r3, 1e296 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e276:	1d28      	adds	r0, r5, #4
   1e278:	f7ff fcb9 	bl	1dbee <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e27c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e27e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e280:	4638      	mov	r0, r7
   1e282:	f7ff ff38 	bl	1e0f6 <chan_req_send>
   1e286:	2800      	cmp	r0, #0
   1e288:	da17      	bge.n	1e2ba <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   1e28a:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1e28c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e28e:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1e290:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e292:	b903      	cbnz	r3, 1e296 <bt_att_sent+0x5c>
	list->tail = node;
   1e294:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1e296:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   1e29a:	4638      	mov	r0, r7
   1e29c:	f7ff ffb3 	bl	1e206 <process_queue>
	if (!err) {
   1e2a0:	b158      	cbz	r0, 1e2ba <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   1e2a2:	f105 010c 	add.w	r1, r5, #12
   1e2a6:	4638      	mov	r0, r7
   1e2a8:	f7ff ffad 	bl	1e206 <process_queue>
	if (!err) {
   1e2ac:	b128      	cbz	r0, 1e2ba <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   1e2ae:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   1e2b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e2b6:	f7fc bc2f 	b.w	1ab18 <z_impl_k_sem_give>
   1e2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e2bc <bt_att_chan_create_pdu>:
{
   1e2bc:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e2be:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   1e2c2:	3201      	adds	r2, #1
   1e2c4:	429a      	cmp	r2, r3
{
   1e2c6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e2c8:	d81b      	bhi.n	1e302 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1e2ca:	4608      	mov	r0, r1
   1e2cc:	f7ff fcd4 	bl	1dc78 <att_op_get_type>
   1e2d0:	2802      	cmp	r0, #2
   1e2d2:	d001      	beq.n	1e2d8 <bt_att_chan_create_pdu+0x1c>
   1e2d4:	2804      	cmp	r0, #4
   1e2d6:	d10f      	bne.n	1e2f8 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1e2d8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e2dc:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1e2de:	2100      	movs	r1, #0
   1e2e0:	4608      	mov	r0, r1
   1e2e2:	f7ff fbff 	bl	1dae4 <bt_l2cap_create_pdu_timeout>
   1e2e6:	4604      	mov	r4, r0
	if (!buf) {
   1e2e8:	b120      	cbz	r0, 1e2f4 <bt_att_chan_create_pdu+0x38>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1e2ea:	2101      	movs	r1, #1
   1e2ec:	3008      	adds	r0, #8
   1e2ee:	f001 f9db 	bl	1f6a8 <net_buf_simple_add>
	hdr->code = op;
   1e2f2:	7005      	strb	r5, [r0, #0]
}
   1e2f4:	4620      	mov	r0, r4
   1e2f6:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1e2f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e2fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e300:	e7ed      	b.n	1e2de <bt_att_chan_create_pdu+0x22>
		return NULL;
   1e302:	2400      	movs	r4, #0
   1e304:	e7f6      	b.n	1e2f4 <bt_att_chan_create_pdu+0x38>

0001e306 <bt_att_create_pdu>:
{
   1e306:	b570      	push	{r4, r5, r6, lr}
   1e308:	460e      	mov	r6, r1
   1e30a:	4615      	mov	r5, r2
	att = att_get(conn);
   1e30c:	f7ff fe85 	bl	1e01a <att_get>
	if (!att) {
   1e310:	b170      	cbz	r0, 1e330 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e312:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1e314:	b163      	cbz	r3, 1e330 <bt_att_create_pdu+0x2a>
   1e316:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1e31a:	d009      	beq.n	1e330 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e31c:	681b      	ldr	r3, [r3, #0]
   1e31e:	b10b      	cbz	r3, 1e324 <bt_att_create_pdu+0x1e>
   1e320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e324:	1c6a      	adds	r2, r5, #1
   1e326:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   1e32a:	428a      	cmp	r2, r1
   1e32c:	d902      	bls.n	1e334 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e32e:	b93b      	cbnz	r3, 1e340 <bt_att_create_pdu+0x3a>
}
   1e330:	2000      	movs	r0, #0
   1e332:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1e334:	462a      	mov	r2, r5
   1e336:	4631      	mov	r1, r6
}
   1e338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1e33c:	f7ff bfbe 	b.w	1e2bc <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e340:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
   1e344:	d004      	beq.n	1e350 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e346:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e34a:	b10c      	cbz	r4, 1e350 <bt_att_create_pdu+0x4a>
   1e34c:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
   1e350:	4618      	mov	r0, r3
   1e352:	4623      	mov	r3, r4
   1e354:	e7e7      	b.n	1e326 <bt_att_create_pdu+0x20>

0001e356 <att_read_blob_req>:
{
   1e356:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1e358:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1e35a:	8813      	ldrh	r3, [r2, #0]
   1e35c:	8852      	ldrh	r2, [r2, #2]
   1e35e:	9200      	str	r2, [sp, #0]
   1e360:	210c      	movs	r1, #12
   1e362:	220d      	movs	r2, #13
   1e364:	f7f8 fb82 	bl	16a6c <att_read_rsp>
}
   1e368:	b003      	add	sp, #12
   1e36a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e36e <att_read_req>:
{
   1e36e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1e370:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1e372:	2200      	movs	r2, #0
   1e374:	881b      	ldrh	r3, [r3, #0]
   1e376:	9200      	str	r2, [sp, #0]
   1e378:	210a      	movs	r1, #10
   1e37a:	220b      	movs	r2, #11
   1e37c:	f7f8 fb76 	bl	16a6c <att_read_rsp>
}
   1e380:	b003      	add	sp, #12
   1e382:	f85d fb04 	ldr.w	pc, [sp], #4

0001e386 <bt_att_init>:
	bt_gatt_init();
   1e386:	f7f8 bfb1 	b.w	172ec <bt_gatt_init>

0001e38a <att_req_destroy>:
{
   1e38a:	b510      	push	{r4, lr}
   1e38c:	4604      	mov	r4, r0
	if (req->buf) {
   1e38e:	6900      	ldr	r0, [r0, #16]
   1e390:	b108      	cbz	r0, 1e396 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1e392:	f7fa fc45 	bl	18c20 <net_buf_unref>
	if (req->destroy) {
   1e396:	68a3      	ldr	r3, [r4, #8]
   1e398:	b10b      	cbz	r3, 1e39e <att_req_destroy+0x14>
		req->destroy(req);
   1e39a:	4620      	mov	r0, r4
   1e39c:	4798      	blx	r3
	bt_att_req_free(req);
   1e39e:	4620      	mov	r0, r4
}
   1e3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1e3a4:	f7f8 bd06 	b.w	16db4 <bt_att_req_free>

0001e3a8 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1e3a8:	898a      	ldrh	r2, [r1, #12]
   1e3aa:	6889      	ldr	r1, [r1, #8]
   1e3ac:	2300      	movs	r3, #0
   1e3ae:	f7f8 bd0d 	b.w	16dcc <att_handle_rsp>

0001e3b2 <att_chan_detach>:
{
   1e3b2:	b538      	push	{r3, r4, r5, lr}
   1e3b4:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1e3b6:	6800      	ldr	r0, [r0, #0]
   1e3b8:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   1e3bc:	3024      	adds	r0, #36	; 0x24
   1e3be:	f7ff fc20 	bl	1dc02 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   1e3c2:	f504 7588 	add.w	r5, r4, #272	; 0x110
   1e3c6:	4628      	mov	r0, r5
   1e3c8:	f7fc fba6 	bl	1ab18 <z_impl_k_sem_give>
   1e3cc:	4628      	mov	r0, r5
   1e3ce:	f7fc fba3 	bl	1ab18 <z_impl_k_sem_give>
   1e3d2:	4628      	mov	r0, r5
   1e3d4:	f7fc fba0 	bl	1ab18 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1e3d8:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   1e3dc:	2200      	movs	r2, #0
   1e3de:	2300      	movs	r3, #0
   1e3e0:	4628      	mov	r0, r5
   1e3e2:	f001 f910 	bl	1f606 <net_buf_get>
   1e3e6:	4602      	mov	r2, r0
   1e3e8:	b950      	cbnz	r0, 1e400 <att_chan_detach+0x4e>
	if (chan->req) {
   1e3ea:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1e3ee:	b123      	cbz	r3, 1e3fa <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1e3f0:	4601      	mov	r1, r0
   1e3f2:	230e      	movs	r3, #14
   1e3f4:	4620      	mov	r0, r4
   1e3f6:	f7f8 fce9 	bl	16dcc <att_handle_rsp>
	chan->att = NULL;
   1e3fa:	2300      	movs	r3, #0
   1e3fc:	6023      	str	r3, [r4, #0]
}
   1e3fe:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1e400:	f7fa fc0e 	bl	18c20 <net_buf_unref>
   1e404:	e7ea      	b.n	1e3dc <att_chan_detach+0x2a>

0001e406 <bt_att_disconnected>:
{
   1e406:	b538      	push	{r3, r4, r5, lr}
   1e408:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1e40a:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1e40e:	f7ff ffd0 	bl	1e3b2 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1e412:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e414:	b93b      	cbnz	r3, 1e426 <bt_att_disconnected+0x20>
	att_reset(att);
   1e416:	4628      	mov	r0, r5
   1e418:	f7f8 fd78 	bl	16f0c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1e41c:	6820      	ldr	r0, [r4, #0]
}
   1e41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1e422:	f7f9 ba59 	b.w	178d8 <bt_gatt_disconnected>
}
   1e426:	bd38      	pop	{r3, r4, r5, pc}

0001e428 <att_timeout>:
{
   1e428:	b570      	push	{r4, r5, r6, lr}
   1e42a:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1e42c:	f850 6de0 	ldr.w	r6, [r0, #-224]!
	att_chan_detach(chan);
   1e430:	f7ff ffbf 	bl	1e3b2 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1e434:	6a75      	ldr	r5, [r6, #36]	; 0x24
   1e436:	b945      	cbnz	r5, 1e44a <att_timeout+0x22>
	att_reset(att);
   1e438:	4630      	mov	r0, r6
   1e43a:	f7f8 fd67 	bl	16f0c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1e43e:	f854 0cd8 	ldr.w	r0, [r4, #-216]
   1e442:	f7f9 fa49 	bl	178d8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1e446:	f844 5cd8 	str.w	r5, [r4, #-216]
}
   1e44a:	bd70      	pop	{r4, r5, r6, pc}

0001e44c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1e44c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e450:	4605      	mov	r5, r0
   1e452:	460e      	mov	r6, r1
   1e454:	4614      	mov	r4, r2
   1e456:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1e458:	f7ff fddf 	bl	1e01a <att_get>
	if (!att) {
   1e45c:	4607      	mov	r7, r0
   1e45e:	b938      	cbnz	r0, 1e470 <bt_att_send+0x24>
		net_buf_unref(buf);
   1e460:	4630      	mov	r0, r6
   1e462:	f7fa fbdd 	bl	18c20 <net_buf_unref>
		return -ENOTCONN;
   1e466:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   1e46a:	b002      	add	sp, #8
   1e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1e470:	b144      	cbz	r4, 1e484 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1e472:	f8cd 8000 	str.w	r8, [sp]
   1e476:	4623      	mov	r3, r4
   1e478:	4632      	mov	r2, r6
   1e47a:	2104      	movs	r1, #4
   1e47c:	4628      	mov	r0, r5
   1e47e:	f7ff fb34 	bl	1daea <bt_l2cap_send_cb>
   1e482:	e7f2      	b.n	1e46a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e484:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1e486:	b184      	cbz	r4, 1e4aa <bt_att_send+0x5e>
   1e488:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   1e48c:	d00f      	beq.n	1e4ae <bt_att_send+0x62>
   1e48e:	6824      	ldr	r4, [r4, #0]
   1e490:	b10c      	cbz	r4, 1e496 <bt_att_send+0x4a>
   1e492:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   1e496:	2000      	movs	r0, #0
   1e498:	b95d      	cbnz	r5, 1e4b2 <bt_att_send+0x66>
	if (ret < 0) {
   1e49a:	b188      	cbz	r0, 1e4c0 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   1e49c:	f107 000c 	add.w	r0, r7, #12
   1e4a0:	4631      	mov	r1, r6
   1e4a2:	f001 f8ce 	bl	1f642 <net_buf_put>
	return 0;
   1e4a6:	4628      	mov	r0, r5
   1e4a8:	e7df      	b.n	1e46a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e4aa:	4625      	mov	r5, r4
   1e4ac:	e7f3      	b.n	1e496 <bt_att_send+0x4a>
   1e4ae:	462c      	mov	r4, r5
   1e4b0:	e7f1      	b.n	1e496 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   1e4b2:	2200      	movs	r2, #0
   1e4b4:	4631      	mov	r1, r6
   1e4b6:	4628      	mov	r0, r5
   1e4b8:	f7ff fe80 	bl	1e1bc <bt_att_chan_send>
		if (ret >= 0) {
   1e4bc:	2800      	cmp	r0, #0
   1e4be:	db01      	blt.n	1e4c4 <bt_att_send+0x78>
	return 0;
   1e4c0:	2000      	movs	r0, #0
   1e4c2:	e7d2      	b.n	1e46a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e4c4:	b154      	cbz	r4, 1e4dc <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e4c6:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   1e4ca:	d004      	beq.n	1e4d6 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e4cc:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1e4d0:	b10b      	cbz	r3, 1e4d6 <bt_att_send+0x8a>
   1e4d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   1e4d6:	4625      	mov	r5, r4
   1e4d8:	461c      	mov	r4, r3
   1e4da:	e7dd      	b.n	1e498 <bt_att_send+0x4c>
   1e4dc:	4623      	mov	r3, r4
   1e4de:	e7fa      	b.n	1e4d6 <bt_att_send+0x8a>

0001e4e0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1e4e0:	b570      	push	{r4, r5, r6, lr}
   1e4e2:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1e4e4:	f7ff fd99 	bl	1e01a <att_get>
	if (!att) {
   1e4e8:	4605      	mov	r5, r0
   1e4ea:	b930      	cbnz	r0, 1e4fa <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   1e4ec:	6920      	ldr	r0, [r4, #16]
   1e4ee:	f7fa fb97 	bl	18c20 <net_buf_unref>
		req->buf = NULL;
   1e4f2:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   1e4f4:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   1e4f8:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e4fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1e4fc:	b153      	cbz	r3, 1e514 <bt_att_req_send+0x34>
   1e4fe:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1e502:	d007      	beq.n	1e514 <bt_att_req_send+0x34>
   1e504:	681e      	ldr	r6, [r3, #0]
   1e506:	b10e      	cbz	r6, 1e50c <bt_att_req_send+0x2c>
   1e508:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   1e50c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1e510:	b143      	cbz	r3, 1e524 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e512:	b96e      	cbnz	r6, 1e530 <bt_att_req_send+0x50>
	parent->next = child;
   1e514:	2000      	movs	r0, #0
   1e516:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1e518:	68ab      	ldr	r3, [r5, #8]
   1e51a:	b9a3      	cbnz	r3, 1e546 <bt_att_req_send+0x66>
	list->head = node;
   1e51c:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   1e520:	4618      	mov	r0, r3
}
   1e522:	e7e9      	b.n	1e4f8 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   1e524:	4621      	mov	r1, r4
   1e526:	f7ff fe0c 	bl	1e142 <bt_att_chan_req_send>
			if (ret >= 0) {
   1e52a:	2800      	cmp	r0, #0
   1e52c:	dbf1      	blt.n	1e512 <bt_att_req_send+0x32>
   1e52e:	e7e3      	b.n	1e4f8 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e530:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   1e534:	d004      	beq.n	1e540 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e536:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e53a:	b10b      	cbz	r3, 1e540 <bt_att_req_send+0x60>
   1e53c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   1e540:	4630      	mov	r0, r6
   1e542:	461e      	mov	r6, r3
   1e544:	e7e2      	b.n	1e50c <bt_att_req_send+0x2c>
	parent->next = child;
   1e546:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e548:	60ac      	str	r4, [r5, #8]
}
   1e54a:	e7d5      	b.n	1e4f8 <bt_att_req_send+0x18>

0001e54c <gatt_ccc_changed>:
{
   1e54c:	460b      	mov	r3, r1
   1e54e:	8909      	ldrh	r1, [r1, #8]
   1e550:	8a5a      	ldrh	r2, [r3, #18]
   1e552:	4291      	cmp	r1, r2
   1e554:	bf38      	it	cc
   1e556:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1e558:	8a9a      	ldrh	r2, [r3, #20]
   1e55a:	428a      	cmp	r2, r1
   1e55c:	d003      	beq.n	1e566 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1e55e:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1e560:	699b      	ldr	r3, [r3, #24]
   1e562:	b103      	cbz	r3, 1e566 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1e564:	4718      	bx	r3
}
   1e566:	4770      	bx	lr

0001e568 <gatt_indicate_rsp>:
{
   1e568:	b510      	push	{r4, lr}
   1e56a:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   1e56c:	7da3      	ldrb	r3, [r4, #22]
   1e56e:	3b01      	subs	r3, #1
{
   1e570:	460a      	mov	r2, r1
	params->_ref--;
   1e572:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1e574:	4621      	mov	r1, r4
   1e576:	68a3      	ldr	r3, [r4, #8]
   1e578:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1e57a:	68e3      	ldr	r3, [r4, #12]
   1e57c:	b12b      	cbz	r3, 1e58a <gatt_indicate_rsp+0x22>
   1e57e:	7da2      	ldrb	r2, [r4, #22]
   1e580:	b91a      	cbnz	r2, 1e58a <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1e582:	4620      	mov	r0, r4
}
   1e584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1e588:	4718      	bx	r3
}
   1e58a:	bd10      	pop	{r4, pc}

0001e58c <match_uuid>:
	data->attr = attr;
   1e58c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1e58e:	8091      	strh	r1, [r2, #4]
}
   1e590:	2000      	movs	r0, #0
   1e592:	4770      	bx	lr

0001e594 <gen_hash_m>:
{
   1e594:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e596:	6807      	ldr	r7, [r0, #0]
   1e598:	783d      	ldrb	r5, [r7, #0]
{
   1e59a:	b089      	sub	sp, #36	; 0x24
   1e59c:	4606      	mov	r6, r0
   1e59e:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e5a0:	b10d      	cbz	r5, 1e5a6 <gen_hash_m+0x12>
	switch (u16->val) {
   1e5a2:	2501      	movs	r5, #1
   1e5a4:	e014      	b.n	1e5d0 <gen_hash_m+0x3c>
   1e5a6:	887b      	ldrh	r3, [r7, #2]
   1e5a8:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1e5ac:	d004      	beq.n	1e5b8 <gen_hash_m+0x24>
   1e5ae:	d812      	bhi.n	1e5d6 <gen_hash_m+0x42>
   1e5b0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1e5b4:	2b03      	cmp	r3, #3
   1e5b6:	d8f4      	bhi.n	1e5a2 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1e5b8:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e5bc:	2202      	movs	r2, #2
   1e5be:	f10d 010e 	add.w	r1, sp, #14
   1e5c2:	4620      	mov	r0, r4
   1e5c4:	f7fe faba 	bl	1cb3c <tc_cmac_update>
   1e5c8:	b9e0      	cbnz	r0, 1e604 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1e5ca:	f06f 0315 	mvn.w	r3, #21
   1e5ce:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1e5d0:	4628      	mov	r0, r5
   1e5d2:	b009      	add	sp, #36	; 0x24
   1e5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1e5d6:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1e5da:	33ff      	adds	r3, #255	; 0xff
   1e5dc:	b29b      	uxth	r3, r3
   1e5de:	2b04      	cmp	r3, #4
   1e5e0:	d8df      	bhi.n	1e5a2 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1e5e2:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e5e6:	2202      	movs	r2, #2
   1e5e8:	f10d 010e 	add.w	r1, sp, #14
   1e5ec:	4620      	mov	r0, r4
   1e5ee:	f7fe faa5 	bl	1cb3c <tc_cmac_update>
   1e5f2:	2800      	cmp	r0, #0
   1e5f4:	d0e9      	beq.n	1e5ca <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1e5f6:	887b      	ldrh	r3, [r7, #2]
   1e5f8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e5fc:	2202      	movs	r2, #2
   1e5fe:	f10d 010e 	add.w	r1, sp, #14
   1e602:	e017      	b.n	1e634 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1e604:	887b      	ldrh	r3, [r7, #2]
   1e606:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e60a:	2202      	movs	r2, #2
   1e60c:	f10d 010e 	add.w	r1, sp, #14
   1e610:	4620      	mov	r0, r4
   1e612:	f7fe fa93 	bl	1cb3c <tc_cmac_update>
   1e616:	2800      	cmp	r0, #0
   1e618:	d0d7      	beq.n	1e5ca <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1e61a:	2000      	movs	r0, #0
   1e61c:	2310      	movs	r3, #16
   1e61e:	eb0d 0203 	add.w	r2, sp, r3
   1e622:	6877      	ldr	r7, [r6, #4]
   1e624:	9000      	str	r0, [sp, #0]
   1e626:	4631      	mov	r1, r6
   1e628:	47b8      	blx	r7
		if (len < 0) {
   1e62a:	1e02      	subs	r2, r0, #0
   1e62c:	da01      	bge.n	1e632 <gen_hash_m+0x9e>
			state->err = len;
   1e62e:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1e630:	e7ce      	b.n	1e5d0 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1e632:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e634:	4620      	mov	r0, r4
   1e636:	f7fe fa81 	bl	1cb3c <tc_cmac_update>
   1e63a:	2800      	cmp	r0, #0
   1e63c:	d1b1      	bne.n	1e5a2 <gen_hash_m+0xe>
   1e63e:	e7c4      	b.n	1e5ca <gen_hash_m+0x36>

0001e640 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e640:	2301      	movs	r3, #1
   1e642:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e644:	f3bf 8f5b 	dmb	ish
   1e648:	e850 2f00 	ldrex	r2, [r0]
   1e64c:	431a      	orrs	r2, r3
   1e64e:	e840 2100 	strex	r1, r2, [r0]
   1e652:	2900      	cmp	r1, #0
   1e654:	d1f8      	bne.n	1e648 <atomic_set_bit+0x8>
   1e656:	f3bf 8f5b 	dmb	ish
}
   1e65a:	4770      	bx	lr

0001e65c <gatt_notify>:
{
   1e65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e660:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1e662:	8992      	ldrh	r2, [r2, #12]
{
   1e664:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1e666:	3202      	adds	r2, #2
   1e668:	211b      	movs	r1, #27
{
   1e66a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1e66c:	f7ff fe4b 	bl	1e306 <bt_att_create_pdu>
	if (!buf) {
   1e670:	4605      	mov	r5, r0
   1e672:	b1c8      	cbz	r0, 1e6a8 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
   1e674:	f100 0908 	add.w	r9, r0, #8
   1e678:	2102      	movs	r1, #2
   1e67a:	4648      	mov	r0, r9
   1e67c:	f001 f814 	bl	1f6a8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1e680:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
   1e682:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
   1e684:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
   1e688:	4648      	mov	r0, r9
   1e68a:	f001 f80d 	bl	1f6a8 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1e68e:	89a2      	ldrh	r2, [r4, #12]
   1e690:	68a1      	ldr	r1, [r4, #8]
   1e692:	4630      	mov	r0, r6
   1e694:	f7fe fb31 	bl	1ccfa <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1e698:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1e69c:	4629      	mov	r1, r5
   1e69e:	4638      	mov	r0, r7
}
   1e6a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1e6a4:	f7ff bed2 	b.w	1e44c <bt_att_send>
}
   1e6a8:	f06f 000b 	mvn.w	r0, #11
   1e6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e6b0 <clear_cf_cfg>:
{
   1e6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e6b2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1e6b4:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   1e6b6:	2207      	movs	r2, #7
   1e6b8:	4669      	mov	r1, sp
   1e6ba:	3001      	adds	r0, #1
   1e6bc:	9500      	str	r5, [sp, #0]
   1e6be:	f8cd 5003 	str.w	r5, [sp, #3]
   1e6c2:	f7fe fb1a 	bl	1ccfa <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1e6c6:	f104 0008 	add.w	r0, r4, #8
   1e6ca:	2201      	movs	r2, #1
   1e6cc:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e6ce:	340c      	adds	r4, #12
   1e6d0:	f7fe fb3e 	bl	1cd50 <memset>
   1e6d4:	f3bf 8f5b 	dmb	ish
   1e6d8:	e854 3f00 	ldrex	r3, [r4]
   1e6dc:	e844 5200 	strex	r2, r5, [r4]
   1e6e0:	2a00      	cmp	r2, #0
   1e6e2:	d1f9      	bne.n	1e6d8 <clear_cf_cfg+0x28>
   1e6e4:	f3bf 8f5b 	dmb	ish
}
   1e6e8:	b003      	add	sp, #12
   1e6ea:	bd30      	pop	{r4, r5, pc}

0001e6ec <cf_write>:
{
   1e6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e6f0:	461f      	mov	r7, r3
   1e6f2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1e6f6:	2b01      	cmp	r3, #1
{
   1e6f8:	4680      	mov	r8, r0
   1e6fa:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   1e6fc:	d83b      	bhi.n	1e776 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1e6fe:	443b      	add	r3, r7
   1e700:	2b01      	cmp	r3, #1
   1e702:	463d      	mov	r5, r7
   1e704:	dc3a      	bgt.n	1e77c <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1e706:	f7f8 fc55 	bl	16fb4 <find_cf_cfg>
	if (!cfg) {
   1e70a:	4604      	mov	r4, r0
   1e70c:	b918      	cbnz	r0, 1e716 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1e70e:	f7f8 fc51 	bl	16fb4 <find_cf_cfg>
	if (!cfg) {
   1e712:	4604      	mov	r4, r0
   1e714:	b3a8      	cbz	r0, 1e782 <cf_write+0x96>
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
   1e716:	4632      	mov	r2, r6
   1e718:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   1e71c:	4562      	cmp	r2, ip
   1e71e:	d117      	bne.n	1e750 <cf_write+0x64>
	for (i = 0U; i < len && i < last_byte; i++) {
   1e720:	b12f      	cbz	r7, 1e72e <cf_write+0x42>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   1e722:	7833      	ldrb	r3, [r6, #0]
   1e724:	7a22      	ldrb	r2, [r4, #8]
   1e726:	f003 0307 	and.w	r3, r3, #7
   1e72a:	4313      	orrs	r3, r2
   1e72c:	7223      	strb	r3, [r4, #8]
   1e72e:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1e732:	2207      	movs	r2, #7
   1e734:	1c60      	adds	r0, r4, #1
   1e736:	f7fe fae0 	bl	1ccfa <memcpy>
	cfg->id = conn->id;
   1e73a:	4620      	mov	r0, r4
   1e73c:	f898 3008 	ldrb.w	r3, [r8, #8]
   1e740:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1e744:	2100      	movs	r1, #0
   1e746:	f7ff ff7b 	bl	1e640 <atomic_set_bit>
}
   1e74a:	4628      	mov	r0, r5
   1e74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   1e750:	f812 1b01 	ldrb.w	r1, [r2], #1
   1e754:	7a20      	ldrb	r0, [r4, #8]
   1e756:	2300      	movs	r3, #0
   1e758:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
   1e75a:	fa21 fe03 	lsr.w	lr, r1, r3
   1e75e:	f01e 0f01 	tst.w	lr, #1
   1e762:	d004      	beq.n	1e76e <cf_write+0x82>
   1e764:	fa20 fe03 	lsr.w	lr, r0, r3
   1e768:	f01e 0f01 	tst.w	lr, #1
   1e76c:	d10c      	bne.n	1e788 <cf_write+0x9c>
		for (bit = 0U; bit <= last_bit; bit++) {
   1e76e:	3301      	adds	r3, #1
   1e770:	2b03      	cmp	r3, #3
   1e772:	d1f2      	bne.n	1e75a <cf_write+0x6e>
   1e774:	e7d2      	b.n	1e71c <cf_write+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1e776:	f06f 0506 	mvn.w	r5, #6
   1e77a:	e7e6      	b.n	1e74a <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1e77c:	f06f 050c 	mvn.w	r5, #12
   1e780:	e7e3      	b.n	1e74a <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1e782:	f06f 0510 	mvn.w	r5, #16
   1e786:	e7e0      	b.n	1e74a <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1e788:	f06f 0512 	mvn.w	r5, #18
   1e78c:	e7dd      	b.n	1e74a <cf_write+0x5e>

0001e78e <sc_restore_rsp>:
{
   1e78e:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1e790:	f7f8 fc10 	bl	16fb4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1e794:	b140      	cbz	r0, 1e7a8 <sc_restore_rsp+0x1a>
   1e796:	7a03      	ldrb	r3, [r0, #8]
   1e798:	07db      	lsls	r3, r3, #31
   1e79a:	d505      	bpl.n	1e7a8 <sc_restore_rsp+0x1a>
}
   1e79c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1e7a0:	2100      	movs	r1, #0
   1e7a2:	300c      	adds	r0, #12
   1e7a4:	f7ff bf4c 	b.w	1e640 <atomic_set_bit>
}
   1e7a8:	bd08      	pop	{r3, pc}

0001e7aa <find_ccc_cfg>:
{
   1e7aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e7ac:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e7ae:	1c4c      	adds	r4, r1, #1
   1e7b0:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1e7b4:	1e67      	subs	r7, r4, #1
		if (conn) {
   1e7b6:	b14e      	cbz	r6, 1e7cc <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1e7b8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1e7bc:	4622      	mov	r2, r4
   1e7be:	4630      	mov	r0, r6
   1e7c0:	f7ff f877 	bl	1d8b2 <bt_conn_is_peer_addr_le>
   1e7c4:	b160      	cbz	r0, 1e7e0 <find_ccc_cfg+0x36>
}
   1e7c6:	4638      	mov	r0, r7
   1e7c8:	b003      	add	sp, #12
   1e7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   1e7cc:	2207      	movs	r2, #7
   1e7ce:	4669      	mov	r1, sp
   1e7d0:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e7d2:	9600      	str	r6, [sp, #0]
   1e7d4:	f8cd 6003 	str.w	r6, [sp, #3]
   1e7d8:	f7fe fa7f 	bl	1ccda <memcmp>
   1e7dc:	2800      	cmp	r0, #0
   1e7de:	d0f2      	beq.n	1e7c6 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e7e0:	340a      	adds	r4, #10
   1e7e2:	42ac      	cmp	r4, r5
   1e7e4:	d1e6      	bne.n	1e7b4 <find_ccc_cfg+0xa>
	return NULL;
   1e7e6:	2700      	movs	r7, #0
   1e7e8:	e7ed      	b.n	1e7c6 <find_ccc_cfg+0x1c>

0001e7ea <read_appearance>:
{
   1e7ea:	b513      	push	{r0, r1, r4, lr}
   1e7ec:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1e7f0:	4610      	mov	r0, r2
	if (offset > value_len) {
   1e7f2:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1e7f4:	f44f 7240 	mov.w	r2, #768	; 0x300
   1e7f8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1e7fc:	d80d      	bhi.n	1e81a <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1e7fe:	f1c1 0402 	rsb	r4, r1, #2
   1e802:	429c      	cmp	r4, r3
   1e804:	bfa8      	it	ge
   1e806:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1e808:	f10d 0306 	add.w	r3, sp, #6
   1e80c:	4622      	mov	r2, r4
   1e80e:	4419      	add	r1, r3
   1e810:	f7fe fa73 	bl	1ccfa <memcpy>
}
   1e814:	4620      	mov	r0, r4
   1e816:	b002      	add	sp, #8
   1e818:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1e81a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1e81e:	e7f9      	b.n	1e814 <read_appearance+0x2a>

0001e820 <read_name>:
{
   1e820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e824:	4698      	mov	r8, r3
   1e826:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1e82a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1e82c:	f7f6 fbdc 	bl	14fe8 <bt_get_name>
   1e830:	4607      	mov	r7, r0
				 strlen(name));
   1e832:	f7fe fa3f 	bl	1ccb4 <strlen>
	if (offset > value_len) {
   1e836:	b283      	uxth	r3, r0
   1e838:	42b3      	cmp	r3, r6
   1e83a:	d30c      	bcc.n	1e856 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1e83c:	1b9c      	subs	r4, r3, r6
   1e83e:	4544      	cmp	r4, r8
   1e840:	bfa8      	it	ge
   1e842:	4644      	movge	r4, r8
   1e844:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1e846:	4622      	mov	r2, r4
   1e848:	19b9      	adds	r1, r7, r6
   1e84a:	4628      	mov	r0, r5
   1e84c:	f7fe fa55 	bl	1ccfa <memcpy>
}
   1e850:	4620      	mov	r0, r4
   1e852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1e856:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1e85a:	e7f9      	b.n	1e850 <read_name+0x30>

0001e85c <cf_read>:
{
   1e85c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e85e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1e860:	2300      	movs	r3, #0
{
   1e862:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1e866:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1e86a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1e86c:	f7f8 fba2 	bl	16fb4 <find_cf_cfg>
	if (cfg) {
   1e870:	b128      	cbz	r0, 1e87e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1e872:	f100 0108 	add.w	r1, r0, #8
   1e876:	2201      	movs	r2, #1
   1e878:	a801      	add	r0, sp, #4
   1e87a:	f7fe fa3e 	bl	1ccfa <memcpy>
	if (offset > value_len) {
   1e87e:	2e01      	cmp	r6, #1
   1e880:	d80d      	bhi.n	1e89e <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1e882:	f1c6 0401 	rsb	r4, r6, #1
   1e886:	42bc      	cmp	r4, r7
   1e888:	bfa8      	it	ge
   1e88a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1e88c:	ab01      	add	r3, sp, #4
   1e88e:	4622      	mov	r2, r4
   1e890:	1999      	adds	r1, r3, r6
   1e892:	4628      	mov	r0, r5
   1e894:	f7fe fa31 	bl	1ccfa <memcpy>
}
   1e898:	4620      	mov	r0, r4
   1e89a:	b003      	add	sp, #12
   1e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1e89e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1e8a2:	e7f9      	b.n	1e898 <cf_read+0x3c>

0001e8a4 <bt_gatt_attr_read_ccc>:
{
   1e8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1e8a6:	68c9      	ldr	r1, [r1, #12]
{
   1e8a8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1e8ac:	4615      	mov	r5, r2
   1e8ae:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1e8b0:	f7ff ff7b 	bl	1e7aa <find_ccc_cfg>
	if (cfg) {
   1e8b4:	b100      	cbz	r0, 1e8b8 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1e8b6:	8900      	ldrh	r0, [r0, #8]
   1e8b8:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1e8bc:	2e02      	cmp	r6, #2
   1e8be:	d80e      	bhi.n	1e8de <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1e8c0:	f1c6 0402 	rsb	r4, r6, #2
   1e8c4:	42bc      	cmp	r4, r7
   1e8c6:	bfa8      	it	ge
   1e8c8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1e8ca:	f10d 0306 	add.w	r3, sp, #6
   1e8ce:	4622      	mov	r2, r4
   1e8d0:	1999      	adds	r1, r3, r6
   1e8d2:	4628      	mov	r0, r5
   1e8d4:	f7fe fa11 	bl	1ccfa <memcpy>
}
   1e8d8:	4620      	mov	r0, r4
   1e8da:	b003      	add	sp, #12
   1e8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1e8de:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1e8e2:	e7f9      	b.n	1e8d8 <bt_gatt_attr_read_ccc+0x34>

0001e8e4 <bt_gatt_attr_read_service>:
{
   1e8e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1e8e6:	68c9      	ldr	r1, [r1, #12]
{
   1e8e8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1e8ec:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1e8ee:	780b      	ldrb	r3, [r1, #0]
{
   1e8f0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1e8f2:	b993      	cbnz	r3, 1e91a <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1e8f4:	884b      	ldrh	r3, [r1, #2]
   1e8f6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1e8fa:	2d02      	cmp	r5, #2
   1e8fc:	d819      	bhi.n	1e932 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1e8fe:	f1c5 0202 	rsb	r2, r5, #2
   1e902:	4294      	cmp	r4, r2
   1e904:	bfa8      	it	ge
   1e906:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1e908:	f10d 0306 	add.w	r3, sp, #6
   1e90c:	4622      	mov	r2, r4
   1e90e:	1959      	adds	r1, r3, r5
   1e910:	f7fe f9f3 	bl	1ccfa <memcpy>
}
   1e914:	4620      	mov	r0, r4
   1e916:	b003      	add	sp, #12
   1e918:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1e91a:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1e91c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1e920:	d807      	bhi.n	1e932 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1e922:	f1c5 0210 	rsb	r2, r5, #16
   1e926:	4294      	cmp	r4, r2
   1e928:	bfa8      	it	ge
   1e92a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1e92c:	4622      	mov	r2, r4
   1e92e:	4429      	add	r1, r5
   1e930:	e7ee      	b.n	1e910 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1e932:	f06f 0406 	mvn.w	r4, #6
   1e936:	e7ed      	b.n	1e914 <bt_gatt_attr_read_service+0x30>

0001e938 <sc_save>:
{
   1e938:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e93c:	4680      	mov	r8, r0
   1e93e:	460f      	mov	r7, r1
   1e940:	4616      	mov	r6, r2
   1e942:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1e944:	f7f8 fb14 	bl	16f70 <find_sc_cfg>
	if (!cfg) {
   1e948:	4604      	mov	r4, r0
   1e94a:	b968      	cbnz	r0, 1e968 <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1e94c:	4669      	mov	r1, sp
   1e94e:	9000      	str	r0, [sp, #0]
   1e950:	f8cd 0003 	str.w	r0, [sp, #3]
   1e954:	f7f8 fb0c 	bl	16f70 <find_sc_cfg>
		if (!cfg) {
   1e958:	4604      	mov	r4, r0
   1e95a:	b180      	cbz	r0, 1e97e <sc_save+0x46>
		cfg->id = id;
   1e95c:	f800 8b01 	strb.w	r8, [r0], #1
	memcpy(dst, src, sizeof(*dst));
   1e960:	2207      	movs	r2, #7
   1e962:	4639      	mov	r1, r7
   1e964:	f7fe f9c9 	bl	1ccfa <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   1e968:	8922      	ldrh	r2, [r4, #8]
   1e96a:	8963      	ldrh	r3, [r4, #10]
   1e96c:	b91a      	cbnz	r2, 1e976 <sc_save+0x3e>
   1e96e:	b923      	cbnz	r3, 1e97a <sc_save+0x42>
		cfg->data.start = start;
   1e970:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1e972:	8165      	strh	r5, [r4, #10]
   1e974:	e003      	b.n	1e97e <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   1e976:	4296      	cmp	r6, r2
   1e978:	d304      	bcc.n	1e984 <sc_save+0x4c>
   1e97a:	429d      	cmp	r5, r3
   1e97c:	d8f9      	bhi.n	1e972 <sc_save+0x3a>
}
   1e97e:	b002      	add	sp, #8
   1e980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1e984:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1e986:	e7f8      	b.n	1e97a <sc_save+0x42>

0001e988 <sc_clear>:
{
   1e988:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e98a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1e98e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e990:	4631      	mov	r1, r6
   1e992:	7a00      	ldrb	r0, [r0, #8]
   1e994:	f7fe fe43 	bl	1d61e <bt_addr_le_is_bonded>
   1e998:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1e99a:	4631      	mov	r1, r6
   1e99c:	f7f8 fae8 	bl	16f70 <find_sc_cfg>
	if (!cfg) {
   1e9a0:	b128      	cbz	r0, 1e9ae <sc_clear+0x26>
}
   1e9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1e9a6:	220c      	movs	r2, #12
   1e9a8:	2100      	movs	r1, #0
   1e9aa:	f7fe b9d1 	b.w	1cd50 <memset>
}
   1e9ae:	bd70      	pop	{r4, r5, r6, pc}

0001e9b0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1e9b0:	2a02      	cmp	r2, #2
{
   1e9b2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1e9b4:	d108      	bne.n	1e9c8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1e9b6:	2300      	movs	r3, #0
   1e9b8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e9bc:	461a      	mov	r2, r3
   1e9be:	7a00      	ldrb	r0, [r0, #8]
   1e9c0:	f7ff ffba 	bl	1e938 <sc_save>
}
   1e9c4:	2002      	movs	r0, #2
   1e9c6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1e9c8:	f7ff ffde 	bl	1e988 <sc_clear>
   1e9cc:	e7fa      	b.n	1e9c4 <sc_ccc_cfg_write+0x14>

0001e9ce <bt_gatt_attr_write_ccc>:
{
   1e9ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e9d2:	461f      	mov	r7, r3
   1e9d4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1e9d8:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1e9dc:	4606      	mov	r6, r0
   1e9de:	4688      	mov	r8, r1
	if (offset) {
   1e9e0:	2b00      	cmp	r3, #0
   1e9e2:	d146      	bne.n	1ea72 <bt_gatt_attr_write_ccc+0xa4>
	if (!len || len > sizeof(uint16_t)) {
   1e9e4:	1e7b      	subs	r3, r7, #1
   1e9e6:	2b01      	cmp	r3, #1
   1e9e8:	d846      	bhi.n	1ea78 <bt_gatt_attr_write_ccc+0xaa>
	if (len < sizeof(uint16_t)) {
   1e9ea:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1e9ec:	7815      	ldrb	r5, [r2, #0]
   1e9ee:	bf18      	it	ne
   1e9f0:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1e9f2:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1e9f4:	bf0c      	ite	eq
   1e9f6:	b2ad      	uxtheq	r5, r5
   1e9f8:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1e9fc:	f7ff fed5 	bl	1e7aa <find_ccc_cfg>
	if (!cfg) {
   1ea00:	4604      	mov	r4, r0
   1ea02:	b988      	cbnz	r0, 1ea28 <bt_gatt_attr_write_ccc+0x5a>
		if (!value) {
   1ea04:	b91d      	cbnz	r5, 1ea0e <bt_gatt_attr_write_ccc+0x40>
			return len;
   1ea06:	4638      	mov	r0, r7
}
   1ea08:	b003      	add	sp, #12
   1ea0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1ea0e:	4649      	mov	r1, r9
   1ea10:	f7ff fecb 	bl	1e7aa <find_ccc_cfg>
		if (!cfg) {
   1ea14:	4604      	mov	r4, r0
   1ea16:	b390      	cbz	r0, 1ea7e <bt_gatt_attr_write_ccc+0xb0>
   1ea18:	2207      	movs	r2, #7
   1ea1a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1ea1e:	3001      	adds	r0, #1
   1ea20:	f7fe f96b 	bl	1ccfa <memcpy>
		cfg->id = conn->id;
   1ea24:	7a33      	ldrb	r3, [r6, #8]
   1ea26:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1ea28:	f8d9 301c 	ldr.w	r3, [r9, #28]
   1ea2c:	b9ab      	cbnz	r3, 1ea5a <bt_gatt_attr_write_ccc+0x8c>
	if (cfg->value != ccc->value) {
   1ea2e:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
   1ea32:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1ea34:	42ab      	cmp	r3, r5
   1ea36:	d003      	beq.n	1ea40 <bt_gatt_attr_write_ccc+0x72>
		gatt_ccc_changed(attr, ccc);
   1ea38:	4649      	mov	r1, r9
   1ea3a:	4640      	mov	r0, r8
   1ea3c:	f7ff fd86 	bl	1e54c <gatt_ccc_changed>
	if (!value) {
   1ea40:	2d00      	cmp	r5, #0
   1ea42:	d1e0      	bne.n	1ea06 <bt_gatt_attr_write_ccc+0x38>
   1ea44:	2207      	movs	r2, #7
   1ea46:	4669      	mov	r1, sp
   1ea48:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ea4a:	9500      	str	r5, [sp, #0]
   1ea4c:	f8cd 5003 	str.w	r5, [sp, #3]
   1ea50:	f7fe f953 	bl	1ccfa <memcpy>
	cfg->id = 0U;
   1ea54:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1ea56:	8125      	strh	r5, [r4, #8]
}
   1ea58:	e7d5      	b.n	1ea06 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1ea5a:	462a      	mov	r2, r5
   1ea5c:	4641      	mov	r1, r8
   1ea5e:	4630      	mov	r0, r6
   1ea60:	4798      	blx	r3
		if (write < 0) {
   1ea62:	2800      	cmp	r0, #0
   1ea64:	dbd0      	blt.n	1ea08 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1ea66:	3801      	subs	r0, #1
   1ea68:	2801      	cmp	r0, #1
   1ea6a:	d9e0      	bls.n	1ea2e <bt_gatt_attr_write_ccc+0x60>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1ea6c:	f06f 000d 	mvn.w	r0, #13
   1ea70:	e7ca      	b.n	1ea08 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ea72:	f06f 0006 	mvn.w	r0, #6
   1ea76:	e7c7      	b.n	1ea08 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ea78:	f06f 000c 	mvn.w	r0, #12
   1ea7c:	e7c4      	b.n	1ea08 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1ea7e:	f06f 0010 	mvn.w	r0, #16
   1ea82:	e7c1      	b.n	1ea08 <bt_gatt_attr_write_ccc+0x3a>

0001ea84 <bt_gatt_attr_read>:
{
   1ea84:	b538      	push	{r3, r4, r5, lr}
   1ea86:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ea8a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1ea8e:	42a9      	cmp	r1, r5
{
   1ea90:	4610      	mov	r0, r2
	if (offset > value_len) {
   1ea92:	d80b      	bhi.n	1eaac <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1ea94:	1a6d      	subs	r5, r5, r1
   1ea96:	429d      	cmp	r5, r3
   1ea98:	bfa8      	it	ge
   1ea9a:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1ea9c:	9b05      	ldr	r3, [sp, #20]
   1ea9e:	b2ad      	uxth	r5, r5
   1eaa0:	462a      	mov	r2, r5
   1eaa2:	4419      	add	r1, r3
   1eaa4:	f7fe f929 	bl	1ccfa <memcpy>
}
   1eaa8:	4628      	mov	r0, r5
   1eaaa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eaac:	f06f 0506 	mvn.w	r5, #6
   1eab0:	e7fa      	b.n	1eaa8 <bt_gatt_attr_read+0x24>

0001eab2 <bt_gatt_attr_value_handle>:
{
   1eab2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1eab4:	4604      	mov	r4, r0
   1eab6:	b910      	cbnz	r0, 1eabe <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1eab8:	2000      	movs	r0, #0
}
   1eaba:	b002      	add	sp, #8
   1eabc:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1eabe:	2300      	movs	r3, #0
   1eac0:	f88d 3004 	strb.w	r3, [sp, #4]
   1eac4:	6800      	ldr	r0, [r0, #0]
   1eac6:	f642 0303 	movw	r3, #10243	; 0x2803
   1eaca:	a901      	add	r1, sp, #4
   1eacc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ead0:	f7fe f9cb 	bl	1ce6a <bt_uuid_cmp>
   1ead4:	2800      	cmp	r0, #0
   1ead6:	d1ef      	bne.n	1eab8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1ead8:	68e3      	ldr	r3, [r4, #12]
   1eada:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1eadc:	2800      	cmp	r0, #0
   1eade:	d1ec      	bne.n	1eaba <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1eae0:	4620      	mov	r0, r4
   1eae2:	f7f8 fc57 	bl	17394 <bt_gatt_attr_get_handle>
   1eae6:	3001      	adds	r0, #1
   1eae8:	b280      	uxth	r0, r0
	return handle;
   1eaea:	e7e6      	b.n	1eaba <bt_gatt_attr_value_handle+0x8>

0001eaec <bt_gatt_attr_read_chrc>:
{
   1eaec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1eaee:	68cf      	ldr	r7, [r1, #12]
{
   1eaf0:	b087      	sub	sp, #28
   1eaf2:	4608      	mov	r0, r1
   1eaf4:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1eaf6:	79bb      	ldrb	r3, [r7, #6]
   1eaf8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1eafc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1eb00:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1eb02:	f7ff ffd6 	bl	1eab2 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1eb06:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1eb08:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1eb0c:	780b      	ldrb	r3, [r1, #0]
   1eb0e:	b99b      	cbnz	r3, 1eb38 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1eb10:	884b      	ldrh	r3, [r1, #2]
   1eb12:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1eb16:	2105      	movs	r1, #5
	if (offset > value_len) {
   1eb18:	42b1      	cmp	r1, r6
   1eb1a:	d315      	bcc.n	1eb48 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1eb1c:	1b89      	subs	r1, r1, r6
   1eb1e:	42a1      	cmp	r1, r4
   1eb20:	bfa8      	it	ge
   1eb22:	4621      	movge	r1, r4
   1eb24:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1eb26:	ab01      	add	r3, sp, #4
   1eb28:	4622      	mov	r2, r4
   1eb2a:	1999      	adds	r1, r3, r6
   1eb2c:	4628      	mov	r0, r5
   1eb2e:	f7fe f8e4 	bl	1ccfa <memcpy>
}
   1eb32:	4620      	mov	r0, r4
   1eb34:	b007      	add	sp, #28
   1eb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1eb38:	3101      	adds	r1, #1
   1eb3a:	2210      	movs	r2, #16
   1eb3c:	f10d 0007 	add.w	r0, sp, #7
   1eb40:	f7fe f8db 	bl	1ccfa <memcpy>
		value_len += 16U;
   1eb44:	2113      	movs	r1, #19
   1eb46:	e7e7      	b.n	1eb18 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eb48:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1eb4c:	e7f1      	b.n	1eb32 <bt_gatt_attr_read_chrc+0x46>

0001eb4e <bt_gatt_foreach_attr>:
{
   1eb4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1eb50:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1eb54:	2300      	movs	r3, #0
   1eb56:	9300      	str	r3, [sp, #0]
   1eb58:	461a      	mov	r2, r3
   1eb5a:	f7f8 fc4b 	bl	173f4 <bt_gatt_foreach_attr_type>
}
   1eb5e:	b005      	add	sp, #20
   1eb60:	f85d fb04 	ldr.w	pc, [sp], #4

0001eb64 <db_hash_process>:
	db_hash_gen(true);
   1eb64:	f7f8 bca0 	b.w	174a8 <db_hash_gen.isra.0>

0001eb68 <bt_gatt_check_perm>:
{
   1eb68:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1eb6a:	07d4      	lsls	r4, r2, #31
{
   1eb6c:	4605      	mov	r5, r0
   1eb6e:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1eb70:	d504      	bpl.n	1eb7c <bt_gatt_check_perm+0x14>
   1eb72:	f010 0f15 	tst.w	r0, #21
   1eb76:	d01e      	beq.n	1ebb6 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1eb78:	684b      	ldr	r3, [r1, #4]
   1eb7a:	b1e3      	cbz	r3, 1ebb6 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1eb7c:	0793      	lsls	r3, r2, #30
   1eb7e:	d504      	bpl.n	1eb8a <bt_gatt_check_perm+0x22>
   1eb80:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1eb84:	d019      	beq.n	1ebba <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1eb86:	688b      	ldr	r3, [r1, #8]
   1eb88:	b1bb      	cbz	r3, 1ebba <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1eb8a:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1eb8e:	f014 0f30 	tst.w	r4, #48	; 0x30
   1eb92:	d103      	bne.n	1eb9c <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1eb94:	f014 000c 	ands.w	r0, r4, #12
   1eb98:	d107      	bne.n	1ebaa <bt_gatt_check_perm+0x42>
}
   1eb9a:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1eb9c:	4628      	mov	r0, r5
   1eb9e:	f7fe fe15 	bl	1d7cc <bt_conn_get_security>
   1eba2:	2802      	cmp	r0, #2
   1eba4:	d8f6      	bhi.n	1eb94 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1eba6:	2005      	movs	r0, #5
   1eba8:	e7f7      	b.n	1eb9a <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1ebaa:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1ebac:	2b00      	cmp	r3, #0
   1ebae:	bf14      	ite	ne
   1ebb0:	2000      	movne	r0, #0
   1ebb2:	200f      	moveq	r0, #15
   1ebb4:	e7f1      	b.n	1eb9a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1ebb6:	2002      	movs	r0, #2
   1ebb8:	e7ef      	b.n	1eb9a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1ebba:	2003      	movs	r0, #3
   1ebbc:	e7ed      	b.n	1eb9a <bt_gatt_check_perm+0x32>

0001ebbe <bt_gatt_change_aware>:
{
   1ebbe:	b510      	push	{r4, lr}
   1ebc0:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1ebc2:	f7f8 f9f7 	bl	16fb4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ebc6:	4603      	mov	r3, r0
   1ebc8:	b910      	cbnz	r0, 1ebd0 <bt_gatt_change_aware+0x12>
		return true;
   1ebca:	2401      	movs	r4, #1
}
   1ebcc:	4620      	mov	r0, r4
   1ebce:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ebd0:	7a02      	ldrb	r2, [r0, #8]
   1ebd2:	07d2      	lsls	r2, r2, #31
   1ebd4:	d5f9      	bpl.n	1ebca <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ebd6:	f3bf 8f5b 	dmb	ish
   1ebda:	68d9      	ldr	r1, [r3, #12]
   1ebdc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1ebe0:	f011 0101 	ands.w	r1, r1, #1
   1ebe4:	f100 000c 	add.w	r0, r0, #12
   1ebe8:	d1ef      	bne.n	1ebca <bt_gatt_change_aware+0xc>
	if (!req) {
   1ebea:	2c00      	cmp	r4, #0
   1ebec:	d0ee      	beq.n	1ebcc <bt_gatt_change_aware+0xe>
   1ebee:	f3bf 8f5b 	dmb	ish
   1ebf2:	68db      	ldr	r3, [r3, #12]
   1ebf4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ebf8:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1ebfc:	079b      	lsls	r3, r3, #30
   1ebfe:	d50e      	bpl.n	1ec1e <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ec00:	f3bf 8f5b 	dmb	ish
   1ec04:	e850 3f00 	ldrex	r3, [r0]
   1ec08:	f023 0302 	bic.w	r3, r3, #2
   1ec0c:	e840 3200 	strex	r2, r3, [r0]
   1ec10:	2a00      	cmp	r2, #0
   1ec12:	d1f7      	bne.n	1ec04 <bt_gatt_change_aware+0x46>
   1ec14:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1ec18:	f7ff fd12 	bl	1e640 <atomic_set_bit>
	return false;
   1ec1c:	e7d6      	b.n	1ebcc <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1ec1e:	2101      	movs	r1, #1
   1ec20:	e7fa      	b.n	1ec18 <bt_gatt_change_aware+0x5a>

0001ec22 <sys_memcpy_swap>:
	psrc += length - 1;
   1ec22:	1e53      	subs	r3, r2, #1
   1ec24:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1ec26:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1ec28:	f811 3901 	ldrb.w	r3, [r1], #-1
   1ec2c:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1ec30:	4290      	cmp	r0, r2
   1ec32:	d1f9      	bne.n	1ec28 <sys_memcpy_swap+0x6>
}
   1ec34:	4770      	bx	lr

0001ec36 <smp_pairing_rsp>:
}
   1ec36:	2007      	movs	r0, #7
   1ec38:	4770      	bx	lr

0001ec3a <smp_chan_get>:
{
   1ec3a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1ec3c:	2106      	movs	r1, #6
   1ec3e:	f7fe ffaa 	bl	1db96 <bt_l2cap_le_lookup_rx_cid>
}
   1ec42:	2800      	cmp	r0, #0
   1ec44:	bf38      	it	cc
   1ec46:	2000      	movcc	r0, #0
   1ec48:	bd08      	pop	{r3, pc}

0001ec4a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ec4a:	2301      	movs	r3, #1
   1ec4c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ec4e:	f3bf 8f5b 	dmb	ish
   1ec52:	e850 2f00 	ldrex	r2, [r0]
   1ec56:	431a      	orrs	r2, r3
   1ec58:	e840 2100 	strex	r1, r2, [r0]
   1ec5c:	2900      	cmp	r1, #0
   1ec5e:	d1f8      	bne.n	1ec52 <atomic_set_bit+0x8>
   1ec60:	f3bf 8f5b 	dmb	ish
}
   1ec64:	4770      	bx	lr

0001ec66 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ec66:	2301      	movs	r3, #1
   1ec68:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ec6a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ec6c:	f3bf 8f5b 	dmb	ish
   1ec70:	e850 2f00 	ldrex	r2, [r0]
   1ec74:	401a      	ands	r2, r3
   1ec76:	e840 2100 	strex	r1, r2, [r0]
   1ec7a:	2900      	cmp	r1, #0
   1ec7c:	d1f8      	bne.n	1ec70 <atomic_clear_bit+0xa>
   1ec7e:	f3bf 8f5b 	dmb	ish
}
   1ec82:	4770      	bx	lr

0001ec84 <bt_smp_aes_cmac>:
{
   1ec84:	b570      	push	{r4, r5, r6, lr}
   1ec86:	b0c2      	sub	sp, #264	; 0x108
   1ec88:	460d      	mov	r5, r1
   1ec8a:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1ec8c:	4601      	mov	r1, r0
   1ec8e:	aa16      	add	r2, sp, #88	; 0x58
   1ec90:	4668      	mov	r0, sp
{
   1ec92:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1ec94:	f7fd ff27 	bl	1cae6 <tc_cmac_setup>
   1ec98:	b150      	cbz	r0, 1ecb0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1ec9a:	4632      	mov	r2, r6
   1ec9c:	4629      	mov	r1, r5
   1ec9e:	4668      	mov	r0, sp
   1eca0:	f7fd ff4c 	bl	1cb3c <tc_cmac_update>
   1eca4:	b120      	cbz	r0, 1ecb0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1eca6:	4669      	mov	r1, sp
   1eca8:	4620      	mov	r0, r4
   1ecaa:	f7fd ffb3 	bl	1cc14 <tc_cmac_final>
   1ecae:	b918      	cbnz	r0, 1ecb8 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1ecb0:	f06f 0004 	mvn.w	r0, #4
}
   1ecb4:	b042      	add	sp, #264	; 0x108
   1ecb6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1ecb8:	2000      	movs	r0, #0
   1ecba:	e7fb      	b.n	1ecb4 <bt_smp_aes_cmac+0x30>

0001ecbc <bt_smp_disconnected>:
{
   1ecbc:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   1ecbe:	6803      	ldr	r3, [r0, #0]
   1ecc0:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   1ecc4:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   1ecc6:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1ecca:	f001 f989 	bl	1ffe0 <k_delayed_work_cancel>
	if (keys) {
   1ecce:	b13d      	cbz	r5, 1ece0 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1ecd0:	89eb      	ldrh	r3, [r5, #14]
   1ecd2:	b113      	cbz	r3, 1ecda <bt_smp_disconnected+0x1e>
   1ecd4:	7b6b      	ldrb	r3, [r5, #13]
   1ecd6:	079b      	lsls	r3, r3, #30
   1ecd8:	d502      	bpl.n	1ece0 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   1ecda:	4628      	mov	r0, r5
   1ecdc:	f000 fc7f 	bl	1f5de <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1ece0:	4620      	mov	r0, r4
   1ece2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   1ece6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1ecea:	2100      	movs	r1, #0
   1ecec:	f7fe b830 	b.w	1cd50 <memset>

0001ecf0 <smp_security_request>:
   1ecf0:	2007      	movs	r0, #7
   1ecf2:	4770      	bx	lr

0001ecf4 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1ecf4:	b510      	push	{r4, lr}
   1ecf6:	1e43      	subs	r3, r0, #1
   1ecf8:	f100 0210 	add.w	r2, r0, #16
   1ecfc:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ecfe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ed02:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1ed06:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1ed08:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ed0a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1ed0c:	d1f7      	bne.n	1ecfe <sys_mem_swap.constprop.0+0xa>
	}
}
   1ed0e:	bd10      	pop	{r4, pc}

0001ed10 <smp_f6>:
{
   1ed10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed12:	b097      	sub	sp, #92	; 0x5c
   1ed14:	4605      	mov	r5, r0
   1ed16:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   1ed18:	a805      	add	r0, sp, #20
   1ed1a:	2210      	movs	r2, #16
{
   1ed1c:	461c      	mov	r4, r3
   1ed1e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1ed20:	f7ff ff7f 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1ed24:	2210      	movs	r2, #16
   1ed26:	4631      	mov	r1, r6
   1ed28:	a809      	add	r0, sp, #36	; 0x24
   1ed2a:	f7ff ff7a 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1ed2e:	4621      	mov	r1, r4
   1ed30:	2210      	movs	r2, #16
   1ed32:	a80d      	add	r0, sp, #52	; 0x34
   1ed34:	f7ff ff75 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1ed38:	991c      	ldr	r1, [sp, #112]	; 0x70
   1ed3a:	2203      	movs	r2, #3
   1ed3c:	a811      	add	r0, sp, #68	; 0x44
   1ed3e:	f7ff ff70 	bl	1ec22 <sys_memcpy_swap>
	m[51] = a1->type;
   1ed42:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1ed44:	f814 3b01 	ldrb.w	r3, [r4], #1
   1ed48:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1ed4c:	4621      	mov	r1, r4
   1ed4e:	2206      	movs	r2, #6
   1ed50:	a812      	add	r0, sp, #72	; 0x48
   1ed52:	f7fd ffd2 	bl	1ccfa <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1ed56:	4621      	mov	r1, r4
   1ed58:	2206      	movs	r2, #6
   1ed5a:	a812      	add	r0, sp, #72	; 0x48
   1ed5c:	f7ff ff61 	bl	1ec22 <sys_memcpy_swap>
	m[58] = a2->type;
   1ed60:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   1ed62:	f814 3b01 	ldrb.w	r3, [r4], #1
   1ed66:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1ed6a:	4621      	mov	r1, r4
   1ed6c:	2206      	movs	r2, #6
   1ed6e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1ed72:	f7fd ffc2 	bl	1ccfa <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1ed76:	4621      	mov	r1, r4
   1ed78:	2206      	movs	r2, #6
   1ed7a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1ed7e:	f7ff ff50 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1ed82:	2210      	movs	r2, #16
   1ed84:	4629      	mov	r1, r5
   1ed86:	a801      	add	r0, sp, #4
   1ed88:	f7ff ff4b 	bl	1ec22 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1ed8c:	463b      	mov	r3, r7
   1ed8e:	2241      	movs	r2, #65	; 0x41
   1ed90:	a905      	add	r1, sp, #20
   1ed92:	a801      	add	r0, sp, #4
   1ed94:	f7ff ff76 	bl	1ec84 <bt_smp_aes_cmac>
	if (err) {
   1ed98:	4604      	mov	r4, r0
   1ed9a:	b910      	cbnz	r0, 1eda2 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1ed9c:	4638      	mov	r0, r7
   1ed9e:	f7ff ffa9 	bl	1ecf4 <sys_mem_swap.constprop.0>
}
   1eda2:	4620      	mov	r0, r4
   1eda4:	b017      	add	sp, #92	; 0x5c
   1eda6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001eda8 <smp_f4>:
{
   1eda8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1edaa:	b097      	sub	sp, #92	; 0x5c
   1edac:	4614      	mov	r4, r2
   1edae:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   1edb0:	2220      	movs	r2, #32
   1edb2:	4601      	mov	r1, r0
   1edb4:	a805      	add	r0, sp, #20
{
   1edb6:	461d      	mov	r5, r3
   1edb8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1edba:	f7ff ff32 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1edbe:	2220      	movs	r2, #32
   1edc0:	4631      	mov	r1, r6
   1edc2:	a80d      	add	r0, sp, #52	; 0x34
   1edc4:	f7ff ff2d 	bl	1ec22 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1edc8:	4621      	mov	r1, r4
   1edca:	2210      	movs	r2, #16
   1edcc:	a801      	add	r0, sp, #4
	m[64] = z;
   1edce:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1edd2:	f7ff ff26 	bl	1ec22 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1edd6:	463b      	mov	r3, r7
   1edd8:	2241      	movs	r2, #65	; 0x41
   1edda:	a905      	add	r1, sp, #20
   1eddc:	a801      	add	r0, sp, #4
   1edde:	f7ff ff51 	bl	1ec84 <bt_smp_aes_cmac>
	if (err) {
   1ede2:	4604      	mov	r4, r0
   1ede4:	b910      	cbnz	r0, 1edec <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1ede6:	4638      	mov	r0, r7
   1ede8:	f7ff ff84 	bl	1ecf4 <sys_mem_swap.constprop.0>
}
   1edec:	4620      	mov	r0, r4
   1edee:	b017      	add	sp, #92	; 0x5c
   1edf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001edf2 <smp_signing_info>:
   1edf2:	2007      	movs	r0, #7
   1edf4:	4770      	bx	lr

0001edf6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1edf6:	f3bf 8f5b 	dmb	ish
   1edfa:	6800      	ldr	r0, [r0, #0]
   1edfc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ee00:	4108      	asrs	r0, r1
}
   1ee02:	f000 0001 	and.w	r0, r0, #1
   1ee06:	4770      	bx	lr

0001ee08 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1ee08:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1ee0a:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1ee0e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1ee10:	4628      	mov	r0, r5
   1ee12:	2104      	movs	r1, #4
   1ee14:	f7ff ffef 	bl	1edf6 <atomic_test_bit>
   1ee18:	b168      	cbz	r0, 1ee36 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   1ee1a:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1ee1c:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1ee1e:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1ee20:	4608      	mov	r0, r1
   1ee22:	f7fe fe5f 	bl	1dae4 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1ee26:	4604      	mov	r4, r0
   1ee28:	b940      	cbnz	r0, 1ee3c <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1ee2a:	2104      	movs	r1, #4
   1ee2c:	4628      	mov	r0, r5
   1ee2e:	f7ff ff0c 	bl	1ec4a <atomic_set_bit>
}
   1ee32:	4620      	mov	r0, r4
   1ee34:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1ee36:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1ee3a:	e7ef      	b.n	1ee1c <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ee3c:	2101      	movs	r1, #1
   1ee3e:	3008      	adds	r0, #8
   1ee40:	f000 fc32 	bl	1f6a8 <net_buf_simple_add>
	hdr->code = op;
   1ee44:	7006      	strb	r6, [r0, #0]
	return buf;
   1ee46:	e7f4      	b.n	1ee32 <smp_create_pdu.isra.0+0x2a>

0001ee48 <smp_send_pairing_random>:
{
   1ee48:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1ee4a:	2104      	movs	r1, #4
{
   1ee4c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1ee4e:	f7ff ffdb 	bl	1ee08 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1ee52:	4604      	mov	r4, r0
   1ee54:	b178      	cbz	r0, 1ee76 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   1ee56:	2110      	movs	r1, #16
   1ee58:	3008      	adds	r0, #8
   1ee5a:	f000 fc25 	bl	1f6a8 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1ee5e:	2210      	movs	r2, #16
   1ee60:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   1ee64:	f7fd ff49 	bl	1ccfa <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1ee68:	4628      	mov	r0, r5
   1ee6a:	2200      	movs	r2, #0
   1ee6c:	4621      	mov	r1, r4
   1ee6e:	f7f8 fdd3 	bl	17a18 <smp_send.isra.0>
	return 0;
   1ee72:	2000      	movs	r0, #0
}
   1ee74:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1ee76:	2008      	movs	r0, #8
   1ee78:	e7fc      	b.n	1ee74 <smp_send_pairing_random+0x2c>

0001ee7a <send_pairing_rsp>:
{
   1ee7a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1ee7c:	2102      	movs	r1, #2
{
   1ee7e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1ee80:	f7ff ffc2 	bl	1ee08 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1ee84:	4604      	mov	r4, r0
   1ee86:	b178      	cbz	r0, 1eea8 <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   1ee88:	2106      	movs	r1, #6
   1ee8a:	3008      	adds	r0, #8
   1ee8c:	f000 fc0c 	bl	1f6a8 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1ee90:	2206      	movs	r2, #6
   1ee92:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   1ee96:	f7fd ff30 	bl	1ccfa <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1ee9a:	4628      	mov	r0, r5
   1ee9c:	2200      	movs	r2, #0
   1ee9e:	4621      	mov	r1, r4
   1eea0:	f7f8 fdba 	bl	17a18 <smp_send.isra.0>
	return 0;
   1eea4:	2000      	movs	r0, #0
}
   1eea6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1eea8:	2008      	movs	r0, #8
   1eeaa:	e7fc      	b.n	1eea6 <send_pairing_rsp+0x2c>

0001eeac <smp_dhkey_check>:
{
   1eeac:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1eeae:	6803      	ldr	r3, [r0, #0]
   1eeb0:	78db      	ldrb	r3, [r3, #3]
   1eeb2:	2b01      	cmp	r3, #1
{
   1eeb4:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1eeb6:	d115      	bne.n	1eee4 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1eeb8:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1eeba:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   1eebe:	210f      	movs	r1, #15
   1eec0:	4628      	mov	r0, r5
   1eec2:	f7ff fed0 	bl	1ec66 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1eec6:	4631      	mov	r1, r6
   1eec8:	2210      	movs	r2, #16
   1eeca:	f204 106f 	addw	r0, r4, #367	; 0x16f
   1eece:	f7fd ff14 	bl	1ccfa <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1eed2:	2107      	movs	r1, #7
   1eed4:	4628      	mov	r0, r5
   1eed6:	f7ff ff8e 	bl	1edf6 <atomic_test_bit>
   1eeda:	b128      	cbz	r0, 1eee8 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1eedc:	2108      	movs	r1, #8
   1eede:	4628      	mov	r0, r5
   1eee0:	f7ff feb3 	bl	1ec4a <atomic_set_bit>
}
   1eee4:	2000      	movs	r0, #0
   1eee6:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1eee8:	2109      	movs	r1, #9
   1eeea:	4628      	mov	r0, r5
   1eeec:	f7ff ff83 	bl	1edf6 <atomic_test_bit>
   1eef0:	2800      	cmp	r0, #0
   1eef2:	d1f3      	bne.n	1eedc <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   1eef4:	4620      	mov	r0, r4
}
   1eef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   1eefa:	f7f8 bda5 	b.w	17a48 <compute_and_check_and_send_slave_dhcheck>

0001eefe <smp_ident_info>:
{
   1eefe:	b538      	push	{r3, r4, r5, lr}
   1ef00:	4604      	mov	r4, r0
   1ef02:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ef04:	30bc      	adds	r0, #188	; 0xbc
   1ef06:	210c      	movs	r1, #12
   1ef08:	f7ff ff75 	bl	1edf6 <atomic_test_bit>
   1ef0c:	b168      	cbz	r0, 1ef2a <smp_ident_info+0x2c>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1ef0e:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ef10:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1ef12:	2002      	movs	r0, #2
   1ef14:	7a19      	ldrb	r1, [r3, #8]
   1ef16:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1ef1a:	f000 fb4c 	bl	1f5b6 <bt_keys_get_type>
		if (!keys) {
   1ef1e:	b158      	cbz	r0, 1ef38 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   1ef20:	2210      	movs	r2, #16
   1ef22:	4629      	mov	r1, r5
   1ef24:	302a      	adds	r0, #42	; 0x2a
   1ef26:	f7fd fee8 	bl	1ccfa <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1ef2a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1ef2e:	2109      	movs	r1, #9
   1ef30:	f7ff fe8b 	bl	1ec4a <atomic_set_bit>
	return 0;
   1ef34:	2000      	movs	r0, #0
}
   1ef36:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1ef38:	2008      	movs	r0, #8
   1ef3a:	e7fc      	b.n	1ef36 <smp_ident_info+0x38>

0001ef3c <smp_encrypt_info>:
{
   1ef3c:	b538      	push	{r3, r4, r5, lr}
   1ef3e:	4604      	mov	r4, r0
   1ef40:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ef42:	30bc      	adds	r0, #188	; 0xbc
   1ef44:	210c      	movs	r1, #12
   1ef46:	f7ff ff56 	bl	1edf6 <atomic_test_bit>
   1ef4a:	b168      	cbz	r0, 1ef68 <smp_encrypt_info+0x2c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1ef4c:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ef4e:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ef50:	2004      	movs	r0, #4
   1ef52:	7a19      	ldrb	r1, [r3, #8]
   1ef54:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1ef58:	f000 fb2d 	bl	1f5b6 <bt_keys_get_type>
		if (!keys) {
   1ef5c:	b158      	cbz	r0, 1ef76 <smp_encrypt_info+0x3a>
		memcpy(keys->ltk.val, req->ltk, 16);
   1ef5e:	2210      	movs	r2, #16
   1ef60:	4629      	mov	r1, r5
   1ef62:	301a      	adds	r0, #26
   1ef64:	f7fd fec9 	bl	1ccfa <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   1ef68:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1ef6c:	2107      	movs	r1, #7
   1ef6e:	f7ff fe6c 	bl	1ec4a <atomic_set_bit>
	return 0;
   1ef72:	2000      	movs	r0, #0
}
   1ef74:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1ef76:	2008      	movs	r0, #8
   1ef78:	e7fc      	b.n	1ef74 <smp_encrypt_info+0x38>

0001ef7a <atomic_test_and_clear_bit>:
{
   1ef7a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ef7c:	2301      	movs	r3, #1
   1ef7e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ef82:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ef84:	f3bf 8f5b 	dmb	ish
   1ef88:	e850 3f00 	ldrex	r3, [r0]
   1ef8c:	ea03 0c02 	and.w	ip, r3, r2
   1ef90:	e840 ce00 	strex	lr, ip, [r0]
   1ef94:	f1be 0f00 	cmp.w	lr, #0
   1ef98:	d1f6      	bne.n	1ef88 <atomic_test_and_clear_bit+0xe>
   1ef9a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1ef9e:	420b      	tst	r3, r1
}
   1efa0:	bf14      	ite	ne
   1efa2:	2001      	movne	r0, #1
   1efa4:	2000      	moveq	r0, #0
   1efa6:	f85d fb04 	ldr.w	pc, [sp], #4

0001efaa <smp_reset>:
{
   1efaa:	b538      	push	{r3, r4, r5, lr}
   1efac:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1efae:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   1efb0:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1efb4:	f001 f814 	bl	1ffe0 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   1efb8:	2300      	movs	r3, #0
   1efba:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   1efbe:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1efc2:	f3bf 8f5b 	dmb	ish
   1efc6:	e850 2f00 	ldrex	r2, [r0]
   1efca:	e840 3100 	strex	r1, r3, [r0]
   1efce:	2900      	cmp	r1, #0
   1efd0:	d1f9      	bne.n	1efc6 <smp_reset+0x1c>
   1efd2:	f3bf 8f5b 	dmb	ish
   1efd6:	f3bf 8f5b 	dmb	ish
   1efda:	34bc      	adds	r4, #188	; 0xbc
   1efdc:	e854 2f00 	ldrex	r2, [r4]
   1efe0:	e844 3100 	strex	r1, r3, [r4]
   1efe4:	2900      	cmp	r1, #0
   1efe6:	d1f9      	bne.n	1efdc <smp_reset+0x32>
   1efe8:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   1efec:	7a6b      	ldrb	r3, [r5, #9]
   1efee:	7aaa      	ldrb	r2, [r5, #10]
   1eff0:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   1eff2:	bf18      	it	ne
   1eff4:	72ab      	strbne	r3, [r5, #10]
}
   1eff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1effa:	2101      	movs	r1, #1
   1effc:	f7ff be25 	b.w	1ec4a <atomic_set_bit>

0001f000 <smp_error>:
{
   1f000:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f002:	4606      	mov	r6, r0
   1f004:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   1f006:	f7f9 f8ed 	bl	181e4 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1f00a:	2105      	movs	r1, #5
   1f00c:	4630      	mov	r0, r6
   1f00e:	f7ff fefb 	bl	1ee08 <smp_create_pdu.isra.0>
	if (!buf) {
   1f012:	4605      	mov	r5, r0
   1f014:	b178      	cbz	r0, 1f036 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   1f016:	2101      	movs	r1, #1
   1f018:	3008      	adds	r0, #8
   1f01a:	f000 fb45 	bl	1f6a8 <net_buf_simple_add>
	rsp->reason = reason;
   1f01e:	7004      	strb	r4, [r0, #0]
   1f020:	2400      	movs	r4, #0
   1f022:	6830      	ldr	r0, [r6, #0]
   1f024:	9400      	str	r4, [sp, #0]
   1f026:	4623      	mov	r3, r4
   1f028:	462a      	mov	r2, r5
   1f02a:	2106      	movs	r1, #6
   1f02c:	f7fe fd5d 	bl	1daea <bt_l2cap_send_cb>
	return 0;
   1f030:	4620      	mov	r0, r4
}
   1f032:	b002      	add	sp, #8
   1f034:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1f036:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f03a:	e7fa      	b.n	1f032 <smp_error+0x32>

0001f03c <smp_timeout>:
{
   1f03c:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1f03e:	2108      	movs	r1, #8
{
   1f040:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1f042:	f5a0 70d4 	sub.w	r0, r0, #424	; 0x1a8
   1f046:	f7f9 f8cd 	bl	181e4 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f04a:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   1f04e:	2104      	movs	r1, #4
}
   1f050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f054:	f7ff bdf9 	b.w	1ec4a <atomic_set_bit>

0001f058 <smp_master_ident>:
{
   1f058:	b570      	push	{r4, r5, r6, lr}
   1f05a:	460b      	mov	r3, r1
   1f05c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f05e:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   1f060:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f064:	f7ff fec7 	bl	1edf6 <atomic_test_bit>
   1f068:	b1c8      	cbz	r0, 1f09e <smp_master_ident+0x46>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1f06a:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1f06c:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1f06e:	f105 0288 	add.w	r2, r5, #136	; 0x88
   1f072:	2004      	movs	r0, #4
   1f074:	f000 fa9f 	bl	1f5b6 <bt_keys_get_type>
		if (!keys) {
   1f078:	4605      	mov	r5, r0
   1f07a:	b330      	cbz	r0, 1f0ca <smp_master_ident+0x72>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1f07c:	2202      	movs	r2, #2
   1f07e:	4631      	mov	r1, r6
   1f080:	3018      	adds	r0, #24
   1f082:	f7fd fe3a 	bl	1ccfa <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1f086:	2208      	movs	r2, #8
   1f088:	1cb1      	adds	r1, r6, #2
   1f08a:	f105 0010 	add.w	r0, r5, #16
   1f08e:	f7fd fe34 	bl	1ccfa <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1f092:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   1f096:	f023 0301 	bic.w	r3, r3, #1
   1f09a:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1f09e:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   1f0a2:	079a      	lsls	r2, r3, #30
   1f0a4:	d50d      	bpl.n	1f0c2 <smp_master_ident+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1f0a6:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1f0a8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1f0ac:	f7ff fdcd 	bl	1ec4a <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1f0b0:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
   1f0b4:	b91d      	cbnz	r5, 1f0be <smp_master_ident+0x66>
		smp_pairing_complete(smp, 0);
   1f0b6:	4629      	mov	r1, r5
   1f0b8:	4620      	mov	r0, r4
   1f0ba:	f7f9 f893 	bl	181e4 <smp_pairing_complete>
	return 0;
   1f0be:	2000      	movs	r0, #0
   1f0c0:	e004      	b.n	1f0cc <smp_master_ident+0x74>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f0c2:	075b      	lsls	r3, r3, #29
   1f0c4:	d5f4      	bpl.n	1f0b0 <smp_master_ident+0x58>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1f0c6:	210a      	movs	r1, #10
   1f0c8:	e7ee      	b.n	1f0a8 <smp_master_ident+0x50>
			return BT_SMP_ERR_UNSPECIFIED;
   1f0ca:	2008      	movs	r0, #8
}
   1f0cc:	bd70      	pop	{r4, r5, r6, pc}

0001f0ce <smp_ident_sent>:
{
   1f0ce:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1f0d0:	7883      	ldrb	r3, [r0, #2]
   1f0d2:	2b01      	cmp	r3, #1
   1f0d4:	d10f      	bne.n	1f0f6 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1f0d6:	2106      	movs	r1, #6
   1f0d8:	f7fe fd4d 	bl	1db76 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1f0dc:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   1f0e0:	f022 0201 	bic.w	r2, r2, #1
   1f0e4:	f880 21a0 	strb.w	r2, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   1f0e8:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   1f0ec:	b919      	cbnz	r1, 1f0f6 <smp_ident_sent+0x28>
}
   1f0ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1f0f2:	f7f9 b877 	b.w	181e4 <smp_pairing_complete>
}
   1f0f6:	bd08      	pop	{r3, pc}

0001f0f8 <smp_c1>:
{
   1f0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f0fc:	b089      	sub	sp, #36	; 0x24
   1f0fe:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1f102:	4699      	mov	r9, r3
	p1[0] = ia->type;
   1f104:	783b      	ldrb	r3, [r7, #0]
{
   1f106:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   1f108:	f88d 3000 	strb.w	r3, [sp]
{
   1f10c:	460c      	mov	r4, r1
	p1[1] = ra->type;
   1f10e:	f898 3000 	ldrb.w	r3, [r8]
   1f112:	f88d 3001 	strb.w	r3, [sp, #1]
{
   1f116:	4611      	mov	r1, r2
   1f118:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1f11a:	2207      	movs	r2, #7
   1f11c:	f10d 0002 	add.w	r0, sp, #2
   1f120:	f7fd fdeb 	bl	1ccfa <memcpy>
	memcpy(p1 + 9, pres, 7);
   1f124:	2207      	movs	r2, #7
   1f126:	4649      	mov	r1, r9
   1f128:	f10d 0009 	add.w	r0, sp, #9
   1f12c:	f7fd fde5 	bl	1ccfa <memcpy>
	while (len--) {
   1f130:	f104 0010 	add.w	r0, r4, #16
   1f134:	4629      	mov	r1, r5
   1f136:	466a      	mov	r2, sp
   1f138:	4284      	cmp	r4, r0
   1f13a:	d127      	bne.n	1f18c <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1f13c:	462a      	mov	r2, r5
   1f13e:	4629      	mov	r1, r5
   1f140:	4630      	mov	r0, r6
   1f142:	f000 fc08 	bl	1f956 <bt_encrypt_le>
	if (err) {
   1f146:	4604      	mov	r4, r0
   1f148:	b9e0      	cbnz	r0, 1f184 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   1f14a:	2206      	movs	r2, #6
   1f14c:	f108 0101 	add.w	r1, r8, #1
   1f150:	a804      	add	r0, sp, #16
   1f152:	f7fd fdd2 	bl	1ccfa <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1f156:	2206      	movs	r2, #6
   1f158:	1c79      	adds	r1, r7, #1
   1f15a:	f10d 0016 	add.w	r0, sp, #22
   1f15e:	f7fd fdcc 	bl	1ccfa <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1f162:	2204      	movs	r2, #4
   1f164:	4621      	mov	r1, r4
   1f166:	a807      	add	r0, sp, #28
   1f168:	f7fd fdf2 	bl	1cd50 <memset>
	while (len--) {
   1f16c:	f105 0010 	add.w	r0, r5, #16
   1f170:	462a      	mov	r2, r5
   1f172:	ab04      	add	r3, sp, #16
   1f174:	4282      	cmp	r2, r0
   1f176:	d112      	bne.n	1f19e <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   1f178:	462a      	mov	r2, r5
   1f17a:	4629      	mov	r1, r5
   1f17c:	4630      	mov	r0, r6
   1f17e:	f000 fbea 	bl	1f956 <bt_encrypt_le>
   1f182:	4604      	mov	r4, r0
}
   1f184:	4620      	mov	r0, r4
   1f186:	b009      	add	sp, #36	; 0x24
   1f188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   1f18c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f190:	f812 cb01 	ldrb.w	ip, [r2], #1
   1f194:	ea83 030c 	eor.w	r3, r3, ip
   1f198:	f801 3b01 	strb.w	r3, [r1], #1
   1f19c:	e7cc      	b.n	1f138 <smp_c1+0x40>
   1f19e:	f812 1b01 	ldrb.w	r1, [r2], #1
   1f1a2:	f813 4b01 	ldrb.w	r4, [r3], #1
   1f1a6:	4061      	eors	r1, r4
   1f1a8:	f802 1c01 	strb.w	r1, [r2, #-1]
   1f1ac:	e7e2      	b.n	1f174 <smp_c1+0x7c>

0001f1ae <legacy_pairing_confirm>:
{
   1f1ae:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f1b0:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   1f1b4:	b085      	sub	sp, #20
   1f1b6:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f1b8:	2109      	movs	r1, #9
   1f1ba:	4638      	mov	r0, r7
   1f1bc:	f7ff fe1b 	bl	1edf6 <atomic_test_bit>
   1f1c0:	bb90      	cbnz	r0, 1f228 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   1f1c2:	2104      	movs	r1, #4
   1f1c4:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   1f1c8:	f7ff fd3f 	bl	1ec4a <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1f1cc:	2103      	movs	r1, #3
   1f1ce:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   1f1d0:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1f1d2:	f7ff fe19 	bl	1ee08 <smp_create_pdu.isra.0>
	if (!buf) {
   1f1d6:	4606      	mov	r6, r0
   1f1d8:	b1c0      	cbz	r0, 1f20c <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   1f1da:	2110      	movs	r1, #16
   1f1dc:	3008      	adds	r0, #8
   1f1de:	f000 fa63 	bl	1f6a8 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1f1e2:	f104 0396 	add.w	r3, r4, #150	; 0x96
   1f1e6:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1f1e8:	9002      	str	r0, [sp, #8]
   1f1ea:	9301      	str	r3, [sp, #4]
   1f1ec:	9400      	str	r4, [sp, #0]
   1f1ee:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   1f1f2:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   1f1f6:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   1f1fa:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   1f1fe:	f7ff ff7b 	bl	1f0f8 <smp_c1>
   1f202:	4604      	mov	r4, r0
   1f204:	b120      	cbz	r0, 1f210 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   1f206:	4630      	mov	r0, r6
   1f208:	f7f9 fd0a 	bl	18c20 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1f20c:	2008      	movs	r0, #8
   1f20e:	e009      	b.n	1f224 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   1f210:	4602      	mov	r2, r0
   1f212:	4631      	mov	r1, r6
   1f214:	4628      	mov	r0, r5
   1f216:	f7f8 fbff 	bl	17a18 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f21a:	4621      	mov	r1, r4
   1f21c:	4638      	mov	r0, r7
   1f21e:	f7ff fd22 	bl	1ec66 <atomic_clear_bit>
	return 0;
   1f222:	2000      	movs	r0, #0
}
   1f224:	b005      	add	sp, #20
   1f226:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f228:	2100      	movs	r1, #0
   1f22a:	4638      	mov	r0, r7
   1f22c:	f7ff fd0d 	bl	1ec4a <atomic_set_bit>
   1f230:	e7f7      	b.n	1f222 <legacy_pairing_confirm+0x74>

0001f232 <smp_pairing_confirm>:
{
   1f232:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1f234:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f236:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
   1f23a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f23c:	210a      	movs	r1, #10
   1f23e:	4628      	mov	r0, r5
   1f240:	f7ff fd11 	bl	1ec66 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1f244:	4631      	mov	r1, r6
   1f246:	2210      	movs	r2, #16
   1f248:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   1f24c:	f7fd fd55 	bl	1ccfa <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f250:	2105      	movs	r1, #5
   1f252:	4628      	mov	r0, r5
   1f254:	f7ff fdcf 	bl	1edf6 <atomic_test_bit>
   1f258:	b920      	cbnz	r0, 1f264 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1f25a:	4620      	mov	r0, r4
}
   1f25c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1f260:	f7ff bfa5 	b.w	1f1ae <legacy_pairing_confirm>
	switch (smp->method) {
   1f264:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1f268:	2b01      	cmp	r3, #1
   1f26a:	d00b      	beq.n	1f284 <smp_pairing_confirm+0x52>
   1f26c:	2b02      	cmp	r3, #2
   1f26e:	d115      	bne.n	1f29c <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1f270:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1f274:	2104      	movs	r1, #4
   1f276:	f7ff fce8 	bl	1ec4a <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1f27a:	4620      	mov	r0, r4
}
   1f27c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1f280:	f7f8 bce8 	b.w	17c54 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f284:	2109      	movs	r1, #9
   1f286:	4628      	mov	r0, r5
   1f288:	f7ff fdb5 	bl	1edf6 <atomic_test_bit>
   1f28c:	2800      	cmp	r0, #0
   1f28e:	d0ef      	beq.n	1f270 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f290:	4628      	mov	r0, r5
   1f292:	2100      	movs	r1, #0
   1f294:	f7ff fcd9 	bl	1ec4a <atomic_set_bit>
			return 0;
   1f298:	2000      	movs	r0, #0
}
   1f29a:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1f29c:	2008      	movs	r0, #8
   1f29e:	e7fc      	b.n	1f29a <smp_pairing_confirm+0x68>

0001f2a0 <smp_ident_addr_info>:
{
   1f2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1f2a4:	688f      	ldr	r7, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1f2a6:	783b      	ldrb	r3, [r7, #0]
{
   1f2a8:	4605      	mov	r5, r0
   1f2aa:	b123      	cbz	r3, 1f2b6 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1f2ac:	79bb      	ldrb	r3, [r7, #6]
   1f2ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f2b2:	2bc0      	cmp	r3, #192	; 0xc0
   1f2b4:	d155      	bne.n	1f362 <smp_ident_addr_info+0xc2>
	struct bt_conn *conn = smp->chan.chan.conn;
   1f2b6:	4628      	mov	r0, r5
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f2b8:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   1f2ba:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f2be:	f7ff fd9a 	bl	1edf6 <atomic_test_bit>
   1f2c2:	b3a8      	cbz	r0, 1f330 <smp_ident_addr_info+0x90>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1f2c4:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1f2c8:	7a21      	ldrb	r1, [r4, #8]
   1f2ca:	4642      	mov	r2, r8
   1f2cc:	2002      	movs	r0, #2
   1f2ce:	f000 f972 	bl	1f5b6 <bt_keys_get_type>
		if (!keys) {
   1f2d2:	4606      	mov	r6, r0
   1f2d4:	2800      	cmp	r0, #0
   1f2d6:	d047      	beq.n	1f368 <smp_ident_addr_info+0xc8>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1f2d8:	78e3      	ldrb	r3, [r4, #3]
   1f2da:	2b00      	cmp	r3, #0
   1f2dc:	d13e      	bne.n	1f35c <smp_ident_addr_info+0xbc>
			dst = &conn->le.resp_addr;
   1f2de:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1f2e2:	780b      	ldrb	r3, [r1, #0]
   1f2e4:	2b01      	cmp	r3, #1
   1f2e6:	d120      	bne.n	1f32a <smp_ident_addr_info+0x8a>
		if (bt_addr_le_is_rpa(dst)) {
   1f2e8:	798b      	ldrb	r3, [r1, #6]
   1f2ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f2ee:	2b40      	cmp	r3, #64	; 0x40
   1f2f0:	d11b      	bne.n	1f32a <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   1f2f2:	2206      	movs	r2, #6
   1f2f4:	3101      	adds	r1, #1
   1f2f6:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1f2fa:	f7fd fcfe 	bl	1ccfa <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1f2fe:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1f302:	b193      	cbz	r3, 1f32a <smp_ident_addr_info+0x8a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1f304:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   1f308:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f30c:	2bc0      	cmp	r3, #192	; 0xc0
   1f30e:	d00c      	beq.n	1f32a <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   1f310:	2207      	movs	r2, #7
   1f312:	4639      	mov	r1, r7
   1f314:	1c70      	adds	r0, r6, #1
   1f316:	f7fd fcf0 	bl	1ccfa <memcpy>
   1f31a:	2207      	movs	r2, #7
   1f31c:	4639      	mov	r1, r7
   1f31e:	4640      	mov	r0, r8
   1f320:	f7fd fceb 	bl	1ccfa <memcpy>
				bt_conn_identity_resolved(conn);
   1f324:	4620      	mov	r0, r4
   1f326:	f7f6 fbf5 	bl	15b14 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1f32a:	4630      	mov	r0, r6
   1f32c:	f7f5 fc9c 	bl	14c68 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1f330:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
   1f334:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f338:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1f33a:	f885 21a1 	strb.w	r2, [r5, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f33e:	d504      	bpl.n	1f34a <smp_ident_addr_info+0xaa>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1f340:	210a      	movs	r1, #10
   1f342:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   1f346:	f7ff fc80 	bl	1ec4a <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1f34a:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
   1f34e:	b91c      	cbnz	r4, 1f358 <smp_ident_addr_info+0xb8>
		smp_pairing_complete(smp, 0);
   1f350:	4621      	mov	r1, r4
   1f352:	4628      	mov	r0, r5
   1f354:	f7f8 ff46 	bl	181e4 <smp_pairing_complete>
	return 0;
   1f358:	2000      	movs	r0, #0
   1f35a:	e003      	b.n	1f364 <smp_ident_addr_info+0xc4>
			dst = &conn->le.init_addr;
   1f35c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1f360:	e7bf      	b.n	1f2e2 <smp_ident_addr_info+0x42>
		return BT_SMP_ERR_INVALID_PARAMS;
   1f362:	200a      	movs	r0, #10
}
   1f364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1f368:	2008      	movs	r0, #8
   1f36a:	e7fb      	b.n	1f364 <smp_ident_addr_info+0xc4>

0001f36c <bt_smp_request_ltk>:
{
   1f36c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f370:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1f372:	e9cd 2300 	strd	r2, r3, [sp]
   1f376:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1f378:	f7ff fc5f 	bl	1ec3a <smp_chan_get>
	if (!smp) {
   1f37c:	4605      	mov	r5, r0
   1f37e:	2800      	cmp	r0, #0
   1f380:	f000 809d 	beq.w	1f4be <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   1f384:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   1f388:	f1b9 0f00 	cmp.w	r9, #0
   1f38c:	d12d      	bne.n	1f3ea <bt_smp_request_ltk+0x7e>
   1f38e:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f392:	4313      	orrs	r3, r2
   1f394:	d129      	bne.n	1f3ea <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f396:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   1f39a:	2103      	movs	r1, #3
   1f39c:	4640      	mov	r0, r8
   1f39e:	f7ff fd2a 	bl	1edf6 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1f3a2:	b310      	cbz	r0, 1f3ea <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f3a4:	2101      	movs	r1, #1
   1f3a6:	4640      	mov	r0, r8
   1f3a8:	f7ff fd25 	bl	1edf6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f3ac:	4606      	mov	r6, r0
   1f3ae:	b1e0      	cbz	r0, 1f3ea <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f3b0:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   1f3b4:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   1f3b8:	429c      	cmp	r4, r3
   1f3ba:	bf28      	it	cs
   1f3bc:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1f3be:	4622      	mov	r2, r4
   1f3c0:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   1f3c4:	4638      	mov	r0, r7
   1f3c6:	f7fd fc98 	bl	1ccfa <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1f3ca:	2c0f      	cmp	r4, #15
   1f3cc:	d805      	bhi.n	1f3da <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   1f3ce:	f1c4 0210 	rsb	r2, r4, #16
   1f3d2:	4649      	mov	r1, r9
   1f3d4:	1938      	adds	r0, r7, r4
   1f3d6:	f7fd fcbb 	bl	1cd50 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f3da:	2101      	movs	r1, #1
   1f3dc:	4640      	mov	r0, r8
   1f3de:	f7ff fc34 	bl	1ec4a <atomic_set_bit>
}
   1f3e2:	4630      	mov	r0, r6
   1f3e4:	b003      	add	sp, #12
   1f3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1f3ea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1f3ee:	b983      	cbnz	r3, 1f412 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   1f3f0:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1f3f4:	7a21      	ldrb	r1, [r4, #8]
   1f3f6:	4632      	mov	r2, r6
   1f3f8:	2020      	movs	r0, #32
   1f3fa:	f7f9 faf5 	bl	189e8 <bt_keys_find>
   1f3fe:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1f402:	b930      	cbnz	r0, 1f412 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   1f404:	7a21      	ldrb	r1, [r4, #8]
   1f406:	4632      	mov	r2, r6
   1f408:	2001      	movs	r0, #1
   1f40a:	f7f9 faed 	bl	189e8 <bt_keys_find>
   1f40e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1f412:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   1f416:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f41a:	b9ce      	cbnz	r6, 1f450 <bt_smp_request_ltk+0xe4>
   1f41c:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f420:	4313      	orrs	r3, r2
   1f422:	d115      	bne.n	1f450 <bt_smp_request_ltk+0xe4>
   1f424:	2800      	cmp	r0, #0
   1f426:	d03c      	beq.n	1f4a2 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1f428:	89c3      	ldrh	r3, [r0, #14]
   1f42a:	069a      	lsls	r2, r3, #26
   1f42c:	d511      	bpl.n	1f452 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   1f42e:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1f430:	f100 011a 	add.w	r1, r0, #26
   1f434:	4622      	mov	r2, r4
   1f436:	4638      	mov	r0, r7
   1f438:	f7fd fc5f 	bl	1ccfa <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1f43c:	2c0f      	cmp	r4, #15
   1f43e:	d805      	bhi.n	1f44c <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   1f440:	f1c4 0210 	rsb	r2, r4, #16
   1f444:	4631      	mov	r1, r6
   1f446:	1938      	adds	r0, r7, r4
   1f448:	f7fd fc82 	bl	1cd50 <memset>
		return true;
   1f44c:	2601      	movs	r6, #1
   1f44e:	e7c8      	b.n	1f3e2 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1f450:	b338      	cbz	r0, 1f4a2 <bt_smp_request_ltk+0x136>
   1f452:	89c3      	ldrh	r3, [r0, #14]
   1f454:	07db      	lsls	r3, r3, #31
   1f456:	d524      	bpl.n	1f4a2 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1f458:	2208      	movs	r2, #8
   1f45a:	4669      	mov	r1, sp
   1f45c:	3040      	adds	r0, #64	; 0x40
   1f45e:	f7fd fc3c 	bl	1ccda <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1f462:	b9f0      	cbnz	r0, 1f4a2 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   1f464:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f468:	2202      	movs	r2, #2
   1f46a:	a90a      	add	r1, sp, #40	; 0x28
   1f46c:	3048      	adds	r0, #72	; 0x48
   1f46e:	f7fd fc34 	bl	1ccda <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1f472:	4606      	mov	r6, r0
   1f474:	b9a8      	cbnz	r0, 1f4a2 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   1f476:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1f47a:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1f47c:	4638      	mov	r0, r7
   1f47e:	4622      	mov	r2, r4
   1f480:	314a      	adds	r1, #74	; 0x4a
   1f482:	f7fd fc3a 	bl	1ccfa <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1f486:	2c0f      	cmp	r4, #15
   1f488:	d805      	bhi.n	1f496 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   1f48a:	f1c4 0210 	rsb	r2, r4, #16
   1f48e:	4631      	mov	r1, r6
   1f490:	1938      	adds	r0, r7, r4
   1f492:	f7fd fc5d 	bl	1cd50 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f496:	2101      	movs	r1, #1
   1f498:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1f49c:	f7ff fbd5 	bl	1ec4a <atomic_set_bit>
		return true;
   1f4a0:	e7d4      	b.n	1f44c <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f4a2:	210e      	movs	r1, #14
   1f4a4:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1f4a8:	f7ff fca5 	bl	1edf6 <atomic_test_bit>
   1f4ac:	b120      	cbz	r0, 1f4b8 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1f4ae:	2202      	movs	r2, #2
   1f4b0:	2106      	movs	r1, #6
   1f4b2:	4620      	mov	r0, r4
   1f4b4:	f7f6 fb48 	bl	15b48 <bt_conn_security_changed>
	smp_reset(smp);
   1f4b8:	4628      	mov	r0, r5
   1f4ba:	f7ff fd76 	bl	1efaa <smp_reset>
	return false;
   1f4be:	2600      	movs	r6, #0
   1f4c0:	e78f      	b.n	1f3e2 <bt_smp_request_ltk+0x76>

0001f4c2 <bt_smp_sign>:
   1f4c2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1f4c6:	4770      	bx	lr

0001f4c8 <bt_smp_update_keys>:
{
   1f4c8:	b570      	push	{r4, r5, r6, lr}
   1f4ca:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1f4cc:	f7ff fbb5 	bl	1ec3a <smp_chan_get>
	if (!smp) {
   1f4d0:	4605      	mov	r5, r0
   1f4d2:	2800      	cmp	r0, #0
   1f4d4:	d06e      	beq.n	1f5b4 <bt_smp_update_keys+0xec>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f4d6:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
   1f4da:	2103      	movs	r1, #3
   1f4dc:	4630      	mov	r0, r6
   1f4de:	f7ff fc8a 	bl	1edf6 <atomic_test_bit>
   1f4e2:	2800      	cmp	r0, #0
   1f4e4:	d066      	beq.n	1f5b4 <bt_smp_update_keys+0xec>
	if (conn->le.keys) {
   1f4e6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f4ea:	b108      	cbz	r0, 1f4f0 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1f4ec:	f000 f877 	bl	1f5de <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f4f0:	7a20      	ldrb	r0, [r4, #8]
   1f4f2:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1f4f6:	f7f9 fa41 	bl	1897c <bt_keys_get_addr>
   1f4fa:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1f4fe:	b928      	cbnz	r0, 1f50c <bt_smp_update_keys+0x44>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f500:	4628      	mov	r0, r5
   1f502:	2108      	movs	r1, #8
}
   1f504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f508:	f7ff bd7a 	b.w	1f000 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1f50c:	210d      	movs	r1, #13
   1f50e:	4630      	mov	r0, r6
   1f510:	f7ff fc71 	bl	1edf6 <atomic_test_bit>
   1f514:	b128      	cbz	r0, 1f522 <bt_smp_update_keys+0x5a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1f516:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1f51a:	7b53      	ldrb	r3, [r2, #13]
   1f51c:	f043 0302 	orr.w	r3, r3, #2
   1f520:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1f522:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   1f526:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1f52a:	2a03      	cmp	r2, #3
   1f52c:	7b4b      	ldrb	r3, [r1, #13]
   1f52e:	d838      	bhi.n	1f5a2 <bt_smp_update_keys+0xda>
   1f530:	b3d2      	cbz	r2, 1f5a8 <bt_smp_update_keys+0xe0>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1f532:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1f536:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1f538:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   1f53c:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
   1f540:	4293      	cmp	r3, r2
   1f542:	bf28      	it	cs
   1f544:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1f546:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f548:	4630      	mov	r0, r6
   1f54a:	2105      	movs	r1, #5
   1f54c:	f7ff fc53 	bl	1edf6 <atomic_test_bit>
   1f550:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1f554:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f556:	b350      	cbz	r0, 1f5ae <bt_smp_update_keys+0xe6>
		conn->le.keys->flags |= BT_KEYS_SC;
   1f558:	f042 0210 	orr.w	r2, r2, #16
   1f55c:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f55e:	210c      	movs	r1, #12
   1f560:	4630      	mov	r0, r6
   1f562:	f7ff fc48 	bl	1edf6 <atomic_test_bit>
   1f566:	b328      	cbz	r0, 1f5b4 <bt_smp_update_keys+0xec>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1f568:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f56c:	2120      	movs	r1, #32
   1f56e:	f000 f832 	bl	1f5d6 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1f572:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f576:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   1f57a:	2210      	movs	r2, #16
   1f57c:	301a      	adds	r0, #26
   1f57e:	f7fd fbbc 	bl	1ccfa <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1f582:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f586:	2208      	movs	r2, #8
   1f588:	2100      	movs	r1, #0
   1f58a:	3010      	adds	r0, #16
   1f58c:	f7fd fbe0 	bl	1cd50 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1f590:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f594:	2202      	movs	r2, #2
}
   1f596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1f59a:	2100      	movs	r1, #0
   1f59c:	3018      	adds	r0, #24
   1f59e:	f7fd bbd7 	b.w	1cd50 <memset>
	switch (smp->method) {
   1f5a2:	3a05      	subs	r2, #5
   1f5a4:	2a01      	cmp	r2, #1
   1f5a6:	d9c4      	bls.n	1f532 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1f5a8:	f023 0301 	bic.w	r3, r3, #1
   1f5ac:	e7c3      	b.n	1f536 <bt_smp_update_keys+0x6e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1f5ae:	f022 0210 	bic.w	r2, r2, #16
   1f5b2:	735a      	strb	r2, [r3, #13]
}
   1f5b4:	bd70      	pop	{r4, r5, r6, pc}

0001f5b6 <bt_keys_get_type>:
{
   1f5b6:	b570      	push	{r4, r5, r6, lr}
   1f5b8:	4604      	mov	r4, r0
   1f5ba:	460d      	mov	r5, r1
   1f5bc:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1f5be:	f7f9 fa13 	bl	189e8 <bt_keys_find>
	if (keys) {
   1f5c2:	b938      	cbnz	r0, 1f5d4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1f5c4:	4631      	mov	r1, r6
   1f5c6:	4628      	mov	r0, r5
   1f5c8:	f7f9 f9d8 	bl	1897c <bt_keys_get_addr>
	if (!keys) {
   1f5cc:	b110      	cbz	r0, 1f5d4 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   1f5ce:	89c3      	ldrh	r3, [r0, #14]
   1f5d0:	431c      	orrs	r4, r3
   1f5d2:	81c4      	strh	r4, [r0, #14]
}
   1f5d4:	bd70      	pop	{r4, r5, r6, pc}

0001f5d6 <bt_keys_add_type>:
	keys->keys |= type;
   1f5d6:	89c3      	ldrh	r3, [r0, #14]
   1f5d8:	4319      	orrs	r1, r3
   1f5da:	81c1      	strh	r1, [r0, #14]
}
   1f5dc:	4770      	bx	lr

0001f5de <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   1f5de:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   1f5e0:	7a03      	ldrb	r3, [r0, #8]
   1f5e2:	075b      	lsls	r3, r3, #29
{
   1f5e4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1f5e6:	d501      	bpl.n	1f5ec <bt_keys_clear+0xe>
		bt_id_del(keys);
   1f5e8:	f7f5 fbc8 	bl	14d7c <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1f5ec:	4620      	mov	r0, r4
   1f5ee:	225c      	movs	r2, #92	; 0x5c
}
   1f5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1f5f4:	2100      	movs	r1, #0
   1f5f6:	f7fd bbab 	b.w	1cd50 <memset>

0001f5fa <fixed_data_unref>:
}
   1f5fa:	4770      	bx	lr

0001f5fc <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f5fc:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1f5fe:	6849      	ldr	r1, [r1, #4]
   1f600:	6809      	ldr	r1, [r1, #0]
   1f602:	f7f9 ba81 	b.w	18b08 <net_buf_alloc_len>

0001f606 <net_buf_get>:
{
   1f606:	b570      	push	{r4, r5, r6, lr}
   1f608:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1f60a:	f7fa ff05 	bl	1a418 <z_impl_k_queue_get>
	if (!buf) {
   1f60e:	4605      	mov	r5, r0
   1f610:	b128      	cbz	r0, 1f61e <net_buf_get+0x18>
   1f612:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f614:	7963      	ldrb	r3, [r4, #5]
   1f616:	f013 0301 	ands.w	r3, r3, #1
   1f61a:	d102      	bne.n	1f622 <net_buf_get+0x1c>
	frag->frags = NULL;
   1f61c:	6023      	str	r3, [r4, #0]
}
   1f61e:	4628      	mov	r0, r5
   1f620:	bd70      	pop	{r4, r5, r6, pc}
   1f622:	2300      	movs	r3, #0
   1f624:	2200      	movs	r2, #0
   1f626:	4630      	mov	r0, r6
   1f628:	f7fa fef6 	bl	1a418 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1f62c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1f62e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1f630:	f023 0301 	bic.w	r3, r3, #1
   1f634:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f636:	4604      	mov	r4, r0
   1f638:	e7ec      	b.n	1f614 <net_buf_get+0xe>

0001f63a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1f63a:	6883      	ldr	r3, [r0, #8]
   1f63c:	440b      	add	r3, r1
   1f63e:	6003      	str	r3, [r0, #0]
}
   1f640:	4770      	bx	lr

0001f642 <net_buf_put>:
{
   1f642:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1f644:	460a      	mov	r2, r1
   1f646:	6814      	ldr	r4, [r2, #0]
   1f648:	b914      	cbnz	r4, 1f650 <net_buf_put+0xe>
}
   1f64a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1f64c:	f000 bb29 	b.w	1fca2 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1f650:	7953      	ldrb	r3, [r2, #5]
   1f652:	f043 0301 	orr.w	r3, r3, #1
   1f656:	7153      	strb	r3, [r2, #5]
   1f658:	4622      	mov	r2, r4
   1f65a:	e7f4      	b.n	1f646 <net_buf_put+0x4>

0001f65c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1f65c:	7902      	ldrb	r2, [r0, #4]
   1f65e:	3201      	adds	r2, #1
   1f660:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1f662:	4770      	bx	lr

0001f664 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1f664:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1f666:	4618      	mov	r0, r3
   1f668:	681b      	ldr	r3, [r3, #0]
   1f66a:	2b00      	cmp	r3, #0
   1f66c:	d1fb      	bne.n	1f666 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1f66e:	4770      	bx	lr

0001f670 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1f670:	6802      	ldr	r2, [r0, #0]
{
   1f672:	b510      	push	{r4, lr}
	if (parent->frags) {
   1f674:	b12a      	cbz	r2, 1f682 <net_buf_frag_insert+0x12>
   1f676:	460b      	mov	r3, r1
	while (buf->frags) {
   1f678:	461c      	mov	r4, r3
   1f67a:	681b      	ldr	r3, [r3, #0]
   1f67c:	2b00      	cmp	r3, #0
   1f67e:	d1fb      	bne.n	1f678 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1f680:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1f682:	6001      	str	r1, [r0, #0]
}
   1f684:	bd10      	pop	{r4, pc}

0001f686 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1f686:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1f688:	4604      	mov	r4, r0
   1f68a:	b920      	cbnz	r0, 1f696 <net_buf_frag_add+0x10>
	buf->ref++;
   1f68c:	790b      	ldrb	r3, [r1, #4]
   1f68e:	3301      	adds	r3, #1
   1f690:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1f692:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1f694:	bd10      	pop	{r4, pc}
   1f696:	4603      	mov	r3, r0
	while (buf->frags) {
   1f698:	4618      	mov	r0, r3
   1f69a:	681b      	ldr	r3, [r3, #0]
   1f69c:	2b00      	cmp	r3, #0
   1f69e:	d1fb      	bne.n	1f698 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1f6a0:	f7ff ffe6 	bl	1f670 <net_buf_frag_insert>
   1f6a4:	4620      	mov	r0, r4
   1f6a6:	e7f5      	b.n	1f694 <net_buf_frag_add+0xe>

0001f6a8 <net_buf_simple_add>:
	return buf->data + buf->len;
   1f6a8:	8883      	ldrh	r3, [r0, #4]
   1f6aa:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1f6ac:	4419      	add	r1, r3
   1f6ae:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1f6b0:	18d0      	adds	r0, r2, r3
   1f6b2:	4770      	bx	lr

0001f6b4 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1f6b4:	b430      	push	{r4, r5}
   1f6b6:	8884      	ldrh	r4, [r0, #4]
   1f6b8:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1f6ba:	18a3      	adds	r3, r4, r2
   1f6bc:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f6be:	1928      	adds	r0, r5, r4
}
   1f6c0:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f6c2:	f7fd bb1a 	b.w	1ccfa <memcpy>

0001f6c6 <net_buf_simple_add_u8>:
   1f6c6:	8883      	ldrh	r3, [r0, #4]
   1f6c8:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1f6ca:	b510      	push	{r4, lr}
	buf->len += len;
   1f6cc:	1c5c      	adds	r4, r3, #1
   1f6ce:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1f6d0:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1f6d2:	18d0      	adds	r0, r2, r3
   1f6d4:	bd10      	pop	{r4, pc}

0001f6d6 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1f6d6:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1f6d8:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1f6da:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1f6dc:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1f6de:	4411      	add	r1, r2
	buf->data -= len;
   1f6e0:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1f6e2:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1f6e4:	4770      	bx	lr

0001f6e6 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1f6e6:	8882      	ldrh	r2, [r0, #4]
   1f6e8:	1a52      	subs	r2, r2, r1
{
   1f6ea:	4603      	mov	r3, r0
	buf->len -= len;
   1f6ec:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1f6ee:	6800      	ldr	r0, [r0, #0]
   1f6f0:	4408      	add	r0, r1
   1f6f2:	6018      	str	r0, [r3, #0]
}
   1f6f4:	4770      	bx	lr

0001f6f6 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1f6f6:	4603      	mov	r3, r0
	void *data = buf->data;
   1f6f8:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1f6fa:	889a      	ldrh	r2, [r3, #4]
   1f6fc:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1f6fe:	4401      	add	r1, r0
	buf->len -= len;
   1f700:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1f702:	6019      	str	r1, [r3, #0]

	return data;
}
   1f704:	4770      	bx	lr

0001f706 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1f706:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1f708:	6803      	ldr	r3, [r0, #0]
   1f70a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f70c:	2102      	movs	r1, #2
   1f70e:	f7ff ffea 	bl	1f6e6 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1f712:	4620      	mov	r0, r4
   1f714:	bd10      	pop	{r4, pc}

0001f716 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1f716:	6802      	ldr	r2, [r0, #0]
   1f718:	6880      	ldr	r0, [r0, #8]
}
   1f71a:	1a10      	subs	r0, r2, r0
   1f71c:	4770      	bx	lr

0001f71e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1f71e:	8883      	ldrh	r3, [r0, #4]
   1f720:	88c2      	ldrh	r2, [r0, #6]
   1f722:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1f724:	6803      	ldr	r3, [r0, #0]
   1f726:	6880      	ldr	r0, [r0, #8]
   1f728:	1a18      	subs	r0, r3, r0
}
   1f72a:	1a10      	subs	r0, r2, r0
   1f72c:	4770      	bx	lr

0001f72e <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1f72e:	f000 001f 	and.w	r0, r0, #31
   1f732:	0080      	lsls	r0, r0, #2
   1f734:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1f738:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1f73c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1f740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f744:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1f748:	4770      	bx	lr

0001f74a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f74a:	6843      	ldr	r3, [r0, #4]
   1f74c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1f74e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1f752:	600b      	str	r3, [r1, #0]
}
   1f754:	2000      	movs	r0, #0
   1f756:	4770      	bx	lr

0001f758 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f758:	6843      	ldr	r3, [r0, #4]
   1f75a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1f75c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1f760:	4042      	eors	r2, r0
   1f762:	400a      	ands	r2, r1
   1f764:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1f766:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1f76a:	2000      	movs	r0, #0
   1f76c:	4770      	bx	lr

0001f76e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f76e:	6843      	ldr	r3, [r0, #4]
   1f770:	685b      	ldr	r3, [r3, #4]
}
   1f772:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1f774:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1f778:	4770      	bx	lr

0001f77a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f77a:	6843      	ldr	r3, [r0, #4]
   1f77c:	685b      	ldr	r3, [r3, #4]
}
   1f77e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1f780:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1f784:	4770      	bx	lr

0001f786 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f786:	6843      	ldr	r3, [r0, #4]
   1f788:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1f78a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1f78e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1f790:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1f794:	2000      	movs	r0, #0
   1f796:	4770      	bx	lr

0001f798 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f798:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   1f79a:	6858      	ldr	r0, [r3, #4]
{
   1f79c:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1f79e:	b158      	cbz	r0, 1f7b8 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f7a0:	2400      	movs	r4, #0
   1f7a2:	4281      	cmp	r1, r0
   1f7a4:	d113      	bne.n	1f7ce <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1f7a6:	6808      	ldr	r0, [r1, #0]
   1f7a8:	b95c      	cbnz	r4, 1f7c2 <gpio_nrfx_manage_callback+0x2a>
   1f7aa:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1f7ac:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f7ae:	42a1      	cmp	r1, r4
   1f7b0:	d100      	bne.n	1f7b4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1f7b2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f7b4:	2000      	movs	r0, #0
   1f7b6:	6008      	str	r0, [r1, #0]
	if (set) {
   1f7b8:	b972      	cbnz	r2, 1f7d8 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1f7ba:	2000      	movs	r0, #0
}
   1f7bc:	bd30      	pop	{r4, r5, pc}
   1f7be:	4628      	mov	r0, r5
   1f7c0:	e7ef      	b.n	1f7a2 <gpio_nrfx_manage_callback+0xa>
   1f7c2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f7c4:	6898      	ldr	r0, [r3, #8]
   1f7c6:	4281      	cmp	r1, r0
	list->tail = node;
   1f7c8:	bf08      	it	eq
   1f7ca:	609c      	streq	r4, [r3, #8]
}
   1f7cc:	e7f2      	b.n	1f7b4 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f7ce:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f7d0:	4604      	mov	r4, r0
   1f7d2:	2d00      	cmp	r5, #0
   1f7d4:	d1f3      	bne.n	1f7be <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1f7d6:	b13a      	cbz	r2, 1f7e8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1f7d8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f7da:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f7dc:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1f7de:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f7e0:	2800      	cmp	r0, #0
   1f7e2:	d1ea      	bne.n	1f7ba <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1f7e4:	6099      	str	r1, [r3, #8]
}
   1f7e6:	e7e9      	b.n	1f7bc <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1f7e8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f7ec:	e7e6      	b.n	1f7bc <gpio_nrfx_manage_callback+0x24>

0001f7ee <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1f7ee:	6843      	ldr	r3, [r0, #4]
   1f7f0:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1f7f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1f7f6:	05d2      	lsls	r2, r2, #23
   1f7f8:	d518      	bpl.n	1f82c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f7fa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1f7fe:	b1aa      	cbz	r2, 1f82c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1f800:	f04f 0140 	mov.w	r1, #64	; 0x40
   1f804:	f3ef 8211 	mrs	r2, BASEPRI
   1f808:	f381 8811 	msr	BASEPRI, r1
   1f80c:	f3bf 8f6f 	isb	sy
   1f810:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f814:	b131      	cbz	r1, 1f824 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f816:	2100      	movs	r1, #0
   1f818:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1f81c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f820:	2101      	movs	r1, #1
   1f822:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1f824:	f382 8811 	msr	BASEPRI, r2
   1f828:	f3bf 8f6f 	isb	sy
}
   1f82c:	4770      	bx	lr

0001f82e <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1f82e:	68c2      	ldr	r2, [r0, #12]
{
   1f830:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1f832:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1f836:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f83a:	2000      	movs	r0, #0
   1f83c:	4770      	bx	lr

0001f83e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1f83e:	6843      	ldr	r3, [r0, #4]
   1f840:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f842:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f846:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1f84a:	4770      	bx	lr

0001f84c <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1f84c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1f84e:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f850:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f854:	b938      	cbnz	r0, 1f866 <is_tx_ready+0x1a>
   1f856:	7992      	ldrb	r2, [r2, #6]
   1f858:	b932      	cbnz	r2, 1f868 <is_tx_ready+0x1c>
   1f85a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1f85e:	3800      	subs	r0, #0
   1f860:	bf18      	it	ne
   1f862:	2001      	movne	r0, #1
   1f864:	4770      	bx	lr
   1f866:	2001      	movs	r0, #1
}
   1f868:	4770      	bx	lr

0001f86a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1f86a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f86c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f86e:	681b      	ldr	r3, [r3, #0]
   1f870:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f874:	b148      	cbz	r0, 1f88a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1f876:	7b52      	ldrb	r2, [r2, #13]
   1f878:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f87a:	2000      	movs	r0, #0
   1f87c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f880:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f884:	2201      	movs	r2, #1
   1f886:	601a      	str	r2, [r3, #0]
	return 0;
   1f888:	4770      	bx	lr
		return -1;
   1f88a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1f88e:	4770      	bx	lr

0001f890 <rng_driver_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1f890:	07db      	lsls	r3, r3, #31
{
   1f892:	b570      	push	{r4, r5, r6, lr}
   1f894:	460e      	mov	r6, r1
   1f896:	4615      	mov	r5, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1f898:	d40f      	bmi.n	1f8ba <rng_driver_get_entropy_isr+0x2a>
		errcode = MULTITHREADING_LOCK_ACQUIRE_NO_WAIT();
   1f89a:	2000      	movs	r0, #0
   1f89c:	2100      	movs	r1, #0
   1f89e:	f7f9 fd6b 	bl	19378 <multithreading_lock_acquire>
		if (!errcode) {
   1f8a2:	4604      	mov	r4, r0
   1f8a4:	b938      	cbnz	r0, 1f8b6 <rng_driver_get_entropy_isr+0x26>
			errcode = sdc_soc_rand_vector_poll(buf, len);
   1f8a6:	4629      	mov	r1, r5
   1f8a8:	4630      	mov	r0, r6
   1f8aa:	f7ef f974 	bl	eb96 <sdc_soc_rand_vector_poll>
   1f8ae:	4604      	mov	r4, r0
			MULTITHREADING_LOCK_RELEASE();
   1f8b0:	f7f9 fd6a 	bl	19388 <multithreading_lock_release>
	if (!errcode) {
   1f8b4:	b184      	cbz	r4, 1f8d8 <rng_driver_get_entropy_isr+0x48>
}
   1f8b6:	4620      	mov	r0, r4
   1f8b8:	bd70      	pop	{r4, r5, r6, pc}
		errcode = MULTITHREADING_LOCK_ACQUIRE_FOREVER_WAIT();
   1f8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f8be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f8c2:	f7f9 fd59 	bl	19378 <multithreading_lock_acquire>
		if (!errcode) {
   1f8c6:	4604      	mov	r4, r0
   1f8c8:	2800      	cmp	r0, #0
   1f8ca:	d1f4      	bne.n	1f8b6 <rng_driver_get_entropy_isr+0x26>
			sdc_soc_rand_vector_get(buf, len);
   1f8cc:	4629      	mov	r1, r5
   1f8ce:	4630      	mov	r0, r6
   1f8d0:	f7ef f948 	bl	eb64 <sdc_soc_rand_vector_get>
			MULTITHREADING_LOCK_RELEASE();
   1f8d4:	f7f9 fd58 	bl	19388 <multithreading_lock_release>
		return len;
   1f8d8:	462c      	mov	r4, r5
   1f8da:	e7ec      	b.n	1f8b6 <rng_driver_get_entropy_isr+0x26>

0001f8dc <rng_driver_get_entropy>:
{
   1f8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);
   1f8e0:	68c7      	ldr	r7, [r0, #12]
{
   1f8e2:	460e      	mov	r6, r1
	uint32_t bytes_left = len;
   1f8e4:	4614      	mov	r4, r2
	while (bytes_left > 0) {
   1f8e6:	b1c4      	cbz	r4, 1f91a <rng_driver_get_entropy+0x3e>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   1f8e8:	fa1f f884 	uxth.w	r8, r4
			int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f8f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f8f4:	f7f9 fd40 	bl	19378 <multithreading_lock_acquire>
			if (errcode) {
   1f8f8:	b980      	cbnz	r0, 1f91c <rng_driver_get_entropy+0x40>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   1f8fa:	4641      	mov	r1, r8
   1f8fc:	4630      	mov	r0, r6
   1f8fe:	f7ef f94a 	bl	eb96 <sdc_soc_rand_vector_poll>
   1f902:	4605      	mov	r5, r0
			MULTITHREADING_LOCK_RELEASE();
   1f904:	f7f9 fd40 	bl	19388 <multithreading_lock_release>
			if (!bytes_read) {
   1f908:	b955      	cbnz	r5, 1f920 <rng_driver_get_entropy+0x44>
	return z_impl_k_sem_take(sem, timeout);
   1f90a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f90e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f912:	4638      	mov	r0, r7
   1f914:	f7fb f926 	bl	1ab64 <z_impl_k_sem_take>
		while (bytes_read == 0) {
   1f918:	e7e8      	b.n	1f8ec <rng_driver_get_entropy+0x10>
	return 0;
   1f91a:	4620      	mov	r0, r4
}
   1f91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_dst += bytes_read;
   1f920:	442e      	add	r6, r5
		bytes_left -= bytes_read;
   1f922:	1b64      	subs	r4, r4, r5
   1f924:	e7df      	b.n	1f8e6 <rng_driver_get_entropy+0xa>

0001f926 <rng_driver_init>:

static int rng_driver_init(const struct device *dev)
{
   1f926:	b508      	push	{r3, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);

	k_sem_init(&rng_dev->sem_sync, 0, 1);
   1f928:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f92a:	2201      	movs	r2, #1
   1f92c:	2100      	movs	r1, #0
   1f92e:	f000 facf 	bl	1fed0 <z_impl_k_sem_init>

	IRQ_CONNECT(RNG_IRQn,
   1f932:	2200      	movs	r2, #0
   1f934:	2105      	movs	r1, #5
   1f936:	200d      	movs	r0, #13
   1f938:	f7f3 fee0 	bl	136fc <z_arm_irq_priority_set>
		    rng_driver_isr,
		    NULL,
		    0);

	return 0;
}
   1f93c:	2000      	movs	r0, #0
   1f93e:	bd08      	pop	{r3, pc}

0001f940 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1f940:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   1f942:	2000      	movs	r0, #0
   1f944:	f7f4 fa22 	bl	13d8c <sys_arch_reboot>

0001f948 <sdc_assertion_handler>:
	k_oops();
   1f948:	4040      	eors	r0, r0
   1f94a:	f380 8811 	msr	BASEPRI, r0
   1f94e:	f04f 0003 	mov.w	r0, #3
   1f952:	df02      	svc	2
}
   1f954:	4770      	bx	lr

0001f956 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   1f956:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f958:	b08d      	sub	sp, #52	; 0x34
   1f95a:	4615      	mov	r5, r2
   1f95c:	466a      	mov	r2, sp
   1f95e:	f100 0310 	add.w	r3, r0, #16
   1f962:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   1f964:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1f968:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   1f96c:	4298      	cmp	r0, r3
   1f96e:	d1f9      	bne.n	1f964 <bt_encrypt_le+0xe>
   1f970:	aa04      	add	r2, sp, #16
   1f972:	f101 0310 	add.w	r3, r1, #16
   1f976:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   1f978:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1f97c:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1f980:	428b      	cmp	r3, r1
   1f982:	d1f9      	bne.n	1f978 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f98c:	f7f9 fcf4 	bl	19378 <multithreading_lock_acquire>

	if (!errcode) {
   1f990:	4604      	mov	r4, r0
   1f992:	b990      	cbnz	r0, 1f9ba <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   1f994:	aa08      	add	r2, sp, #32
   1f996:	4639      	mov	r1, r7
   1f998:	4630      	mov	r0, r6
   1f99a:	f7ef f8c6 	bl	eb2a <sdc_soc_ecb_block_encrypt>
   1f99e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f9a0:	f7f9 fcf2 	bl	19388 <multithreading_lock_release>
	}

	if (!errcode) {
   1f9a4:	b94c      	cbnz	r4, 1f9ba <bt_encrypt_le+0x64>
   1f9a6:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   1f9a8:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   1f9ac:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   1f9ae:	f812 1901 	ldrb.w	r1, [r2], #-1
   1f9b2:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1f9b6:	429d      	cmp	r5, r3
   1f9b8:	d1f9      	bne.n	1f9ae <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   1f9ba:	4620      	mov	r0, r4
   1f9bc:	b00d      	add	sp, #52	; 0x34
   1f9be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f9c0 <m_assert_handler>:
	k_oops();
   1f9c0:	4040      	eors	r0, r0
   1f9c2:	f380 8811 	msr	BASEPRI, r0
   1f9c6:	f04f 0003 	mov.w	r0, #3
   1f9ca:	df02      	svc	2
}
   1f9cc:	4770      	bx	lr

0001f9ce <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1f9ce:	4668      	mov	r0, sp
   1f9d0:	f020 0107 	bic.w	r1, r0, #7
   1f9d4:	468d      	mov	sp, r1
   1f9d6:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1f9d8:	f7e2 feaa 	bl	2730 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1f9dc:	f7f3 fea8 	bl	13730 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1f9e0:	f7f3 ffc4 	bl	1396c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1f9e4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f9e8:	4685      	mov	sp, r0
   1f9ea:	4770      	bx	lr

0001f9ec <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1f9ec:	4668      	mov	r0, sp
   1f9ee:	f020 0107 	bic.w	r1, r0, #7
   1f9f2:	468d      	mov	sp, r1
   1f9f4:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1f9f6:	f7e2 fe4d 	bl	2694 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1f9fa:	f7f3 fe99 	bl	13730 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1f9fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fa02:	4685      	mov	sp, r0
   1fa04:	4770      	bx	lr

0001fa06 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1fa06:	4668      	mov	r0, sp
   1fa08:	f020 0107 	bic.w	r1, r0, #7
   1fa0c:	468d      	mov	sp, r1
   1fa0e:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1fa10:	f7ee feb9 	bl	e786 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1fa14:	f7f3 fe8c 	bl	13730 <_arch_isr_direct_pm>
   1fa18:	f7f3 ffa8 	bl	1396c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1fa1c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fa20:	4685      	mov	sp, r0
   1fa22:	4770      	bx	lr

0001fa24 <nrfx_clock_stop>:
	switch (domain) {
   1fa24:	2801      	cmp	r0, #1
   1fa26:	d101      	bne.n	1fa2c <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1fa28:	f7e3 bc68 	b.w	32fc <mpsl_clock_hfclk_release>
}
   1fa2c:	4770      	bx	lr

0001fa2e <nrfx_clock_enable>:
}
   1fa2e:	4770      	bx	lr

0001fa30 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1fa30:	f7e3 bab2 	b.w	2f98 <MPSL_IRQ_CLOCK_Handler>

0001fa34 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1fa34:	4700      	bx	r0

0001fa36 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1fa36:	f000 ba61 	b.w	1fefc <z_impl_k_busy_wait>

0001fa3a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1fa3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa3c:	4605      	mov	r5, r0
   1fa3e:	460e      	mov	r6, r1
	__asm__ volatile(
   1fa40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fa44:	f3ef 8711 	mrs	r7, BASEPRI
   1fa48:	f383 8811 	msr	BASEPRI, r3
   1fa4c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1fa50:	f7fb f85c 	bl	1ab0c <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1fa54:	4631      	mov	r1, r6
   1fa56:	4604      	mov	r4, r0
   1fa58:	4628      	mov	r0, r5
   1fa5a:	f7ff ff71 	bl	1f940 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1fa5e:	f387 8811 	msr	BASEPRI, r7
   1fa62:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1fa66:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1fa68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1fa6c:	f7f4 b878 	b.w	13b60 <z_impl_k_thread_abort>

0001fa70 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1fa70:	f7fc b836 	b.w	1bae0 <z_clock_idle_exit>

0001fa74 <k_heap_init>:
{
   1fa74:	b410      	push	{r4}
   1fa76:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1fa7a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1fa7e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1fa80:	f7fb becb 	b.w	1b81a <sys_heap_init>

0001fa84 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   1fa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa88:	4604      	mov	r4, r0
   1fa8a:	b085      	sub	sp, #20
   1fa8c:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1fa8e:	4610      	mov	r0, r2
   1fa90:	4619      	mov	r1, r3
   1fa92:	f000 fafe 	bl	20092 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fa96:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1fa9a:	4605      	mov	r5, r0
   1fa9c:	460f      	mov	r7, r1
	__asm__ volatile(
   1fa9e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1faa2:	f3ef 8311 	mrs	r3, BASEPRI
   1faa6:	f382 8811 	msr	BASEPRI, r2
   1faaa:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1faae:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   1fab2:	4631      	mov	r1, r6
   1fab4:	4620      	mov	r0, r4
   1fab6:	9303      	str	r3, [sp, #12]
   1fab8:	f7fb fe7b 	bl	1b7b2 <sys_heap_alloc>
   1fabc:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   1fabe:	f7fb fb0d 	bl	1b0dc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1fac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1fac6:	b13a      	cbz	r2, 1fad8 <k_heap_alloc+0x54>
	__asm__ volatile(
   1fac8:	f383 8811 	msr	BASEPRI, r3
   1facc:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1fad0:	4610      	mov	r0, r2
   1fad2:	b005      	add	sp, #20
   1fad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1fad8:	ebb5 0800 	subs.w	r8, r5, r0
   1fadc:	eb67 0901 	sbc.w	r9, r7, r1
   1fae0:	f1b8 0f01 	cmp.w	r8, #1
   1fae4:	f179 0100 	sbcs.w	r1, r9, #0
   1fae8:	dbee      	blt.n	1fac8 <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1faea:	e9cd 8900 	strd	r8, r9, [sp]
   1faee:	465a      	mov	r2, fp
   1faf0:	4619      	mov	r1, r3
   1faf2:	4650      	mov	r0, sl
   1faf4:	f7fa ff4e 	bl	1a994 <z_pend_curr>
	__asm__ volatile(
   1faf8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1fafc:	f3ef 8311 	mrs	r3, BASEPRI
   1fb00:	f382 8811 	msr	BASEPRI, r2
   1fb04:	f3bf 8f6f 	isb	sy
   1fb08:	e7d3      	b.n	1fab2 <k_heap_alloc+0x2e>

0001fb0a <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1fb0a:	b538      	push	{r3, r4, r5, lr}
   1fb0c:	4604      	mov	r4, r0
   1fb0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb12:	f3ef 8511 	mrs	r5, BASEPRI
   1fb16:	f383 8811 	msr	BASEPRI, r3
   1fb1a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1fb1e:	f7fb fdf5 	bl	1b70c <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1fb22:	f104 000c 	add.w	r0, r4, #12
   1fb26:	f000 f9c3 	bl	1feb0 <z_unpend_all>
   1fb2a:	b130      	cbz	r0, 1fb3a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1fb2c:	4629      	mov	r1, r5
   1fb2e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1fb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1fb36:	f7fa bce5 	b.w	1a504 <z_reschedule>
	__asm__ volatile(
   1fb3a:	f385 8811 	msr	BASEPRI, r5
   1fb3e:	f3bf 8f6f 	isb	sy
}
   1fb42:	bd38      	pop	{r3, r4, r5, pc}

0001fb44 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   1fb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb46:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   1fb4a:	6800      	ldr	r0, [r0, #0]
   1fb4c:	6048      	str	r0, [r1, #4]
{
   1fb4e:	4614      	mov	r4, r2
   1fb50:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   1fb52:	4632      	mov	r2, r6
   1fb54:	463b      	mov	r3, r7
   1fb56:	4621      	mov	r1, r4
   1fb58:	f7ff ff94 	bl	1fa84 <k_heap_alloc>
   1fb5c:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   1fb5e:	b144      	cbz	r4, 1fb72 <k_mem_pool_alloc+0x2e>
   1fb60:	b938      	cbnz	r0, 1fb72 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   1fb62:	ea56 0307 	orrs.w	r3, r6, r7
   1fb66:	bf0c      	ite	eq
   1fb68:	f06f 000b 	mvneq.w	r0, #11
   1fb6c:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   1fb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   1fb72:	2000      	movs	r0, #0
   1fb74:	e7fc      	b.n	1fb70 <k_mem_pool_alloc+0x2c>

0001fb76 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   1fb76:	e9d0 1000 	ldrd	r1, r0, [r0]
   1fb7a:	f7ff bfc6 	b.w	1fb0a <k_heap_free>

0001fb7e <queue_insert>:
{
   1fb7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fb82:	4699      	mov	r9, r3
   1fb84:	4604      	mov	r4, r0
   1fb86:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1fb8a:	460d      	mov	r5, r1
   1fb8c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fb8e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1fb92:	f04f 0240 	mov.w	r2, #64	; 0x40
   1fb96:	f3ef 8711 	mrs	r7, BASEPRI
   1fb9a:	f382 8811 	msr	BASEPRI, r2
   1fb9e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1fba2:	b103      	cbz	r3, 1fba6 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1fba4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1fba6:	4630      	mov	r0, r6
   1fba8:	f000 f95d 	bl	1fe66 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1fbac:	b160      	cbz	r0, 1fbc8 <queue_insert+0x4a>
   1fbae:	2400      	movs	r4, #0
   1fbb0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   1fbb4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1fbb8:	f000 f8fa 	bl	1fdb0 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1fbbc:	4630      	mov	r0, r6
   1fbbe:	4639      	mov	r1, r7
   1fbc0:	f7fa fca0 	bl	1a504 <z_reschedule>
	return 0;
   1fbc4:	2000      	movs	r0, #0
   1fbc6:	e00c      	b.n	1fbe2 <queue_insert+0x64>
	if (alloc) {
   1fbc8:	f1b9 0f00 	cmp.w	r9, #0
   1fbcc:	d01b      	beq.n	1fc06 <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   1fbce:	2008      	movs	r0, #8
   1fbd0:	f7fb fb22 	bl	1b218 <z_thread_malloc>
		if (anode == NULL) {
   1fbd4:	b938      	cbnz	r0, 1fbe6 <queue_insert+0x68>
	__asm__ volatile(
   1fbd6:	f387 8811 	msr	BASEPRI, r7
   1fbda:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1fbde:	f06f 000b 	mvn.w	r0, #11
}
   1fbe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1fbe6:	2301      	movs	r3, #1
		anode->data = data;
   1fbe8:	f8c0 8004 	str.w	r8, [r0, #4]
   1fbec:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fbee:	6803      	ldr	r3, [r0, #0]
   1fbf0:	f003 0203 	and.w	r2, r3, #3
   1fbf4:	b95d      	cbnz	r5, 1fc0e <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fbf6:	6823      	ldr	r3, [r4, #0]
   1fbf8:	4313      	orrs	r3, r2
   1fbfa:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fbfc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1fbfe:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fc00:	b973      	cbnz	r3, 1fc20 <queue_insert+0xa2>
	list->tail = node;
   1fc02:	6060      	str	r0, [r4, #4]
}
   1fc04:	e00c      	b.n	1fc20 <queue_insert+0xa2>
	node->next_and_flags = flags;
   1fc06:	f8c8 9000 	str.w	r9, [r8]
}
   1fc0a:	4640      	mov	r0, r8
   1fc0c:	e7ef      	b.n	1fbee <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fc0e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fc10:	f033 0303 	bics.w	r3, r3, #3
   1fc14:	d110      	bne.n	1fc38 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fc16:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1fc18:	6862      	ldr	r2, [r4, #4]
   1fc1a:	b93a      	cbnz	r2, 1fc2c <queue_insert+0xae>
	list->head = node;
   1fc1c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1fc20:	2104      	movs	r1, #4
   1fc22:	f104 0010 	add.w	r0, r4, #16
   1fc26:	f000 fba1 	bl	2036c <z_handle_obj_poll_events>
   1fc2a:	e7c7      	b.n	1fbbc <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fc2c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fc2e:	f003 0303 	and.w	r3, r3, #3
   1fc32:	4303      	orrs	r3, r0
   1fc34:	6013      	str	r3, [r2, #0]
   1fc36:	e7e4      	b.n	1fc02 <queue_insert+0x84>
   1fc38:	4313      	orrs	r3, r2
   1fc3a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fc3c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fc3e:	f003 0303 	and.w	r3, r3, #3
   1fc42:	4303      	orrs	r3, r0
   1fc44:	602b      	str	r3, [r5, #0]
}
   1fc46:	e7eb      	b.n	1fc20 <queue_insert+0xa2>

0001fc48 <z_queue_node_peek>:
{
   1fc48:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1fc4a:	4604      	mov	r4, r0
   1fc4c:	b130      	cbz	r0, 1fc5c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fc4e:	6802      	ldr	r2, [r0, #0]
   1fc50:	0793      	lsls	r3, r2, #30
   1fc52:	d003      	beq.n	1fc5c <z_queue_node_peek+0x14>
		ret = anode->data;
   1fc54:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1fc56:	b109      	cbz	r1, 1fc5c <z_queue_node_peek+0x14>
			k_free(anode);
   1fc58:	f000 fbae 	bl	203b8 <k_free>
}
   1fc5c:	4620      	mov	r0, r4
   1fc5e:	bd10      	pop	{r4, pc}

0001fc60 <z_impl_k_queue_init>:
	list->head = NULL;
   1fc60:	2300      	movs	r3, #0
	list->tail = NULL;
   1fc62:	e9c0 3300 	strd	r3, r3, [r0]
   1fc66:	f100 0308 	add.w	r3, r0, #8
   1fc6a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1fc6e:	f100 0310 	add.w	r3, r0, #16
   1fc72:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1fc76:	4770      	bx	lr

0001fc78 <k_queue_append>:
{
   1fc78:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1fc7a:	2301      	movs	r3, #1
   1fc7c:	9300      	str	r3, [sp, #0]
   1fc7e:	2300      	movs	r3, #0
{
   1fc80:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1fc82:	4619      	mov	r1, r3
   1fc84:	f7ff ff7b 	bl	1fb7e <queue_insert>
}
   1fc88:	b003      	add	sp, #12
   1fc8a:	f85d fb04 	ldr.w	pc, [sp], #4

0001fc8e <k_queue_prepend>:
{
   1fc8e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1fc90:	2300      	movs	r3, #0
{
   1fc92:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1fc94:	9300      	str	r3, [sp, #0]
   1fc96:	4619      	mov	r1, r3
   1fc98:	f7ff ff71 	bl	1fb7e <queue_insert>
}
   1fc9c:	b003      	add	sp, #12
   1fc9e:	f85d fb04 	ldr.w	pc, [sp], #4

0001fca2 <k_queue_append_list>:
{
   1fca2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fca6:	4605      	mov	r5, r0
   1fca8:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1fcaa:	460c      	mov	r4, r1
   1fcac:	b391      	cbz	r1, 1fd14 <k_queue_append_list+0x72>
   1fcae:	b38a      	cbz	r2, 1fd14 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fcb0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1fcb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fcb8:	f3ef 8811 	mrs	r8, BASEPRI
   1fcbc:	f383 8811 	msr	BASEPRI, r3
   1fcc0:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1fcc4:	4638      	mov	r0, r7
   1fcc6:	f000 f8ce 	bl	1fe66 <z_unpend_first_thread>
   1fcca:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1fcce:	b920      	cbnz	r0, 1fcda <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1fcd0:	686b      	ldr	r3, [r5, #4]
   1fcd2:	b9cb      	cbnz	r3, 1fd08 <k_queue_append_list+0x66>
	list->head = node;
   1fcd4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1fcd6:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1fcd8:	e00a      	b.n	1fcf0 <k_queue_append_list+0x4e>
   1fcda:	6144      	str	r4, [r0, #20]
   1fcdc:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   1fce0:	f000 f866 	bl	1fdb0 <z_ready_thread>
		head = *(void **)head;
   1fce4:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1fce6:	4638      	mov	r0, r7
   1fce8:	f000 f8bd 	bl	1fe66 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1fcec:	2c00      	cmp	r4, #0
   1fcee:	d1ee      	bne.n	1fcce <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1fcf0:	2104      	movs	r1, #4
   1fcf2:	f105 0010 	add.w	r0, r5, #16
   1fcf6:	f000 fb39 	bl	2036c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1fcfa:	4638      	mov	r0, r7
   1fcfc:	4641      	mov	r1, r8
   1fcfe:	f7fa fc01 	bl	1a504 <z_reschedule>
	return 0;
   1fd02:	2000      	movs	r0, #0
}
   1fd04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fd08:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd0a:	f001 0103 	and.w	r1, r1, #3
   1fd0e:	430c      	orrs	r4, r1
   1fd10:	601c      	str	r4, [r3, #0]
}
   1fd12:	e7e0      	b.n	1fcd6 <k_queue_append_list+0x34>
		return -EINVAL;
   1fd14:	f06f 0015 	mvn.w	r0, #21
   1fd18:	e7f4      	b.n	1fd04 <k_queue_append_list+0x62>

0001fd1a <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1fd1a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1fd1e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1fd22:	4298      	cmp	r0, r3
   1fd24:	bfac      	ite	ge
   1fd26:	2000      	movge	r0, #0
   1fd28:	2001      	movlt	r0, #1
   1fd2a:	4770      	bx	lr

0001fd2c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1fd2c:	4603      	mov	r3, r0
   1fd2e:	b920      	cbnz	r0, 1fd3a <z_reschedule_irqlock+0xe>
   1fd30:	f3ef 8205 	mrs	r2, IPSR
   1fd34:	b90a      	cbnz	r2, 1fd3a <z_reschedule_irqlock+0xe>
   1fd36:	f7f3 bcb5 	b.w	136a4 <arch_swap>
	__asm__ volatile(
   1fd3a:	f383 8811 	msr	BASEPRI, r3
   1fd3e:	f3bf 8f6f 	isb	sy
}
   1fd42:	4770      	bx	lr

0001fd44 <z_reschedule_unlocked>:
	__asm__ volatile(
   1fd44:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd48:	f3ef 8011 	mrs	r0, BASEPRI
   1fd4c:	f383 8811 	msr	BASEPRI, r3
   1fd50:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1fd54:	f7ff bfea 	b.w	1fd2c <z_reschedule_irqlock>

0001fd58 <unpend_thread_no_timeout>:
{
   1fd58:	4601      	mov	r1, r0
   1fd5a:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1fd5c:	6880      	ldr	r0, [r0, #8]
   1fd5e:	f7fa fbf7 	bl	1a550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fd62:	7b4b      	ldrb	r3, [r1, #13]
   1fd64:	f023 0302 	bic.w	r3, r3, #2
   1fd68:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   1fd6a:	2300      	movs	r3, #0
   1fd6c:	608b      	str	r3, [r1, #8]
}
   1fd6e:	bd08      	pop	{r3, pc}

0001fd70 <z_unpend_thread>:
{
   1fd70:	b538      	push	{r3, r4, r5, lr}
   1fd72:	4604      	mov	r4, r0
   1fd74:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd78:	f3ef 8511 	mrs	r5, BASEPRI
   1fd7c:	f383 8811 	msr	BASEPRI, r3
   1fd80:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1fd84:	f7ff ffe8 	bl	1fd58 <unpend_thread_no_timeout>
	__asm__ volatile(
   1fd88:	f385 8811 	msr	BASEPRI, r5
   1fd8c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1fd90:	f104 0018 	add.w	r0, r4, #24
}
   1fd94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1fd98:	f000 b937 	b.w	2000a <z_abort_timeout>

0001fd9c <z_priq_dumb_best>:
{
   1fd9c:	4603      	mov	r3, r0
	return list->head == list;
   1fd9e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fda0:	4283      	cmp	r3, r0
   1fda2:	d003      	beq.n	1fdac <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1fda4:	2800      	cmp	r0, #0
   1fda6:	bf38      	it	cc
   1fda8:	2000      	movcc	r0, #0
   1fdaa:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1fdac:	2000      	movs	r0, #0
}
   1fdae:	4770      	bx	lr

0001fdb0 <z_ready_thread>:
{
   1fdb0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fdb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fdb6:	f3ef 8411 	mrs	r4, BASEPRI
   1fdba:	f383 8811 	msr	BASEPRI, r3
   1fdbe:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1fdc2:	f7fa fc1f 	bl	1a604 <ready_thread>
	__asm__ volatile(
   1fdc6:	f384 8811 	msr	BASEPRI, r4
   1fdca:	f3bf 8f6f 	isb	sy
}
   1fdce:	bd10      	pop	{r4, pc}

0001fdd0 <z_thread_timeout>:
{
   1fdd0:	b570      	push	{r4, r5, r6, lr}
   1fdd2:	4604      	mov	r4, r0
	__asm__ volatile(
   1fdd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fdd8:	f3ef 8611 	mrs	r6, BASEPRI
   1fddc:	f383 8811 	msr	BASEPRI, r3
   1fde0:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1fde4:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1fde8:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   1fdec:	b113      	cbz	r3, 1fdf4 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   1fdee:	4628      	mov	r0, r5
   1fdf0:	f7ff ffb2 	bl	1fd58 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1fdf4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1fdf8:	f023 0314 	bic.w	r3, r3, #20
   1fdfc:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   1fe00:	4628      	mov	r0, r5
   1fe02:	f7fa fbff 	bl	1a604 <ready_thread>
	__asm__ volatile(
   1fe06:	f386 8811 	msr	BASEPRI, r6
   1fe0a:	f3bf 8f6f 	isb	sy
}
   1fe0e:	bd70      	pop	{r4, r5, r6, pc}

0001fe10 <add_to_waitq_locked>:
{
   1fe10:	b538      	push	{r3, r4, r5, lr}
   1fe12:	4604      	mov	r4, r0
   1fe14:	460d      	mov	r5, r1
	unready_thread(thread);
   1fe16:	f7fa fd7d 	bl	1a914 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1fe1a:	7b63      	ldrb	r3, [r4, #13]
   1fe1c:	f043 0302 	orr.w	r3, r3, #2
   1fe20:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1fe22:	b1c5      	cbz	r5, 1fe56 <add_to_waitq_locked+0x46>
	return list->head == list;
   1fe24:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1fe26:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fe28:	429d      	cmp	r5, r3
   1fe2a:	bf08      	it	eq
   1fe2c:	2300      	moveq	r3, #0
   1fe2e:	2b00      	cmp	r3, #0
   1fe30:	bf38      	it	cc
   1fe32:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fe34:	b183      	cbz	r3, 1fe58 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fe36:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1fe3a:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1fe3e:	4291      	cmp	r1, r2
   1fe40:	db04      	blt.n	1fe4c <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   1fe42:	686a      	ldr	r2, [r5, #4]
   1fe44:	429a      	cmp	r2, r3
   1fe46:	d007      	beq.n	1fe58 <add_to_waitq_locked+0x48>
   1fe48:	681b      	ldr	r3, [r3, #0]
   1fe4a:	e7f3      	b.n	1fe34 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   1fe4c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fe4e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1fe52:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1fe54:	605c      	str	r4, [r3, #4]
}
   1fe56:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   1fe58:	686b      	ldr	r3, [r5, #4]
   1fe5a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1fe5c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1fe5e:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1fe60:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1fe62:	606c      	str	r4, [r5, #4]
   1fe64:	e7f7      	b.n	1fe56 <add_to_waitq_locked+0x46>

0001fe66 <z_unpend_first_thread>:
{
   1fe66:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1fe68:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe6c:	f3ef 8211 	mrs	r2, BASEPRI
   1fe70:	f383 8811 	msr	BASEPRI, r3
   1fe74:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1fe78:	f7ff ff90 	bl	1fd9c <z_priq_dumb_best>
   1fe7c:	4604      	mov	r4, r0
	__asm__ volatile(
   1fe7e:	f382 8811 	msr	BASEPRI, r2
   1fe82:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1fe86:	b188      	cbz	r0, 1feac <z_unpend_first_thread+0x46>
	__asm__ volatile(
   1fe88:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe8c:	f3ef 8511 	mrs	r5, BASEPRI
   1fe90:	f383 8811 	msr	BASEPRI, r3
   1fe94:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1fe98:	f7ff ff5e 	bl	1fd58 <unpend_thread_no_timeout>
	__asm__ volatile(
   1fe9c:	f385 8811 	msr	BASEPRI, r5
   1fea0:	f3bf 8f6f 	isb	sy
   1fea4:	f104 0018 	add.w	r0, r4, #24
   1fea8:	f000 f8af 	bl	2000a <z_abort_timeout>
}
   1feac:	4620      	mov	r0, r4
   1feae:	bd38      	pop	{r3, r4, r5, pc}

0001feb0 <z_unpend_all>:
{
   1feb0:	b538      	push	{r3, r4, r5, lr}
   1feb2:	4605      	mov	r5, r0
	int need_sched = 0;
   1feb4:	2000      	movs	r0, #0
	return list->head == list;
   1feb6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1feb8:	42a5      	cmp	r5, r4
   1feba:	d000      	beq.n	1febe <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1febc:	b904      	cbnz	r4, 1fec0 <z_unpend_all+0x10>
}
   1febe:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1fec0:	4620      	mov	r0, r4
   1fec2:	f7ff ff55 	bl	1fd70 <z_unpend_thread>
		z_ready_thread(thread);
   1fec6:	4620      	mov	r0, r4
   1fec8:	f7ff ff72 	bl	1fdb0 <z_ready_thread>
		need_sched = 1;
   1fecc:	2001      	movs	r0, #1
   1fece:	e7f2      	b.n	1feb6 <z_unpend_all+0x6>

0001fed0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1fed0:	b15a      	cbz	r2, 1feea <z_impl_k_sem_init+0x1a>
   1fed2:	428a      	cmp	r2, r1
   1fed4:	d309      	bcc.n	1feea <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1fed6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1feda:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1fede:	e9c0 0000 	strd	r0, r0, [r0]
   1fee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1fee6:	2000      	movs	r0, #0
   1fee8:	4770      	bx	lr
		return -EINVAL;
   1feea:	f06f 0015 	mvn.w	r0, #21
}
   1feee:	4770      	bx	lr

0001fef0 <k_is_in_isr>:
   1fef0:	f3ef 8005 	mrs	r0, IPSR
}
   1fef4:	3800      	subs	r0, #0
   1fef6:	bf18      	it	ne
   1fef8:	2001      	movne	r0, #1
   1fefa:	4770      	bx	lr

0001fefc <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1fefc:	b108      	cbz	r0, 1ff02 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1fefe:	f7f3 bf5b 	b.w	13db8 <arch_busy_wait>
}
   1ff02:	4770      	bx	lr

0001ff04 <z_impl_k_thread_name_set>:
}
   1ff04:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1ff08:	4770      	bx	lr

0001ff0a <k_work_submit_to_queue>:
{
   1ff0a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ff0c:	f101 0308 	add.w	r3, r1, #8
   1ff10:	f3bf 8f5b 	dmb	ish
   1ff14:	e853 2f00 	ldrex	r2, [r3]
   1ff18:	f042 0c01 	orr.w	ip, r2, #1
   1ff1c:	e843 ce00 	strex	lr, ip, [r3]
   1ff20:	f1be 0f00 	cmp.w	lr, #0
   1ff24:	d1f6      	bne.n	1ff14 <k_work_submit_to_queue+0xa>
   1ff26:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1ff2a:	07d3      	lsls	r3, r2, #31
   1ff2c:	d403      	bmi.n	1ff36 <k_work_submit_to_queue+0x2c>
}
   1ff2e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1ff32:	f7ff bea1 	b.w	1fc78 <k_queue_append>
}
   1ff36:	f85d fb04 	ldr.w	pc, [sp], #4

0001ff3a <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1ff3a:	f1a0 0110 	sub.w	r1, r0, #16
   1ff3e:	6980      	ldr	r0, [r0, #24]
   1ff40:	f7ff bfe3 	b.w	1ff0a <k_work_submit_to_queue>

0001ff44 <work_cancel>:
{
   1ff44:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ff46:	f3bf 8f5b 	dmb	ish
   1ff4a:	6883      	ldr	r3, [r0, #8]
   1ff4c:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1ff50:	07db      	lsls	r3, r3, #31
{
   1ff52:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1ff54:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   1ff58:	d532      	bpl.n	1ffc0 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1ff5a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1ff5c:	6813      	ldr	r3, [r2, #0]
   1ff5e:	2100      	movs	r1, #0
   1ff60:	b913      	cbnz	r3, 1ff68 <work_cancel+0x24>
			return -EINVAL;
   1ff62:	f06f 0015 	mvn.w	r0, #21
}
   1ff66:	bd70      	pop	{r4, r5, r6, pc}
   1ff68:	429c      	cmp	r4, r3
   1ff6a:	d124      	bne.n	1ffb6 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   1ff6c:	6823      	ldr	r3, [r4, #0]
   1ff6e:	6856      	ldr	r6, [r2, #4]
   1ff70:	f023 0003 	bic.w	r0, r3, #3
   1ff74:	b9b1      	cbnz	r1, 1ffa4 <work_cancel+0x60>
   1ff76:	42b4      	cmp	r4, r6
	list->head = node;
   1ff78:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1ff7a:	d100      	bne.n	1ff7e <work_cancel+0x3a>
	list->tail = node;
   1ff7c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ff7e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ff80:	f003 0303 	and.w	r3, r3, #3
   1ff84:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1ff86:	2000      	movs	r0, #0
   1ff88:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ff8a:	f3bf 8f5b 	dmb	ish
   1ff8e:	e855 3f00 	ldrex	r3, [r5]
   1ff92:	f023 0301 	bic.w	r3, r3, #1
   1ff96:	e845 3200 	strex	r2, r3, [r5]
   1ff9a:	2a00      	cmp	r2, #0
   1ff9c:	d1f7      	bne.n	1ff8e <work_cancel+0x4a>
   1ff9e:	f3bf 8f5b 	dmb	ish
   1ffa2:	e7e0      	b.n	1ff66 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ffa4:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ffa6:	f003 0303 	and.w	r3, r3, #3
   1ffaa:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   1ffac:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ffae:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1ffb0:	bf08      	it	eq
   1ffb2:	6051      	streq	r1, [r2, #4]
}
   1ffb4:	e7e3      	b.n	1ff7e <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ffb6:	6818      	ldr	r0, [r3, #0]
   1ffb8:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1ffba:	f020 0303 	bic.w	r3, r0, #3
   1ffbe:	e7cf      	b.n	1ff60 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   1ffc0:	3010      	adds	r0, #16
   1ffc2:	f000 f822 	bl	2000a <z_abort_timeout>
		if (err) {
   1ffc6:	2800      	cmp	r0, #0
   1ffc8:	d0dd      	beq.n	1ff86 <work_cancel+0x42>
			return -EALREADY;
   1ffca:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1ffce:	e7ca      	b.n	1ff66 <work_cancel+0x22>

0001ffd0 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1ffd0:	2300      	movs	r3, #0
   1ffd2:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   1ffd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1ffda:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   1ffdc:	6283      	str	r3, [r0, #40]	; 0x28
}
   1ffde:	4770      	bx	lr

0001ffe0 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1ffe0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ffe2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ffe6:	f3ef 8411 	mrs	r4, BASEPRI
   1ffea:	f382 8811 	msr	BASEPRI, r2
   1ffee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   1fff2:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1fff4:	b133      	cbz	r3, 20004 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   1fff6:	f7ff ffa5 	bl	1ff44 <work_cancel>
	__asm__ volatile(
   1fffa:	f384 8811 	msr	BASEPRI, r4
   1fffe:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   20002:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   20004:	f06f 0015 	mvn.w	r0, #21
   20008:	e7f7      	b.n	1fffa <k_delayed_work_cancel+0x1a>

0002000a <z_abort_timeout>:
{
   2000a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2000c:	f04f 0240 	mov.w	r2, #64	; 0x40
   20010:	f3ef 8411 	mrs	r4, BASEPRI
   20014:	f382 8811 	msr	BASEPRI, r2
   20018:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2001c:	6803      	ldr	r3, [r0, #0]
   2001e:	b13b      	cbz	r3, 20030 <z_abort_timeout+0x26>
			remove_timeout(to);
   20020:	f7fa ff22 	bl	1ae68 <remove_timeout>
			ret = 0;
   20024:	2000      	movs	r0, #0
	__asm__ volatile(
   20026:	f384 8811 	msr	BASEPRI, r4
   2002a:	f3bf 8f6f 	isb	sy
}
   2002e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   20030:	f06f 0015 	mvn.w	r0, #21
   20034:	e7f7      	b.n	20026 <z_abort_timeout+0x1c>

00020036 <z_get_next_timeout_expiry>:
{
   20036:	b510      	push	{r4, lr}
	__asm__ volatile(
   20038:	f04f 0340 	mov.w	r3, #64	; 0x40
   2003c:	f3ef 8411 	mrs	r4, BASEPRI
   20040:	f383 8811 	msr	BASEPRI, r3
   20044:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20048:	f7fa ff28 	bl	1ae9c <next_timeout>
	__asm__ volatile(
   2004c:	f384 8811 	msr	BASEPRI, r4
   20050:	f3bf 8f6f 	isb	sy
}
   20054:	bd10      	pop	{r4, pc}

00020056 <z_set_timeout_expiry>:
{
   20056:	b570      	push	{r4, r5, r6, lr}
   20058:	4604      	mov	r4, r0
   2005a:	460d      	mov	r5, r1
	__asm__ volatile(
   2005c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20060:	f3ef 8611 	mrs	r6, BASEPRI
   20064:	f383 8811 	msr	BASEPRI, r3
   20068:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2006c:	f7fa ff16 	bl	1ae9c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   20070:	2801      	cmp	r0, #1
   20072:	dd05      	ble.n	20080 <z_set_timeout_expiry+0x2a>
   20074:	42a0      	cmp	r0, r4
   20076:	dd03      	ble.n	20080 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   20078:	4629      	mov	r1, r5
   2007a:	4620      	mov	r0, r4
   2007c:	f7f3 f8d0 	bl	13220 <z_clock_set_timeout>
	__asm__ volatile(
   20080:	f386 8811 	msr	BASEPRI, r6
   20084:	f3bf 8f6f 	isb	sy
}
   20088:	bd70      	pop	{r4, r5, r6, pc}

0002008a <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2008a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2008c:	f7fb f826 	bl	1b0dc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   20090:	bd08      	pop	{r3, pc}

00020092 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   20092:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20094:	1c4b      	adds	r3, r1, #1
   20096:	bf08      	it	eq
   20098:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2009c:	4604      	mov	r4, r0
   2009e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   200a0:	d013      	beq.n	200ca <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   200a2:	ea54 0105 	orrs.w	r1, r4, r5
   200a6:	d103      	bne.n	200b0 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   200a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   200ac:	f7fb b816 	b.w	1b0dc <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   200b0:	f06f 0101 	mvn.w	r1, #1
   200b4:	1a0a      	subs	r2, r1, r0
   200b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   200ba:	eb61 0305 	sbc.w	r3, r1, r5
   200be:	2a00      	cmp	r2, #0
   200c0:	f173 0100 	sbcs.w	r1, r3, #0
   200c4:	db02      	blt.n	200cc <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   200c6:	4610      	mov	r0, r2
   200c8:	4619      	mov	r1, r3
}
   200ca:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   200cc:	f7fb f806 	bl	1b0dc <z_tick_get>
   200d0:	2c01      	cmp	r4, #1
   200d2:	f175 0300 	sbcs.w	r3, r5, #0
   200d6:	bfbc      	itt	lt
   200d8:	2401      	movlt	r4, #1
   200da:	2500      	movlt	r5, #0
   200dc:	1820      	adds	r0, r4, r0
   200de:	eb45 0101 	adc.w	r1, r5, r1
   200e2:	e7f2      	b.n	200ca <z_timeout_end_calc+0x38>

000200e4 <clear_event_registrations>:
	while (num_events--) {
   200e4:	2314      	movs	r3, #20
{
   200e6:	b530      	push	{r4, r5, lr}
   200e8:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   200ec:	2400      	movs	r4, #0
	while (num_events--) {
   200ee:	4281      	cmp	r1, r0
   200f0:	d100      	bne.n	200f4 <clear_event_registrations+0x10>
}
   200f2:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   200f4:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   200f8:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   200fc:	f003 030f 	and.w	r3, r3, #15
   20100:	2b02      	cmp	r3, #2
   20102:	d80a      	bhi.n	2011a <clear_event_registrations+0x36>
   20104:	b15b      	cbz	r3, 2011e <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   20106:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2010a:	b143      	cbz	r3, 2011e <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   2010c:	f851 5c10 	ldr.w	r5, [r1, #-16]
   20110:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   20112:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   20114:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   20118:	e001      	b.n	2011e <clear_event_registrations+0x3a>
	switch (event->type) {
   2011a:	2b04      	cmp	r3, #4
   2011c:	d0f3      	beq.n	20106 <clear_event_registrations+0x22>
   2011e:	f382 8811 	msr	BASEPRI, r2
   20122:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20126:	f04f 0340 	mov.w	r3, #64	; 0x40
   2012a:	f3ef 8211 	mrs	r2, BASEPRI
   2012e:	f383 8811 	msr	BASEPRI, r3
   20132:	f3bf 8f6f 	isb	sy
   20136:	3914      	subs	r1, #20
   20138:	e7d9      	b.n	200ee <clear_event_registrations+0xa>

0002013a <k_work_submit_to_queue>:
{
   2013a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2013c:	f101 0308 	add.w	r3, r1, #8
   20140:	f3bf 8f5b 	dmb	ish
   20144:	e853 2f00 	ldrex	r2, [r3]
   20148:	f042 0c01 	orr.w	ip, r2, #1
   2014c:	e843 ce00 	strex	lr, ip, [r3]
   20150:	f1be 0f00 	cmp.w	lr, #0
   20154:	d1f6      	bne.n	20144 <k_work_submit_to_queue+0xa>
   20156:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2015a:	07d3      	lsls	r3, r2, #31
   2015c:	d403      	bmi.n	20166 <k_work_submit_to_queue+0x2c>
}
   2015e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   20162:	f7ff bd89 	b.w	1fc78 <k_queue_append>
}
   20166:	f85d fb04 	ldr.w	pc, [sp], #4

0002016a <signal_poll_event>:
{
   2016a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2016e:	6884      	ldr	r4, [r0, #8]
{
   20170:	4605      	mov	r5, r0
   20172:	460e      	mov	r6, r1
	if (poller) {
   20174:	b144      	cbz	r4, 20188 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   20176:	7863      	ldrb	r3, [r4, #1]
   20178:	2b01      	cmp	r3, #1
   2017a:	d138      	bne.n	201ee <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   2017c:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   20180:	f013 0302 	ands.w	r3, r3, #2
   20184:	d10a      	bne.n	2019c <signal_poll_event+0x32>
		poller->is_polling = false;
   20186:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   20188:	68eb      	ldr	r3, [r5, #12]
   2018a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2018e:	430e      	orrs	r6, r1
	event->poller = NULL;
   20190:	2000      	movs	r0, #0
	event->state |= state;
   20192:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   20196:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   20198:	60eb      	str	r3, [r5, #12]
	return retcode;
   2019a:	e00d      	b.n	201b8 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2019c:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   201a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   201a4:	f06f 0001 	mvn.w	r0, #1
   201a8:	428b      	cmp	r3, r1
   201aa:	bf08      	it	eq
   201ac:	4282      	cmpeq	r2, r0
   201ae:	d105      	bne.n	201bc <signal_poll_event+0x52>
		poller->is_polling = false;
   201b0:	2300      	movs	r3, #0
   201b2:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   201b4:	f06f 000a 	mvn.w	r0, #10
}
   201b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   201bc:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   201c0:	4640      	mov	r0, r8
   201c2:	f7ff fdd5 	bl	1fd70 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   201c6:	2e08      	cmp	r6, #8
   201c8:	bf0c      	ite	eq
   201ca:	f06f 0303 	mvneq.w	r3, #3
   201ce:	2300      	movne	r3, #0
   201d0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   201d2:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   201d6:	06db      	lsls	r3, r3, #27
   201d8:	d102      	bne.n	201e0 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   201da:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   201de:	b10f      	cbz	r7, 201e4 <signal_poll_event+0x7a>
		poller->is_polling = false;
   201e0:	2300      	movs	r3, #0
   201e2:	e7d0      	b.n	20186 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   201e4:	4640      	mov	r0, r8
   201e6:	f7ff fde3 	bl	1fdb0 <z_ready_thread>
		poller->is_polling = false;
   201ea:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   201ec:	e7cc      	b.n	20188 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   201ee:	2b02      	cmp	r3, #2
   201f0:	d1f6      	bne.n	201e0 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   201f2:	7823      	ldrb	r3, [r4, #0]
   201f4:	2b00      	cmp	r3, #0
   201f6:	d0c7      	beq.n	20188 <signal_poll_event+0x1e>
   201f8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   201fc:	2f00      	cmp	r7, #0
   201fe:	d0f4      	beq.n	201ea <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   20200:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   20204:	f1a4 0910 	sub.w	r9, r4, #16
   20208:	f104 0010 	add.w	r0, r4, #16
   2020c:	f7ff fefd 	bl	2000a <z_abort_timeout>
		twork->poll_result = 0;
   20210:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   20214:	4649      	mov	r1, r9
   20216:	4638      	mov	r0, r7
   20218:	f7ff ff8f 	bl	2013a <k_work_submit_to_queue>
		poller->is_polling = false;
   2021c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   20220:	e7b2      	b.n	20188 <signal_poll_event+0x1e>

00020222 <add_event>:
{
   20222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20224:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20226:	e9d0 2300 	ldrd	r2, r3, [r0]
   2022a:	4290      	cmp	r0, r2
   2022c:	4604      	mov	r4, r0
   2022e:	460d      	mov	r5, r1
   20230:	d106      	bne.n	20240 <add_event+0x1e>
	node->prev = list->tail;
   20232:	6863      	ldr	r3, [r4, #4]
   20234:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   20236:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   20238:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2023a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2023c:	6065      	str	r5, [r4, #4]
}
   2023e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   20240:	2b00      	cmp	r3, #0
   20242:	d0f6      	beq.n	20232 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   20244:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20246:	b100      	cbz	r0, 2024a <add_event+0x28>
   20248:	3864      	subs	r0, #100	; 0x64
   2024a:	b107      	cbz	r7, 2024e <add_event+0x2c>
   2024c:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2024e:	4639      	mov	r1, r7
   20250:	f7ff fd63 	bl	1fd1a <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   20254:	2800      	cmp	r0, #0
   20256:	d1ec      	bne.n	20232 <add_event+0x10>
	return list->head == list;
   20258:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2025a:	42b4      	cmp	r4, r6
   2025c:	d0e9      	beq.n	20232 <add_event+0x10>
   2025e:	2e00      	cmp	r6, #0
   20260:	bf38      	it	cc
   20262:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20264:	2e00      	cmp	r6, #0
   20266:	d0e4      	beq.n	20232 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   20268:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2026a:	b101      	cbz	r1, 2026e <add_event+0x4c>
   2026c:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2026e:	4638      	mov	r0, r7
   20270:	f7ff fd53 	bl	1fd1a <z_is_t1_higher_prio_than_t2>
   20274:	b128      	cbz	r0, 20282 <add_event+0x60>
	node->prev = successor->prev;
   20276:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   20278:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2027c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2027e:	6075      	str	r5, [r6, #4]
			return;
   20280:	e7dd      	b.n	2023e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   20282:	6863      	ldr	r3, [r4, #4]
   20284:	42b3      	cmp	r3, r6
   20286:	d0d4      	beq.n	20232 <add_event+0x10>
   20288:	6836      	ldr	r6, [r6, #0]
   2028a:	e7eb      	b.n	20264 <add_event+0x42>

0002028c <register_events>:
{
   2028c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   20290:	f04f 0a00 	mov.w	sl, #0
{
   20294:	460e      	mov	r6, r1
   20296:	4614      	mov	r4, r2
   20298:	461f      	mov	r7, r3
   2029a:	4683      	mov	fp, r0
	int events_registered = 0;
   2029c:	4655      	mov	r5, sl
	event->poller = NULL;
   2029e:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   202a0:	45b2      	cmp	sl, r6
   202a2:	db02      	blt.n	202aa <register_events+0x1e>
}
   202a4:	4628      	mov	r0, r5
   202a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   202ae:	f3ef 8911 	mrs	r9, BASEPRI
   202b2:	f383 8811 	msr	BASEPRI, r3
   202b6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   202ba:	f89b 200d 	ldrb.w	r2, [fp, #13]
   202be:	f002 020f 	and.w	r2, r2, #15
   202c2:	2a02      	cmp	r2, #2
   202c4:	d006      	beq.n	202d4 <register_events+0x48>
   202c6:	2a04      	cmp	r2, #4
   202c8:	d008      	beq.n	202dc <register_events+0x50>
   202ca:	2a01      	cmp	r2, #1
   202cc:	d120      	bne.n	20310 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   202ce:	f8db 3010 	ldr.w	r3, [fp, #16]
   202d2:	e001      	b.n	202d8 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   202d4:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   202d8:	689b      	ldr	r3, [r3, #8]
   202da:	e002      	b.n	202e2 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   202dc:	f8db 3010 	ldr.w	r3, [fp, #16]
   202e0:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   202e2:	b1ab      	cbz	r3, 20310 <register_events+0x84>
	event->state |= state;
   202e4:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   202e8:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   202ec:	f3c3 3104 	ubfx	r1, r3, #12, #5
   202f0:	430a      	orrs	r2, r1
   202f2:	f362 3310 	bfi	r3, r2, #12, #5
   202f6:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   202fa:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   202fe:	f389 8811 	msr	BASEPRI, r9
   20302:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20306:	f10a 0a01 	add.w	sl, sl, #1
   2030a:	f10b 0b14 	add.w	fp, fp, #20
   2030e:	e7c7      	b.n	202a0 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   20310:	2f00      	cmp	r7, #0
   20312:	d1f4      	bne.n	202fe <register_events+0x72>
   20314:	7823      	ldrb	r3, [r4, #0]
   20316:	2b00      	cmp	r3, #0
   20318:	d0f1      	beq.n	202fe <register_events+0x72>
	switch (event->type) {
   2031a:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2031e:	f003 030f 	and.w	r3, r3, #15
   20322:	2b02      	cmp	r3, #2
   20324:	d008      	beq.n	20338 <register_events+0xac>
   20326:	2b04      	cmp	r3, #4
   20328:	d006      	beq.n	20338 <register_events+0xac>
   2032a:	2b01      	cmp	r3, #1
   2032c:	d10b      	bne.n	20346 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2032e:	f8db 0010 	ldr.w	r0, [fp, #16]
   20332:	4622      	mov	r2, r4
   20334:	4659      	mov	r1, fp
   20336:	e004      	b.n	20342 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   20338:	f8db 0010 	ldr.w	r0, [fp, #16]
   2033c:	4622      	mov	r2, r4
   2033e:	4659      	mov	r1, fp
   20340:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   20342:	f7ff ff6e 	bl	20222 <add_event>
	event->poller = poller;
   20346:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   2034a:	3501      	adds	r5, #1
   2034c:	e7d7      	b.n	202fe <register_events+0x72>

0002034e <k_poll_event_init>:
{
   2034e:	b510      	push	{r4, lr}
	event->type = type;
   20350:	0452      	lsls	r2, r2, #17
   20352:	0209      	lsls	r1, r1, #8
   20354:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   20358:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   2035c:	430a      	orrs	r2, r1
   2035e:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   20360:	2400      	movs	r4, #0
	event->type = type;
   20362:	430a      	orrs	r2, r1
	event->obj = obj;
   20364:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   20368:	6084      	str	r4, [r0, #8]
}
   2036a:	bd10      	pop	{r4, pc}

0002036c <z_handle_obj_poll_events>:
{
   2036c:	4603      	mov	r3, r0
	return list->head == list;
   2036e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20370:	4283      	cmp	r3, r0
   20372:	d008      	beq.n	20386 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   20374:	e9d0 3200 	ldrd	r3, r2, [r0]
   20378:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2037a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2037c:	2300      	movs	r3, #0
	node->prev = NULL;
   2037e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20382:	f7ff bef2 	b.w	2016a <signal_poll_event>
}
   20386:	4770      	bx	lr

00020388 <k_mem_pool_malloc>:
{
   20388:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2038a:	2408      	movs	r4, #8
   2038c:	190a      	adds	r2, r1, r4
   2038e:	d208      	bcs.n	203a2 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   20390:	2600      	movs	r6, #0
   20392:	2700      	movs	r7, #0
   20394:	e9cd 6700 	strd	r6, r7, [sp]
   20398:	eb0d 0104 	add.w	r1, sp, r4
   2039c:	f7ff fbd2 	bl	1fb44 <k_mem_pool_alloc>
   203a0:	b110      	cbz	r0, 203a8 <k_mem_pool_malloc+0x20>
		return NULL;
   203a2:	2000      	movs	r0, #0
}
   203a4:	b004      	add	sp, #16
   203a6:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   203a8:	9802      	ldr	r0, [sp, #8]
   203aa:	4622      	mov	r2, r4
   203ac:	a902      	add	r1, sp, #8
   203ae:	f7fc fca4 	bl	1ccfa <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   203b2:	9802      	ldr	r0, [sp, #8]
   203b4:	3008      	adds	r0, #8
   203b6:	e7f5      	b.n	203a4 <k_mem_pool_malloc+0x1c>

000203b8 <k_free>:
	if (ptr != NULL) {
   203b8:	b110      	cbz	r0, 203c0 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   203ba:	3808      	subs	r0, #8
   203bc:	f7ff bbdb 	b.w	1fb76 <k_mem_pool_free_id>
}
   203c0:	4770      	bx	lr

000203c2 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   203c2:	4770      	bx	lr
